,Document_No,Topics,Text
0,0,"5 0.28869047619047616, 6 0.12896825396825393, 2 0.12549603174603172, 4 0.1202876984126984, 1 0.11334325396825398, 0 0.11160714285714286, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
1,1,"3 0.21230158730158727, 2 0.19494047619047616, 6 0.12723214285714282, 4 0.12028769841269843, 1 0.12028769841269842, 0 0.11334325396825398, 5 0.11160714285714288",add final modifier to local variables.add final modifier to method parameters.[] added support for concurrentmap.putifabsent() to concurrentutils.
2,2,"4 0.27987861811391224, 0 0.14262371615312788, 2 0.12464985994397759, 3 0.11811391223155927, 6 0.11321195144724555, 5 0.11157796451914101, 1 0.10994397759103641",": avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.[] create strbuilder apis similar to string.format(string, object...)"
3,3,"3 0.21664521664521666, 0 0.20313170313170315, 1 0.13406263406263402, 2 0.12505362505362502, 4 0.12054912054912052, 5 0.10403260403260403, 6 0.09652509652509654",replaces size() == 0 and length() == 0 with isempty()add final modifier to local variables.[] strlookup for system properties now sees updated values.the lookup implementation now directly accesses system properties withoutcaching the properties object in any way.add final modifier to local variables.
4,4,"5 0.2783068783068782, 1 0.12275132275132275, 6 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5,5,"2 0.25140809011776755, 3 0.14029697900665639, 1 0.1277521761392729, 5 0.12416794674859191, 0 0.12237583205325143, 4 0.11879160266257043, 6 0.11520737327188942","dont use single letter variable names.dont need internal ivar name for a boolean to carry a ""flag"" postfix.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
6,6,"0 0.18905895691609972, 1 0.15136054421768702, 2 0.13945578231292519, 5 0.13350340136054423, 3 0.12953514739229025, 4 0.12953514739229025, 6 0.12755102040816327",": add archutils - an utility class for the ""os.arch"" system property ()"
7,7,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
8,8,"2 0.23072562358276635, 4 0.13151927437641722, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
9,9,"2 0.22274264897215715, 0 0.15716887848035385, 4 0.15170439760603693, 1 0.117096018735363, 3 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",: fix logic in isjsonarray method of jsontostringstyleextract logic for checking string representation of objects into separate methods
10,10,"3 0.43042671614100186, 1 0.09853638425066996, 2 0.09709338280766852, 4 0.09420737992166563, 6 0.09420737992166563, 0 0.0927643784786642, 5 0.0927643784786642","add final modifier to local variables.format.statement unnecessarily nested within else clause.\refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
11,11,"0 0.1693121693121693, 4 0.15285126396237506, 2 0.14873603762492651, 1 0.13227513227513232, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",: new methods for lang3.validatethis from github.
12,12,"0 0.16429963798384847, 2 0.16235032024505705, 1 0.1467557783347257, 3 0.13895850737956003, 5 0.13311055416318573, 4 0.1292119186856029, 6 0.12531328320802007","use validatenotnull instead of ""throw new nullpointerexception""adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
13,13,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
14,14,"2 0.19194591416813633, 6 0.14667842445620222, 0 0.1322751322751323, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",make sure placement of curly braces is consistent
15,15,"4 0.17794486215538843, 0 0.1584516847674742, 1 0.1467557783347257, 2 0.1409078251183514, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",[github] commons-lang pull request : intellij idea refactorings..
16,16,"5 0.27057387057387056, 2 0.1492063492063492, 3 0.1252747252747253, 4 0.11672771672771673, 6 0.11501831501831503, 1 0.11330891330891332, 0 0.1098901098901099",dont mutate parametersadd final modifier to method parameters.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
17,17,"3 0.36327104681535066, 6 0.12135824794052641, 2 0.11854530841872613, 0 0.11573236889692584, 5 0.1002612015270243, 1 0.09041591320072336, 4 0.09041591320072336",": fastdateformat doesnt respect summer daylight in some localized stringsmerge branch master of https://github.com/nickmanley/commons-langthis fix nullpointerexception in fastdateparser$timezonestrategyfix nullpointerexception in fastdateparser$timezonestrategyrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
18,18,"0 0.1878306878306878, 2 0.14667842445620222, 1 0.13639035861258086, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: add empty checks to objectutils
19,19,"4 0.20223398001175774, 2 0.13639035861258084, 0 0.1322751322751323, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",eat own dog food: call stringutils.isempty().
20,20,"4 0.19897959183673466, 0 0.16326530612244894, 1 0.1275510204081633, 2 0.1275510204081633, 3 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
21,21,"1 0.69617294770669, 3 0.06699776024929399, 2 0.05540948485733761, 5 0.04722952575713313, 0 0.045184535982082004, 4 0.045184535982082004, 6 0.043821209465381254",add final modifier to local variables.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
22,22,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
23,23,"5 0.2701014832162373, 6 0.14259692948217537, 1 0.11891751236013534, 0 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
24,24,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
25,25,"0 0.1651969429747207, 2 0.1549088771310993, 4 0.15079365079365079, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
26,26,"6 0.2752715121136174, 5 0.22702589807852966, 3 0.11591478696741851, 2 0.09690893901420218, 0 0.09544695071010861, 1 0.09544695071010861, 4 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateformats ""z"" pattern does not respect timezone of calendar instances passed to format()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
27,27,"4 0.2523809523809524, 2 0.15238095238095234, 0 0.11904761904761907, 1 0.11904761904761907, 3 0.11904761904761907, 5 0.11904761904761907, 6 0.11904761904761907",: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
28,28,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
29,29,"2 0.24535916061339785, 6 0.13613128867366148, 4 0.13236481033091202, 3 0.1229486144740382, 0 0.12106537530266342, 1 0.12106537530266342, 5 0.12106537530266342",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
30,30,"5 0.2956349206349207, 6 0.12723214285714282, 2 0.12549603174603172, 1 0.1150793650793651, 0 0.11334325396825398, 3 0.11160714285714288, 4 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
31,31,"3 0.3487325278370054, 4 0.11158493248045488, 2 0.10992655768775172, 1 0.10826818289504858, 6 0.10826818289504858, 0 0.10660980810234542, 5 0.10660980810234542","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
32,32,"6 0.2957164601000217, 2 0.19373776908023482, 5 0.1145901282887584, 3 0.10241356816699282, 0 0.09784735812133075, 1 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
33,33,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14734950584007186, 1 0.14106019766397127, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
34,34,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
35,35,"2 0.23072562358276635, 1 0.12953514739229025, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
36,36,"3 0.23809523809523814, 2 0.1663003663003663, 4 0.13724053724053722, 0 0.12356532356532356, 1 0.11501831501831504, 5 0.10989010989010992, 6 0.10989010989010992",: strbuilderreplaceall arrayindexoutofboundsexception ()avoid arrayindexoutofboundsexception by keeping variable buf consistent with buffer in strbuilderreplaceimpl.add final modifier to local variables.add final modifier to method parameters.
37,37,"2 0.23185011709601872, 3 0.1772053083528493, 4 0.12073900598490767, 1 0.11891751236013536, 0 0.11709601873536302, 5 0.11709601873536302, 6 0.11709601873536302",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
38,38,"4 0.18062397372742195, 0 0.17296113847837982, 3 0.13656267104542963, 5 0.13464696223316908, 6 0.1288998357963875, 1 0.12315270935960593, 2 0.12315270935960593","[] create strbuilder apis similar to string.format(string, object...)"
39,39,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",: rounding utilities for converting to bigdecimal
40,40,"1 0.7153907976692785, 2 0.05083383564396221, 5 0.04872413100261202, 4 0.048724131002612005, 3 0.045911191480811735, 0 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
41,41,"2 0.34489795918367344, 4 0.12902494331065756, 0 0.11632653061224486, 1 0.1036281179138322, 3 0.10204081632653061, 5 0.10204081632653061, 6 0.10204081632653061",": arrayutils.removeall(object array, int... indices) should do the clone, not its callers ()crlf -> lfjavadoc: fix typo but working is still awkward.[] complement arrayutils.addall() variants with by-index and by-value removal methods"
42,42,"6 0.27079747561675277, 5 0.19984700707592276, 3 0.16370242876266972, 2 0.09542933639319182, 0 0.09275196022183975, 1 0.09141327213616371, 4 0.08605851979345958","zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
43,43,"4 0.1725067385444744, 0 0.15363881401617252, 1 0.13477088948787067, 2 0.13477088948787067, 3 0.13477088948787067, 5 0.13477088948787067, 6 0.13477088948787067",moving abbreviate + abbreviatemiddle to charsequences
44,44,"6 0.285458269329237, 5 0.13850486431131587, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
45,45,"0 0.15659340659340656, 3 0.15659340659340656, 1 0.13736263736263737, 2 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] vastly expanded typeutils
46,46,"0 0.17136978248089355, 2 0.15285126396237503, 4 0.14667842445620224, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
47,47,"2 0.23642439431913106, 1 0.13505987190197713, 3 0.12726260094681147, 0 0.12531328320802004, 4 0.12531328320802004, 5 0.12531328320802004, 6 0.12531328320802004", - add issorted() to arrayutils. patch supplied by james sawle. in github.
48,48,"6 0.20709325396825398, 0 0.16889880952380953, 2 0.14806547619047616, 4 0.12723214285714285, 3 0.12549603174603174, 1 0.11160714285714289, 5 0.11160714285714289",remove redundant casts ()remove redundant casts throughout the codebase to make it cleaner and easier to read.fix raw types
49,49,"5 0.2701014832162373, 6 0.1316679677335415, 0 0.12802498048399685, 1 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",4fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
50,50,"4 0.16326530612244897, 1 0.15136054421768705, 3 0.14937641723356004, 0 0.14342403628117914, 2 0.13548752834467123, 6 0.12953514739229027, 5 0.1275510204081633",sort members.merge branch : add stringutilsremoveignorecasepatch by gokul nanthakumar c
51,51,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
52,52,"3 0.20328599275967693, 2 0.16040100250626563, 6 0.1311612364243943, 1 0.1292119186856029, 0 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",use validateistrue to validate argumentsfixing crlfsstatement unnecessarily nested within else clause.add threadutils
53,53,"0 0.19906323185011707, 3 0.18631277647671088, 4 0.13166796773354147, 2 0.12984647410876918, 1 0.11891751236013534, 5 0.117096018735363, 6 0.117096018735363",add final modifier to local variables.use collection.isempty() instead of size() == 0convert to java 5 enhanced loops. 
54,54,"0 0.2261904761904762, 6 0.17237103174603172, 3 0.14285714285714282, 1 0.12375992063492063, 2 0.11160714285714288, 4 0.11160714285714288, 5 0.11160714285714288"," - tolowercase should use locale, additional unit tests for case-insensitive matching - fastdateparser should be case insensitive: fastdateparser could use calendar.getdisplaynames for all text fields"
55,55,"6 0.24634920634920637, 0 0.18857142857142856, 4 0.13523809523809524, 5 0.12634920634920635, 2 0.11153439153439151, 1 0.09671957671957675, 3 0.09523809523809526",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacespmd: useless parenthesesreplaced private integer constants with private static enum.
56,56,"2 0.3257418909592823, 1 0.12123303427651254, 3 0.12123303427651254, 4 0.11157119852772027, 6 0.10835058661145619, 5 0.10674028065332414, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
57,57,"0 0.21108326371484262, 2 0.13700918964076858, 4 0.13311055416318573, 5 0.13311055416318573, 1 0.1331105541631857, 3 0.1272626009468115, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
58,58,"2 0.25124716553287985, 3 0.20839002267573695, 6 0.1226757369614512, 0 0.10839002267573697, 1 0.1052154195011338, 4 0.10204081632653061, 5 0.10204081632653061",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateparser too strict on abbreviated short month symbolsadd final modifier to local variables.format. fastdateparser_timezonestrategytesttesttimezonestrategypattern fails on windows with german localereimplementing 1107
59,59,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
60,60,"2 0.31285944329422594, 3 0.16149068322981366, 1 0.1083505866114562, 6 0.10674028065332415, 0 0.10351966873706007, 4 0.10351966873706007, 5 0.10351966873706007",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
61,61,"3 0.30724501021530726, 6 0.22473675939022472, 5 0.17633191890617633, 2 0.07622190790507624, 1 0.07292157787207294, 4 0.07182146786107184, 0 0.07072135785007073","format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezonesadd final modifier to local variables.trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
62,62,"5 0.2727513227513227, 6 0.12830687830687826, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
63,63,"6 0.26904761904761904, 0 0.1283068783068783, 4 0.12645502645502646, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905"," fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
64,64,"2 0.16831386642707397, 6 0.1536388140161725, 1 0.13896376160527107, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",: recursive and reflective equalsbuilder ()patch by yathos ug
65,65,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
66,66,"6 0.17548500881834211, 0 0.15285126396237503, 5 0.14256319811875368, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323",4fastdateformat apis that use a stringbuilderrefactor some duplicate code.
67,67,"0 0.2157738095238095, 6 0.14632936507936506, 1 0.14285714285714282, 4 0.14285714285714282, 5 0.12723214285714282, 2 0.11334325396825398, 3 0.11160714285714288",convert to java 5 enhanced loops. javadocsimplify code (eliminate conditional check) and avoid npe warningreplace tab characters with spaces
68,68,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
69,69,"0 0.28314659197012143, 4 0.13445378151260504, 1 0.12138188608776844, 6 0.11974789915966387, 2 0.11811391223155929, 3 0.11811391223155929, 5 0.10504201680672273",": update java requirement from java 6 to 7replace usage of deprecated objectutilstostring with objectstostring: fix deprecation warningseat own dog food: separator == null ? """" : separator->objectutils.tostring(separator)remove superfluous parens."
70,70,"5 0.29742388758782196, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
71,71,"6 0.2987606001304631, 2 0.1861274190041313, 5 0.1161121983039791, 1 0.10241356816699285, 3 0.10089149815177215, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
72,72,"0 0.22407750979179553, 2 0.18367346938775508, 6 0.14471243042671614, 4 0.14182642754071326, 1 0.11873840445269015, 3 0.09420737992166565, 5 0.09276437847866421","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.wsrefactoring toboolean(string) and tobooleanobject(string) so that the latter has the same optimizations. i did this by pointing the former to the latter. i had to rewrite the optimizations a bit so they didnt auto-return as the latter considers null and false to be different. i also had to add specific support for false, no and off for the same reason. 633"
73,73,"0 0.1651969429747207, 2 0.15490887713109933, 4 0.15079365079365076, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
74,74,"3 0.22119150690579265, 0 0.18655947227375802, 2 0.16924345495774068, 6 0.12451041022469593, 4 0.10142238713667287, 5 0.09997938569367142, 1 0.09709338280766855","add final modifier to local variables.: add support for varargs in constructorutils, memberutils, and methodutilsthis from github.a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables.review and cleanup javadoc in constructorutilsmove/comment suppresswarnings(unchecked)/refactor surrounding codegenerics"
75,75,"3 0.3814285714285714, 6 0.19253968253968248, 0 0.12809523809523804, 2 0.0825396825396825, 1 0.07253968253968254, 4 0.07142857142857142, 5 0.07142857142857142","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove unused constructor parameterformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesrename textstrategy to caseinsensitivetextstrategy per sebbs suggestion[] use the cache in fastdateparser correctly.add final modifier to local variables.tab police fastdateparser could use calendar.getdisplaynames for all text fieldsremove unnecessary keyvalue instances: fastdateparser could use calendar.getdisplaynames for all text fields"
76,76,"2 0.2459132906894101, 0 0.15636105188343993, 3 0.14143567874911156, 6 0.1231935560293769, 1 0.11821843165126747, 4 0.10826818289504858, 5 0.10660980810234542","simplify boolean expression- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
77,77,"3 0.20259740259740255, 2 0.14603174603174604, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
78,78,"3 0.20057720057720052, 2 0.146031746031746, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
79,79,"0 0.21303258145363405, 2 0.13700918964076858, 4 0.13505987190197713, 5 0.13311055416318573, 3 0.1292119186856029, 1 0.1272626009468115, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
80,80,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
81,81,"4 0.26904761904761904, 6 0.13571428571428568, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
82,82,"3 0.21198156682027647, 6 0.17793138760880695, 2 0.1313364055299539, 5 0.13133640552995388, 0 0.11699948796722992, 1 0.11520737327188942, 4 0.11520737327188942",add final modifier to local variables.document some @suppresswarning annotationsallow subclass custom invocation handlingadd serialization support to eventlistenersupport
83,83,"2 0.33072407045009783, 0 0.1374211785170689, 1 0.1237225483800826, 3 0.11002391824309632, 4 0.10089149815177215, 6 0.09936942813655145, 5 0.09784735812133075",formatting fixes perhttps://patch-diff.githubusercontent.com/raw/apache/commons-lang/pull/128.diffcrlf -> lfjavadoc: fix typo but working is still awkward. - add issorted() to arrayutils. patch supplied by james sawle. in github.
84,84,"2 0.22638563622170177, 4 0.15534738485558156, 0 0.1498829039812646, 1 0.117096018735363, 3 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",: fix logic in isjsonarray method of jsontostringstyleextract logic for checking string representation of objects into separate methods
85,85,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
86,86,"2 0.3611686220381873, 1 0.11801242236024842, 4 0.10674028065332414, 0 0.10351966873706006, 3 0.10351966873706006, 5 0.10351966873706006, 6 0.10351966873706006",crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodswap and shift for arrays
87,87,"6 0.3452380952380952, 5 0.1279178338001867, 0 0.10667600373482727, 1 0.10504201680672269, 2 0.10504201680672269, 3 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
88,88,"2 0.17794486215538843, 4 0.17794486215538843, 6 0.1370091896407686, 3 0.1311612364243943, 0 0.12531328320802007, 1 0.12531328320802007, 5 0.12531328320802007",explicit type parameters can be removedremove redundant type arguments.
89,89,"3 0.20057720057720052, 2 0.144011544011544, 1 0.13593073593073593, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
90,90,"6 0.17633477633477632, 4 0.1662337662337662, 3 0.13795093795093796, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 5 0.12987012987012989",remove redundant type arguments.validation
91,91,"4 0.2925729962767, 2 0.1512835586909661, 3 0.1361943954536547, 0 0.11836174799137761, 6 0.10464432686654908, 5 0.10052910052910051, 1 0.096413874191652",sort members.extract method.add final modifier to local variables.[] stringutils join apis for primitives.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)applying ilyas patch from fixing an npe when tostring returns null
92,92,"2 0.2918985776128633, 6 0.21541950113378683, 3 0.10430839002267572, 4 0.10430839002267572, 1 0.09853638425066998, 0 0.0927643784786642, 5 0.0927643784786642",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to method parameters.crlf -> lfjavadoc: fix typo but working is still awkward. - add issorted() to arrayutils. patch supplied by james sawle. in github.
93,93,"5 0.27387251196775003, 4 0.1310153691106072, 3 0.12925170068027209, 0 0.11866969009826156, 1 0.11866969009826156, 6 0.11514235323759135, 2 0.11337868480725626",change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
94,94,"4 0.17334341143864954, 3 0.16805240614764425, 2 0.16099773242630386, 0 0.15217939027462835, 6 0.11690602166792646, 5 0.11514235323759135, 1 0.11337868480725626",deletes redundant new expression in constant array creationuse final. - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
95,95,"3 0.20839733742959546, 2 0.17255504352278542, 1 0.1438812083973374, 4 0.12058371735791092, 5 0.12058371735791092, 0 0.11879160266257041, 6 0.1152073732718894","dont use single letter variable names.add final modifier to local variables.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
96,96,"6 0.1831065759637188, 0 0.16128117913832196, 1 0.1454081632653061, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
97,97,"5 0.27275132275132274, 6 0.13015873015873017, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
98,98,"6 0.16831386642707397, 0 0.15783168613357293, 1 0.13477088948787067, 2 0.13477088948787067, 3 0.13477088948787067, 4 0.13477088948787067, 5 0.13477088948787067", durationformatutils does not handle large durations correctly
99,99,"6 0.2734748517881048, 5 0.19583094281889465, 3 0.16504111684834577, 0 0.09409064830751576, 2 0.09275196022183976, 4 0.09007458405048768, 1 0.08873589596481164","zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
100,100,"3 0.18783068783068776, 5 0.1487360376249265, 6 0.13433274544385657, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
101,101,"2 0.23112073112073112, 4 0.19071669071669067, 0 0.14526214526214523, 1 0.10822510822510824, 3 0.10822510822510824, 5 0.10822510822510824, 6 0.10822510822510824",crlf -> lfjavadoc: fix typo but working is still awkward.simplify isempty be reusing getlengths/if (foo) { return true; } return false;/return foo;/g
102,102,"4 0.23386243386243383, 3 0.13941798941798939, 6 0.13571428571428568, 1 0.12645502645502646, 2 0.12645502645502646, 0 0.11904761904761907, 5 0.11904761904761907",: add methods for removing all invalid characters according to xml 1.0 and xml 1.1 in an input string to stringescapeutils. thanks to adam hooper
103,103,"0 0.18509550712940545, 4 0.15496368038740918, 2 0.14743072370191013, 5 0.13801452784503632, 1 0.12859833198816253, 3 0.12483185364541301, 6 0.12106537530266348","sort methods.applying sebbs patch from - adding isstarted, issuspended and isstopped to stopwatch"
104,104,"0 0.24458874458874458, 6 0.15367965367965364, 3 0.1385281385281385, 2 0.12674362674362674, 1 0.11664261664261666, 4 0.11159211159211159, 5 0.10822510822510822",add missing since tags for strsubstitutor; wrap lines longer than 80 chars[] strsubstitutor now supports the declaration of default values for the variables to be replaced. thanks to woonsan ko for the patch.
105,105,"4 0.3370140326662066, 6 0.11801242236024845, 0 0.1164021164021164, 1 0.11479181044398436, 2 0.10674028065332414, 3 0.10351966873706006, 5 0.10351966873706006","sort members.rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
106,106,"3 0.22660098522167488, 6 0.1403940886699507, 0 0.13656267104542966, 1 0.12698412698412703, 2 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","tab alignment[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
107,107,"2 0.17835497835497835, 3 0.16219336219336217, 4 0.137950937950938, 1 0.13189033189033192, 0 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to method parameters.
108,108,"2 0.22990271377368152, 4 0.1635944700460829, 3 0.13133640552995388, 6 0.1259600614439324, 1 0.11879160266257043, 0 0.11520737327188942, 5 0.11520737327188942",sort members.make whitespace use before tokens consistent and add a checkstyle rule to enforce it.format nit.
109,109,"3 0.19978106185002734, 0 0.17487684729064035, 2 0.1288998357963875, 1 0.126984126984127, 4 0.12315270935960593, 5 0.12315270935960593, 6 0.12315270935960593",add final modifier to local variables.convert to java 5 enhanced loops. 
110,110,"5 0.28869047619047616, 6 0.12723214285714282, 2 0.12549603174603172, 1 0.11855158730158732, 4 0.1150793650793651, 0 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
111,111,"0 0.20017636684303347, 4 0.13844797178130513, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",deprecate systemutilsline_separator in favor of java.lang.systemlineseparator
112,112,"6 0.2397094430992736, 3 0.1380145278450363, 4 0.1380145278450363, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
113,113,"4 0.22276029055690075, 2 0.13801452784503634, 5 0.13801452784503632, 1 0.1304815711595373, 3 0.1285983319881625, 0 0.12106537530266348, 6 0.12106537530266348",sort members.applying joanne polskys patch adding appendifmissing/prependifmissing methods to stringutils []
114,114,"4 0.395453654712914, 0 0.12110523221634328, 6 0.10738781109151475, 3 0.09778561630413479, 5 0.09641387419165194, 1 0.09229864785420341, 2 0.08955516362923771","sort members.another formatting nit, one or the other is already nullremove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classadding green regionmatches implementation and moving endswith and startswith methods to use it; thus giving them charsequence based apis. 687"
115,115,"6 0.32735219691741435, 3 0.12767425810904068, 2 0.11479181044398439, 4 0.1115711985277203, 0 0.10996089256958824, 1 0.1051299746951921, 5 0.10351966873706006","replace tabs with spaces fastdateparser and fastdateprinter support x format fastdateparser does not handle excess hours as per simpledateformatdocsadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .dont mutate parameters"
116,116,"0 0.17548500881834211, 3 0.14256319811875368, 2 0.14050558495002943, 4 0.14050558495002943, 1 0.13639035861258086, 5 0.1322751322751323, 6 0.1322751322751323",add methods for cloneables to objectutils ().
117,117,"0 0.29234778488509827, 2 0.14309405354181468, 4 0.12153518123667371, 6 0.11656005685856431, 1 0.11158493248045487, 3 0.10826818289504857, 5 0.10660980810234541",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
118,118,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
119,119,"3 0.33887043189368776, 2 0.18383167220376526, 4 0.10760428202288665, 6 0.10243632336655589, 0 0.09468438538205977, 1 0.08951642672572907, 5 0.08305647840531563","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.dont need a copy of this field.add final modifier to local variables.remove redundant type arguments.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
120,120,"3 0.1863711001642036, 0 0.17487684729064037, 2 0.14039408866995073, 1 0.12889983579638753, 4 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594",add final modifier to local variables.convert to java 5 enhanced loops. 
121,121,"0 0.18707482993197275, 1 0.15532879818594097, 2 0.13548752834467123, 3 0.13151927437641722, 4 0.13151927437641722, 5 0.13151927437641722, 6 0.12755102040816327",": add archutils - an utility class for the ""os.arch"" system property ()"
122,122,"3 0.323249299719888, 2 0.19253034547152192, 1 0.10756302521008401, 4 0.10625583566760034, 6 0.10233426704014936, 0 0.08403361344537817, 5 0.08403361344537817","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsremove redundant type arguments.fixing crlfsstatement unnecessarily nested within else clause.merge branch remove_threadutils_compiler_warningsremove compiler warnings from threadutils. thanks to pascal schuhmacher.remove compiler warnings from threadutilsincorporated feedback from fabian, formatting adjusted, count >> 1 replaced with count / 2incorporated feedback from peteradd threadutils"
123,123,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
124,124,"5 0.28285193858964347, 4 0.12438199323445222, 0 0.12256049960967993, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
125,125,"4 0.41778591778591784, 0 0.10582010582010579, 2 0.10297110297110294, 1 0.09869759869759868, 3 0.09157509157509158, 5 0.09157509157509158, 6 0.09157509157509158","sort members.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classreplacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
126,126,"0 0.17191283292978204, 2 0.164379876244283, 6 0.15496368038740915, 4 0.1380145278450363, 1 0.12671509281678775, 3 0.12294861447403822, 5 0.12106537530266345","functions.java whitspacesreplace tabs with four spaces, as per the projects checkstyle rules.added functions.trywithresources."
127,127,"6 0.3081807081807082, 0 0.12527472527472525, 5 0.11672771672771676, 4 0.11501831501831503, 1 0.11330891330891332, 2 0.11159951159951162, 3 0.1098901098901099",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
128,128,"2 0.1878306878306878, 5 0.14050558495002943, 4 0.13844797178130513, 0 0.13433274544385657, 1 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
129,129,"0 0.26505416981607455, 2 0.13101536911060718, 5 0.12925170068027209, 1 0.12396069538926684, 4 0.11866969009826156, 3 0.11690602166792645, 6 0.11514235323759135",code clean-up for checkstyle.use lowercase presentation for hex values as it is done in the jdk.use jdk functionality where available.: add conversion utility to convert between data types on byte level
130,130,"2 0.24493284493284495, 3 0.18168498168498165, 6 0.12356532356532354, 1 0.12014652014652015, 0 0.1098901098901099, 4 0.1098901098901099, 5 0.1098901098901099",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsfixing crlfsstatement unnecessarily nested within else clause.add threadutils
131,131,"3 0.19855699855699852, 2 0.14805194805194805, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
132,132,"4 0.17913832199546484, 0 0.16326530612244897, 2 0.14143990929705216, 1 0.13350340136054423, 3 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", add a null-safe compare() method to objectutils
133,133,"4 0.20861678004535145, 3 0.18392542202066006, 6 0.13454270597127738, 2 0.13277903754094228, 0 0.11337868480725624, 1 0.11337868480725624, 5 0.11337868480725624",sort members.remove redundant type arguments.use stringisempty() instead of stringlength() == 0add final modifier to local variables.
134,134,"2 0.2267573696145124, 4 0.1354875283446712, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
135,135,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
136,136,"2 0.23270975056689333, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
137,137,"3 0.18452380952380948, 0 0.1706349206349206, 6 0.14806547619047616, 4 0.14285714285714282, 2 0.12723214285714288, 1 0.1150793650793651, 5 0.11160714285714288",removes unchecked exceptions declared in throws clauseremove redundant type arguments.add final modifier to local variables.
138,138,"0 0.15783168613357293, 5 0.1515423779574723, 6 0.1515423779574723, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",4fastdateformat apis that use a stringbuilder
139,139,"3 0.2066378066378066, 2 0.13997113997114, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
140,140,"3 0.22477324263038542, 2 0.1354875283446712, 1 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
141,141,"4 0.2796574770258981, 3 0.158312447786132, 0 0.12761069340016706, 2 0.11737677527151211, 6 0.11152882205513782, 5 0.10421888053466999, 1 0.10129490392648288","sort members.formatting nit, one or the other is already nulladd final modifier to local variables.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classadding green regionmatches implementation and moving endswith and startswith methods to use it; thus giving them charsequence based apis. 687"
142,142,"6 0.26216077828981055, 2 0.13671274961597538, 3 0.1313364055299539, 1 0.12416794674859193, 0 0.11520737327188942, 4 0.11520737327188942, 5 0.11520737327188942",make checkstyle happy: add missing javadocreplace tabs with spaces fastdateparser and fastdateprinter support x format
143,143,"5 0.2282499497689371, 2 0.2015270243118344, 3 0.15230058268032948, 0 0.13682941531042794, 1 0.09463532248342374, 4 0.09463532248342374, 6 0.09182238296162348","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibilityadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
144,144,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
145,145,"2 0.16621743036837375, 6 0.1536388140161725, 1 0.14106019766397127, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",: recursive and reflective equalsbuilder ()patch by yathos ug
146,146,"5 0.27089947089947086, 6 0.13015873015873017, 1 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
147,147,"3 0.27346938775510204, 2 0.14807256235827662, 6 0.13061224489795917, 4 0.12426303854875281, 0 0.11156462585034013, 1 0.10997732426303858, 5 0.10204081632653063",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerpmd: useless parenthesesformat to 120 line length.removed unnecessary multiplication by one.add final modifier to method parameters.
148,148,"0 0.21315192743764172, 4 0.19727891156462585, 2 0.1353741496598639, 1 0.12902494331065756, 6 0.11632653061224486, 5 0.1052154195011338, 3 0.10362811791383222",removes unnecessary class reference of static method calls which are declared in the same class[github] commons-lang pull request : intellij idea refactorings.. add notequal() method to objectutils
149,149,"2 0.2566585956416465, 6 0.13048157115953724, 4 0.1285983319881625, 0 0.12106537530266345, 1 0.12106537530266345, 3 0.12106537530266345, 5 0.12106537530266345",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
150,150,"3 0.23469387755102036, 0 0.12755102040816327, 1 0.12755102040816327, 2 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.incorporated feedback from peteradd threadutils
151,151,"2 0.28530728530728533, 4 0.16707366707366708, 3 0.1514041514041514, 0 0.10439560439560439, 6 0.102971102971103, 1 0.0972730972730973, 5 0.0915750915750916","add @safevarargs to some methods with vararg parameters to suppress ""type safety: potential heap pollution via varargs parameter array"" warningsremove redundant type arguments.add final modifier to local variables.[] add mode and median comparable... methods to objectutils"
152,152,"0 0.20328599275967693, 3 0.1526037315510999, 1 0.13505987190197716, 5 0.1311612364243943, 6 0.1272626009468115, 2 0.12531328320802007, 4 0.12531328320802007",allow access to parsedpattern for test purposesmake parseexception text similar to that thrown by simpledateformat
153,153,"3 0.15363881401617246, 4 0.15363881401617246, 6 0.15363881401617246, 0 0.1347708894878706, 1 0.1347708894878706, 2 0.1347708894878706, 5 0.1347708894878706",use validateistrue to validate arguments
154,154,"6 0.2838624338624338, 2 0.1208994708994709, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
155,155,"3 0.23330813807004283, 4 0.14512471655328796, 6 0.14159737969261776, 5 0.12572436381960192, 2 0.12396069538926681, 1 0.11690602166792645, 0 0.11337868480725626",add final modifier to local variables.remove redundant type arguments.: fastdateformat doesnt respect summer daylight in some localized strings
156,156,"2 0.19827818132902877, 0 0.15496368038740918, 4 0.13989776701641105, 5 0.1380145278450363, 6 0.12671509281678778, 1 0.12106537530266347, 3 0.12106537530266347",multilinerecursivetostringstyle: made private field indent static: multiline recursive to string style. this fixes from github. thanks to jan matèrne.
157,157,"0 0.18568909045099516, 4 0.16099773242630383, 3 0.15570672713529854, 6 0.15041572184429325, 2 0.12043335852859664, 1 0.11337868480725624, 5 0.11337868480725624",remove redundant type arguments.: remove unnecessary synchronization from registry lookup in equalsbuilder and hashcodebuilder ()[] clear threadlocal for hashcodebuilder as well
158,158,"3 0.20769437718590258, 6 0.15684691955878394, 0 0.13613128867366153, 2 0.13236481033091205, 1 0.124831853645413, 4 0.12106537530266347, 5 0.12106537530266347",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
159,159,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
160,160,"3 0.31860431860431865, 5 0.14643214643214642, 6 0.1314171314171314, 0 0.11740311740311737, 2 0.09738309738309736, 1 0.09638209638209635, 4 0.09237809237809236","refactor ""gmt"" magic string.add a default case to switch to appease findbugs: nullpointerexception in fastdateparser$timezonestrategy ()replicate the fix for 1186add final modifier to local variables.remove redundant type arguments. fastdateparser_timezonestrategytesttesttimezonestrategypattern fails on windows with german localereimplementing 1107 fix parsing edge cases in fastdateparserrevert muddled commit - number percentage formatting with fractional digits fastdateparser error - timezones not handled correctlyuse final consistently. : test failure in fastdateparsertest and fastdateformat_parsertest when building with jdk8. thanks to bruno p. kinoshita and henri yandell for their help in fixing this issue.add final modifier to local variables.trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
161,161,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
162,162,"6 0.316984126984127, 2 0.20031746031746034, 3 0.15031746031746032, 0 0.08920634920634918, 5 0.08365079365079363, 1 0.08031746031746029, 4 0.0792063492063492",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure lines in files dont have trailing white spaces and remove all trailing white spacesusing validate where possible in time package.: durationformatutils are not able to handle negative duration/periods. document new behavior for negative inputs.: durationformatutils are not able to handle negative durations/periods. reported by michael osipov.remove useless parentheses (pmd).add final modifier to local variables.add final modifier to method parameters.fix brace positions
163,163,"2 0.30217519106408, 4 0.1512835586909661, 0 0.14030962179110326, 3 0.12659220066627472, 5 0.09915735841661766, 6 0.09092690574172058, 1 0.08955516362923772","extract logic for checking string representation of objects into separate methodsformat source codevariable names should follow naming conventionsmodified appenddetail method for object value in jsontostringstyle classfix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.add final modifier to local variables."
164,164,"2 0.26747216299455107, 3 0.17791992418858085, 6 0.12485193082208003, 1 0.10992655768775172, 0 0.10660980810234542, 4 0.10660980810234542, 5 0.10660980810234542",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateparser too strict on abbreviated short month symbolsadd final modifier to local variables.format.
165,165,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
166,166,"6 0.18509070294784577, 0 0.14937641723356004, 2 0.1374716553287982, 5 0.13747165532879818, 4 0.13548752834467123, 1 0.12755102040816327, 3 0.12755102040816327",make use of existing timeunit class to manage time units.
167,167,"5 0.23178951946075235, 2 0.21504674929332465, 3 0.1465535986083931, 6 0.10545770819743425, 1 0.10545770819743422, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
168,168,"5 0.2901379130887327, 1 0.12073900598490762, 4 0.12073900598490762, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
169,169,"6 0.20096371882086164, 3 0.14143990929705214, 5 0.14143990929705214, 4 0.13350340136054423, 0 0.12755102040816327, 1 0.12755102040816327, 2 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
170,170,"5 0.2727513227513227, 6 0.13201058201058197, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
171,171,"3 0.18964076858813697, 4 0.16040100250626563, 2 0.14285714285714282, 1 0.13116123642439428, 0 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",sort members.add final modifier to local variables.
172,172,"6 0.2783068783068782, 2 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
173,173,"5 0.1569664902998236, 0 0.15285126396237503, 3 0.14050558495002943, 4 0.14050558495002938, 1 0.13844797178130513, 2 0.13844797178130513, 6 0.1322751322751323",[] added timedsemaphore class to concurrent package.
174,174,"3 0.4158040027605246, 2 0.13198757763975155, 0 0.11266390614216701, 6 0.09454796411318149, 4 0.08609385783298829, 1 0.08126293995859216, 5 0.07763975155279505","make sure placement of curly braces is consistentadd final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezonesadd final modifier to local variables.add final modifier to method parameters. - dateutilsparsedate uses default locale; add locale support"
175,175,"0 0.2169312169312169, 2 0.13505987190197716, 5 0.13311055416318573, 1 0.13116123642439434, 4 0.13116123642439434, 3 0.12726260094681152, 6 0.1253132832080201",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
176,176,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
177,177,"5 0.19698819698819703, 2 0.19129019129019134, 6 0.18274318274318277, 1 0.11436711436711436, 0 0.11151811151811152, 4 0.11009361009361009, 3 0.09299959299959303",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefullyapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
178,178,"0 0.32908562486027276, 4 0.14285714285714285, 2 0.11155823831880171, 1 0.10842834786496759, 6 0.10686340263805055, 3 0.10060362173038231, 5 0.10060362173038231","rewriting octalunescaper as a hand rolled parser (all of 4 characters), instead of trying to handle the conversion via repeated attempts to convert the numbers. this fixes bugs, see , and also changes the behaviour for illegal octals such as \999. instead of throwing numberformatexception, it will now ignore them. this seems the better behaviour. "
179,179,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
180,180,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
181,181,"5 0.21961295933898675, 2 0.21048053924766255, 3 0.1587301587301587, 6 0.11306805827353772, 1 0.10241356816699285, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
182,182,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
183,183,"5 0.28695436507936506, 6 0.12723214285714282, 2 0.12375992063492063, 1 0.11855158730158732, 4 0.11855158730158732, 0 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
184,184,"2 0.15659340659340656, 3 0.15659340659340656, 0 0.13736263736263737, 1 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",if statement can be simplified
185,185,"1 0.7139843279083785, 2 0.05294354028531245, 5 0.048724131002612026, 3 0.047317661241711884, 4 0.04661442636126182, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
186,186,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
187,187,"3 0.21303258145363405, 4 0.15455304928989133, 2 0.1311612364243943, 0 0.12531328320802007, 1 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",replaces size() == 0 and length() == 0 with isempty()fixing crlfsstatement unnecessarily nested within else clause.
188,188,"5 0.16519694297472073, 0 0.15079365079365079, 2 0.15079365079365079, 6 0.13639035861258086, 1 0.13227513227513232, 3 0.13227513227513232, 4 0.13227513227513232", simplify fastdateformat; eliminate boxing
189,189,"3 0.39395943562610225, 2 0.10383597883597884, 1 0.10229276895943563, 4 0.10229276895943563, 0 0.09920634920634921, 5 0.09920634920634921, 6 0.09920634920634921","add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
190,190,"3 0.22114972114972117, 0 0.19412269412269414, 2 0.14607464607464607, 4 0.11454311454311453, 5 0.11154011154011152, 6 0.10853710853710855, 1 0.10403260403260405",statement unnecessarily nested within else clause.add final modifier to local variables.fix brace positionseliminate unchecked casttabs to whitespaceapplying sean mickeys patch to such that mutableobject.equals is as would be expected. now it directly overrides the equals(object) method. 
191,191,"1 0.6821594905427241, 3 0.07204638342362893, 4 0.055412983556696126, 6 0.050755631593954936, 2 0.04875962360992301, 5 0.046763615625891077, 0 0.044102271647181834",add final modifier to local variables.remove redundant type arguments.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
192,192,"4 0.2300286234712464, 0 0.15170439760603693, 2 0.13348946135831377, 3 0.12802498048399688, 1 0.12256049960967996, 5 0.117096018735363, 6 0.117096018735363",: add zero copy write method to strbuilder; : add zero copy read method to strbuilder. thanks to mikhail mazursky.
193,193,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
194,194,"0 0.180623973727422, 2 0.15955117679255612, 4 0.14805692391899286, 6 0.14039408866995073, 1 0.12506841817186648, 3 0.12315270935960596, 5 0.12315270935960596",: new methods for lang3.validate ()fixed method names; fixed differentobject to use object.equals
195,195,"2 0.19639494215765402, 0 0.15496368038740918, 4 0.1380145278450363, 5 0.1380145278450363, 6 0.12671509281678778, 1 0.124831853645413, 3 0.12106537530266347",multilinerecursivetostringstyle: made private field indent static: multiline recursive to string style. this fixes from github. thanks to jan matèrne.
196,196,"4 0.2421707421707422, 3 0.17009867009867008, 0 0.13556413556413555, 1 0.12355212355212353, 6 0.11754611754611753, 2 0.11454311454311454, 5 0.09652509652509655",[github] commons-lang pull request : intellij idea refactorings..remove redundant type arguments.add final modifier to local variables.eat own dog food: stringutilsisempty(string) and replace some but not all stringlength() == 0 with stringisempty()use concurrent instead of synchronization; javadoc
197,197,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
198,198,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
199,199,"2 0.2261904761904762, 3 0.20362103174603172, 6 0.11855158730158732, 1 0.11681547619047622, 0 0.11160714285714288, 4 0.11160714285714288, 5 0.11160714285714288",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.fixing crlfsstatement unnecessarily nested within else clause.add threadutils
200,200,"6 0.2908777969018933, 5 0.2011856951615988, 3 0.14362210747752915, 2 0.09676802447886787, 1 0.09141327213616371, 0 0.09007458405048768, 4 0.08605851979345958",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
201,201,"2 0.1959496442255063, 0 0.16338259441707717, 4 0.14805692391899286, 1 0.12315270935960596, 3 0.12315270935960596, 5 0.12315270935960596, 6 0.12315270935960596",extract logic for checking string representation of objects into separate methods
202,202,"6 0.1878306878306878, 1 0.15079365079365076, 0 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",: fastdateprinter generates date objects wastefully168
203,203,"3 0.35623869801084995, 2 0.11995177817962627, 6 0.11854530841872613, 0 0.11573236889692584, 5 0.10307414104882458, 1 0.09463532248342377, 4 0.0918223829616235",": fastdateformat doesnt respect summer daylight in some localized stringsmerge branch master of https://github.com/nickmanley/commons-langthis fix nullpointerexception in fastdateparser$timezonestrategyfix nullpointerexception in fastdateparser$timezonestrategyrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
204,204,"3 0.35994397759103636, 1 0.10830999066293186, 4 0.10830999066293186, 2 0.10667600373482727, 6 0.10667600373482727, 0 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
205,205,"2 0.2671201814058957, 3 0.15124716553287978, 6 0.14331065759637185, 0 0.11632653061224488, 1 0.10997732426303858, 4 0.10997732426303858, 5 0.10204081632653063",add final modifier to local variables.remove trailing whitespacescrlf -> lfjavadoc: fix typo but working is still awkward.implements : add a method to arrayutils for removing all occurrences of a given element. thanks to haiyang li.
206,206,"2 0.3184371184371184, 4 0.12185592185592184, 1 0.11672771672771674, 0 0.1115995115995116, 3 0.1115995115995116, 5 0.10989010989010989, 6 0.10989010989010989","crlf -> lfjavadoc: fix typo but working is still awkward.simplify isnotempty by reusing isemptyapplying chandrashekar ms patch to , adding isnotempty(array) methods to arrayutils. "
207,207,"2 0.1733434114386495, 4 0.16805240614764425, 1 0.15747039556563366, 6 0.13630637440161247, 3 0.12748803224993704, 5 0.12219702695893175, 0 0.11514235323759137",sort methods.remove redundant type arguments.adding hennings github pull request with a triple implementation. 675
208,208,"6 0.23831880169908343, 2 0.1632014308070646, 4 0.1632014308070646, 3 0.11625307399955287, 5 0.10999329309188464, 1 0.1084283478649676, 0 0.10060362173038233","sort members.make sure lines in files dont have trailing white spaces and remove all trailing white spacesrevert "": add stringutilsisanynotempty and isanynotblank"" and add "": add stringutilsisallempty and isallblank methods"" instead: add stringutilsisallempty and isallblank methods"
209,209,"2 0.21909966172261253, 4 0.16081186572989847, 0 0.1498829039812646, 1 0.11891751236013534, 3 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",: fix logic in isjsonarray method of jsontostringstyleextract logic for checking string representation of objects into separate methods
210,210,"5 0.22262407072533652, 2 0.2015270243118344, 3 0.1494876431585292, 0 0.1396423548322282, 6 0.10166767128792444, 1 0.09322885272252361, 4 0.09182238296162348","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibilityadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
211,211,"0 0.20017636684303347, 2 0.13639035861258084, 4 0.13433274544385657, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",deprecate systemutilsline_separator in favor of java.lang.systemlineseparator
212,212,"6 0.20798319327731093, 2 0.19817927170868346, 0 0.12628384687208216, 1 0.12464985994397758, 4 0.12138188608776845, 3 0.11647992530345475, 5 0.10504201680672272",use final.remove trailing white spacesadded new vararg methods to insert values into an array at an index.this implements . this commit also deprecates the add() methodsthat inserted a single value into an array at an index.
213,213,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
214,214,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter."
215,215,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
216,216,"4 0.1662337662337662, 3 0.16219336219336217, 6 0.15007215007215005, 2 0.13189033189033192, 0 0.12987012987012989, 1 0.12987012987012989, 5 0.12987012987012989",format to 120 line length.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
217,217,"2 0.20608465608465606, 3 0.1542328042328042, 0 0.13571428571428568, 6 0.13015873015873017, 4 0.1283068783068783, 1 0.12645502645502646, 5 0.11904761904761907",: please add number to byte[] methods. suggested by lilianne e. blaze. final patch from vincent ricard (with thanks to henri yandell).
218,218,"3 0.3594676928010262, 5 0.18775052108385443, 0 0.12489979156645821, 6 0.0945967612634279, 1 0.08000641333974667, 2 0.07663940997274332, 4 0.07663940997274331","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesadd final modifier to local variables.allow access to parsedpattern for test purposesmake parseexception text similar to that thrown by simpledateformat fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
219,219,"0 0.2956645344705046, 2 0.146410803127221, 4 0.1231935560293769, 6 0.11158493248045487, 1 0.10826818289504858, 3 0.10826818289504858, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
220,220,"4 0.2602707749766574, 0 0.13935574229691877, 6 0.13281979458450047, 2 0.12464985994397759, 5 0.11974789915966387, 3 0.11321195144724558, 1 0.10994397759103645","sort methods.applying sebbs patch from - adding isstarted, issuspended and isstopped to stopwatchremove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)"
221,221,"6 0.27291346646185355, 2 0.1331285202252944, 4 0.1331285202252944, 0 0.1152073732718894, 1 0.1152073732718894, 3 0.1152073732718894, 5 0.1152073732718894",javdoc and minor tweaks to contexted exceptionrefactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
222,222,"5 0.28695436507936506, 6 0.13070436507936506, 2 0.12028769841269842, 4 0.12028769841269842, 1 0.1185515873015873, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
223,223,"5 0.27374447046578193, 6 0.13895394223263072, 1 0.11891751236013533, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
224,224,"3 0.2086580086580086, 2 0.13997113997114, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
225,225,"0 0.2063492063492063, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",deprecate systemutilsline_separator in favor of java.lang.systemlineseparator
226,226,"2 0.22585034013605443, 3 0.16870748299319727, 0 0.14489795918367343, 6 0.1258503401360544, 1 0.1163265306122449, 4 0.11632653061224488, 5 0.10204081632653063",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate arguments: update java requirement from java 6 to 7use try with resources in serializationutilsadd final modifier to local variables.
227,227,"2 0.23072562358276635, 1 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
228,228,"0 0.16624895572263992, 2 0.1467557783347257, 5 0.14285714285714285, 6 0.14285714285714285, 4 0.13895850737956003, 1 0.13311055416318576, 3 0.12921191868560292",: refactored to return default value on negative indexrefactored to generics and added isarrayindexvalid
229,229,"6 0.31501831501831506, 5 0.1355311355311355, 0 0.1098901098901099, 1 0.1098901098901099, 2 0.1098901098901099, 3 0.1098901098901099, 4 0.1098901098901099",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
230,230,"2 0.2326462923477849, 6 0.15138592750533045, 0 0.14475242833451785, 1 0.12153518123667374, 3 0.12153518123667374, 4 0.12153518123667374, 5 0.10660980810234542","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws[] removed unnecessary elses and use of ternary operator with primitive boolean consequences e.g. (some boolean expression) ? true : false"
231,231,"0 0.20414462081128748, 3 0.1948853615520282, 2 0.13932980599647266, 6 0.1316137566137566, 4 0.1285273368606702, 5 0.10229276895943565, 1 0.09920634920634923",remove redundant type arguments. - fix findbugs warnings in durationformatutilsunnecessary array creation durationformatutilslexx does not detect unmatched quote charfix some formatting.add final modifier to local variables.stringbuffer => stringbuilder where being used as a local-only buffer
232,232,"0 0.17794486215538843, 4 0.17404622667780556, 1 0.14285714285714282, 2 0.1292119186856029, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",provide simple method to wrap a given type to the typed interface
233,233,"5 0.27460317460317457, 1 0.1246031746031746, 6 0.1246031746031746, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
234,234,"3 0.35039090262970857, 1 0.11158493248045488, 2 0.10826818289504858, 4 0.10826818289504858, 6 0.10826818289504858, 0 0.10660980810234542, 5 0.10660980810234542","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
235,235,"2 0.23537414965986397, 0 0.14965986394557823, 4 0.13537414965986394, 5 0.13537414965986394, 6 0.11950113378684807, 1 0.11315192743764176, 3 0.11156462585034016",removes unnecessary class reference of static method calls which are declared in the same class: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.: add noclassnametostringstyle implementation of tostringstyle. this from github. thanks to innokenty shuvalov.
236,236,"0 0.22652676889965026, 2 0.14554748453053534, 6 0.1380145278450363, 4 0.12671509281678778, 1 0.12106537530266347, 3 0.12106537530266347, 5 0.12106537530266347","[] introduced concurrentruntimeexception and extended the exception handling methods of concurrentutils to support runtime exceptions, too."
237,237,"5 0.27275132275132274, 6 0.13015873015873017, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
238,238,"4 0.19501133786848068, 0 0.1672335600907029, 1 0.1275510204081633, 2 0.1275510204081633, 3 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
239,239,"1 0.7139843279083783, 3 0.04872413100261202, 4 0.04872413100261202, 5 0.04872413100261202, 2 0.04802089612216195, 0 0.046614426361261806, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
240,240,"6 0.17120181405895687, 4 0.16326530612244897, 3 0.1394557823129252, 0 0.1374716553287982, 2 0.13350340136054423, 1 0.1275510204081633, 5 0.1275510204081633",use final.sort members.[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
241,241,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
242,242,"2 0.2400793650793651, 3 0.17410714285714282, 4 0.12896825396825393, 1 0.12202380952380952, 0 0.11160714285714288, 5 0.11160714285714288, 6 0.11160714285714288",fixing crlfsformat nit.statement unnecessarily nested within else clause. - add issorted() to arrayutils. patch supplied by james sawle. in github.
243,243,"3 0.22477324263038542, 2 0.13747165532879818, 0 0.12755102040816327, 1 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
244,244,"4 0.41778591778591784, 2 0.10297110297110294, 0 0.10154660154660153, 1 0.09727309727309728, 6 0.09727309727309726, 3 0.09157509157509158, 5 0.09157509157509158","sort members.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classreplacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
245,245,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
246,246,"6 0.30519480519480524, 0 0.12337662337662336, 3 0.12337662337662336, 5 0.12337662337662336, 1 0.10822510822510825, 2 0.10822510822510825, 4 0.10822510822510825",make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse validateistrue to validate argumentsusing validate where possible in math package.
247,247,"6 0.2707974756167527, 5 0.1958309428188946, 3 0.16905718110537385, 0 0.09141327213616371, 2 0.09141327213616371, 1 0.0914132721361637, 4 0.09007458405048767","zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
248,248,"6 0.28366615463389655, 5 0.14029697900665639, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
249,249,"6 0.28516694033935414, 5 0.21492428388980112, 3 0.13957307060755336, 1 0.09998175515416892, 2 0.09104178069695311, 0 0.08593322386425836, 4 0.08337894544791098",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.[] fastdateformat generates date objects wastefully.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
250,250,"4 0.36913204998311383, 0 0.19419115163796014, 2 0.10199257007767644, 6 0.09017223910840928, 5 0.08426207362377573, 1 0.0818980074299223, 3 0.07835190813914218","sort members.consolidate the stringutils.equals and equalsignorecase methods. ()* consolidate the stringutils.equals and equalsignorecase methods. implement the same edge case logic for null. use the same parameter names. use the same javadoc wording. change the equals method to use a step-wise charat comparison. * : added jira to changes.xml. stringutils.equalsignorecase doesnt check string reference equalityalso check lengths.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classmoving equalsignorecase, indexofignorecase, lastindexofignorecase and containsignorecase to the charsequence api. 687"
251,251,"5 0.2883164194639604, 0 0.12256049960967995, 4 0.12073900598490761, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
252,252,"4 0.2036281179138322, 0 0.1639455782312925, 3 0.1528344671201814, 2 0.14648526077097504, 6 0.11791383219954647, 1 0.10839002267573697, 5 0.1068027210884354","sort by method name.[] add exceptionutils.throwableoftype(throwable, class) andfriends.removes unnecessary class reference of static method calls which are declared in the same classadd final modifier to local variables."
253,253,"2 0.22477324263038542, 1 0.1354875283446712, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
254,254,"2 0.17014759120022277, 6 0.16040100250626563, 0 0.14285714285714282, 3 0.14285714285714282, 4 0.13311055416318573, 1 0.1253132832080201, 5 0.1253132832080201",use validateistrue to validate argumentsadd checknotnull method in reflectiontostringbuilder.java to fix 1132
255,255,"4 0.26091269841269843, 0 0.13070436507936506, 5 0.12723214285714282, 6 0.12723214285714282, 1 0.11855158730158732, 2 0.1185515873015873, 3 0.11681547619047622",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)[] added timedsemaphore class to concurrent package.
256,256,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
257,257,"1 0.7153907976692787, 2 0.05224030540486237, 5 0.048020896122161955, 4 0.04802089612216194, 3 0.04591119148081175, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
258,258,"6 0.2878306878306878, 5 0.23597883597883595, 0 0.09523809523809525, 1 0.09523809523809525, 2 0.09523809523809525, 3 0.09523809523809525, 4 0.09523809523809525",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
259,259,"6 0.17879604672057495, 0 0.14734950584007186, 1 0.1347708894878706, 2 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706, 5 0.1347708894878706",[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
260,260,"4 0.27078891257995735, 0 0.15138592750533045, 2 0.12153518123667377, 3 0.11987680644397063, 6 0.11656005685856433, 1 0.11324330727315803, 5 0.10660980810234542","adding concat(object...) and concatwith(string, object...) methods to provide varargd versions of the more prominent join methods. this ties into the string.concat method. 396"
261,261,"3 0.19594964422550626, 0 0.17487684729064035, 2 0.1346469622331691, 1 0.12506841817186645, 4 0.12315270935960593, 5 0.12315270935960593, 6 0.12315270935960593",add final modifier to local variables.convert to java 5 enhanced loops. 
262,262,"2 0.3289625028755464, 3 0.11962272831838047, 5 0.11479181044398436, 4 0.11479181044398433, 1 0.11318150448585232, 0 0.1051299746951921, 6 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
263,263,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
264,264,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
265,265,"3 0.24361628709454802, 4 0.1453876236484932, 6 0.1341154819415689, 0 0.13250517598343686, 2 0.1308948700253048, 1 0.10996089256958824, 5 0.10351966873706009","refactor ""gmt"" magic string.add a default case to switch to appease findbugs: nullpointerexception in fastdateparser$timezonestrategy ()replicate the fix for 1186add final modifier to local variables.remove redundant type arguments."
266,266,"1 0.69617294770669, 2 0.059499464407439855, 3 0.05745447463238874, 4 0.050637842048884996, 5 0.04654786249878275, 0 0.04586619924043238, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
267,267,"2 0.2566585956416465, 6 0.13048157115953726, 4 0.12671509281678772, 0 0.12294861447403822, 1 0.12106537530266345, 3 0.12106537530266345, 5 0.12106537530266345",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
268,268,"3 0.20980870980870983, 0 0.1841676841676842, 1 0.13573463573463573, 4 0.13573463573463573, 6 0.13003663003663002, 2 0.11294261294261293, 5 0.0915750915750916",replaces size() == 0 and length() == 0 with isempty(): localeutilstolocale does not support language followed by un m.49 numeric-3 area code followed by variantintroduce some more local variables to make the code better readableremove initial if statement by adding an early returnreplace switch statement with if-else blockextract some helper methods to make the code better readable
269,269,"4 0.4471177944862155, 3 0.11495405179615702, 2 0.10910609857978276, 0 0.09156223893065996, 1 0.08454469507101084, 6 0.07752715121136175, 5 0.07518796992481204","add final modifier to local variables.use enhanced for loop instead of indexed based iteration: add stringutils.containsany(charsequence, charsequence...) method. thanks to daniel stewart.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classreplacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
270,270,"3 0.23507180650037793, 4 0.14512471655328793, 6 0.13983371126228264, 5 0.12572436381960192, 2 0.12396069538926682, 1 0.11690602166792645, 0 0.11337868480725624",add final modifier to local variables.remove redundant type arguments.: fastdateformat doesnt respect summer daylight in some localized strings
271,271,"2 0.2474174855127236, 3 0.182161753590325, 6 0.11690602166792645, 0 0.11337868480725626, 1 0.11337868480725626, 4 0.11337868480725626, 5 0.11337868480725626",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.
272,272,"5 0.2602280348759222, 0 0.1616364855801475, 6 0.13190252626872342, 3 0.12720769058797224, 4 0.11468812877263579, 1 0.10373351218421643, 2 0.10060362173038231",fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone setapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
273,273,"6 0.21693121693121686, 3 0.15260373155109994, 4 0.1292119186856029, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
274,274,"6 0.25320020481310807, 3 0.1689708141321044, 4 0.11699948796722992, 0 0.11520737327188942, 1 0.11520737327188942, 2 0.11520737327188942, 5 0.11520737327188942",zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x format
275,275,"3 0.2046176046176046, 2 0.141991341991342, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
276,276,"0 0.17989417989417986, 1 0.14870509607351712, 3 0.1467557783347257, 4 0.13311055416318576, 2 0.13311055416318573, 5 0.13311055416318573, 6 0.1253132832080201","use final.: add archutils - an utility class for the ""os.arch"" system property ()"
277,277,"0 0.18509070294784577, 1 0.15532879818594097, 5 0.13548752834467123, 2 0.13350340136054423, 3 0.13350340136054423, 4 0.12953514739229025, 6 0.12755102040816327",": add archutils - an utility class for the ""os.arch"" system property ()"
278,278,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",use not bool instead of bool == false
279,279,"5 0.2212773998488284, 6 0.21334089191232047, 3 0.14852607709750565, 0 0.13662131519274376, 4 0.10752078609221463, 1 0.08767951625094485, 2 0.0850340136054422",: fastdateparser could use calendar.getdisplaynames for all text fieldsshow where the parsing failed fastdateparser does not handle unterminated quotes correctlytrailing spaces fastdateparser does not handle non-gregorian calendars properlyfix bug in java 7 (locale.tostring() format has changed) fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
280,280,"2 0.19978106185002736, 0 0.1595511767925561, 4 0.1480569239189929, 1 0.12315270935960594, 3 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594",extract logic for checking string representation of objects into separate methods
281,281,"5 0.29216269841269843, 6 0.12896825396825395, 2 0.12549603174603177, 4 0.11507936507936509, 0 0.113343253968254, 1 0.113343253968254, 3 0.11160714285714289",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
282,282,"0 0.22082985240879974, 2 0.13700918964076855, 5 0.13116123642439434, 1 0.12921191868560292, 3 0.12921191868560292, 4 0.12726260094681152, 6 0.1253132832080201",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
283,283,"6 0.2246852764094143, 4 0.1327312534209086, 0 0.13273125342090858, 1 0.12889983579638753, 3 0.12889983579638753, 2 0.1288998357963875, 5 0.12315270935960593","added missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
284,284,"2 0.19827818132902875, 3 0.17756255044390634, 0 0.12671509281678775, 1 0.12671509281678772, 4 0.12483185364541298, 5 0.12483185364541298, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
285,285,"5 0.29378090033827736, 1 0.11891751236013531, 4 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
286,286,"3 0.36608398633715095, 6 0.12135824794052641, 0 0.11573236889692584, 2 0.11151295961422543, 5 0.09885473176612418, 4 0.09463532248342377, 1 0.0918223829616235",": fastdateformat doesnt respect summer daylight in some localized stringsmerge branch master of https://github.com/nickmanley/commons-langthis fix nullpointerexception in fastdateparser$timezonestrategyfix nullpointerexception in fastdateparser$timezonestrategyrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
287,287,"3 0.19098009574200048, 0 0.16099773242630386, 5 0.14512471655328796, 2 0.14159737969261776, 6 0.1292517006802721, 1 0.11866969009826156, 4 0.11337868480725626",use validateistrue to validate argumentsreplaced private integer constants with private static enum.add final modifier to local variables.
288,288,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
289,289,"2 0.22874149659863938, 4 0.13151927437641722, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
290,290,"0 0.1921182266009852, 3 0.15571975916803502, 6 0.14039408866995073, 2 0.1327312534209086, 1 0.13081554460864808, 4 0.12506841817186648, 5 0.12315270935960596",[] strsubstitutor now supports the declaration of default values for the variables to be replaced. thanks to woonsan ko for the patch.
291,291,"3 0.343562610229277, 6 0.23492063492063495, 5 0.09417989417989417, 2 0.08677248677248678, 1 0.08059964726631397, 4 0.08059964726631397, 0 0.07936507936507939","lvar should not hide ivar.add final modifier to local variables.format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
292,292,"1 0.7132810930279283, 2 0.051537070524412275, 5 0.05083383564396221, 4 0.048020896122161934, 0 0.045911191480811735, 3 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
293,293,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
294,294,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
295,295,"2 0.31192881192881183, 4 0.1284271284271284, 6 0.11664261664261663, 0 0.11495911495911496, 1 0.11159211159211159, 3 0.10822510822510822, 5 0.10822510822510822",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
296,296,"3 0.19451659451659445, 2 0.15007215007215005, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
297,297,"0 0.17487684729064037, 2 0.14614121510673236, 4 0.1442255062944718, 5 0.14039408866995073, 6 0.14039408866995073, 3 0.13081554460864805, 1 0.12315270935960596",[] added a tryacquire() method to timedsemaphore.this method supports non-blocking use cases.
298,298,"2 0.3289625028755464, 3 0.12284334023464458, 5 0.11640211640211638, 4 0.11318150448585232, 1 0.10996089256958824, 6 0.1051299746951921, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
299,299,"0 0.20071010860484542, 2 0.18316624895572262, 3 0.17731829573934835, 1 0.11737677527151208, 6 0.11737677527151208, 4 0.10275689223057645, 5 0.10129490392648287",": add tostringsummary annotation (): add null filter to reflectiontostringbuilderfix/add since javadoc tags, fix checkstyle violations and do other small clean-ups.merge branch  of https://github.com/markdacek/commons-lang: added isexcludenullvalues to reflectiontostringbuilder and testadd final modifier to local variables."
300,300,"5 0.27645502645502645, 1 0.1246031746031746, 6 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
301,301,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",validation[] new type util features
302,302,"3 0.3599439775910364, 6 0.10994397759103644, 2 0.10830999066293183, 1 0.10667600373482727, 0 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
303,303,"2 0.21349206349206348, 3 0.15238095238095234, 0 0.13756613756613756, 4 0.1283068783068783, 1 0.12460317460317463, 6 0.1246031746031746, 5 0.11904761904761908",: please add number to byte[] methods. suggested by lilianne e. blaze. final patch from vincent ricard (with thanks to henri yandell).
304,304,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
305,305,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
306,306,"0 0.15079365079365076, 2 0.15079365079365076, 5 0.15079365079365076, 4 0.14667842445620222, 3 0.13639035861258084, 1 0.1322751322751323, 6 0.1322751322751323",: enhance methodutils to allow invocation of private methods ()
307,307,"3 0.22278911564625845, 2 0.13747165532879818, 1 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
308,308,"0 0.1869787463007802, 4 0.15496368038740918, 2 0.14178100618778589, 5 0.13801452784503632, 1 0.13048157115953726, 3 0.12671509281678778, 6 0.12106537530266348","sort methods.applying sebbs patch from - adding isstarted, issuspended and isstopped to stopwatch"
309,309,"5 0.2551892551892552, 3 0.16288156288156289, 2 0.12869352869352868, 6 0.11672771672771677, 1 0.11672771672771674, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
310,310,"0 0.18707482993197275, 1 0.14937641723356004, 2 0.1374716553287982, 4 0.13350340136054423, 5 0.13350340136054423, 3 0.13151927437641722, 6 0.12755102040816327",": add archutils - an utility class for the ""os.arch"" system property ()"
311,311,"6 0.2718820861678005, 4 0.1655328798185941, 2 0.11950113378684808, 1 0.11791383219954649, 3 0.10997732426303858, 5 0.10997732426303858, 0 0.10521541950113382",[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern. sort methods.[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern.
312,312,"4 0.7364914877868245, 5 0.05025084299695697, 6 0.04909943251912162, 0 0.043918085368862554, 3 0.041039559174274196, 1 0.040463853935356515, 2 0.0387367382186035","sort members.rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
313,313,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
314,314,"6 0.17089947089947088, 3 0.16719576719576718, 0 0.15238095238095234, 4 0.15238095238095234, 1 0.11904761904761907, 2 0.11904761904761907, 5 0.11904761904761907",remove redundant type arguments.format.tab police: fastdateparser could use calendar.getdisplaynames for all text fields
315,315,"2 0.3643892339544514, 1 0.1164021164021164, 4 0.1051299746951921, 0 0.10351966873706006, 3 0.10351966873706006, 5 0.10351966873706006, 6 0.10351966873706006",crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodswap and shift for arrays
316,316,"1 0.7125778581474782, 2 0.05153707052441228, 5 0.05083383564396221, 4 0.04731766124171188, 3 0.046614426361261806, 0 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
317,317,"5 0.2727513227513227, 6 0.12830687830687826, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
318,318,"5 0.291959406713505, 4 0.12073900598490762, 1 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
319,319,"2 0.3611686220381873, 1 0.12123303427651251, 0 0.10351966873706006, 3 0.10351966873706006, 4 0.10351966873706006, 5 0.10351966873706006, 6 0.10351966873706006",crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodswap and shift for arrays
320,320,"2 0.22426303854875285, 3 0.19251700680272107, 6 0.15442176870748295, 4 0.11950113378684805, 1 0.1052154195011338, 0 0.10204081632653063, 5 0.10204081632653063","make sure placement of curly braces is consistentadd final modifier to local variables.pmd: remove useless parenthesescheckstyle: add missing curly braces: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
321,321,"3 0.22445436507936506, 2 0.1515376984126984, 0 0.1498015873015873, 4 0.12375992063492065, 1 0.12028769841269842, 6 0.1185515873015873, 5 0.11160714285714288",add final modifier to local variables.add final modifier to method parameters.stringbuffer => stringbuilder where being used as a local-only buffer
322,322,"0 0.24458874458874458, 6 0.15367965367965364, 3 0.14357864357864356, 2 0.1250601250601251, 1 0.11664261664261666, 4 0.10822510822510822, 5 0.10822510822510822",add missing since tags for strsubstitutor; wrap lines longer than 80 chars[] strsubstitutor now supports the declaration of default values for the variables to be replaced. thanks to woonsan ko for the patch.
323,323,"3 0.1553065670712729, 6 0.14441332088390912, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",format.
324,324,"0 0.21882086167800446, 5 0.13548752834467118, 4 0.13350340136054423, 1 0.12953514739229025, 2 0.12755102040816327, 3 0.12755102040816327, 6 0.12755102040816327",[] provide typeliteral class similar to javax.enterprise.util.typeliteral
325,325,"2 0.26142376142376145, 0 0.1385281385281385, 4 0.1385281385281385, 6 0.13011063011063007, 1 0.11159211159211162, 3 0.11159211159211162, 5 0.10822510822510824",: add nul byte to charutils. thanks to beluga behr.make checkstyle happy: add wrap (with string or char) to stringutils. this closes pr from github. thanks to thiago andrade.
326,326,"2 0.2547753564702717, 6 0.13236481033091202, 4 0.1285983319881625, 0 0.12106537530266345, 1 0.12106537530266345, 3 0.12106537530266345, 5 0.12106537530266345",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
327,327,"0 0.17989417989417986, 3 0.1506544138123085, 1 0.1487050960735171, 2 0.1331105541631857, 5 0.1311612364243943, 4 0.13116123642439428, 6 0.12531328320802007","use final.: add archutils - an utility class for the ""os.arch"" system property ()"
328,328,"3 0.418546365914787, 2 0.10275689223057646, 1 0.09983291562238933, 4 0.0969089390142022, 0 0.09398496240601506, 5 0.09398496240601506, 6 0.09398496240601506","add final modifier to local variables.pmd: these nested if statements could be combinedformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
329,329,"2 0.20096371882086164, 6 0.14540816326530606, 3 0.13548752834467123, 1 0.13151927437641722, 4 0.13151927437641722, 0 0.12755102040816327, 5 0.12755102040816327",": add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
330,330,"5 0.29013791308873277, 0 0.12073900598490765, 1 0.11891751236013534, 6 0.11891751236013534, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
331,331,"3 0.19938735728209406, 4 0.1604010025062656, 2 0.13700918964076858, 1 0.1272626009468115, 0 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",sort members.add final modifier to local variables.
332,332,"5 0.27374447046578193, 6 0.13895394223263072, 1 0.11891751236013533, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
333,333,"2 0.21403769841269837, 0 0.14285714285714282, 5 0.14112103174603172, 3 0.13417658730158727, 4 0.12723214285714282, 6 0.12723214285714282, 1 0.11334325396825398", - jsontostringstyle does not escape string namesjsontostringstyle: improve private constant name and remove wrong comment: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
334,334,"0 0.21750992063492064, 4 0.14459325396825395, 6 0.14459325396825395, 1 0.14285714285714285, 5 0.12723214285714285, 2 0.11160714285714289, 3 0.11160714285714289",convert to java 5 enhanced loops. javadocsimplify code (eliminate conditional check) and avoid npe warningreplace tab characters with spaces
335,335,"4 0.17136978248089357, 3 0.15079365079365079, 0 0.1487360376249265, 1 0.13227513227513232, 2 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",sort members and clean up comments.
336,336,"3 0.35610068943402284, 5 0.18662818662818664, 0 0.12377745711079043, 6 0.09235209235209234, 2 0.08561808561808561, 1 0.08112874779541446, 4 0.07439474106140774","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesadd final modifier to local variables.allow access to parsedpattern for test purposesmake parseexception text similar to that thrown by simpledateformat fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
337,337,"6 0.22456414259692947, 0 0.15716887848035388, 2 0.13713244860785842, 4 0.1298464741087692, 1 0.11709601873536302, 3 0.11709601873536302, 5 0.11709601873536302","<action issue="""" type=""fix"">stringescapeutils.escapejava() and escapeecmascript() do not output the escaped surrogate pairs that are java parsable</action>"
338,338,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
339,339,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
340,340,"3 0.355366027007818, 1 0.10992655768775172, 6 0.10826818289504858, 0 0.10660980810234542, 2 0.10660980810234542, 4 0.10660980810234542, 5 0.10660980810234542","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
341,341,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
342,342,"5 0.27374447046578193, 6 0.12620348685922456, 0 0.12438199323445226, 1 0.12438199323445223, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",4fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
343,343,"5 0.1553065670712729, 1 0.14441332088390912, 0 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 6 0.1400560224089636",: there should be a differencebuilder with a reflectiondifferencebuilder implementation
344,344,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
345,345,"6 0.2718820861678005, 4 0.1655328798185941, 2 0.11950113378684808, 3 0.1147392290249433, 5 0.10997732426303858, 1 0.10997732426303854, 0 0.108390022675737",[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern. sort methods.[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern.
346,346,"1 0.20882936507936506, 0 0.16195436507936506, 3 0.16195436507936506, 2 0.12028769841269839, 5 0.11855158730158732, 4 0.11681547619047622, 6 0.11160714285714288","flips the order of conditional expressions and if statements whose conditions were negateduse final.: add archutils - an utility class for the ""os.arch"" system property ()"
347,347,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
348,348,"0 0.16624895572263992, 4 0.16040100250626563, 2 0.15455304928989136, 3 0.14090782511835143, 6 0.12726260094681152, 1 0.1253132832080201, 5 0.1253132832080201","use stringbuilderappend(charsequence, int, int) were possible to improve performance(similar to , thanks to stephane landelle for the suggestion)"
349,349,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
350,350,"1 0.6968546109650404, 2 0.059499464407439855, 3 0.05609114811568799, 4 0.052001168565585745, 5 0.047229525757133115, 0 0.04450287272373163, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
351,351,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
352,352,"2 0.24200598113641594, 3 0.16793190706234182, 6 0.13250517598343686, 4 0.1276742581090407, 0 0.11801242236024843, 1 0.10835058661145618, 5 0.10351966873706007",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.dont need a copy of this field.add final modifier to local variables.remove redundant type arguments.
353,353,"0 0.15966386554621845, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",annotationutils
354,354,"5 0.2921626984126984, 6 0.12896825396825393, 2 0.12549603174603174, 4 0.11507936507936509, 0 0.11334325396825398, 1 0.11334325396825398, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
355,355,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",changing eol-style to native.misc. event utils.
356,356,"5 0.268279989591465, 6 0.14441842310694764, 1 0.11891751236013533, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
357,357,"3 0.40073929115025003, 2 0.10393563818221353, 6 0.10089149815177213, 1 0.09936942813655143, 4 0.09936942813655143, 0 0.09784735812133073, 5 0.09784735812133073","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
358,358,"2 0.2792089513400989, 4 0.12802498048399688, 3 0.12073900598490761, 0 0.11891751236013533, 1 0.11891751236013533, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
359,359,"5 0.2908346134152585, 3 0.12237583205325141, 4 0.12237583205325141, 0 0.1169994879672299, 6 0.1169994879672299, 1 0.1152073732718894, 2 0.1152073732718894",document intentional drop-thruapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
360,360,"0 0.3370681605975724, 2 0.12464985994397756, 1 0.11321195144724559, 6 0.10994397759103644, 3 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227"," - followup incorporating ggregorys doc suggestion, some doc fixes, addition of const_byte() and const_short(), and junit improvements to test doc examples and make sure const_byte() and const_short() throw illegalargumentexception as required."
361,361,"4 0.1767925561029009, 0 0.1710454296661193, 6 0.1384783798576902, 5 0.13847837985769018, 3 0.12889983579638753, 1 0.12315270935960593, 2 0.12315270935960593","[] create strbuilder apis similar to string.format(string, object...)"
362,362,"0 0.32894292468760555, 4 0.22610604525498143, 1 0.09371833839918944, 2 0.09371833839918944, 6 0.08899020601148258, 3 0.08662613981762919, 5 0.08189800742992233","[] permit bitvector generation for enums with > 64 values; plus some test correctionsremove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)require values parameter when generating bit vectors from enums, throwing nullpointerexception if omitted; merge check for type eligibility; add e... generatebitvector() variant; alter generatebitvector(class<e>, enumset<e>) to (class<e>, iterable<e>) by using |= << instead of + to accumulate values; process only specified valuesadding nelson carpentiers patch adding an enumset to bit vector (and back again) to enumutils. 730"
363,363,"2 0.2359630419331912, 6 0.15138592750533045, 0 0.14143567874911156, 1 0.12153518123667374, 3 0.12153518123667374, 4 0.12153518123667374, 5 0.10660980810234542","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws[] removed unnecessary elses and use of ternary operator with primitive boolean consequences e.g. (some boolean expression) ? true : false"
364,364,"4 0.25052910052910055, 2 0.15052910052910046, 1 0.12089947089947091, 5 0.12089947089947091, 0 0.11904761904761905, 3 0.11904761904761905, 6 0.11904761904761905",: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
365,365,"1 0.7029895802901936, 2 0.060181127665790216, 3 0.0554094848573376, 4 0.04791118901548348, 5 0.04518453598208199, 0 0.044502872723731615, 6 0.04382120946538124",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
366,366,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
367,367,"4 0.2391677391677392, 3 0.1746031746031746, 0 0.13105963105963106, 1 0.12355212355212354, 6 0.12054912054912054, 2 0.11454311454311454, 5 0.09652509652509657",[github] commons-lang pull request : intellij idea refactorings..remove redundant type arguments.add final modifier to local variables.eat own dog food: stringutilsisempty(string) and replace some but not all stringlength() == 0 with stringisempty()use concurrent instead of synchronization; javadoc
368,368,"5 0.25860805860805863, 3 0.1731379731379731, 2 0.12185592185592185, 1 0.11330891330891332, 6 0.11330891330891332, 0 0.1098901098901099, 4 0.1098901098901099",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
369,369,"3 0.19855699855699852, 2 0.15007215007215008, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
370,370,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
371,371,"1 0.7167972674301788, 2 0.04942736588306208, 5 0.048724131002612026, 4 0.04802089612216194, 0 0.04591119148081175, 3 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
372,372,"1 0.7139843279083783, 2 0.053646775165762495, 3 0.04731766124171188, 0 0.046614426361261806, 4 0.046614426361261806, 5 0.046614426361261806, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
373,373,"6 0.32889822595704954, 5 0.123015873015873, 3 0.11974789915966384, 0 0.11321195144724559, 1 0.1050420168067227, 2 0.1050420168067227, 4 0.1050420168067227",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor some duplicate code.
374,374,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
375,375,"6 0.3097383097383098, 3 0.16259116259116257, 4 0.11304161304161302, 2 0.11154011154011154, 0 0.10703560703560706, 1 0.09952809952809955, 5 0.09652509652509655","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
376,376,"0 0.17250673854447438, 3 0.1452530697813717, 1 0.13896376160527107, 2 0.13896376160527107, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",add explict default case
377,377,"2 0.2766439909297052, 3 0.146485260770975, 6 0.14331065759637185, 0 0.11632653061224488, 4 0.10997732426303855, 1 0.1052154195011338, 5 0.10204081632653063",add final modifier to local variables.remove trailing whitespacescrlf -> lfjavadoc: fix typo but working is still awkward.implements : add a method to arrayutils for removing all occurrences of a given element. thanks to haiyang li.
378,378,"0 0.15966386554621845, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",annotationutils
379,379,"0 0.25347985347985347, 4 0.14749694749694747, 6 0.1355311355311355, 2 0.12014652014652015, 3 0.11843711843711846, 5 0.11330891330891332, 1 0.11159951159951162",removes unnecessary class reference of static method calls which are declared in the same classprevent redundant modifiersadd typesafe wrap variant for classes
380,380,"1 0.7118746232670283, 2 0.05294354028531243, 5 0.04872413100261201, 3 0.048020896122161955, 4 0.047317661241711884, 0 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
381,381,"3 0.33615520282186945, 6 0.2423280423280423, 5 0.09417989417989416, 2 0.0855379188712522, 1 0.08306878306878307, 0 0.07936507936507936, 4 0.07936507936507936","lvar should not hide ivar.add final modifier to local variables.format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
382,382,"5 0.25177045177045176, 3 0.16459096459096453, 2 0.13211233211233211, 6 0.11843711843711845, 1 0.11330891330891332, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
383,383,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
384,384,"5 0.27089947089947086, 6 0.13201058201058197, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
385,385,"2 0.22743764172335607, 0 0.15442176870748298, 4 0.13696145124716552, 5 0.12902494331065759, 1 0.12426303854875283, 6 0.11950113378684807, 3 0.10839002267573697",removes unnecessary class reference of static method calls which are declared in the same class: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.: add noclassnametostringstyle implementation of tostringstyle. this from github. thanks to innokenty shuvalov.
386,386,"3 0.20133667502088548, 4 0.1604010025062656, 1 0.1311612364243943, 2 0.1311612364243943, 0 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",sort members.add final modifier to local variables.
387,387,"0 0.27410566216536364, 2 0.14475242833451785, 6 0.12651030561478321, 4 0.12485193082208004, 3 0.11324330727315804, 1 0.10992655768775172, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
388,388,"5 0.27460317460317457, 6 0.13015873015873014, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
389,389,"2 0.2792089513400988, 4 0.12984647410876918, 0 0.11891751236013531, 1 0.11891751236013531, 3 0.11891751236013531, 5 0.11709601873536299, 6 0.11709601873536299","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
390,390,"3 0.21303258145363405, 6 0.14285714285714282, 2 0.13895850737956003, 1 0.1292119186856029, 0 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",pmd: useless parentheses.add final modifier to local variables.
391,391,"3 0.24036281179138325, 4 0.14512471655328796, 6 0.13983371126228264, 2 0.12572436381960192, 5 0.12219702695893173, 0 0.11337868480725626, 1 0.11337868480725626",add final modifier to local variables.remove redundant type arguments.: fastdateformat doesnt respect summer daylight in some localized strings
392,392,"3 0.19639494215765402, 4 0.15308044121603442, 6 0.14554748453053537, 2 0.1398977670164111, 1 0.12294861447403825, 0 0.12106537530266348, 5 0.12106537530266348",remove redundant type arguments.add final modifier to local variables.
393,393,"0 0.15363881401617246, 4 0.15363881401617246, 6 0.14734950584007186, 3 0.13896376160527107, 5 0.13686732554657086, 1 0.1347708894878706, 2 0.1347708894878706",[] prefer throwable.getcause() in exceptionutils.getcause() ()
394,394,"2 0.23487103174603177, 0 0.16021825396825395, 3 0.13070436507936506, 6 0.12896825396825393, 1 0.12202380952380955, 4 0.11160714285714288, 5 0.11160714285714288","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
395,395,"2 0.2547753564702717, 4 0.13048157115953726, 6 0.1285983319881625, 0 0.12294861447403821, 1 0.12106537530266344, 3 0.12106537530266344, 5 0.12106537530266344",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
396,396,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",use not bool instead of bool == false
397,397,"2 0.18379281537176273, 0 0.16235032024505705, 4 0.13700918964076858, 3 0.13311055416318576, 1 0.13116123642439434, 6 0.12726260094681152, 5 0.1253132832080201",[] add methods to classutils to get various forms of classnames in a null-safe manner
398,398,"5 0.27460317460317457, 1 0.1246031746031746, 6 0.1246031746031746, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
399,399,"3 0.3604581072935504, 6 0.12135824794052641, 0 0.11573236889692584, 2 0.11573236889692584, 5 0.09885473176612418, 4 0.09463532248342377, 1 0.09322885272252363",": fastdateformat doesnt respect summer daylight in some localized stringsmerge branch master of https://github.com/nickmanley/commons-langthis fix nullpointerexception in fastdateparser$timezonestrategyfix nullpointerexception in fastdateparser$timezonestrategyrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
400,400,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
401,401,"2 0.24192665571975913, 6 0.1346469622331691, 1 0.12889983579638753, 3 0.12506841817186645, 0 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
402,402,"3 0.1553065670712729, 6 0.14441332088390915, 0 0.14005602240896362, 1 0.14005602240896362, 2 0.14005602240896362, 4 0.14005602240896362, 5 0.14005602240896362",format.
403,403,"2 0.23270975056689333, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
404,404,"1 0.7130426467775866, 2 0.05306942053930005, 0 0.05106138841078599, 4 0.05039204436794797, 5 0.04570663606808186, 3 0.04369860393956781, 6 0.04302925989672979", fix eventcountcircuitbreaker increment batchfixes incrementandcheckstate(integer increment) by passing the increment downstream.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
405,405,"6 0.33537414965986395, 3 0.12267573696145122, 4 0.11950113378684805, 0 0.10839002267573697, 1 0.10680272108843539, 2 0.1052154195011338, 5 0.10204081632653063","make sure lines in files dont have trailing white spaces and remove all trailing white spaces<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
406,406,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
407,407,"6 0.26438492063492064, 3 0.16889880952380948, 2 0.12028769841269842, 0 0.11160714285714286, 1 0.11160714285714286, 4 0.11160714285714286, 5 0.11160714285714286",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.
408,408,"6 0.2752715121136174, 5 0.2299498746867168, 3 0.11445279866332495, 0 0.09544695071010861, 1 0.09544695071010861, 2 0.09544695071010861, 4 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateformats ""z"" pattern does not respect timezone of calendar instances passed to format()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
409,409,"6 0.282010582010582, 2 0.12275132275132275, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
410,410,"3 0.19548872180451127, 0 0.1565023670286828, 5 0.14285714285714285, 4 0.12921191868560292, 1 0.1253132832080201, 2 0.1253132832080201, 6 0.1253132832080201",fixing crlfsstatement unnecessarily nested within else clause. code refactoring in numberutils
411,411,"2 0.23854875283446714, 0 0.15918367346938775, 5 0.13378684807256233, 4 0.13061224489795917, 6 0.11632653061224488, 1 0.11473922902494331, 3 0.10680272108843539",removes unnecessary class reference of static method calls which are declared in the same class: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.: add noclassnametostringstyle implementation of tostringstyle. this from github. thanks to innokenty shuvalov.
412,412,"2 0.24399674399674404, 3 0.15995115995115994, 0 0.15567765567765568, 6 0.1229141229141229, 4 0.11579161579161577, 5 0.10439560439560439, 1 0.0972730972730973","add final modifier to method parameters.fix whitespaces, add missing @since tag: enhance methodutils to allow invocation of private methods (): add support for varargs in constructorutils, memberutils, and methodutilsthis from github.a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables."
413,413,"4 0.318452380952381, 3 0.14484126984126983, 2 0.1240079365079365, 0 0.11845238095238093, 6 0.10873015873015872, 1 0.09623015873015874, 5 0.0892857142857143","add final modifier to local variables.[] stringutils join with var args. add and use space string constant for "" "".rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
414,414,"3 0.3088972431077694, 6 0.21386800334168754, 2 0.09837092731829575, 1 0.09690893901420218, 0 0.09398496240601505, 4 0.09398496240601505, 5 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spacesrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
415,415,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort methods.
416,416,"2 0.3059334845049131, 6 0.19349962207105065, 3 0.11942554799697655, 1 0.11148904006046861, 0 0.09693877551020405, 4 0.08767951625094485, 5 0.0850340136054422",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.new test caseexplanations about algorithmtabs replaced by spacesnew tests addedswap and shift for arrays
417,417,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
418,418,"3 0.15873015873015867, 2 0.15018315018315015, 1 0.14163614163614163, 0 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",: added validstate()
419,419,"6 0.17879604672057495, 0 0.14734950584007186, 1 0.1347708894878706, 2 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706, 5 0.1347708894878706",[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
420,420,"5 0.27645502645502645, 6 0.12830687830687829, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
421,421,"4 0.200760116253074, 3 0.1819807735300693, 2 0.13972725240330874, 1 0.1303375810418064, 0 0.1256427453610552, 6 0.12094790968030403, 5 0.10060362173038231",[github] commons-lang pull request : intellij idea refactorings..remove redundant type arguments.add final modifier to local variables.setting the length of the new array to optimize speed
422,422,"4 0.29805996472663143, 0 0.14305310601606896, 6 0.12933568489124045, 3 0.12659220066627472, 1 0.11013129531648048, 2 0.10464432686654908, 5 0.08818342151675487","validates string.format without arguments ()while calling string.format(""some string"") without any additionalarguments is not technically wrong, its redundant, as it justreturns the same string.removing these calls and just using the string instead both cleans upthe code and offers a (very slight) performance gain.: validate: add inclusivebetween and exclusivebetween overloads for primitives types. initial patch provided by sebb."
423,423,"0 0.17972350230414744, 5 0.16180235535074244, 6 0.1474654377880184, 2 0.14388120839733742, 4 0.1295442908346134, 1 0.12058371735791094, 3 0.11699948796722993",using validate where possible in builder package. - redundant check for zero in hashcodebuilder ctor. patch provided by allon mureinik via github.
424,424,"3 0.3503909026297085, 2 0.11158493248045487, 0 0.10826818289504857, 1 0.10826818289504857, 4 0.10826818289504857, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
425,425,"3 0.35994397759103636, 2 0.10994397759103643, 1 0.10830999066293186, 4 0.10667600373482727, 0 0.1050420168067227, 5 0.1050420168067227, 6 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
426,426,"3 0.18330773169482845, 0 0.17972350230414744, 2 0.1582181259600614, 4 0.13133640552995388, 1 0.11699948796722992, 5 0.11520737327188942, 6 0.11520737327188942",add final modifier to local variables. - change objectutils min() & max() functions to use varargs rather than just two parameters
427,427,"0 0.21830550401978974, 3 0.17645846217274788, 4 0.1562564419707277, 2 0.14615543186971758, 6 0.10863739435168004, 1 0.09853638425066996, 5 0.0956503813646671",removes unnecessary class reference of static method calls which are declared in the same classuse final consistently. : fix deprecation warnings; found some more usagesadd final modifier to local variables.convert to java 5 enhanced loops. - add hashcodemulti varargs method
428,428,"2 0.18886198547215494, 3 0.1850955071294054, 1 0.13048157115953724, 5 0.12859833198816248, 0 0.12294861447403822, 4 0.12294861447403822, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
429,429,"3 0.3537076522151148, 1 0.11158493248045487, 2 0.10826818289504857, 0 0.10660980810234541, 4 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
430,430,"3 0.1663003663003663, 4 0.1663003663003663, 6 0.15604395604395602, 2 0.1492063492063492, 0 0.14236874236874236, 1 0.10989010989010992, 5 0.10989010989010992",add final modifier to local variables.support varargs in strbuilder.appendall(); also convert iterable form of method to use enhanced for loop
431,431,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
432,432,"3 0.40530550119591213, 2 0.10241356816699283, 1 0.10089149815177213, 0 0.09784735812133073, 4 0.09784735812133073, 5 0.09784735812133073, 6 0.09784735812133073","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
433,433,"5 0.22121760096443638, 2 0.20012055455093428, 3 0.1494876431585292, 0 0.13682941531042794, 6 0.10588708057062485, 1 0.09322885272252361, 4 0.09322885272252361","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibilityadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
434,434,"0 0.16931216931216928, 2 0.14667842445620224, 4 0.14462081128747795, 3 0.13844797178130513, 1 0.13639035861258086, 5 0.1322751322751323, 6 0.1322751322751323",add methods for cloneables to objectutils ().
435,435,"5 0.2901379130887327, 4 0.12073900598490762, 0 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
436,436,"1 0.7182037371910788, 2 0.050833835643962204, 5 0.04731766124171188, 3 0.046614426361261806, 0 0.045911191480811735, 4 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
437,437,"3 0.23469387755102036, 0 0.12755102040816327, 1 0.12755102040816327, 2 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.incorporated feedback from peteradd threadutils
438,438,"4 0.2168367346938775, 0 0.14342403628117908, 6 0.12953514739229025, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327",sort members.[] stringutils join apis for primitives.
439,439,"2 0.3305728088336784, 3 0.12284334023464455, 1 0.1131815044858523, 5 0.1131815044858523, 4 0.10996089256958823, 0 0.1051299746951921, 6 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
440,440,"5 0.291959406713505, 0 0.12073900598490764, 1 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
441,441,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
442,442,"0 0.20096371882086164, 4 0.15731292517006798, 2 0.13151927437641722, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",": extend randomstringutils with methods that generate strings between a min and max length (, )"
443,443,"5 0.29785247432306255, 6 0.1409897292250233, 0 0.123015873015873, 3 0.11484593837535013, 4 0.11321195144724559, 1 0.1050420168067227, 2 0.1050420168067227",adjust fastdateformat for java 7 behavior regarding format of the year pattern ().refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
444,444,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
445,445,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
446,446,"2 0.24575807334428024, 3 0.13081554460864803, 6 0.12889983579638753, 1 0.12506841817186645, 0 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
447,447,"4 0.19501133786848068, 0 0.1672335600907029, 1 0.1275510204081633, 2 0.1275510204081633, 3 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
448,448,"6 0.26736755308183885, 2 0.19233147804576378, 4 0.12306740878169448, 3 0.11440940012368582, 0 0.1071943929086786, 5 0.09853638425066999, 1 0.09709338280766855",make whitespace use around generic tokens consistent and add a checkstyle rule to enforce it.make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.use final consistently. [] retrieve class hierarchy
449,449,"5 0.31092436974789917, 6 0.134453781512605, 0 0.11974789915966384, 3 0.11647992530345472, 4 0.10830999066293186, 1 0.1050420168067227, 2 0.1050420168067227",adjust fastdateformat for java 7 behavior regarding format of the year pattern ().refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
450,450,"4 0.3991181657848325, 6 0.14850088183421514, 0 0.1040564373897707, 1 0.09664902998236329, 2 0.0929453262786596, 3 0.07936507936507936, 5 0.07936507936507936","sort members.: stringutilsabbreviate should support custom ellipses parameter ()remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687tab police (and trailing spaces)makes sure ""..."" is the same all over this method. rename method from truncatemiddle() to abbreviatemiddle()"
451,451,"0 0.1786344167296548, 1 0.16452506928697402, 5 0.15394305870496344, 2 0.13807004283194757, 6 0.12925170068027209, 3 0.11866969009826155, 4 0.11690602166792645","checkstyle and trailing spaces.adding builder interface, and refactoring the builder classes and basicthreadfactory to implement this interface. patch from michael wooten in 601"
452,452,"2 0.17794486215538843, 4 0.17404622667780556, 3 0.13895850737956, 6 0.1311612364243943, 1 0.1272626009468115, 0 0.12531328320802007, 5 0.12531328320802007",explicit type parameters can be removedremove redundant type arguments.
453,453,"3 0.44200244200244204, 2 0.09727309727309726, 6 0.09442409442409443, 0 0.09157509157509158, 1 0.09157509157509158, 4 0.09157509157509158, 5 0.09157509157509158","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesadd final modifier to local variables."
454,454,"6 0.2227791701475912, 3 0.1467557783347257, 4 0.12921191868560292, 0 0.1253132832080201, 1 0.1253132832080201, 2 0.1253132832080201, 5 0.1253132832080201",replace tabs with spaces fastdateparser and fastdateprinter support x format
455,455,"6 0.2902754971720489, 5 0.21109286626528007, 3 0.1434044882320744, 1 0.09870461594599522, 0 0.08721036307243206, 2 0.08593322386425836, 4 0.08337894544791098",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.[] fastdateformat generates date objects wastefully.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
456,456,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
457,457,"1 0.7125778581474784, 2 0.05294354028531243, 5 0.048724131002612026, 0 0.047317661241711884, 3 0.04731766124171187, 4 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
458,458,"3 0.30802852541982984, 4 0.1341154819415689, 2 0.1276742581090407, 6 0.11801242236024843, 1 0.10512997469519211, 0 0.10351966873706007, 5 0.10351966873706007",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerpmd: useless parenthesesformat to 120 line length.add final modifier to local variables.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
459,459,"3 0.16412099430967353, 0 0.15363881401617252, 6 0.14315663372267148, 1 0.13477088948787064, 2 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",: dateutilstest.testlang530 fails for some timezones
460,460,"4 0.16429963798384847, 0 0.1584516847674742, 1 0.1584516847674742, 2 0.14285714285714282, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",[github] commons-lang pull request : intellij idea refactorings..
461,461,"5 0.27374447046578193, 6 0.14077543585740304, 0 0.11709601873536302, 1 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
462,462,"3 0.19451659451659448, 2 0.15209235209235208, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
463,463,"6 0.3907203907203907, 2 0.11009361009361006, 4 0.10866910866910864, 3 0.10439560439560436, 0 0.10297110297110298, 1 0.09157509157509158, 5 0.09157509157509158","[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .utc and gmt are the same, so simplify.refactor ""gmt"" magic string.make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
464,464,"5 0.27460317460317457, 6 0.1246031746031746, 1 0.12460317460317458, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
465,465,"3 0.20865800865800863, 2 0.13997113997113997, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
466,466,"3 0.22715572715572718, 0 0.20463320463320464, 1 0.12805662805662804, 4 0.12355212355212353, 2 0.11154011154011152, 5 0.10853710853710855, 6 0.09652509652509655",replaces size() == 0 and length() == 0 with isempty()add final modifier to local variables.[] strlookup for system properties now sees updated values.the lookup implementation now directly accesses system properties withoutcaching the properties object in any way.add final modifier to local variables.
467,467,"5 0.38229376257545267, 0 0.10529845741113347, 6 0.10529845741113347, 4 0.10373351218421642, 1 0.10216856695729935, 2 0.1006036217303823, 3 0.1006036217303823",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
468,468,"3 0.18868407578084995, 2 0.16180235535074242, 0 0.15463389656938042, 4 0.1474654377880184, 1 0.11699948796722992, 5 0.11520737327188942, 6 0.11520737327188942","use stringbuilderappend(charsequence, int, int) were possible to improve performance(similar to , thanks to stephane landelle for the suggestion)add final modifier to local variables."
469,469,"2 0.22456414259692944, 3 0.17902680197762164, 1 0.12438199323445227, 4 0.12073900598490765, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
470,470,"2 0.2318501170960187, 3 0.17902680197762164, 1 0.11891751236013534, 4 0.11891751236013534, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
471,471,"5 0.29042658730158727, 6 0.13070436507936506, 2 0.12375992063492061, 4 0.1168154761904762, 1 0.11507936507936509, 0 0.11160714285714286, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
472,472,"3 0.2086580086580086, 2 0.13795093795093796, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
473,473,"3 0.19497354497354494, 2 0.17275132275132274, 4 0.13756613756613753, 0 0.13571428571428568, 1 0.12089947089947092, 5 0.11904761904761907, 6 0.11904761904761907",add final modifier to local variables.: add classutils.getabbreviatedname(). this fixes from github. thanks to fabian lange.
474,474,"3 0.19451170298627926, 2 0.1813290287866559, 4 0.13048157115953726, 0 0.12483185364541301, 5 0.12483185364541301, 1 0.12294861447403825, 6 0.12106537530266348",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
475,475,"5 0.2602280348759223, 0 0.15537670467247933, 6 0.1334674714956405, 3 0.12720769058797227, 1 0.11312318354571876, 4 0.10999329309188467, 2 0.10060362173038231",fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone setapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
476,476,"2 0.21334409470002688, 0 0.1380145278450363, 6 0.1380145278450363, 3 0.13424804950228683, 4 0.13236481033091205, 1 0.12294861447403824, 5 0.12106537530266347","add todosjavadocfix brace positionsapplying valentin rochers patch to , adding new regexp and in range methods to validate"
477,477,"5 0.25083836351441985, 0 0.1553767046724793, 6 0.13816230717639166, 3 0.12877263581488932, 1 0.11625307399955287, 4 0.10999329309188466, 2 0.10060362173038231",4fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone setapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
478,478,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
479,479,"3 0.19548872180451124, 0 0.1584516847674742, 5 0.14285714285714282, 6 0.12726260094681152, 1 0.1253132832080201, 2 0.1253132832080201, 4 0.1253132832080201",fixing crlfsstatement unnecessarily nested within else clause. code refactoring in numberutils
480,480,"0 0.28595848595848594, 4 0.156043956043956, 6 0.11501831501831503, 2 0.11330891330891332, 1 0.10989010989010989, 3 0.10989010989010989, 5 0.10989010989010989","reverting r1090111 - moving the text.translate escapers back from using range to replicating parts of the range api. see the list for details (unnecessary boxing in stringescapeutils etc), the move to range was an uncomfortable fit. "
481,481,"3 0.1940339354132457, 0 0.17487684729064035, 2 0.1384783798576902, 1 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593, 6 0.12315270935960593",add final modifier to local variables.convert to java 5 enhanced loops. 
482,482,"0 0.28737266050698884, 2 0.14806917791992416, 4 0.1265103056147832, 1 0.11158493248045487, 3 0.10992655768775174, 6 0.10992655768775174, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
483,483,"5 0.282010582010582, 6 0.12275132275132276, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
484,484,"2 0.23219954648526078, 0 0.16077097505668933, 4 0.1385487528344671, 5 0.13061224489795917, 6 0.11791383219954646, 1 0.11473922902494331, 3 0.1052154195011338",removes unnecessary class reference of static method calls which are declared in the same class: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.: add noclassnametostringstyle implementation of tostringstyle. this from github. thanks to innokenty shuvalov.
485,485,"2 0.2282071298464741, 3 0.18266978922716628, 4 0.12073900598490767, 0 0.11709601873536302, 1 0.11709601873536302, 5 0.11709601873536302, 6 0.11709601873536302",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
486,486,"5 0.3125583566760038, 6 0.1295518207282913, 3 0.11974789915966386, 0 0.11974789915966384, 4 0.10830999066293186, 1 0.1050420168067227, 2 0.1050420168067227",adjust fastdateformat for java 7 behavior regarding format of the year pattern ().refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
487,487,"5 0.2500610500610501, 3 0.16800976800976802, 2 0.12527472527472527, 1 0.11843711843711845, 6 0.11843711843711845, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
488,488,"3 0.2287414965986394, 2 0.13151927437641722, 1 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
489,489,"3 0.4229323308270677, 2 0.10275689223057642, 1 0.09690893901420217, 6 0.0954469507101086, 0 0.09398496240601503, 4 0.09398496240601503, 5 0.09398496240601503","add final modifier to local variables.pmd: these nested if statements could be combinedformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
490,490,"2 0.3112244897959184, 6 0.19482237339380196, 3 0.11810279667422523, 1 0.10884353741496597, 0 0.09693877551020405, 4 0.0850340136054422, 5 0.0850340136054422",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.new test caseexplanations about algorithmtabs replaced by spacesnew tests addedswap and shift for arrays
491,491,"6 0.2783068783068782, 2 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
492,492,"2 0.26886446886446885, 3 0.1731379731379731, 6 0.11501831501831504, 1 0.11330891330891332, 0 0.1098901098901099, 4 0.1098901098901099, 5 0.1098901098901099",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsfixing crlfsstatement unnecessarily nested within else clause.add threadutils
493,493,"2 0.19983719983719989, 5 0.19698819698819703, 6 0.1741961741961742, 0 0.11294261294261294, 1 0.11009361009361009, 4 0.11009361009361009, 3 0.09584859584859587",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefullyapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
494,494,"0 0.2500610500610501, 4 0.1492063492063492, 6 0.1304029304029304, 3 0.12185592185592184, 5 0.12014652014652018, 2 0.11843711843711845, 1 0.10989010989010992",removes unnecessary class reference of static method calls which are declared in the same classprevent redundant modifiersadd typesafe wrap variant for classes
495,495,"6 0.27291346646185355, 2 0.1331285202252944, 4 0.13133640552995388, 0 0.11699948796722992, 1 0.1152073732718894, 3 0.1152073732718894, 5 0.1152073732718894",javdoc and minor tweaks to contexted exceptionrefactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
496,496,"3 0.3648459383753501, 6 0.10830999066293186, 2 0.10667600373482727, 0 0.1050420168067227, 1 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
497,497,"0 0.167254556143445, 2 0.15285126396237503, 4 0.15079365079365079, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
498,498,"4 0.2406692406692407, 3 0.1655941655941656, 0 0.15208065208065208, 2 0.13105963105963106, 6 0.11304161304161302, 1 0.10102960102960105, 5 0.09652509652509655","use final.use foreach loop for arrays ()since the project no longer supports java versions older than 6, itssafe to use the enhanced for loop syntax introduced in java 5.this patch employs this syntax where possible to clean up the code.add final modifier to local variables."
499,499,"0 0.1869787463007802, 4 0.1493139628732849, 2 0.14178100618778586, 5 0.13989776701641107, 1 0.1342480495022868, 3 0.12671509281678778, 6 0.12106537530266348","sort methods.applying sebbs patch from - adding isstarted, issuspended and isstopped to stopwatch"
500,500,"2 0.1878306878306878, 5 0.14050558495002943, 0 0.13639035861258086, 4 0.13639035861258086, 1 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
501,501,"5 0.282010582010582, 6 0.12275132275132276, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
502,502,"1 0.7177280550774527, 2 0.05106138841078601, 0 0.05039204436794797, 4 0.05039204436794797, 3 0.04369860393956781, 5 0.04369860393956781, 6 0.04302925989672979", fix eventcountcircuitbreaker increment batchfixes incrementandcheckstate(integer increment) by passing the increment downstream.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
503,503,"3 0.25857654889912957, 6 0.1331285202252944, 4 0.13133640552995388, 2 0.1295442908346134, 1 0.11699948796722992, 0 0.1152073732718894, 5 0.1152073732718894",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerformat to 120 line length.
504,504,"5 0.24393090569561157, 3 0.17693744164332398, 2 0.1295518207282913, 6 0.12628384687208213, 1 0.11157796451914101, 4 0.10667600373482727, 0 0.1050420168067227",replace tabs with whitespaces and add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
505,505,"5 0.22543701024713686, 2 0.20715290335543501, 3 0.14808117339762908, 0 0.13964235483222823, 6 0.09463532248342377, 1 0.09322885272252363, 4 0.0918223829616235","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibilityadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
506,506,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
507,507,"6 0.282010582010582, 2 0.12275132275132274, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
508,508,"3 0.1810515873015873, 4 0.17237103174603174, 0 0.17063492063492064, 2 0.12896825396825398, 6 0.12202380952380956, 1 0.113343253968254, 5 0.11160714285714289",sort by method name.deprecate systemutilsline_separator in favor of java.lang.systemlineseparatorremove redundant type arguments.add final modifier to local variables.
509,509,"2 0.20096371882086164, 6 0.14540816326530606, 3 0.13747165532879818, 1 0.13151927437641722, 4 0.12953514739229025, 0 0.12755102040816327, 5 0.12755102040816327",": add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
510,510,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
511,511,"2 0.3064182194616977, 3 0.13250517598343683, 1 0.12606395215090868, 4 0.1131815044858523, 5 0.10996089256958821, 6 0.10835058661145619, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
512,512,"4 0.7287903667214012, 5 0.05509943440977922, 1 0.04552089034847655, 3 0.044243751140302864, 2 0.04296661193212918, 0 0.04232804232804233, 6 0.04105090311986864","change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
513,513,"4 0.16326530612244894, 1 0.155328798185941, 3 0.1473922902494331, 0 0.1454081632653061, 2 0.13350340136054423, 5 0.1275510204081633, 6 0.1275510204081633",sort members.merge branch : add stringutilsremoveignorecasepatch by gokul nanthakumar c
514,514,"0 0.17136978248089355, 3 0.15079365079365076, 4 0.14667842445620222, 2 0.13433274544385657, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
515,515,"2 0.19369680239245457, 3 0.16954221302047387, 0 0.1631009891879457, 4 0.137336093857833, 6 0.12445364619277662, 1 0.1083505866114562, 5 0.10351966873706007",": add support for varargs in constructorutils, memberutils, and methodutilsthis from github.a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables.[] add methodutil apis to call methods without parameters."
516,516,"1 0.7002629272567923, 2 0.05813613789073912, 3 0.05540948485733761, 4 0.04995617879053461, 5 0.046547862498782754, 0 0.04586619924043238, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
517,517,"0 0.17989417989417986, 4 0.17404622667780556, 1 0.14285714285714282, 2 0.1272626009468115, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",provide simple method to wrap a given type to the typed interface
518,518,"0 0.17136978248089355, 2 0.15285126396237506, 4 0.14667842445620222, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
519,519,"0 0.24322344322344325, 4 0.1526251526251526, 6 0.14578754578754574, 1 0.11672771672771676, 2 0.11501831501831504, 5 0.11501831501831504, 3 0.11159951159951162",removes unnecessary class reference of static method calls which are declared in the same classprevent redundant modifiersadd typesafe wrap variant for classes
520,520,"5 0.28467343221441577, 1 0.12073900598490764, 4 0.12073900598490764, 6 0.12073900598490764, 0 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
521,521,"3 0.1881342701014832, 0 0.18266978922716628, 6 0.1334894613583138, 2 0.1316679677335415, 4 0.1280249804839969, 5 0.11891751236013536, 1 0.11709601873536302",[] prefer throwable.getcause() in exceptionutils.getcause() ()add final modifier to local variables.convert to java 5 enhanced loops. 
522,522,"6 0.2650375939849624, 5 0.23433583959899748, 3 0.11591478696741851, 2 0.09837092731829575, 0 0.09690893901420218, 1 0.09544695071010861, 4 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateformats ""z"" pattern does not respect timezone of calendar instances passed to format()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
523,523,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
524,524,"3 0.19627110103300577, 0 0.16099773242630386, 5 0.14512471655328796, 2 0.13983371126228267, 6 0.1292517006802721, 1 0.11514235323759135, 4 0.11337868480725626",use validateistrue to validate argumentsreplaced private integer constants with private static enum.add final modifier to local variables.
525,525,"5 0.29216269841269843, 2 0.12723214285714282, 6 0.12723214285714282, 0 0.1150793650793651, 4 0.1150793650793651, 1 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
526,526,"4 0.20861678004535145, 3 0.1751070798689846, 2 0.14159737969261774, 0 0.12572436381960192, 1 0.11866969009826155, 6 0.11690602166792644, 5 0.11337868480725624",sort members.extract method.add final modifier to local variables.[] stringutils join apis for primitives.
527,527,"1 0.7157200229489387, 2 0.05173073245362401, 4 0.05173073245362401, 0 0.049722700325109954, 5 0.04436794798240582, 3 0.04369860393956781, 6 0.04302925989672979", fix eventcountcircuitbreaker increment batchfixes incrementandcheckstate(integer increment) by passing the increment downstream.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
528,528,"0 0.21942110177404298, 4 0.1949112978524743, 6 0.1409897292250233, 2 0.11484593837535013, 3 0.11321195144724559, 5 0.10994397759103644, 1 0.10667600373482727",removes unnecessary class reference of static method calls which are declared in the same classprevent redundant modifiersremove redundant type arguments.null-guard[] new type util features
529,529,"6 0.2783068783068782, 2 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
530,530,"2 0.28467343221441577, 4 0.12256049960967995, 0 0.12073900598490764, 3 0.12073900598490764, 1 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
531,531,"6 0.2801587301587301, 2 0.12460317460317458, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
532,532,"1 0.6968546109650404, 3 0.06767942350764436, 2 0.05131950530723537, 5 0.05063784204888498, 0 0.045184535982082004, 4 0.04450287272373163, 6 0.043821209465381254",add final modifier to local variables.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
533,533,"3 0.22394339261809146, 4 0.1690571811053739, 2 0.16236374067699372, 0 0.14362210747752918, 5 0.10881621724995219, 6 0.09810671256454388, 1 0.09409064830751582",use stringisempty() instead of stringlength() == 0add final modifier to local variables.add final modifier to method parameters.changing exception message per sebbs comment in 686improving error message when recursion fails ttl in replaceeachrepeatedly. 686[] stringutils doc/comment spelling fixes.fix brace positionstab police (and trailing spaces)
534,534,"3 0.20581113801452777, 6 0.16061339790153345, 2 0.1380145278450363, 0 0.13236481033091202, 1 0.12106537530266344, 4 0.12106537530266344, 5 0.12106537530266344",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
535,535,"3 0.30480791350356573, 2 0.1308948700253048, 4 0.1276742581090407, 6 0.11801242236024843, 1 0.10835058661145618, 0 0.10674028065332415, 5 0.10351966873706007",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerformat to 120 line length.add final modifier to local variables.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
536,536,"6 0.27029478458049894, 4 0.15759637188208617, 2 0.12902494331065759, 5 0.11315192743764173, 3 0.11156462585034017, 1 0.11156462585034015, 0 0.1068027210884354",[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern. sort methods.[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern.
537,537,"6 0.3240079365079365, 2 0.1906746031746032, 4 0.1101190476190476, 5 0.1003968253968254, 0 0.09206349206349208, 1 0.09206349206349208, 3 0.0906746031746032",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
538,538,"6 0.1878306878306878, 2 0.14667842445620222, 0 0.13639035861258086, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",remove unnecessary white spaces
539,539,"2 0.15659340659340656, 6 0.15659340659340656, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737",the the patrol.validation
540,540,"0 0.17972350230414746, 5 0.15284178187403993, 4 0.14746543778801843, 2 0.14388120839733745, 6 0.1313364055299539, 3 0.12596006144393246, 1 0.11879160266257045",[] added a tryacquire() method to timedsemaphore.this method supports non-blocking use cases.[] added timedsemaphore class to concurrent package.
541,541,"0 0.19897959183673466, 4 0.15731292517006798, 2 0.13350340136054423, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",": extend randomstringutils with methods that generate strings between a min and max length (, )"
542,542,"2 0.2453591606133979, 6 0.1342480495022868, 4 0.13424804950228675, 0 0.12294861447403822, 1 0.12106537530266345, 3 0.12106537530266345, 5 0.12106537530266345",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
543,543,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
544,544,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
545,545,"5 0.2791635172587553, 4 0.1310153691106072, 3 0.12925170068027209, 0 0.11690602166792645, 1 0.11514235323759134, 6 0.11514235323759134, 2 0.11337868480725624",change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
546,546,"0 0.2063492063492063, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",deprecate systemutilsline_separator in favor of java.lang.systemlineseparator
547,547,"2 0.18165784832451495, 4 0.14462081128747795, 3 0.14256319811875368, 0 0.13433274544385657, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
548,548,"2 0.2661605705083966, 3 0.1598803772716816, 6 0.13250517598343683, 1 0.12123303427651251, 4 0.1115711985277203, 0 0.1051299746951921, 5 0.10351966873706006","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.add final modifier to local variables.ws[] add booleanutils.and/or varargs methods to complement xor"
549,549,"1 0.7160940325497286, 2 0.050833835643962204, 3 0.048020896122161934, 4 0.048020896122161934, 5 0.046614426361261806, 0 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
550,550,"1 0.7118746232670283, 2 0.05435001004621258, 4 0.04942736588306208, 5 0.048020896122161955, 3 0.04591119148081175, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
551,551,"3 0.18783068783068776, 5 0.15079365079365076, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 6 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
552,552,"3 0.42439431913116127, 2 0.09837092731829573, 1 0.09690893901420217, 4 0.09690893901420217, 6 0.0954469507101086, 0 0.09398496240601503, 5 0.09398496240601503","add final modifier to local variables.pmd: these nested if statements could be combinedformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
553,553,"3 0.1587301587301587, 2 0.14590964590964592, 1 0.1459096459096459, 0 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",: added validstate()
554,554,"0 0.23984272608125817, 4 0.21639726226882192, 2 0.1511577107907383, 6 0.12669287898645695, 3 0.109363623125091, 1 0.08184068734527448, 5 0.07470511140235908","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.add explict default caseadd final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)wsfix brace positionsadding t/f and y/n options to tobooleanobject(string). 649must not use autoboxing for booleans in tobooleanobject(string), as we rely on object equality in toboolean(string)refactoring toboolean(string) and tobooleanobject(string) so that the latter has the same optimizations. i did this by pointing the former to the latter. i had to rewrite the optimizations a bit so they didnt auto-return as the latter considers null and false to be different. i also had to add specific support for false, no and off for the same reason. 633"
555,555,"2 0.2267573696145124, 4 0.13350340136054423, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
556,556,"0 0.1869787463007802, 4 0.15308044121603442, 2 0.1455474845305354, 5 0.13801452784503632, 1 0.13424804950228683, 3 0.12106537530266348, 6 0.12106537530266348","sort methods.applying sebbs patch from - adding isstarted, issuspended and isstopped to stopwatch"
557,557,"5 0.28467343221441577, 4 0.12256049960967995, 1 0.12073900598490764, 6 0.12073900598490764, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
558,558,"4 0.26719576719576715, 6 0.13571428571428568, 0 0.12089947089947091, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
559,559,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
560,560,"0 0.16931216931216928, 3 0.15079365079365076, 4 0.14462081128747795, 2 0.13844797178130513, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
561,561,"0 0.35061281896724944, 2 0.12276471770142657, 1 0.11573236889692586, 4 0.11573236889692586, 6 0.10729355033152502, 3 0.09604179224432391, 5 0.09182238296162351", use iod for stripaccent init stringutils throws java.security.accesscontrolexception on google app enginechange static code to catch and save exception; only report failure if no method is availablereapplying more of olivers checkstyle fixes from r1083211checkstyleadding cedrik limes patch from ; adding unaccenting for java 1.3->1.5 via reflection usage of sun jvms
562,562,"2 0.17835497835497832, 3 0.146031746031746, 1 0.14199134199134197, 4 0.13795093795093794, 5 0.13391053391053392, 0 0.13189033189033192, 6 0.12987012987012989","adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
563,563,"5 0.28285193858964347, 0 0.12438199323445225, 6 0.12073900598490762, 1 0.11891751236013531, 4 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
564,564,"3 0.3520492774224117, 1 0.10992655768775172, 2 0.10992655768775172, 6 0.10826818289504858, 0 0.10660980810234542, 4 0.10660980810234542, 5 0.10660980810234542","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
565,565,"3 0.25052910052910055, 2 0.13571428571428568, 6 0.13571428571428568, 1 0.12089947089947091, 0 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",use validateistrue to validate argumentsstatement unnecessarily nested within else clause.add final modifier to local variables.
566,566,"0 0.2261904761904762, 6 0.17757936507936506, 3 0.14285714285714282, 1 0.11855158730158732, 2 0.11160714285714288, 4 0.11160714285714288, 5 0.11160714285714288"," - tolowercase should use locale, additional unit tests for case-insensitive matching - fastdateparser should be case insensitive: fastdateparser could use calendar.getdisplaynames for all text fields"
567,567,"5 0.28285193858964347, 4 0.12438199323445222, 0 0.12073900598490762, 1 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
568,568,"2 0.23002862347124636, 3 0.1790268019776216, 1 0.12073900598490764, 4 0.11891751236013533, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
569,569,"4 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",sort members.use stringisempty() instead of stringlength() == 0
570,570,"2 0.24867724867724866, 6 0.14126984126984124, 3 0.12645502645502646, 1 0.12460317460317462, 4 0.12089947089947092, 0 0.11904761904761907, 5 0.11904761904761907","make sure placement of curly braces is consistent: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
571,571,"6 0.16621743036837375, 5 0.14944594189877208, 0 0.1452530697813717, 1 0.13477088948787067, 2 0.13477088948787067, 3 0.13477088948787067, 4 0.13477088948787067",fastdateformat apis that use a stringbuilder
572,572,"6 0.2597402597402598, 3 0.13852813852813853, 0 0.13347763347763347, 2 0.12842712842712842, 5 0.12337662337662336, 1 0.10822510822510825, 4 0.10822510822510825",make sure lines in files dont have trailing white spaces and remove all trailing white spacesfixing crlfsstatement unnecessarily nested within else clause. code refactoring in numberutils
573,573,"5 0.27460317460317457, 6 0.13015873015873017, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
574,574,"3 0.20461760461760456, 2 0.13997113997114, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
575,575,"6 0.25083836351441985, 3 0.21484462329532752, 2 0.11312318354571876, 4 0.1115582383188017, 1 0.10529845741113349, 0 0.10373351218421642, 5 0.10060362173038231",make sure lines in files dont have trailing white spaces and remove all trailing white spacesno need for if/then/else w/ 2 returns when a simple ternary expression will do.add final modifier to local variables.formatting/ws
576,576,"5 0.22690272690272692, 6 0.2197802197802198, 3 0.14713064713064714, 0 0.1172161172161172, 2 0.10154660154660154, 4 0.09442409442409444, 1 0.09299959299959303","make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse validatenotnull instead of ""throw new nullpointerexception""add final modifier to local variables.refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. "
577,577,"3 0.30560336584432973, 6 0.25607190667431634, 2 0.09275196022183975, 1 0.08739720787913562, 0 0.08605851979345958, 4 0.08605851979345958, 5 0.08605851979345958","make sure lines in files dont have trailing white spaces and remove all trailing white spacesrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesreplace tabs with spaces fastdateparser and fastdateprinter support x format"
578,578,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
579,579,"6 0.26647426647426653, 3 0.13852813852813853, 0 0.1317941317941318, 2 0.12337662337662339, 5 0.12337662337662336, 1 0.10822510822510825, 4 0.10822510822510825",make sure lines in files dont have trailing white spaces and remove all trailing white spacesfixing crlfsstatement unnecessarily nested within else clause. code refactoring in numberutils
580,580,"5 0.15530656707127294, 1 0.14441332088390912, 0 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 6 0.1400560224089636",: there should be a differencebuilder with a reflectiondifferencebuilder implementation
581,581,"3 0.19585253456221197, 0 0.16359447004608293, 2 0.1474654377880184, 5 0.1474654377880184, 1 0.11520737327188943, 4 0.11520737327188943, 6 0.11520737327188943",replaced private integer constants with private static enum.add final modifier to local variables.
582,582,"3 0.18783068783068776, 5 0.14462081128747792, 6 0.1384479717813051, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
583,583,"3 0.21127531472359057, 0 0.1403940886699507, 6 0.1403940886699507, 1 0.13081554460864808, 2 0.13081554460864808, 4 0.12315270935960594, 5 0.12315270935960594",add final modifier to local variables.: fastdateprinter memory allocation regression169
584,584,"3 0.23638583638583643, 2 0.16288156288156289, 4 0.13894993894993893, 0 0.12527472527472527, 1 0.11672771672771677, 5 0.10989010989010992, 6 0.10989010989010992",: strbuilderreplaceall arrayindexoutofboundsexception ()avoid arrayindexoutofboundsexception by keeping variable buf consistent with buffer in strbuilderreplaceimpl.add final modifier to local variables.add final modifier to method parameters.
585,585,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
586,586,"3 0.15079365079365076, 4 0.15079365079365076, 6 0.15079365079365076, 5 0.14462081128747795, 1 0.13844797178130513, 0 0.1322751322751323, 2 0.1322751322751323",use validateistrue to validate arguments: there should be a differencebuilder with a reflectiondifferencebuilder implementation
587,587,"3 0.19020251778872466, 0 0.17487684729064035, 2 0.14039408866995073, 1 0.12506841817186645, 4 0.12315270935960593, 5 0.12315270935960593, 6 0.12315270935960593",add final modifier to local variables.convert to java 5 enhanced loops. 
588,588,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
589,589,"6 0.33053221288515405, 5 0.13935574229691874, 0 0.10994397759103641, 1 0.10504201680672269, 2 0.10504201680672269, 3 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
590,590,"6 0.2774424323720099, 3 0.1600715403532305, 4 0.1303375810418064, 0 0.11468812877263582, 5 0.10999329309188464, 2 0.10529845741113347, 1 0.10216856695729938",make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.reuseits confusing to re-use field names locallyadd final modifier to local variables.
591,591,"6 0.32175032175032175, 3 0.16709566709566706, 4 0.11003861003861, 2 0.10703560703560702, 0 0.09952809952809953, 1 0.09802659802659804, 5 0.09652509652509654","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
592,592,"1 0.6818860877684407, 3 0.06554621848739495, 4 0.058356676003734814, 2 0.05443510737628384, 0 0.052474323062558344, 5 0.04528478057889824, 6 0.042016806722689086",[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
593,593,"4 0.167254556143445, 6 0.16313932980599644, 3 0.13844797178130513, 2 0.13433274544385657, 0 0.1322751322751323, 1 0.1322751322751323, 5 0.1322751322751323",remove redundant type arguments.
594,594,"3 0.42585630743525477, 2 0.10129490392648285, 1 0.09690893901420215, 0 0.09398496240601502, 4 0.09398496240601502, 5 0.09398496240601502, 6 0.09398496240601502","add final modifier to local variables.pmd: these nested if statements could be combinedformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
595,595,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.14525306978137167, 1 0.14315663372267146, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
596,596,"5 0.27738745771532647, 4 0.13166796773354147, 0 0.11891751236013531, 1 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
597,597,"2 0.2318501170960187, 3 0.18084829560239393, 1 0.11891751236013534, 0 0.117096018735363, 4 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
598,598,"1 0.7146875627888284, 2 0.05153707052441228, 5 0.04802089612216195, 0 0.04731766124171188, 3 0.046614426361261806, 4 0.046614426361261806, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
599,599,"5 0.22262407072533652, 2 0.20574643359453482, 3 0.1466747036367289, 0 0.13823588507132809, 6 0.1002612015270243, 1 0.09322885272252361, 4 0.09322885272252361","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibilityadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
600,600,"6 0.2614237614237615, 3 0.13852813852813853, 0 0.13347763347763347, 2 0.12674362674362674, 5 0.12337662337662338, 1 0.10822510822510827, 4 0.10822510822510827",make sure lines in files dont have trailing white spaces and remove all trailing white spacesfixing crlfsstatement unnecessarily nested within else clause. code refactoring in numberutils
601,601,"2 0.19867724867724867, 3 0.15238095238095234, 4 0.13756613756613756, 0 0.1357142857142857, 1 0.1301587301587302, 6 0.1264550264550265, 5 0.11904761904761908",: please add number to byte[] methods. suggested by lilianne e. blaze. final patch from vincent ricard (with thanks to henri yandell).
602,602,"5 0.29378090033827736, 1 0.11891751236013531, 4 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
603,603,"6 0.2908777969018933, 5 0.2011856951615988, 3 0.14094473130617707, 2 0.10346146490724804, 1 0.08873589596481164, 0 0.08739720787913562, 4 0.08739720787913562",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
604,604,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
605,605,"3 0.30828074201568173, 6 0.2520558424172882, 2 0.09409064830751578, 4 0.0873972078791356, 0 0.08605851979345956, 1 0.08605851979345956, 5 0.08605851979345956","make sure lines in files dont have trailing white spaces and remove all trailing white spacesrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesreplace tabs with spaces fastdateparser and fastdateprinter support x format"
606,606,"4 0.7394697171233483, 5 0.05045668174159793, 0 0.04300789216990334, 1 0.04300789216990334, 3 0.04300789216990334, 6 0.0411456947769797, 2 0.03990422984836393","sort members.use index_not_found instead of magic number.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
607,607,"5 0.2727513227513227, 6 0.12830687830687829, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
608,608,"2 0.32147217861503585, 3 0.16030001744287461, 0 0.15419501133786848, 4 0.10779696493982208, 5 0.09314495028780743, 1 0.08215593929879647, 6 0.08093493807779525","statement unnecessarily nested within else clause.add final modifier to local variables.applying benedikt ritters patch to fix the checkstyle error in serializationutils - 793[] serializationutils throws classnotfoundexception when cloning primitive classesapplying sven ludwigs patch from . this modifies the serializationutils.clone method to use the threadcontextloader if it is unable to find a class using the objects current classloader. this should (hopefully) help with weblogic and tomcat situations where lang is outside the web-inf for some reason (likely user error with tomcat, by design for weblogic)"
609,609,"6 0.2783068783068782, 2 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
610,610,"3 0.3410934744268077, 6 0.2386243386243386, 5 0.09417989417989416, 2 0.08430335097001763, 0 0.08059964726631394, 1 0.08059964726631394, 4 0.08059964726631394","format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezonesadd final modifier to local variables."
611,611,"3 0.2046176046176046, 2 0.13795093795093796, 1 0.13795093795093794, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
612,612,"2 0.19262846381490448, 3 0.1850955071294054, 0 0.12671509281678775, 4 0.12671509281678775, 5 0.12483185364541298, 1 0.12294861447403822, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
613,613,"3 0.28486772486772494, 2 0.18857142857142856, 4 0.12190476190476189, 1 0.11153439153439151, 6 0.10264550264550266, 0 0.09523809523809526, 5 0.09523809523809526","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsremove redundant type arguments.fixing crlfsstatement unnecessarily nested within else clause.incorporated feedback from fabian, formatting adjusted, count >> 1 replaced with count / 2incorporated feedback from peteradd threadutils"
614,614,"6 0.3001443001443001, 4 0.14357864357864356, 5 0.11495911495911496, 0 0.11159211159211159, 3 0.11159211159211159, 2 0.10990860990860991, 1 0.10822510822510822",make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.[] retrieve class hierarchy
615,615,"0 0.16624895572263992, 4 0.16040100250626563, 2 0.15260373155109994, 3 0.14285714285714282, 5 0.12726260094681152, 1 0.1253132832080201, 6 0.1253132832080201","use stringbuilderappend(charsequence, int, int) were possible to improve performance(similar to , thanks to stephane landelle for the suggestion)"
616,616,"3 0.2046176046176046, 2 0.146031746031746, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
617,617,"3 0.23264629234778486, 2 0.22601279317697226, 1 0.11324330727315803, 6 0.10826818289504858, 0 0.10660980810234542, 4 0.10660980810234542, 5 0.10660980810234542",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.fixing crlfsstatement unnecessarily nested within else clause.add final modifier to local variables.
618,618,"6 0.28388980113118045, 5 0.21620142309797483, 3 0.14085020981572705, 1 0.09870461594599522, 2 0.08976464148877944, 0 0.08593322386425836, 4 0.08465608465608468",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.[] fastdateformat generates date objects wastefully.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
619,619,"0 0.2168367346938775, 6 0.14540816326530606, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327",strbuilder implements builder; provide tostringbuilder as tostringbuffer
620,620,"2 0.3225212790430182, 3 0.12767425810904073, 1 0.1196227283183805, 5 0.11157119852772024, 4 0.1083505866114562, 6 0.10674028065332415, 0 0.10351966873706007",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
621,621,"6 0.35140155352921315, 3 0.24383654170888208, 5 0.09017223910840928, 2 0.0807159743329956, 1 0.08071597433299559, 4 0.07716987504221547, 0 0.07598784194528875","make sure lines in files dont have trailing white spaces and remove all trailing white spaces: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
622,622,"2 0.23270975056689333, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
623,623,"3 0.35504201680672265, 2 0.11321195144724558, 6 0.10994397759103643, 1 0.10667600373482727, 0 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
624,624,"6 0.2838624338624338, 2 0.1208994708994709, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
625,625,"0 0.17318594104308385, 2 0.15136054421768702, 6 0.1473922902494331, 4 0.14143990929705214, 3 0.13151927437641722, 1 0.12755102040816327, 5 0.12755102040816327",extract some helper methods to make the code better readable
626,626,"5 0.2701014832162373, 6 0.1371324486078584, 0 0.12256049960967996, 1 0.11891751236013534, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302",fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
627,627,"0 0.1878306878306878, 2 0.14050558495002938, 3 0.13844797178130513, 1 0.13639035861258086, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: add empty checks to objectutils
628,628,"3 0.20718462823725975, 6 0.1604010025062656, 2 0.1311612364243943, 0 0.12531328320802007, 1 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",use validateistrue to validate argumentsadd final modifier to local variables.
629,629,"4 0.16725455614344503, 3 0.16519694297472073, 2 0.13844797178130513, 0 0.13227513227513232, 1 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",use final consistently. [] new type util features
630,630,"5 0.28467343221441577, 4 0.12620348685922456, 0 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
631,631,"6 0.30476190476190473, 0 0.12698412698412698, 5 0.12014652014652015, 2 0.11672771672771674, 4 0.1115995115995116, 1 0.10989010989010989, 3 0.10989010989010989",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
632,632,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
633,633,"6 0.30014430014430016, 0 0.12337662337662335, 3 0.12337662337662335, 5 0.12337662337662335, 2 0.1132756132756133, 1 0.10822510822510824, 4 0.10822510822510824",make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse validateistrue to validate argumentsusing validate where possible in math package.
634,634,"3 0.3116454502593116, 6 0.21703598931321702, 5 0.18293257897218293, 2 0.07402168788307402, 1 0.07182146786107182, 4 0.07182146786107182, 0 0.07072135785007073","format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezonesadd final modifier to local variables.trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
635,635,"0 0.17136978248089355, 2 0.15490887713109933, 4 0.14462081128747795, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
636,636,"6 0.20096371882086164, 5 0.155328798185941, 0 0.13350340136054423, 1 0.1275510204081633, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633",trailing spaces fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()
637,637,"3 0.19403393541324573, 6 0.1442255062944718, 0 0.1403940886699507, 5 0.13656267104542966, 2 0.13464696223316916, 1 0.12698412698412703, 4 0.12315270935960594",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
638,638,"3 0.27743271221532095, 2 0.1486082355647573, 4 0.13894639981596502, 6 0.11801242236024843, 1 0.10996089256958824, 0 0.10351966873706007, 5 0.10351966873706007",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerformat to 120 line length.add final modifier to method parameters.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
639,639,"0 0.20259740259740258, 2 0.14199134199134197, 1 0.13391053391053392, 3 0.13189033189033192, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",: add conversion utility to convert between data types on byte level
640,640,"0 0.16623376623376623, 4 0.16623376623376623, 2 0.144011544011544, 3 0.13391053391053392, 1 0.1298701298701299, 5 0.1298701298701299, 6 0.1298701298701299",doc: stringutils.containsany. add: containsallwords to wordutils
641,641,"3 0.2962217750950145, 0 0.13816230717639166, 4 0.13503241672255753, 2 0.1115582383188017, 1 0.10999329309188463, 5 0.1084283478649676, 6 0.10060362173038231",replaces size() == 0 and length() == 0 with isempty()statement unnecessarily nested within else clause.statement unnecessarily nested within else clause.add final modifier to local variables.[] add apis classutils.isprimitivewrapper(class<?>) and isprimitiveorwrapper(class<?>)
642,642,"2 0.196988196988197, 5 0.19556369556369557, 6 0.17846967846967846, 4 0.11436711436711434, 0 0.1115181115181115, 1 0.1115181115181115, 3 0.0915750915750916",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefullyapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
643,643,"4 0.26904761904761904, 6 0.13571428571428568, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
644,644,"0 0.2091339459760512, 3 0.15650236702868278, 1 0.1292119186856029, 6 0.1292119186856029, 2 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",allow access to parsedpattern for test purposesmake parseexception text similar to that thrown by simpledateformat
645,645,"4 0.16941391941391937, 2 0.14377289377289376, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort methods.
646,646,"0 0.2114608555286521, 4 0.15119720204465964, 5 0.13236481033091205, 2 0.13048157115953726, 3 0.1285983319881625, 1 0.12483185364541298, 6 0.12106537530266345",[] add fieldutils getdeclaredfields() to return all the fields defined in the given class and super classes.
647,647,"0 0.19585253456221194, 4 0.1582181259600614, 2 0.15463389656938042, 1 0.1313364055299539, 3 0.12954429083461338, 5 0.11520737327188942, 6 0.11520737327188942",": add arrayutilstostringarray(object[], string) method (and minimal clean-up of arrayutilstostringarray(object[]))add changes.xml entry: add arrayutilstostringarray(object[]) methodpatch supplied by ig"
648,648,"4 0.1715506715506715, 2 0.14163614163614166, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort by method name.
649,649,"5 0.2883164194639604, 4 0.12256049960967993, 0 0.11891751236013531, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
650,650,"6 0.29155263638022266, 5 0.2098157270571064, 3 0.14340448823207444, 1 0.09870461594599525, 0 0.08721036307243207, 2 0.08721036307243207, 4 0.08210180623973731",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.[] fastdateformat generates date objects wastefully.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
651,651,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
652,652,"2 0.22874149659863938, 4 0.13350340136054423, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
653,653,"2 0.23002862347124636, 3 0.175383814728077, 4 0.12438199323445226, 1 0.11891751236013533, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
654,654,"1 0.7125778581474784, 2 0.05294354028531244, 3 0.050130600763512154, 5 0.048020896122161955, 0 0.04591119148081175, 4 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
655,655,"0 0.21451914098972924, 4 0.19327731092436976, 6 0.1426237161531279, 2 0.1181139122315593, 3 0.11647992530345473, 5 0.10994397759103641, 1 0.10504201680672272",removes unnecessary class reference of static method calls which are declared in the same classprevent redundant modifiersremove redundant type arguments.null-guard[] new type util features
656,656,"3 0.21245421245421248, 2 0.16288156288156289, 6 0.1406593406593407, 0 0.12698412698412698, 1 0.12527472527472527, 4 0.12185592185592188, 5 0.10989010989010993",use validateistrue to validate argumentsadd final modifier to local variables.add final modifier to method parameters.more varargs-related updates
657,657,"0 0.16623376623376623, 4 0.16623376623376623, 2 0.14805194805194805, 1 0.1298701298701299, 3 0.1298701298701299, 5 0.1298701298701299, 6 0.1298701298701299",typeutils wildcard fixes[] new type util features
658,658,"5 0.29042658730158727, 6 0.12723214285714282, 2 0.12375992063492061, 4 0.12028769841269843, 1 0.1150793650793651, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
659,659,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
660,660,"5 0.19556369556369557, 2 0.19271469271469274, 6 0.17846967846967846, 4 0.1172161172161172, 1 0.1115181115181115, 0 0.11009361009361007, 3 0.09442409442409444",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefullyapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
661,661,"2 0.3080285254198298, 3 0.15827007131354953, 1 0.11157119852772028, 6 0.10835058661145619, 4 0.10674028065332412, 0 0.10351966873706005, 5 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
662,662,"6 0.1557352500748727, 2 0.15154237795747227, 5 0.15154237795747227, 1 0.13686732554657088, 0 0.13477088948787067, 3 0.13477088948787067, 4 0.13477088948787067",checkstyle and trailing spaces.
663,663,"4 0.3293650793650794, 3 0.18940781440781437, 0 0.10821123321123319, 2 0.10286935286935284, 1 0.09859584859584856, 6 0.09325396825396823, 5 0.07829670329670327",sort members.add final modifier to local variables.: stringutils should use toxxxxcase(int) rather than toxxxxcase(char) ()based on patch by sebbadd final modifier to local variables.switched capitalize back to using totitlecase. added a test for this using the lj letter. 1142updates for : stringutils.uncapitalize performance improvement. similar fix also applied to stringutils.capitalize (as mentioned in issue). thanks to leo wang.use final consistently. tabs and trailing spacesshort circuit (un)capitalize if string is already (un)capitalized.rolling capitalize and uncapitalize back from (charsequence) to (string)
664,664,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
665,665,"0 0.1811224489795918, 1 0.14937641723356004, 2 0.13945578231292516, 5 0.13747165532879818, 3 0.13350340136054423, 4 0.13151927437641722, 6 0.12755102040816327",": add archutils - an utility class for the ""os.arch"" system property ()"
666,666,"6 0.2688105545248402, 4 0.17212945784374353, 3 0.13894042465471035, 2 0.1245104102246959, 0 0.1028653885796743, 1 0.09997938569367142, 5 0.0927643784786642",remove redundant type arguments.remove add and set methods of exceptioncontext types taking a pair. format entries with index. improve javadoc. add serialization test.refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
667,667,"5 0.27460317460317457, 6 0.13015873015873014, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
668,668,"2 0.25094482237339377, 3 0.17510707986898455, 1 0.11690602166792644, 6 0.11690602166792644, 0 0.11337868480725623, 4 0.11337868480725623, 5 0.11337868480725623",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.
669,669,"5 0.26329050138573945, 6 0.16805240614764422, 1 0.11514235323759135, 0 0.11337868480725626, 2 0.11337868480725626, 3 0.11337868480725626, 4 0.11337868480725626", fastdateparser does not handle excess hours as per simpledateformattrailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
670,670,"2 0.19451170298627926, 0 0.15684691955878394, 4 0.13989776701641107, 5 0.1380145278450363, 6 0.12671509281678778, 1 0.12294861447403824, 3 0.12106537530266347",multilinerecursivetostringstyle: made private field indent static: multiline recursive to string style. this fixes from github. thanks to jan matèrne.
671,671,"5 0.28869047619047616, 6 0.12723214285714282, 2 0.12549603174603172, 0 0.11681547619047619, 1 0.1150793650793651, 4 0.1150793650793651, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
672,672,"5 0.2838624338624338, 6 0.1208994708994709, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
673,673,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.15154237795747227, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
674,674,"4 0.18112244897959182, 3 0.1454081632653061, 6 0.1454081632653061, 0 0.14342403628117914, 5 0.12953514739229027, 1 0.1275510204081633, 2 0.1275510204081633","sort members.: stringutils.stripaccents should remove accents from ""ł"" and ""ł"" ()."
675,675,"2 0.27192297684100963, 4 0.1316679677335415, 0 0.12073900598490764, 1 0.12073900598490764, 3 0.12073900598490764, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
676,676,"1 0.7139843279083783, 2 0.05364677516576249, 4 0.04872413100261202, 0 0.046614426361261806, 3 0.046614426361261806, 5 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
677,677,"5 0.28869047619047616, 6 0.13244047619047616, 2 0.12375992063492063, 1 0.11681547619047622, 4 0.1150793650793651, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
678,678,"5 0.2883164194639604, 1 0.12073900598490762, 4 0.12073900598490762, 0 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
679,679,"3 0.18445539135194305, 0 0.17487684729064037, 4 0.1327312534209086, 2 0.13081554460864808, 6 0.13081554460864805, 1 0.12315270935960594, 5 0.12315270935960594",a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables.
680,680,"0 0.22082985240879974, 2 0.13700918964076858, 1 0.1311612364243943, 4 0.1292119186856029, 5 0.1292119186856029, 3 0.1272626009468115, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
681,681,"3 0.2046176046176046, 2 0.141991341991342, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
682,682,"5 0.27460317460317457, 1 0.1246031746031746, 6 0.1246031746031746, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
683,683,"0 0.21785139176443524, 3 0.17437313089487, 1 0.14377731769036114, 4 0.12928456406717273, 2 0.1164021164021164, 5 0.11318150448585232, 6 0.1051299746951921",replaces size() == 0 and length() == 0 with isempty()add final modifier to local variables.[] strlookup for system properties now sees updated values.the lookup implementation now directly accesses system properties withoutcaching the properties object in any way.
684,684,"3 0.2246852764094143, 2 0.1384783798576902, 6 0.1327312534209086, 4 0.13081554460864803, 1 0.126984126984127, 0 0.12315270935960593, 5 0.12315270935960593",add final modifier to local variables.javadoc: add truncatedequals and truncatedcompareto
685,685,"6 0.347855454238433, 3 0.2509287402904424, 5 0.09017223910840928, 2 0.08189800742992231, 1 0.07716987504221547, 0 0.07598784194528875, 4 0.07598784194528875","make sure lines in files dont have trailing white spaces and remove all trailing white spaces: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
686,686,"4 0.20259740259740258, 3 0.14805194805194802, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",eat own dog food: stringutilsisempty(string) and replace some but not all stringlength() == 0 with stringisempty()
687,687,"0 0.18151561699948796, 4 0.16001024065540193, 2 0.14567332309267791, 6 0.1385048643113159, 3 0.13133640552995388, 1 0.12237583205325143, 5 0.12058371735791093",removes unnecessary class reference of static method calls which are declared in the same class[] systemutils.gethostname() api.
688,688,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
689,689,"2 0.234263820470717, 1 0.13656267104542968, 6 0.1327312534209086, 3 0.12698412698412703, 0 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
690,690,"6 0.4407922461019807, 5 0.14580699536451747, 3 0.12909116448939456, 4 0.07992695603315068, 2 0.07304396684927657, 1 0.06616097766540245, 0 0.06517769349627757","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
691,691,"6 0.26945878753107666, 5 0.1958309428188946, 3 0.17039586919104988, 0 0.09409064830751575, 1 0.09141327213616371, 2 0.09007458405048767, 4 0.08873589596481163","zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
692,692,"6 0.30989010989010984, 0 0.12185592185592184, 5 0.12185592185592181, 4 0.11330891330891332, 1 0.1115995115995116, 2 0.1115995115995116, 3 0.10989010989010989",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
693,693,"3 0.2091339459760512, 4 0.15455304928989133, 2 0.13505987190197716, 0 0.12531328320802007, 1 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",sort by method name.reuseadd final modifier to local variables.
694,694,"0 0.23854875283446714, 3 0.19727891156462585, 4 0.127437641723356, 5 0.11632653061224488, 6 0.11315192743764173, 2 0.10521541950113382, 1 0.10204081632653063","reuseadd final modifier to local variables.document some @suppresswarning annotationschanging the stringbuilder to build around an empty string and not null, as null will cause an npe. reported by findbugsuse builder apis for annotationutils.tostring()"
695,695,"2 0.21088435374149656, 6 0.14540816326530606, 3 0.13151927437641722, 5 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327, 4 0.12755102040816327",": add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
696,696,"3 0.23859914336104815, 4 0.14512471655328796, 6 0.13807004283194754, 5 0.12925170068027209, 2 0.12043335852859663, 1 0.11514235323759135, 0 0.11337868480725626",add final modifier to local variables.remove redundant type arguments.: fastdateformat doesnt respect summer daylight in some localized strings
697,697,"5 0.28521825396825395, 6 0.12896825396825393, 2 0.12549603174603172, 4 0.12028769841269842, 1 0.11507936507936509, 0 0.11334325396825398, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
698,698,"4 0.17715419501133786, 0 0.14937641723356004, 6 0.1454081632653061, 2 0.14342403628117914, 3 0.12953514739229027, 1 0.1275510204081633, 5 0.1275510204081633",sort members.: stringutilsabbreviate should support custom ellipses parameter ()
699,699,"2 0.3176903611686221, 3 0.1357257878997009, 5 0.11640211640211638, 1 0.1115711985277203, 4 0.10996089256958824, 6 0.1051299746951921, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
700,700,"6 0.1831065759637188, 0 0.16128117913832196, 1 0.1454081632653061, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
701,701,"6 0.19137466307277626, 0 0.13477088948787064, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064", fastdateparser does not handle excess hours as per simpledateformat
702,702,"2 0.19745069745069743, 4 0.16714766714766713, 5 0.1385281385281385, 0 0.13684463684463682, 6 0.13347763347763344, 1 0.1132756132756133, 3 0.1132756132756133",inline division operationformat source code: add the jaro-winkler string distance algorithm to stringutils - partially applying the patch by rekha joshi as submitted for further refinement
703,703,"3 0.17598343685300208, 2 0.16954221302047387, 0 0.14699792960662525, 6 0.14216701173222912, 4 0.1341154819415689, 5 0.11801242236024843, 1 0.11318150448585235",remove redundant type arguments.: exception while using extendedmessageformat and escaping braces. this fixes from github. thanks to andrey khobnya.add final modifier to local variables.checkstyle and trailing spaces.
704,704,"0 0.16819827346143132, 2 0.1662489557226399, 4 0.1584516847674742, 3 0.1292119186856029, 1 0.1272626009468115, 5 0.12531328320802007, 6 0.12531328320802007",: stringutilsisanyempty and isanyblank should return false for an empty array (): add stringutilsisanynotempty and isanynotblank ()
705,705,"1 0.6975362742233908, 2 0.05813613789073912, 3 0.05677281137403836, 4 0.052001168565585745, 5 0.0479111890154835, 0 0.043821209465381254, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
706,706,"3 0.20057720057720055, 2 0.15007215007215005, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
707,707,"6 0.19897959183673466, 5 0.16128117913832196, 0 0.12953514739229025, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327",trailing spaces fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()
708,708,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
709,709,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
710,710,"3 0.22085385878489325, 4 0.15380405035577446, 2 0.12889983579638753, 6 0.126984126984127, 0 0.12315270935960593, 1 0.12315270935960593, 5 0.12315270935960593",use final consistently. use enhanced for loopadd final modifier to local variables.
711,711,"5 0.2701014832162373, 6 0.14441842310694764, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363", and trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
712,712,"3 0.21522733387140164, 6 0.15684691955878394, 0 0.13613128867366153, 2 0.12671509281678778, 1 0.12294861447403824, 4 0.12106537530266347, 5 0.12106537530266347",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
713,713,"6 0.21374458874458874, 2 0.19354256854256854, 3 0.161976911976912, 0 0.1329365079365079, 4 0.10768398268398266, 1 0.09505772005772005, 5 0.09505772005772004","make sure lines in files dont have trailing white spaces and remove all trailing white spaces: recursive and reflective equalsbuilder ()patch by yathos ugapplying thomas neidharts patch for ; fixing a bug in which equalsbuilder considers two arrays of the same type to be equal, without considering the contentsadd final modifier to local variables.add final modifier to method parameters.more varargs-related updatescheckstyle and trailing spaces."
714,714,"4 0.7301587301587302, 6 0.05512886158047448, 5 0.050947260624679976, 0 0.04258405871309098, 2 0.04138931558286397, 1 0.04079194401775048, 3 0.03899982932240997","sort members.removing the charsequenceutils.length method in favour of the stringutils.length methodtab police (and trailing spaces)change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
715,715,"0 0.17793138760880697, 5 0.15284178187403993, 4 0.15104966717869944, 2 0.13492063492063494, 6 0.1313364055299539, 1 0.12775217613927292, 3 0.12416794674859195",[] added a tryacquire() method to timedsemaphore.this method supports non-blocking use cases.[] added timedsemaphore class to concurrent package.
716,716,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
717,717,"5 0.27460317460317457, 6 0.13015873015873014, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
718,718,"6 0.327437641723356, 4 0.11950113378684804, 2 0.11791383219954646, 3 0.11632653061224489, 0 0.11156462585034016, 1 0.1052154195011338, 5 0.10204081632653063","make sure lines in files dont have trailing white spaces and remove all trailing white spaces<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
719,719,"3 0.20057720057720052, 2 0.146031746031746, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
720,720,"6 0.21888053467000831, 3 0.15260373155109994, 4 0.1272626009468115, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
721,721,"5 0.2883164194639604, 0 0.12256049960967993, 4 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
722,722,"6 0.2623582766439909, 2 0.19886621315192743, 5 0.12108843537414964, 1 0.10839002267573696, 3 0.1052154195011338, 0 0.10204081632653063, 4 0.10204081632653063",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
723,723,"2 0.3209109730848861, 3 0.1276742581090407, 1 0.11479181044398434, 5 0.1131815044858523, 4 0.10996089256958823, 6 0.10835058661145616, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
724,724,"5 0.27089947089947086, 6 0.13015873015873014, 1 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
725,725,"6 0.282010582010582, 2 0.12275132275132275, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
726,726,"5 0.27275132275132274, 6 0.13201058201058197, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
727,727,"3 0.20663780663780662, 2 0.141991341991342, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
728,728,"5 0.282010582010582, 6 0.12275132275132276, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
729,729,"2 0.32574189095928224, 3 0.12123303427651252, 5 0.11640211640211638, 1 0.11479181044398434, 4 0.11157119852772025, 6 0.10674028065332414, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
730,730,"0 0.21224022254950092, 3 0.187039764359352, 2 0.16756668303060054, 4 0.16183930616920306, 6 0.10342006218294877, 5 0.08852888234331531, 1 0.07936507936507936",": handle ""void"" in classutils.getclass() ()getclass() previously deferred to an array type to get the class,but this fails for void, which lacks an array type.instead, map explicitly from primitive name to primitive class.add final modifier to local variables.add final modifier to method parameters.adding nopmd statement to empty catchper david m. sledges patch to , added support to classutils.getclass(string) to support inner classes being separated by . as well as the official $"
731,731,"2 0.32735219691741435, 3 0.12284334023464458, 5 0.11640211640211638, 1 0.1115711985277203, 4 0.1115711985277203, 6 0.10674028065332414, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
732,732,"2 0.20586820586820587, 0 0.16714766714766713, 1 0.15031265031265031, 4 0.14189514189514188, 5 0.1183261183261183, 3 0.10822510822510825, 6 0.10822510822510825", - jsontostringstyle does not escape double quote in a stringvalue[github] commons-lang pull request : intellij idea refactorings..: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
733,733,"6 0.2708855472013367, 5 0.2299498746867168, 3 0.11591478696741851, 2 0.09837092731829575, 0 0.09690893901420218, 1 0.09398496240601505, 4 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateformats ""z"" pattern does not respect timezone of calendar instances passed to format()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
734,734,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
735,735,"2 0.2226823096388314, 0 0.1598803772716816, 3 0.15182884748102138, 4 0.1276742581090407, 6 0.11801242236024843, 1 0.1115711985277203, 5 0.1083505866114562",removes unnecessary class reference of static method calls which are declared in the same classcrlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
736,736,"6 0.3419452887537994, 3 0.248564674096589, 5 0.09490037149611616, 2 0.08071597433299561, 1 0.0783519081391422, 4 0.0783519081391422, 0 0.0771698750422155","make sure lines in files dont have trailing white spaces and remove all trailing white spaces: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
737,737,"2 0.1642135642135642, 3 0.16219336219336217, 4 0.146031746031746, 1 0.13593073593073599, 0 0.13189033189033192, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to method parameters.
738,738,"0 0.2392797915185975, 1 0.1530443022980336, 4 0.1364605543710021, 2 0.13314380478559582, 3 0.1231935560293769, 5 0.10826818289504858, 6 0.10660980810234542","use final.: add methodutilsfindannotation and extend methodutilsgetmethodswithannotation for non-public, super-class and interface methodsadd changes.xml entry and minimal clean-up.: adds methodutilsfindannotation and extend methodutilsgetmethodswithannotation for non-public, super-class and interface methods ()"
739,739,"2 0.1857730746619635, 4 0.14256319811875368, 3 0.1384479717813051, 1 0.13639035861258084, 0 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
740,740,"0 0.2989812840559109, 2 0.13811892916370525, 4 0.1231935560293769, 1 0.1115849324804549, 3 0.1115849324804549, 6 0.10992655768775174, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
741,741,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort methods.
742,742,"2 0.2570028011204482, 3 0.16549953314659197, 0 0.14915966386554622, 6 0.10994397759103644, 1 0.10830999066293187, 4 0.10504201680672272, 5 0.10504201680672272",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: numericentityescaper incorrectly encodes supplementary characters. thanks to chris karcher.add final modifier to local variables.
743,743,"4 0.2597883597883598, 2 0.13941798941798939, 1 0.12275132275132278, 3 0.12089947089947092, 0 0.11904761904761907, 5 0.11904761904761907, 6 0.11904761904761907",: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
744,744,"6 0.26612103174603174, 3 0.16542658730158727, 2 0.12202380952380955, 0 0.11160714285714288, 1 0.11160714285714288, 4 0.11160714285714288, 5 0.11160714285714288",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.
745,745,"1 0.19023199023199025, 0 0.1474969474969475, 2 0.1474969474969475, 3 0.1457875457875458, 4 0.13894993894993893, 6 0.12014652014652018, 5 0.10989010989010993",flips the order of conditional expressions and if statements whose conditions were negateddocument some @suppresswarning annotationsjavadocwsfix cloning of array types.add methods for cloneables to objectutils ().
746,746,"0 0.23707117255504354, 2 0.15104966717869944, 3 0.1331285202252944, 6 0.13133640552995388, 1 0.11699948796722992, 4 0.11520737327188943, 5 0.11520737327188943",revert 1391258 by veto of sebb.use conversion tables for boolean arrays.: add conversion utility to convert between data types on byte level
747,747,"5 0.2883164194639604, 4 0.12256049960967991, 1 0.11891751236013531, 6 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
748,748,"6 0.2631072631072631, 3 0.1385281385281385, 0 0.13684463684463682, 5 0.12337662337662335, 2 0.12169312169312167, 1 0.10822510822510824, 4 0.10822510822510824",make sure lines in files dont have trailing white spaces and remove all trailing white spacesfixing crlfsstatement unnecessarily nested within else clause. code refactoring in numberutils
749,749,"2 0.200453514739229, 4 0.17346938775510204, 3 0.15283446712018137, 1 0.12902494331065759, 5 0.1258503401360544, 6 0.11632653061224488, 0 0.10204081632653063",pmd: useless parenthesesmake checkstyle happyuse final modifier where possiblecorrect indentation: add the jaro-winkler string distance algorithm to stringutils - partially applying the patch by rekha joshi as submitted for further refinement
750,750,"5 0.27089947089947086, 6 0.13015873015873017, 1 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
751,751,"5 0.28869047619047616, 6 0.13070436507936506, 2 0.12375992063492061, 4 0.1168154761904762, 1 0.11507936507936509, 0 0.11334325396825398, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
752,752,"3 0.35204927742241166, 2 0.11158493248045485, 1 0.10826818289504855, 6 0.10826818289504855, 0 0.1066098081023454, 4 0.1066098081023454, 5 0.1066098081023454","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
753,753,"3 0.18828680897646416, 0 0.14614121510673236, 2 0.1423097974822113, 6 0.14039408866995073, 5 0.13464696223316913, 1 0.12506841817186648, 4 0.12315270935960596",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
754,754,"5 0.2864949258391881, 0 0.12256049960967993, 4 0.12073900598490762, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
755,755,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
756,756,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
757,757,"6 0.2872503840245776, 5 0.13671274961597538, 0 0.11520737327188942, 1 0.11520737327188942, 2 0.11520737327188942, 3 0.11520737327188942, 4 0.11520737327188942",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
758,758,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
759,759,"2 0.2039072039072039, 4 0.17142857142857143, 3 0.16800976800976802, 0 0.12527472527472527, 1 0.11159951159951163, 5 0.10989010989010992, 6 0.10989010989010992",": add nul byte to charutils. thanks to beluga behr.add final modifier to local variables.[] stringutils.wrapifmissing(string, char|string)"
760,760,"4 0.7214599587480944, 5 0.05667653125280244, 0 0.04663258900547037, 6 0.0460048426150121, 1 0.044121603443637344, 3 0.043493857053179104, 2 0.04161061788180433","removing charsequenceutils in favour of putting the code in stringutilschange stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
761,761,"0 0.21056547619047616, 4 0.18105158730158727, 2 0.13591269841269837, 6 0.13244047619047616, 1 0.1150793650793651, 5 0.11334325396825398, 3 0.11160714285714288",removes unnecessary class reference of static method calls which are declared in the same classapply patch contributed by bruno p. kinoshitavalidation[] new type util features
762,762,"5 0.16108171663727217, 0 0.1590241034685479, 1 0.13844797178130513, 2 0.13844797178130513, 3 0.1384479717813051, 4 0.1322751322751323, 6 0.1322751322751323",[] added timedsemaphore class to concurrent package.
763,763,"6 0.2783068783068782, 2 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
764,764,"3 0.3503968253968254, 2 0.18373015873015872, 6 0.09900793650793649, 1 0.09761904761904759, 4 0.09067460317460319, 0 0.08928571428571429, 5 0.08928571428571429","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
765,765,"0 0.22271825396825395, 4 0.17584325396825393, 2 0.13244047619047616, 6 0.12723214285714282, 1 0.11681547619047622, 5 0.11334325396825398, 3 0.11160714285714288",removes unnecessary class reference of static method calls which are declared in the same classapply patch contributed by bruno p. kinoshitavalidation[] new type util features
766,766,"3 0.20523531049846833, 2 0.1681982734614313, 0 0.12531328320802007, 1 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",use validateistrue to validate argumentsfixing crlfsstatement unnecessarily nested within else clause.add threadutils
767,767,"6 0.19302721088435368, 0 0.14937641723356004, 5 0.13945578231292519, 2 0.13151927437641725, 4 0.13151927437641725, 1 0.1275510204081633, 3 0.1275510204081633",make use of existing timeunit class to manage time units.
768,768,"3 0.19353940406571982, 2 0.1487050960735171, 4 0.13895850737956, 1 0.13311055416318573, 0 0.1311612364243943, 5 0.1292119186856029, 6 0.12531328320802007",: new class classpathutils with methods for turning fqn into resource path
769,769,"0 0.3034425891568749, 4 0.1331684188827046, 3 0.12883941455370027, 1 0.11440940012368582, 2 0.11440940012368582, 6 0.11296639868068438, 5 0.09276437847866421","[] add apiorg.apache.commons.lang3.systemutils.isjavaversionatmost(javaversion)removed isjavaversionatleast(float) and (int), and added an enum variant with the new javaversion enum. updated the rest of the code, switched isjavaversionatleast over to using java.specification.version and not java.version (the vendor code) and dropped java_version_trimmed, java_version_float and java_version_int. see: 624"
770,770,"3 0.19594964422550626, 6 0.1518883415435139, 0 0.13847837985769024, 2 0.13273125342090858, 5 0.13081554460864805, 1 0.126984126984127, 4 0.12315270935960593",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
771,771,"0 0.20660522273425494, 3 0.18330773169482842, 2 0.1385048643113159, 1 0.12058371735791092, 4 0.12058371735791092, 5 0.1152073732718894, 6 0.1152073732718894",boolean comparisons in charrange ()cleaned up comparisons to false to just use the boolean negationoperator (!).add final modifier to local variables.
772,772,"0 0.22276029055690072, 4 0.13989776701641105, 6 0.1380145278450363, 3 0.13613128867366153, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
773,773,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
774,774,"4 0.16514041514041505, 2 0.14377289377289376, 0 0.14163614163614163, 1 0.13736263736263735, 3 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",sort methods.
775,775,"0 0.2701901273329845, 6 0.20914006628292342, 4 0.1334379905808477, 2 0.12366998081283792, 3 0.09070294784580497, 5 0.08948194662480373, 1 0.08337694051979766","make sure lines in files dont have trailing white spaces and remove all trailing white spaces: enhance methodutils to allow invocation of private methods ()[] add method org.apache.commons.lang3.reflect.methodutils.invokeexactmethod(object, string)</action>[] add method org.apache.commons.lang3.reflect.methodutils.invokemethod(object, string)</action>[] add methodutil apis to call methods without parameters."
776,776,"2 0.22438672438672436, 4 0.1974506974506974, 0 0.14526214526214523, 1 0.10822510822510824, 3 0.10822510822510824, 5 0.10822510822510824, 6 0.10822510822510824",crlf -> lfjavadoc: fix typo but working is still awkward.simplify isempty be reusing getlengths/if (foo) { return true; } return false;/return foo;/g
777,777,"3 0.38778659611992944, 2 0.11000881834215168, 1 0.10229276895943563, 4 0.10229276895943563, 0 0.09920634920634921, 5 0.09920634920634921, 6 0.09920634920634921","add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
778,778,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
779,779,"3 0.2421264802217184, 4 0.1433610481229529, 6 0.1327790375409423, 5 0.1292517006802721, 2 0.12396069538926682, 1 0.11514235323759138, 0 0.11337868480725628",add final modifier to local variables.remove redundant type arguments.: fastdateformat doesnt respect summer daylight in some localized strings
780,780,"6 0.3002826701456838, 2 0.19373776908023482, 5 0.10850184822787562, 1 0.10089149815177215, 3 0.10089149815177215, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
781,781,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
782,782,"3 0.280653324131585, 4 0.14377731769036114, 2 0.1421670117322291, 6 0.11801242236024842, 1 0.10674028065332414, 0 0.1051299746951921, 5 0.10351966873706006",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerformat to 120 line length.add final modifier to method parameters.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
783,783,"3 0.20663780663780662, 2 0.141991341991342, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
784,784,"1 0.709061683745228, 2 0.05716294956801286, 4 0.048020896122161955, 5 0.04802089612216194, 3 0.047317661241711884, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
785,785,"3 0.17613927291346645, 4 0.15104966717869941, 0 0.1474654377880184, 1 0.1474654377880184, 2 0.1474654377880184, 5 0.11520737327188942, 6 0.11520737327188942",[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.
786,786,"2 0.22874149659863938, 4 0.13151927437641722, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
787,787,"0 0.16313932980599644, 4 0.1590241034685479, 2 0.14873603762492651, 1 0.13227513227513232, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",: new methods for lang3.validatethis from github.
788,788,"3 0.22477324263038545, 2 0.13747165532879818, 0 0.12755102040816327, 1 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
789,789,"2 0.29677729677729675, 3 0.1385281385281385, 6 0.1284271284271284, 0 0.11159211159211162, 1 0.10822510822510824, 4 0.10822510822510824, 5 0.10822510822510824",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure placement of curly braces is consistent: dateutilstest.testlang530 fails for some timezonesreplace tabs with whitespaces and 
790,790,"4 0.19699546485260766, 2 0.15532879818594097, 3 0.13548752834467123, 1 0.12953514739229025, 0 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",sort members.: added getdigits method to stringutils ()
791,791,"6 0.29621095750128007, 5 0.12775217613927287, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
792,792,"6 0.20238095238095238, 0 0.15052910052910054, 2 0.1412698412698413, 4 0.1357142857142857, 3 0.12830687830687834, 1 0.12275132275132279, 5 0.1190476190476191","<action issue="""" type=""add"" dev=""ggregory"">add apis mutableboolean settrue() and setfalse()</action>"
793,793,"4 0.19211822660098518, 0 0.14997263273125339, 6 0.14805692391899283, 2 0.13273125342090858, 3 0.12889983579638753, 1 0.12506841817186645, 5 0.12315270935960593",[] add null-safe stringutils apis to wrapstringgetbytes([charset|string]).</action>
794,794,"3 0.20392789884315304, 6 0.15496368038740915, 0 0.1380145278450363, 2 0.13236481033091202, 1 0.1285983319881625, 4 0.12106537530266345, 5 0.12106537530266345",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
795,795,"2 0.22278911564625847, 4 0.13945578231292513, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
796,796,"6 0.2783068783068782, 2 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
797,797,"0 0.24093816631130063, 2 0.16299455105425253, 1 0.1430940535418147, 3 0.12153518123667374, 5 0.11490168206586117, 4 0.10992655768775174, 6 0.10660980810234542",[] strlookup for system properties now sees updated values.the lookup implementation now directly accesses system properties withoutcaching the properties object in any way.: strsubstitutor.replacesystemproperties does not work consistently. this fixes from github. thanks to jonathan baker.
798,798,"2 0.19983719983719986, 5 0.19556369556369557, 6 0.17277167277167277, 0 0.11436711436711434, 1 0.1115181115181115, 4 0.11009361009361007, 3 0.09584859584859587",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefullyapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
799,799,"6 0.19699546485260766, 5 0.15731292517006798, 0 0.1354875283446712, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327",trailing spaces fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()
800,800,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
801,801,"3 0.2066378066378066, 2 0.13997113997114, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
802,802,"1 0.7110346146490726, 2 0.05240007649646203, 4 0.05240007649646203, 0 0.05039204436794797, 5 0.047045324153757895, 3 0.04369860393956781, 6 0.04302925989672979", fix eventcountcircuitbreaker increment batchfixes incrementandcheckstate(integer increment) by passing the increment downstream.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
803,803,"5 0.2551892551892552, 3 0.1663003663003663, 2 0.1304029304029304, 6 0.11672771672771677, 1 0.11159951159951163, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
804,804,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
805,805,"0 0.17296113847837985, 4 0.1538040503557745, 5 0.14039408866995073, 6 0.14039408866995073, 2 0.13656267104542968, 3 0.12889983579638753, 1 0.12698412698412703",[] added a tryacquire() method to timedsemaphore.this method supports non-blocking use cases.
806,806,"0 0.17794486215538843, 4 0.17014759120022274, 1 0.14285714285714282, 2 0.13311055416318573, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",provide simple method to wrap a given type to the typed interface
807,807,"4 0.41778591778591784, 2 0.10297110297110294, 0 0.10154660154660153, 1 0.09869759869759871, 6 0.09584859584859586, 3 0.09157509157509158, 5 0.09157509157509158","sort members.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classreplacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
808,808,"2 0.1884559884559884, 3 0.13795093795093794, 0 0.13593073593073596, 1 0.13593073593073596, 4 0.13593073593073596, 5 0.13593073593073593, 6 0.12987012987012986","adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
809,809,"0 0.20259740259740255, 2 0.13997113997113997, 3 0.13795093795093796, 1 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",: add conversion utility to convert between data types on byte level
810,810,"6 0.24648526077097505, 3 0.15283446712018137, 4 0.1496598639455782, 2 0.14331065759637185, 1 0.1036281179138322, 0 0.10204081632653061, 5 0.10204081632653061",replaces size() == 0 and length() == 0 with isempty()make sure lines in files dont have trailing white spaces and remove all trailing white spacesfix various javadoc typos ()reuseadd final modifier to method parameters.
811,811,"2 0.1536388140161725, 3 0.1536388140161725, 6 0.1536388140161725, 0 0.13477088948787064, 1 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",replace tabs with whitespaces and 
812,812,"3 0.2046176046176046, 2 0.13997113997113997, 1 0.13593073593073596, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
813,813,"3 0.2750566893424036, 2 0.15600907029478456, 6 0.13061224489795917, 4 0.1258503401360544, 0 0.10680272108843539, 1 0.10362811791383221, 5 0.10204081632653063",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerpmd: useless parenthesesformat to 120 line length.removed unnecessary multiplication by one.add final modifier to method parameters.
814,814,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.14525306978137167, 1 0.14315663372267148, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
815,815,"6 0.16931216931216928, 0 0.15696649029982362, 5 0.14462081128747797, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323",4fastdateformat apis that use a stringbuilderrefactor some duplicate code.
816,816,"5 0.27275132275132274, 6 0.13015873015873014, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
817,817,"4 0.27488328664799255, 0 0.16638655462184873, 3 0.1402427637721755, 1 0.12063492063492061, 2 0.11017740429505132, 6 0.09579831932773106, 5 0.09187675070028012","sort members. fix stringutils.repeat(char, int) dealing with negative repeat valueadd final modifier to local variables.renaming the newly public pad(int, char) method to repeat(char, int) [note the swap of param order]. ive also pulled the faster implementation out of repeat(string, int). "
818,818,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
819,819,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
820,820,"2 0.3193006671267541, 3 0.12767425810904068, 1 0.11479181044398432, 5 0.11318150448585232, 6 0.11157119852772025, 4 0.10996089256958823, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
821,821,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
822,822,"3 0.3583099906629318, 2 0.111577964519141, 4 0.10830999066293186, 6 0.10667600373482727, 0 0.1050420168067227, 1 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
823,823,"0 0.20223398001175777, 4 0.13639035861258086, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",deprecate systemutilsline_separator in favor of java.lang.systemlineseparator
824,824,"0 0.24835164835164833, 4 0.14578754578754574, 6 0.1355311355311355, 5 0.1252747252747253, 3 0.12014652014652014, 2 0.11501831501831503, 1 0.10989010989010989",removes unnecessary class reference of static method calls which are declared in the same classprevent redundant modifiersadd typesafe wrap variant for classes
825,825,"2 0.2267573696145124, 4 0.1335034013605442, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
826,826,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
827,827,"2 0.3235653235653235, 4 0.11843711843711845, 1 0.11501831501831503, 0 0.11330891330891332, 3 0.10989010989010989, 5 0.10989010989010989, 6 0.10989010989010989","crlf -> lfjavadoc: fix typo but working is still awkward.simplify isnotempty by reusing isemptyapplying chandrashekar ms patch to , adding isnotempty(array) methods to arrayutils. "
828,828,"3 0.2398046398046398, 2 0.20219780219780217, 1 0.11672771672771673, 4 0.11159951159951162, 0 0.1098901098901099, 5 0.1098901098901099, 6 0.1098901098901099",fixing crlfsstatement unnecessarily nested within else clause.statement unnecessarily nested within else clause. - add issorted() to arrayutils. patch supplied by james sawle. in github.
829,829,"4 0.16326530612244894, 1 0.14937641723356007, 3 0.14937641723356007, 0 0.1454081632653061, 2 0.1374716553287982, 5 0.1275510204081633, 6 0.1275510204081633",sort members.merge branch : add stringutilsremoveignorecasepatch by gokul nanthakumar c
830,830,"6 0.3184371184371184, 2 0.11672771672771673, 4 0.11672771672771673, 5 0.11501831501831501, 0 0.1115995115995116, 1 0.1115995115995116, 3 0.10989010989010989",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd sugar to randomiutils: new randumutils class. thanks to duncan jones
831,831,"2 0.2523809523809524, 6 0.1431216931216931, 1 0.12460317460317459, 3 0.12275132275132278, 0 0.11904761904761907, 4 0.11904761904761907, 5 0.11904761904761907","make sure placement of curly braces is consistent: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
832,832,"5 0.29042658730158727, 6 0.12896825396825393, 2 0.12549603174603172, 0 0.1150793650793651, 4 0.1150793650793651, 1 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
833,833,"5 0.28015873015873005, 1 0.12275132275132275, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
834,834,"4 0.19501133786848068, 0 0.1672335600907029, 1 0.1275510204081633, 2 0.1275510204081633, 3 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
835,835,"0 0.3015873015873016, 4 0.14216701173222912, 6 0.12445364619277662, 1 0.1115711985277203, 2 0.11157119852772027, 3 0.10512997469519211, 5 0.10351966873706007","[] objectutils.identitytostring(object) and friends shouldallocate builders and buffers with a sizerefactor magic char.better exception message.use validatenotnull instead of ""throw new nullpointerexception"" add objectutils.toidentitystring methods that support stringbuilder, strbuilder, and appendable"
836,836,"5 0.28285193858964347, 6 0.12256049960967991, 0 0.12073900598490762, 4 0.12073900598490762, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
837,837,"3 0.20769437718590258, 6 0.15684691955878394, 0 0.13613128867366153, 2 0.13048157115953726, 1 0.12671509281678778, 4 0.12106537530266347, 5 0.12106537530266347",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
838,838,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
839,839,"0 0.2647327130085751, 4 0.19576719576719576, 2 0.13574165298303228, 6 0.13063309615033752, 3 0.09742747673782155, 1 0.09359605911330048, 5 0.0821018062397373",sort members.: add null-safe stringutils.valueof(char[]) to delegate to string.valueof(char[])fix checkstyle violations[] add null-safe stringutils.valueof(char[]) to delegate tostring.valueof(char[])use final.remove trailing white spaces - add method for converting string to an array of code points
840,840,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
841,841,"0 0.19353940406571982, 2 0.1506544138123085, 3 0.14480646059593424, 1 0.13311055416318573, 4 0.1272626009468115, 5 0.12531328320802007, 6 0.12531328320802007",[] add apiorg.apache.commons.lang3.systemutils.isjavaversionatmost(javaversion)
842,842,"2 0.23270975056689333, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
843,843,"4 0.16941391941391937, 2 0.1437728937728938, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort by method name.
844,844,"0 0.18973214285714285, 3 0.18278769841269837, 2 0.17931547619047616, 1 0.11334325396825398, 4 0.11160714285714288, 5 0.11160714285714288, 6 0.11160714285714288",: exception while using extendedmessageformat and escaping braces. this fixes from github. thanks to andrey khobnya.add explict default caseadd final modifier to local variables.
845,845,"6 0.20219780219780217, 3 0.19023199023199022, 2 0.12869352869352868, 4 0.12698412698412695, 0 0.12527472527472527, 1 0.11672771672771676, 5 0.1098901098901099","add final modifier to local variables.<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
846,846,"4 0.18229918229918227, 3 0.17388167388167386, 2 0.14021164021164018, 0 0.13684463684463682, 6 0.1301106301106301, 1 0.1284271284271284, 5 0.10822510822510824",[github] commons-lang pull request : intellij idea refactorings..remove redundant type arguments.add final modifier to local variables.
847,847,"6 0.17431457431457426, 4 0.16623376623376618, 3 0.13997113997114, 0 0.12987012987012986, 1 0.12987012987012986, 2 0.12987012987012986, 5 0.12987012987012986",remove redundant type arguments.validation
848,848,"3 0.19594964422550626, 0 0.17487684729064035, 2 0.1327312534209086, 1 0.126984126984127, 4 0.12315270935960593, 5 0.12315270935960593, 6 0.12315270935960593",add final modifier to local variables.convert to java 5 enhanced loops. 
849,849,"5 0.2701014832162373, 0 0.13166796773354147, 6 0.12620348685922458, 1 0.12073900598490764, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",4fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
850,850,"6 0.24331065759637185, 4 0.21791383219954646, 2 0.12585034013605442, 1 0.10680272108843537, 0 0.10204081632653061, 3 0.10204081632653061, 5 0.10204081632653061",make sure lines in files dont have trailing white spaces and remove all trailing white spaces: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
851,851,"6 0.3007774538386784, 5 0.16812439261418852, 2 0.15905409782960803, 3 0.1295756397797214, 4 0.08989310009718171, 0 0.0785552316164561, 1 0.07402008422416588",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
852,852,"6 0.347855454238433, 3 0.2509287402904424, 5 0.091354272205336, 2 0.0818980074299223, 0 0.07598784194528875, 1 0.07598784194528875, 4 0.07598784194528875","make sure lines in files dont have trailing white spaces and remove all trailing white spaces: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
853,853,"3 0.22477324263038542, 2 0.13350340136054423, 1 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
854,854,"4 0.16313932980599644, 0 0.15079365079365079, 1 0.15079365079365079, 2 0.13844797178130513, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",use build in methods for comparing numerical values
855,855,"6 0.282010582010582, 2 0.12275132275132275, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
856,856,"3 0.3266178266178266, 6 0.2041107041107041, 2 0.10154660154660153, 1 0.09299959299959301, 0 0.09157509157509158, 4 0.09157509157509158, 5 0.09157509157509158","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove unused constructor parameterformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
857,857,"6 0.21924603174603172, 2 0.17757936507936506, 4 0.13417658730158727, 3 0.12549603174603174, 0 0.1150793650793651, 5 0.1150793650793651, 1 0.11334325396825398",fix brace positionsadded {} to iffix defaultexceptioncontext.addvalue that overwrites information in a recursive situation (). allow explicit replacement of a label with the new replacevalue methods.
858,858,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
859,859,"5 0.22874537943031095, 2 0.21352467927810395, 3 0.1541639486844966, 6 0.10850184822787565, 1 0.09936942813655145, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
860,860,"0 0.21031746031746035, 4 0.1748236331569665, 6 0.13315696649029982, 3 0.1300705467372134, 2 0.1285273368606702, 5 0.12235449735449735, 1 0.10074955908289245",removes unnecessary class reference of static method calls which are declared in the same classprevent redundant modifiersuse validateistrue to validate argumentssimpler (the prefix is still needed as .<t> cannot start a method call)eliminate one unchecked warning; localise and document others[] use generics in serializationutils
861,861,"2 0.1965367965367965, 5 0.13997113997113997, 1 0.13795093795093796, 3 0.13593073593073596, 0 0.12987012987012989, 4 0.12987012987012989, 6 0.12987012987012989",: add noclassnametostringstyle implementation of tostringstyle. this from github. thanks to innokenty shuvalov.
862,862,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
863,863,"6 0.2738095238095238, 5 0.2211779448621554, 3 0.11883876357560565, 2 0.10129490392648287, 0 0.09544695071010861, 1 0.09544695071010861, 4 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateformats ""z"" pattern does not respect timezone of calendar instances passed to format()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
864,864,"6 0.17460317460317457, 0 0.15154237795747227, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
865,865,"3 0.19855699855699852, 2 0.15007215007215008, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
866,866,"2 0.31930066712675415, 3 0.1534391534391534, 1 0.11157119852772027, 6 0.1051299746951921, 0 0.10351966873706006, 4 0.10351966873706006, 5 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
867,867,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
868,868,"6 0.15573525007487268, 4 0.1536388140161725, 3 0.1515423779574723, 0 0.13477088948787064, 1 0.13477088948787064, 2 0.13477088948787064, 5 0.13477088948787064",format to 120 line length.
869,869,"3 0.21067821067821063, 2 0.13997113997114, 0 0.12987012987012986, 1 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
870,870,"6 0.21201814058956917, 2 0.2027588813303099, 3 0.18159486016628876, 0 0.13265306122448978, 4 0.09429327286470143, 1 0.09164777021919882, 5 0.0850340136054422",changing switch statement to if/else statement for greater claritymake whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.: exception while using extendedmessageformat and escaping braces. this fixes from github. thanks to andrey khobnya.
871,871,"4 0.4641036842871706, 0 0.11140235910878109, 3 0.10120867919033052, 2 0.09407310324741514, 6 0.08693752730449973, 1 0.07674384738604921, 5 0.0655307994757536","use foreach loop for arrays ()since the project no longer supports java versions older than 6, itssafe to use the enhanced for loop syntax introduced in java 5.this patch employs this syntax where possible to clean up the code.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classreplacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
872,872,"0 0.47375947375947386, 4 0.16545116545116545, 1 0.07936507936507935, 2 0.07836407836407835, 5 0.06935506935506935, 6 0.06835406835406836, 3 0.06535106535106536","[github] commons-lang pull request : intellij idea refactorings..use internal javas number caches instead creating new objects:- use more efficient integer cache: use ""integer.valueof(int)"" instead of ""new integer(int)"".- use more efficient long cache: use ""long.valueof(int)"" instead of ""new long(long)"".- use more efficient short cache: use ""short.valueof(int)"" instead of ""new short(short)"".in java version 1.6.0_24 (vendor: sun microsystems inc.), float and double do not implement caches, but ive made the same changes for consistency and future proofing.- use ""double.valueof(int)"" instead of ""new double(double)"".- use ""float.valueof(int)"" instead of ""new float(float)""."
873,873,"1 0.6768368025853057, 3 0.07337705541298357, 4 0.05674365554605076, 2 0.052086303583309596, 6 0.05075563159395495, 5 0.04676361562589108, 0 0.04343693565250453",add final modifier to local variables.remove redundant type arguments.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
874,874,"6 0.2698412698412698, 3 0.1385281385281385, 0 0.13179413179413177, 5 0.12337662337662335, 2 0.12000962000961998, 1 0.10822510822510824, 4 0.10822510822510824",make sure lines in files dont have trailing white spaces and remove all trailing white spacesfixing crlfsstatement unnecessarily nested within else clause. code refactoring in numberutils
875,875,"3 0.34958427815570675, 6 0.2067271352985639, 2 0.09429327286470143, 5 0.09297052154195011, 1 0.08635676492819352, 0 0.0850340136054422, 4 0.0850340136054422","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.: fastdateformat doesnt respect summer daylight in some localized stringsrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
876,876,"6 0.28299319727891153, 3 0.17823129251700678, 2 0.11791383219954649, 4 0.11156462585034013, 0 0.10362811791383221, 1 0.10362811791383221, 5 0.10204081632653063",make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse validateistrue to validate argumentsadd final modifier to local variables.adding tocalendar method per 632
877,877,"0 0.1662337662337662, 2 0.15007215007215002, 4 0.14805194805194802, 3 0.13593073593073596, 5 0.13593073593073596, 1 0.13391053391053392, 6 0.12987012987012989",: add a reflection-based variant of diffbuilder
878,878,"5 0.2534798534798535, 3 0.16971916971916973, 2 0.126984126984127, 6 0.11843711843711845, 1 0.11159951159951163, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
879,879,"3 0.15363881401617246, 4 0.15363881401617246, 6 0.15363881401617246, 0 0.1347708894878706, 1 0.1347708894878706, 2 0.1347708894878706, 5 0.1347708894878706",use validateistrue to validate arguments
880,880,"6 0.2752715121136174, 5 0.2284878863826232, 3 0.11445279866332495, 2 0.09690893901420218, 0 0.09544695071010861, 1 0.09544695071010861, 4 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateformats ""z"" pattern does not respect timezone of calendar instances passed to format()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
881,881,"2 0.17794486215538843, 4 0.17794486215538843, 6 0.1370091896407686, 3 0.1311612364243943, 0 0.12531328320802007, 1 0.12531328320802007, 5 0.12531328320802007",explicit type parameters can be removedremove redundant type arguments.
882,882,"6 0.2962423064463881, 5 0.16812439261418852, 2 0.15905409782960803, 3 0.12730806608357628, 4 0.08762552640103659, 0 0.08195659216067379, 1 0.07968901846452865",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
883,883,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
884,884,"0 0.2956645344705046, 2 0.13480217957829896, 4 0.12485193082208003, 1 0.11490168206586118, 3 0.11158493248045488, 6 0.11158493248045488, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
885,885,"6 0.22082985240879974, 3 0.1506544138123085, 4 0.1272626009468115, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
886,886,"3 0.36321195144724555, 2 0.10830999066293186, 4 0.10667600373482727, 6 0.10667600373482727, 0 0.1050420168067227, 1 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
887,887,"3 0.2086580086580086, 2 0.13795093795093796, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
888,888,"6 0.15992812219227306, 0 0.15363881401617246, 5 0.14734950584007186, 1 0.1347708894878706, 2 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",fastdateformat apis that use a stringbuilder
889,889,"2 0.18886198547215494, 3 0.18697874630078015, 1 0.1285983319881625, 5 0.12671509281678775, 4 0.12483185364541298, 0 0.12294861447403822, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
890,890,"3 0.20865800865800863, 2 0.14199134199134197, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
891,891,"4 0.26719576719576715, 6 0.13756613756613756, 0 0.11904761904761907, 1 0.11904761904761907, 2 0.11904761904761907, 3 0.11904761904761907, 5 0.11904761904761907",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
892,892,"3 0.3604581072935504, 6 0.12276471770142655, 2 0.11713883865782598, 0 0.11573236889692584, 5 0.09744826200522404, 1 0.09463532248342375, 4 0.0918223829616235",": fastdateformat doesnt respect summer daylight in some localized stringsmerge branch master of https://github.com/nickmanley/commons-langthis fix nullpointerexception in fastdateparser$timezonestrategyfix nullpointerexception in fastdateparser$timezonestrategyrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
893,893,"5 0.2901379130887327, 0 0.12073900598490762, 4 0.12073900598490762, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
894,894,"5 0.291959406713505, 1 0.11891751236013531, 4 0.11891751236013531, 6 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
895,895,"6 0.2369614512471655, 4 0.21791383219954646, 2 0.13378684807256233, 1 0.10521541950113379, 0 0.10204081632653061, 3 0.10204081632653061, 5 0.10204081632653061",make sure lines in files dont have trailing white spaces and remove all trailing white spaces: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
896,896,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
897,897,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
898,898,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
899,899,"3 0.2267573696145124, 2 0.1354875283446712, 0 0.12755102040816327, 1 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
900,900,"2 0.30196523053665913, 6 0.19482237339380196, 3 0.12339380196523052, 1 0.11148904006046861, 0 0.09561602418745273, 4 0.08767951625094485, 5 0.0850340136054422",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.new test caseexplanations about algorithmtabs replaced by spacesnew tests addedswap and shift for arrays
901,901,"5 0.2864949258391881, 4 0.12256049960967993, 0 0.11891751236013531, 1 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
902,902,"5 0.28467343221441577, 0 0.12256049960967995, 4 0.12073900598490764, 6 0.12073900598490764, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
903,903,"2 0.24767378215654073, 1 0.12889983579638753, 3 0.126984126984127, 6 0.126984126984127, 0 0.12315270935960591, 4 0.12315270935960591, 5 0.12315270935960591",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
904,904,"2 0.2300286234712464, 3 0.17538381472807701, 4 0.12620348685922458, 0 0.117096018735363, 1 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
905,905,"3 0.19137466307277626, 0 0.13477088948787064, 1 0.13477088948787064, 2 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",format.use final consistently. 
906,906,"6 0.2300286234712464, 0 0.15170439760603693, 4 0.1316679677335415, 2 0.12984647410876918, 1 0.12256049960967993, 3 0.117096018735363, 5 0.117096018735363","<action issue="""" type=""fix"">stringescapeutils.escapejava() and escapeecmascript() do not output the escaped surrogate pairs that are java parsable</action>"
907,907,"0 0.22276029055690072, 4 0.13989776701641105, 6 0.1380145278450363, 3 0.13613128867366153, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
908,908,"3 0.19451659451659448, 2 0.14603174603174604, 1 0.13997113997114, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
909,909,"5 0.15696649029982357, 0 0.15285126396237503, 2 0.14256319811875365, 1 0.1405055849500294, 3 0.1405055849500294, 4 0.13433274544385657, 6 0.1322751322751323",[] added timedsemaphore class to concurrent package.
910,910,"3 0.20133667502088548, 2 0.17209690893901416, 0 0.12531328320802007, 1 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",use validateistrue to validate argumentsfixing crlfsstatement unnecessarily nested within else clause.add threadutils
911,911,"2 0.22874537943031095, 5 0.22874537943031095, 3 0.1374211785170689, 6 0.10850184822787565, 1 0.10089149815177215, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
912,912,"2 0.2267573696145124, 1 0.13151927437641722, 4 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
913,913,"2 0.1641209943096735, 4 0.15154237795747227, 1 0.13896376160527107, 3 0.13896376160527107, 0 0.13686732554657086, 5 0.1347708894878706, 6 0.1347708894878706",: fix deprecation warnings
914,914,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
915,915,"5 0.2783068783068782, 1 0.12275132275132275, 6 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
916,916,"2 0.23072562358276635, 1 0.12953514739229025, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
917,917,"6 0.282010582010582, 2 0.12275132275132274, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
918,918,"0 0.3663771588299891, 2 0.17909553758610364, 4 0.12878107217729862, 3 0.1231905760207647, 6 0.09803334331636218, 1 0.053309374064091045, 5 0.051212938005390826",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.removes unnecessary class reference of static method calls which are declared in the same classreplaces size() == 0 and length() == 0 with isempty()[] numberutils.createnumber() throwsstringindexoutofboundsexception instead of numberformatexception.fix unbox warning. show when we are unboxing.pmd: remove useless parentheses: fix precision loss on numberutils.createnumber(string) (): numberutils.createnumber() behaves inconsistently with numberutils.isnumber()this closes github thanks to pbrosefixing crlfsstatement unnecessarily nested within else clause.: numberutilscreatenumber() returns positive bigdecimal when negative float is expected. thanks to renat zhilkibaev. numberutils does not handle long hex numbers method createnumber from numberutils doesnt work for floating point numbers other than floatdocument why double exponent (e and e) seems to work even though the index will be wrong numberutils.createnumber() javadoc says it does not work for octal numbersstatements unnecessarily nested within else clauses.add final modifier to local variables. numberutilscreatenumber - does not allow for hex numbers to be larger than long numberutils does not handle long hex numbers numberutils does not handle upper-case hex: 0x and -0xadding nopmd tags for various empty catch blocksmaking it so that numberutils.createnumber throws a numberformatexception instead of a stringindexoutofboundsexception when strings such as 1ee are passed in. thanks to ingo heinrichs report and patch in 638
919,919,"6 0.15783168613357293, 0 0.1515423779574723, 5 0.15154237795747227, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",1154fastdateformat apis that use a stringbuilder
920,920,"5 0.22722330941509025, 2 0.21200260926288325, 3 0.157208088714938, 6 0.1100239182430963, 0 0.09784735812133075, 1 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
921,921,"0 0.17191283292978207, 2 0.1606133979015335, 6 0.15496368038740918, 4 0.13801452784503632, 1 0.1285983319881625, 3 0.12483185364541301, 5 0.12106537530266348","functions.java whitspacesreplace tabs with four spaces, as per the projects checkstyle rules.added functions.trywithresources."
922,922,"3 0.20122887864823347, 6 0.17434715821812594, 4 0.1474654377880184, 2 0.12954429083461344, 1 0.11699948796722993, 0 0.11520737327188943, 5 0.11520737327188943",remove redundant type arguments.add final modifier to local variables.add serialization support to eventlistenersupport
923,923,"5 0.27192297684100963, 6 0.13895394223263072, 1 0.12073900598490764, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
924,924,"0 0.2523809523809524, 2 0.1357142857142857, 1 0.13386243386243385, 3 0.12089947089947091, 4 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",adding vincent ricards patch to charrange.java providing an iterator that lets you walk the chars in the range. 454
925,925,"0 0.21924603174603172, 2 0.1498015873015873, 6 0.14285714285714282, 4 0.13591269841269837, 5 0.11855158730158732, 1 0.11681547619047622, 3 0.11681547619047622","functions.java whitspacesreplace tabs with four spaces, as per the projects checkstyle rules.adding the functions class as a helper for dealing with java 8 lambdas."
926,926,"6 0.2073260073260073, 3 0.19877899877899877, 4 0.12698412698412695, 2 0.12527472527472527, 0 0.12014652014652016, 1 0.11159951159951162, 5 0.1098901098901099","add final modifier to local variables.<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
927,927,"0 0.16931216931216928, 3 0.15079365079365076, 4 0.14256319811875368, 2 0.14050558495002943, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
928,928,"0 0.2769996887643947, 4 0.18440709617180207, 2 0.14083411142234672, 3 0.12340491752256456, 6 0.1212262682850918, 5 0.07983193277310922, 1 0.07329598506069096",make code more readable with less nesting (move block out of elseclause).: performance improvements for numberutils.isparsable ()~2.5x performance increase wrt 3.4 version; added a couple checks more to unit testsfixing crlfsstatement unnecessarily nested within else clause.simplify statement by calling substring on str directly. stringutils.startswith makes sure that str is not null at this point. improvement suggested by sebb.: numberutilsisparsable method(s). apply juan pablosantos rodríguez patch for handling negative numbers.: numberutilsisparsable method(s). thanks to juan pablo santos rodríguez.
929,929,"3 0.18783068783068776, 5 0.14873603762492646, 6 0.13433274544385657, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
930,930,"3 0.16800976800976802, 4 0.16288156288156289, 6 0.15604395604395602, 2 0.1492063492063492, 0 0.14065934065934066, 1 0.11330891330891334, 5 0.10989010989010992",add final modifier to local variables.support varargs in strbuilder.appendall(); also convert iterable form of method to use enhanced for loop
931,931,"1 0.209992193598751, 4 0.14077543585740307, 0 0.13531095498308612, 3 0.1334894613583138, 2 0.1298464741087692, 5 0.12984647410876918, 6 0.12073900598490768",flips the order of conditional expressions and if statements whose conditions were negated: optimize bitfield constructor implementation ()
932,932,"0 0.18392542202066015, 4 0.18216175359032505, 3 0.13983371126228267, 6 0.13630637440161247, 2 0.12572436381960195, 5 0.11866969009826157, 1 0.11337868480725627",removes unnecessary class reference of static method calls which are declared in the same classuse final consistently. [] new type util features
933,933,"3 0.3130158730158731, 2 0.14708994708994708, 6 0.12190476190476189, 4 0.11894179894179892, 1 0.10412698412698415, 0 0.0996825396825397, 5 0.09523809523809526",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerpmd: useless parenthesesformat to 120 line length.removed unnecessary multiplication by one.add final modifier to local variables.add final modifier to method parameters.
934,934,"3 0.3520492774224117, 2 0.10992655768775172, 1 0.10826818289504858, 4 0.10826818289504858, 6 0.10826818289504858, 0 0.10660980810234542, 5 0.10660980810234542","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
935,935,"4 0.16624895572263992, 0 0.1584516847674742, 1 0.15650236702868278, 2 0.14285714285714282, 3 0.1253132832080201, 5 0.1253132832080201, 6 0.1253132832080201",[github] commons-lang pull request : intellij idea refactorings..
936,936,"2 0.3985260770975057, 3 0.13794406651549504, 1 0.10222978080120933, 0 0.0929705215419501, 6 0.0929705215419501, 4 0.09032501889644748, 5 0.08503401360544219",add final modifier to local variables.better javadoc for arrayutils.swap variantscrlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodexamples added in javadoctabs replaced by spacesnew tests addedswap and shift for arrays
937,937,"2 0.22874149659863938, 4 0.13151927437641722, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
938,938,"5 0.28285193858964347, 4 0.12438199323445225, 0 0.12073900598490762, 1 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
939,939,"6 0.29221648498756936, 5 0.1985083189902467, 3 0.14629948364888123, 2 0.0954293363931918, 0 0.09275196022183976, 1 0.08873589596481164, 4 0.08605851979345958",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
940,940,"4 0.19897959183673466, 0 0.16326530612244894, 1 0.1275510204081633, 2 0.1275510204081633, 3 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
941,941,"1 0.7002629272567923, 2 0.060862790924140604, 3 0.05472782159898724, 4 0.04927451553218423, 5 0.04722952575713313, 0 0.043821209465381254, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
942,942,"5 0.26858150667674474, 3 0.12925170068027209, 4 0.12748803224993702, 1 0.12396069538926682, 0 0.12219702695893173, 6 0.11514235323759134, 2 0.11337868480725624",change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
943,943,"2 0.25978835978835974, 6 0.1412698412698412, 1 0.1208994708994709, 4 0.1208994708994709, 0 0.11904761904761904, 3 0.11904761904761904, 5 0.11904761904761904","make sure placement of curly braces is consistent: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
944,944,"4 0.228110599078341, 2 0.14388120839733742, 0 0.1313364055299539, 5 0.1313364055299539, 3 0.12596006144393246, 1 0.12416794674859194, 6 0.11520737327188943","sort members.: add stringutilsisanynotempty and isanynotblank ()applying alexander muthmanns patch from , adding isblank/isempty charsequence... variants"
945,945,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
946,946,"4 0.19211822660098518, 6 0.15188834154351394, 0 0.1461412151067323, 3 0.13464696223316916, 2 0.12698412698412703, 1 0.12506841817186648, 5 0.12315270935960594",[] add null-safe stringutils apis to wrapstringgetbytes([charset|string]).</action>
947,947,"5 0.2727513227513227, 6 0.13201058201058197, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
948,948,"2 0.17599554441659698, 0 0.1662489557226399, 1 0.13895850737955998, 4 0.13311055416318573, 3 0.1311612364243943, 5 0.1292119186856029, 6 0.12531328320802007","use validatenotnull instead of ""throw new nullpointerexception""adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
949,949,"6 0.42800955190335727, 5 0.15957297373226573, 3 0.1271245961511448, 4 0.08189352437140045, 2 0.07304396684927657, 0 0.06616097766540245, 1 0.06419440932715269","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
950,950,"0 0.24423963133640553, 3 0.1474654377880184, 4 0.14567332309267791, 2 0.11699948796722992, 1 0.11520737327188942, 5 0.11520737327188942, 6 0.11520737327188942",: typeutils.isassignable throws nullpointerexception when fromtype has type variables and totype generic superclass specifies type variable ()
951,951,"3 0.20259740259740258, 2 0.146031746031746, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
952,952,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",use not bool instead of bool == false
953,953,"2 0.24497354497354495, 3 0.13386243386243385, 0 0.13015873015873014, 1 0.12645502645502646, 5 0.12645502645502646, 4 0.11904761904761905, 6 0.11904761904761905","dont need internal ivar name for a boolean to carry a ""flag"" postfix.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
954,954,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
955,955,"6 0.4260429835651075, 5 0.1615395420705155, 3 0.12909116448939456, 4 0.0838600927096502, 2 0.06911083017277707, 0 0.06616097766540245, 1 0.06419440932715269","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
956,956,"3 0.22271825396825395, 2 0.18973214285714285, 6 0.12723214285714282, 4 0.12028769841269843, 1 0.11681547619047619, 0 0.11160714285714288, 5 0.11160714285714288",add final modifier to local variables.add final modifier to method parameters.[] added support for concurrentmap.putifabsent() to concurrentutils.
957,957,"3 0.2424475166410651, 2 0.15284178187403993, 0 0.1313364055299539, 4 0.12775217613927292, 1 0.11520737327188944, 5 0.11520737327188944, 6 0.11520737327188944",add final modifier to local variables.add final modifier to method parameters.[] vastly expanded typeutils
958,958,"6 0.19897959183673466, 5 0.14342403628117908, 3 0.1414399092970521, 0 0.12953514739229027, 2 0.12953514739229027, 4 0.12953514739229027, 1 0.1275510204081633"," partial: implement format u for fastdateformat, day number of week"
959,959,"5 0.26904761904761904, 6 0.13015873015873014, 1 0.1246031746031746, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
960,960,"4 0.24648526077097507, 3 0.1766439909297052, 6 0.15442176870748295, 2 0.11156462585034013, 1 0.10680272108843539, 0 0.10204081632653063, 5 0.10204081632653063",use validateistrue to validate argumentsformat to 120 line length.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
961,961,"4 0.1910430839002267, 6 0.155328798185941, 3 0.1354875283446712, 2 0.13350340136054423, 0 0.12953514739229027, 1 0.1275510204081633, 5 0.1275510204081633",sort methods.remove redundant type arguments.
962,962,"2 0.18783068783068776, 4 0.14256319811875368, 3 0.1384479717813051, 0 0.13433274544385657, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
963,963,"6 0.278829604130809, 5 0.1904761904761905, 3 0.16504111684834577, 0 0.09275196022183975, 2 0.09275196022183975, 4 0.09141327213616372, 1 0.08873589596481164","zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
964,964,"0 0.20521541950113378, 4 0.17505668934240362, 2 0.15600907029478456, 6 0.13061224489795917, 5 0.11791383219954646, 1 0.11156462585034013, 3 0.10362811791383221",reverting changes from r1661762 () for now until we have consensus about this change.: remove busy wait from atomicsafeinitializer.get(). this also fixes from github. thanks to github user artnaseef.[] added atomicsafeinitializer class. thanks to alexander dot apanasovich at gmail dot com for the proposal.
965,965,"2 0.18988830099941206, 4 0.14050558495002943, 1 0.13639035861258086, 3 0.13639035861258086, 0 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
966,966,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
967,967,"3 0.3490079365079365, 2 0.19484126984126982, 6 0.09484126984126984, 1 0.09345238095238097, 0 0.08928571428571429, 4 0.08928571428571429, 5 0.08928571428571429","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
968,968,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.14734950584007186, 1 0.14106019766397127, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
969,969,"1 0.6982179374817412, 2 0.059499464407439855, 3 0.05540948485733761, 4 0.05063784204888498, 0 0.04654786249878275, 5 0.04586619924043238, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
970,970,"5 0.25420516465292586, 3 0.17957829898128402, 6 0.12651030561478321, 2 0.11987680644397063, 0 0.10660980810234544, 1 0.10660980810234544, 4 0.10660980810234544",format.add final modifier to local variables.trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
971,971,"3 0.22278911564625845, 2 0.1354875283446712, 1 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
972,972,"6 0.35612968591692, 3 0.24265450861195537, 5 0.0889902060114826, 2 0.0818980074299223, 4 0.07835190813914218, 0 0.07598784194528875, 1 0.07598784194528875","make sure lines in files dont have trailing white spaces and remove all trailing white spaces: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
973,973,"2 0.1915900863269284, 0 0.16040100250626563, 4 0.13700918964076858, 1 0.13116123642439428, 3 0.1292119186856029, 5 0.12531328320802007, 6 0.12531328320802007",[] add methods to classutils to get various forms of classnames in a null-safe manner
974,974,"2 0.23072562358276635, 1 0.12953514739229025, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
975,975,"6 0.4073517126148706, 5 0.16758563074352545, 2 0.09390142021720967, 3 0.08571428571428569, 4 0.08571428571428569, 0 0.08454469507101083, 1 0.07518796992481204","[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .utc and gmt are the same, so simplify.refactor ""gmt"" magic string.make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .trailing spaces fastdateparser does not handle non-gregorian calendars properly unnecessary ;applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
976,976,"2 0.18574213311055413, 1 0.14870509607351712, 3 0.1487050960735171, 4 0.1370091896407686, 0 0.1292119186856029, 5 0.12531328320802007, 6 0.12531328320802007","dont use single letter variable names.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
977,977,"5 0.2883164194639604, 0 0.12256049960967995, 6 0.12073900598490764, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
978,978,"5 0.2864949258391881, 4 0.12620348685922456, 1 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
979,979,"4 0.17679255610290093, 0 0.17104542966611933, 5 0.1384783798576902, 3 0.13847837985769018, 6 0.12889983579638756, 1 0.12315270935960594, 2 0.12315270935960594","[] create strbuilder apis similar to string.format(string, object...)"
980,980,"3 0.20259740259740255, 2 0.14199134199134197, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
981,981,"0 0.25968253968253974, 3 0.14857142857142858, 4 0.1367195767195767, 5 0.1219047619047619, 2 0.11746031746031746, 6 0.11746031746031746, 1 0.09820105820105823","add final modifier to local variables.avoid throwing checked exceptions from annotationutils.hashcode()additional javadoc; remove illegalargumentexception from throws clauseaddress the invalidity of null annotation membersadd hashcode and tostring methods to annotationutils, plus tests"
982,982,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",validation[] new type util features
983,983,"4 0.24384236453201968, 2 0.1403940886699507, 0 0.12315270935960593, 1 0.12315270935960593, 3 0.12315270935960593, 5 0.12315270935960593, 6 0.12315270935960593","moving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
984,984,"1 0.7023079170318435, 2 0.05881780114908948, 3 0.05609114811568799, 4 0.04859285227383388, 5 0.04654786249878275, 0 0.043821209465381254, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
985,985,"0 0.31285944329422594, 2 0.12606395215090868, 4 0.11801242236024843, 5 0.11801242236024843, 1 0.1083505866114562, 3 0.1083505866114562, 6 0.1083505866114562",use lowercase presentation for hex values as it is done in the jdk.use jdk functionality where available.use conversion tables for boolean arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
986,986,"5 0.26858150667674474, 4 0.13454270597127738, 3 0.12925170068027209, 0 0.12043335852859664, 1 0.11866969009826156, 6 0.11514235323759135, 2 0.11337868480725626",change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
987,987,"4 0.19211822660098518, 0 0.15188834154351394, 6 0.1461412151067323, 3 0.13081554460864808, 2 0.13081554460864805, 1 0.12506841817186648, 5 0.12315270935960594",[] add null-safe stringutils apis to wrapstringgetbytes([charset|string]).</action>
988,988,"0 0.2940061596778014, 2 0.14143567874911153, 4 0.12319355602937687, 6 0.11324330727315801, 1 0.11158493248045487, 3 0.10992655768775171, 5 0.10660980810234541",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
989,989,"5 0.27460317460317457, 1 0.1246031746031746, 6 0.1246031746031746, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
990,990,"0 0.20279554607912814, 3 0.15636105188343993, 6 0.1530443022980336, 2 0.1298270552001895, 5 0.1231935560293769, 4 0.12153518123667374, 1 0.11324330727315804",numberutilswithdecimalsparsing: eliminate redundant calculation of isdecimalpoint. (): performance improvements for numberutils.isparsable ()~2.5x performance increase wrt 3.4 version; added a couple checks more to unit tests
991,991,"3 0.3537076522151148, 6 0.10992655768775171, 2 0.10826818289504857, 4 0.10826818289504857, 0 0.10660980810234541, 1 0.10660980810234541, 5 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
992,992,"4 0.20279554607912814, 3 0.18455342335939348, 0 0.15967780146884622, 2 0.12485193082208004, 6 0.11324330727315804, 1 0.10826818289504858, 5 0.10660980810234542",deprecate systemutilsline_separator in favor of java.lang.systemlineseparatorremove redundant type arguments.add final modifier to local variables.eat own dog food: stringutilsisempty(string) and replace some but not all stringlength() == 0 with stringisempty()
993,993,"6 0.22274264897215715, 0 0.15716887848035385, 2 0.13348946135831377, 4 0.13348946135831377, 5 0.11891751236013534, 1 0.117096018735363, 3 0.117096018735363","<action issue="""" type=""fix"">stringescapeutils.escapejava() and escapeecmascript() do not output the escaped surrogate pairs that are java parsable</action>"
994,994,"3 0.1662337662337662, 2 0.1642135642135642, 4 0.146031746031746, 0 0.13189033189033192, 1 0.13189033189033192, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to method parameters.
995,995,"3 0.35873015873015873, 2 0.17956349206349206, 6 0.09761904761904762, 1 0.09484126984126984, 4 0.09067460317460319, 0 0.08928571428571429, 5 0.08928571428571429","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
996,996,"0 0.17989417989417988, 4 0.15260373155109996, 2 0.14090782511835145, 5 0.1370091896407686, 3 0.13311055416318576, 6 0.13116123642439434, 1 0.1253132832080201", added alternative checked exception wrapping/unwrapping methods
997,997,"0 0.4130472701901274, 2 0.12489098203383915, 3 0.10657596371882083, 4 0.09558695272980984, 6 0.09314495028780741, 1 0.08826094540380251, 5 0.07849293563579278","strsubstitutor can preserve escapesstrsubstitutor can now optionally preserve the escape character for anescaped reference, which is useful when substitution takes place inmultiple phases and some references are intentionally unresolved. priorto this change, an unresolved reference `${a}` and an escaped reference`$${a}` may result in the same string `${a}`, making it impossible foran additional substitution phase to distinguish between escapedreferences and non-escaped references.add final modifier to method parameters.[] added support for substitution in variable names."
998,998,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
999,999,"3 0.427540713254999, 2 0.10286538857967427, 1 0.09565038136466708, 4 0.09420737992166563, 6 0.09420737992166563, 0 0.0927643784786642, 5 0.0927643784786642","add final modifier to local variables.format.statement unnecessarily nested within else clause.\refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1000,1000,"2 0.3241079907746575, 0 0.17406050739384074, 3 0.14177180843847514, 4 0.11233211233211232, 6 0.11138244471577805, 5 0.07149640482973817, 1 0.0648487315153982","remove redundant modifiers (support recent checkstyle versions) ()add final modifier to local variables.use try-with-resources.formating.<action issue="""" type=""add"" dev=""ggregory"">add serializationutils.roundtrip(t extends serializable) to serialize then deserialize</action>add final modifier to local variables.suppress generic warningapplying sven ludwigs patch from . this modifies the serializationutils.clone method to use the threadcontextloader if it is unable to find a class using the objects current classloader. this should (hopefully) help with weblogic and tomcat situations where lang is outside the web-inf for some reason (likely user error with tomcat, by design for weblogic)checkstyle and trailing spaces.explain why it is safe to suppress the cast warning on serializationutils.clone()make serializationutils.clone() type-safe"
1001,1001,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",use stringisempty() instead of stringlength() == 0
1002,1002,"0 0.24642206609419723, 1 0.15534738485558153, 5 0.12802498048399688, 3 0.11891751236013533, 2 0.117096018735363, 4 0.117096018735363, 6 0.117096018735363",[] strlookup for system properties now sees updated values.the lookup implementation now directly accesses system properties withoutcaching the properties object in any way.
1003,1003,"2 0.22607022607022606, 4 0.20250120250120243, 0 0.1385281385281385, 1 0.10822510822510824, 3 0.10822510822510824, 5 0.10822510822510824, 6 0.10822510822510824",crlf -> lfjavadoc: fix typo but working is still awkward.simplify isempty be reusing getlengths/if (foo) { return true; } return false;/return foo;/g
1004,1004,"5 0.22262407072533658, 2 0.20715290335543501, 3 0.1424552943540285, 0 0.14104882459312837, 6 0.10307414104882459, 1 0.09322885272252363, 4 0.09041591320072336","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibilityadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1005,1005,"0 0.2418154761904762, 3 0.17410714285714282, 2 0.12723214285714282, 6 0.12028769841269843, 1 0.11334325396825398, 4 0.11160714285714288, 5 0.11160714285714288", enumutils *bitvector issue with more than 32 values enumthis add final modifier to local variables.[] permit bitvector generation for enums with > 64 values; plus some test corrections
1006,1006,"2 0.2774114774114774, 3 0.1372405372405372, 6 0.13040293040293038, 0 0.12185592185592188, 1 0.11330891330891332, 4 0.1098901098901099, 5 0.1098901098901099",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure placement of curly braces is consistent: dateutilstest.testlang530 fails for some timezones
1007,1007,"3 0.2188805346700083, 0 0.1428571428571428, 2 0.13505987190197713, 1 0.1272626009468115, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",add final modifier to local variables.[] vastly expanded typeutils
1008,1008,"5 0.16819827346143135, 4 0.16235032024505708, 0 0.1467557783347257, 2 0.14285714285714285, 6 0.12921191868560292, 1 0.1253132832080201, 3 0.1253132832080201","use term ""binary"" instead of ""boolarray"" in conversion. improve javadoc of class."
1009,1009,"6 0.21693121693121686, 3 0.15260373155109994, 4 0.12921191868560286, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
1010,1010,"2 0.15659340659340656, 6 0.15659340659340656, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737",the the patrol.validation
1011,1011,"4 0.6930402930402931, 0 0.0730972730972731, 3 0.062271062271062265, 5 0.04859584859584858, 2 0.04175824175824175, 1 0.041188441188441186, 6 0.04004884004884005","sort members.add final modifier to local variables.https://issues.apache.org/jira/browse/ stringutils methods do not handle unicode 2.0+ supplementary characters correctly.use index_not_found instead of magic number.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
1012,1012,"3 0.19494047619047616, 4 0.17237103174603174, 2 0.14459325396825395, 6 0.1324404761904762, 0 0.12896825396825395, 1 0.1150793650793651, 5 0.11160714285714289",remove redundant type arguments.add final modifier to local variables.[] add mode and median comparable... methods to objectutils
1013,1013,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1014,1014,"5 0.167254556143445, 0 0.15079365079365076, 2 0.15079365079365076, 6 0.13433274544385657, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323", simplify fastdateformat; eliminate boxing
1015,1015,"6 0.282010582010582, 2 0.12275132275132275, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
1016,1016,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
1017,1017,"4 0.4228884969625711, 0 0.10738781109151477, 6 0.10738781109151475, 2 0.09367038996668625, 1 0.09229864785420341, 3 0.08818342151675486, 5 0.08818342151675486","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687use index_not_found instead of magic number.moving the indexof(string, string, int) method above the ordinalindexof methods to put it with its overloaded peers. 590"
1018,1018,"6 0.26264880952380953, 2 0.1532738095238095, 0 0.12723214285714282, 4 0.12202380952380952, 1 0.11160714285714288, 3 0.11160714285714288, 5 0.11160714285714288",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd checknotnull method in reflectiontostringbuilder.java to fix 1132
1019,1019,"5 0.2755659640905543, 6 0.1371324486078584, 1 0.11891751236013534, 0 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1020,1020,"4 0.18084829560239393, 3 0.17902680197762164, 2 0.15534738485558156, 0 0.12802498048399688, 6 0.12256049960967996, 1 0.117096018735363, 5 0.117096018735363",extract method.add final modifier to local variables.[] stringutils join apis for primitives.
1021,1021,"5 0.2901379130887327, 4 0.12073900598490762, 1 0.11891751236013531, 6 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1022,1022,"3 0.35204927742241166, 2 0.11324330727315801, 4 0.10826818289504857, 0 0.10660980810234541, 1 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1023,1023,"4 0.2013366750208855, 2 0.15260373155109994, 5 0.13311055416318573, 1 0.1292119186856029, 3 0.1292119186856029, 0 0.12921191868560286, 6 0.12531328320802007","sort by method name.[] add exceptionutils.throwableoftype(throwable, class) andfriends."
1024,1024,"5 0.27645502645502645, 6 0.12830687830687829, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1025,1025,"5 0.2719229768410096, 6 0.14077543585740301, 1 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 4 0.11709601873536299",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1026,1026,"0 0.16931216931216928, 2 0.15079365079365076, 4 0.15079365079365076, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
1027,1027,"6 0.31192881192881194, 0 0.1284271284271284, 1 0.12337662337662335, 2 0.10990860990860993, 3 0.10990860990860993, 4 0.10822510822510824, 5 0.10822510822510824","make sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces in dateutilsadd dateutils.tocalendar(date, timezone)"
1028,1028,"3 0.32063492063492066, 2 0.1899159663865546, 1 0.11409897292250232, 4 0.10625583566760034, 6 0.10102707749766571, 0 0.08403361344537817, 5 0.08403361344537817","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsremove redundant type arguments.fixing crlfsstatement unnecessarily nested within else clause.merge branch remove_threadutils_compiler_warningsremove compiler warnings from threadutils. thanks to pascal schuhmacher.remove compiler warnings from threadutilsincorporated feedback from fabian, formatting adjusted, count >> 1 replaced with count / 2incorporated feedback from peteradd threadutils"
1029,1029,"2 0.17027417027417027, 3 0.1642135642135642, 4 0.14401154401154398, 1 0.13189033189033192, 0 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to method parameters.
1030,1030,"3 0.3769841269841271, 6 0.19253968253968254, 0 0.12809523809523807, 2 0.08476190476190473, 1 0.07365079365079366, 4 0.07253968253968256, 5 0.07142857142857144","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove unused constructor parameterformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesrename textstrategy to caseinsensitivetextstrategy per sebbs suggestion[] use the cache in fastdateparser correctly.add final modifier to local variables.tab police fastdateparser could use calendar.getdisplaynames for all text fieldsremove unnecessary keyvalue instances: fastdateparser could use calendar.getdisplaynames for all text fields"
1031,1031,"2 0.31608005521049004, 3 0.12445364619277663, 1 0.11801242236024842, 5 0.11479181044398433, 4 0.1115711985277203, 6 0.10835058661145619, 0 0.10674028065332414",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1032,1032,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",use not bool instead of bool == false
1033,1033,"2 0.2889822595704949, 0 0.20728291316526612, 3 0.16588857765328352, 6 0.09943977591036413, 4 0.08418923124805475, 5 0.07983193277310922, 1 0.07438530967942734","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: add support for varargs in constructorutils, memberutils, and methodutilsthis from github.a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables.add final modifier to method parameters.adding nopmd tags for various empty catch blockscheckstyle and trailing spaces.fix wrong cast.comment why ok to suppress the warningremove unnecessary castmove/comment suppresswarnings(unchecked)/refactor surrounding codeminimise scope of @suppresswarningsvararging constructor methods; much like the method ones were in methodutils. 396generics"
1034,1034,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
1035,1035,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",use stringisempty() instead of stringlength() == 0
1036,1036,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
1037,1037,"4 0.31724581724581724, 0 0.15508365508365504, 6 0.12054912054912051, 2 0.11154011154011151, 1 0.10253110253110254, 3 0.09652509652509654, 5 0.09652509652509654","sort members. ordinalindexof(""abc"", ""ab"", 1) gives incorrect answer of -1(correct answer should be 0)revert 1077 stringutils.ordinalindexof(""aaaaaa"", ""aa"", 2) != 3 in stringutilsmoving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classmoving countmatches, ordinalindexof and lastordinalindexof over to a charsequence-based api. 687"
1038,1038,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14525306978137167, 1 0.14315663372267148, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
1039,1039,"0 0.21498189919242547, 3 0.13505987190197713, 4 0.13311055416318573, 5 0.13311055416318573, 2 0.1311612364243943, 1 0.1272626009468115, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
1040,1040,"2 0.18037518037518033, 1 0.15007215007215002, 3 0.13795093795093796, 5 0.13593073593073596, 4 0.1339105339105339, 0 0.1318903318903319, 6 0.12987012987012986","adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
1041,1041,"3 0.2833862433862434, 2 0.1841269841269841, 4 0.12190476190476189, 1 0.11597883597883596, 6 0.10412698412698415, 0 0.09523809523809526, 5 0.09523809523809526","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsremove redundant type arguments.fixing crlfsstatement unnecessarily nested within else clause.incorporated feedback from fabian, formatting adjusted, count >> 1 replaced with count / 2incorporated feedback from peteradd threadutils"
1042,1042,"1 0.6968546109650402, 3 0.058817801149089466, 2 0.05677281137403835, 4 0.05200116856558573, 0 0.045866199240432365, 5 0.045866199240432365, 6 0.04382120946538124",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1043,1043,"0 0.40011614401858314, 4 0.12640340689121174, 2 0.09930313588850172, 6 0.09930313588850172, 5 0.09659310878823073, 3 0.09117305458768876, 1 0.08710801393728225",: multiple calls of org.apache.commons.lang3.concurrent.lazyinitializer.initialize() are possibleuse all uppercase name for constant: multiple calls of org.apache.commons.lang3.concurrent.lazyinitializer.initialize() are possibleminimal clean-up[] multiple calls oforg.apache.commons.lang3.concurrent.lazyinitializer.initialize() arepossible.
1044,1044,"6 0.19501133786848068, 0 0.14143990929705214, 5 0.14143990929705214, 4 0.13350340136054423, 2 0.13151927437641725, 1 0.12953514739229027, 3 0.1275510204081633",make use of existing timeunit class to manage time units.
1045,1045,"5 0.2901379130887327, 4 0.12256049960967993, 0 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1046,1046,"0 0.32605820105820105, 4 0.17019400352733682, 2 0.10229276895943563, 5 0.10229276895943563, 1 0.10074955908289242, 3 0.09920634920634921, 6 0.09920634920634921","reverting r1090111 - moving the text.translate escapers back from using range to replicating parts of the range api. see the list for details (unnecessary boxing in stringescapeutils etc), the move to range was an uncomfortable fit. moving text translation classes to the range class for its configuration"
1047,1047,"5 0.2701014832162373, 6 0.1316679677335415, 0 0.12802498048399685, 1 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",4fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1048,1048,"5 0.2950937950937951, 2 0.13516113516113512, 6 0.12506012506012504, 4 0.11495911495911496, 1 0.1132756132756133, 0 0.10822510822510822, 3 0.10822510822510822", simplify fastdateformat; eliminate boxingrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
1049,1049,"5 0.29216269841269843, 6 0.12723214285714282, 2 0.12549603174603174, 1 0.1150793650793651, 4 0.11507936507936509, 0 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
1050,1050,"6 0.2928409459021704, 5 0.17039196631033365, 2 0.16472303206997083, 3 0.12844185293164884, 4 0.08875931324910914, 0 0.07968901846452865, 1 0.07515387107223843",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1051,1051,"1 0.7153907976692785, 2 0.051537070524412296, 0 0.048724131002612005, 3 0.046614426361261806, 5 0.046614426361261806, 4 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1052,1052,"6 0.27667548500881833, 3 0.15476190476190474, 2 0.12698412698412695, 1 0.11926807760141091, 0 0.11618165784832449, 4 0.10692239858906527, 5 0.09920634920634923","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd dateutils.tocalendar(date, timezone)add final modifier to local variables.adding tocalendar method per 632"
1053,1053,"2 0.22874149659863938, 4 0.13151927437641722, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1054,1054,"1 0.6808288185533695, 2 0.06073567151411463, 4 0.06007033551943732, 3 0.05474764756201882, 6 0.0534169755726642, 5 0.0474289516205684, 0 0.04277159965782722",add final modifier to method parameters.remove redundant type arguments.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1055,1055,"0 0.3520192887281495, 2 0.1340164757886277, 1 0.1143258991360257, 4 0.10870002009242515, 6 0.10307414104882458, 3 0.0960417922443239, 5 0.0918223829616235", use iod for stripaccent init stringutils throws java.security.accesscontrolexception on google app enginechange static code to catch and save exception; only report failure if no method is availablereapplying more of olivers checkstyle fixes from r1083211checkstyleadding cedrik limes patch from ; adding unaccenting for java 1.3->1.5 via reflection usage of sun jvms
1056,1056,"5 0.2783068783068783, 6 0.12460317460317458, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1057,1057,"2 0.23913609159510796, 3 0.16991933385376004, 1 0.12073900598490764, 4 0.11891751236013533, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
1058,1058,"2 0.19698819698819697, 5 0.19698819698819697, 6 0.17846967846967843, 0 0.11579161579161576, 4 0.11151811151811149, 1 0.10724460724460722, 3 0.09299959299959301",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefullyapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1059,1059,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1060,1060,"3 0.18745275888133028, 0 0.16099773242630386, 2 0.14512471655328796, 5 0.14512471655328796, 6 0.1292517006802721, 1 0.11866969009826156, 4 0.11337868480725626",use validateistrue to validate argumentsreplaced private integer constants with private static enum.add final modifier to local variables.
1061,1061,"2 0.18577307466196352, 0 0.13844797178130513, 5 0.13844797178130513, 1 0.13639035861258086, 4 0.13639035861258086, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
1062,1062,"3 0.21198156682027647, 0 0.17972350230414744, 6 0.1474654377880184, 1 0.11520737327188942, 2 0.11520737327188942, 4 0.11520737327188942, 5 0.11520737327188942", fastdateparser could use calendar.getdisplaynames for all text fieldsremove unnecessary keyvalue instances: fastdateparser could use calendar.getdisplaynames for all text fields
1063,1063,"1 0.7125778581474784, 2 0.05224030540486237, 5 0.04872413100261201, 0 0.047317661241711884, 4 0.047317661241711884, 3 0.04661442636126182, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1064,1064,"3 0.20259740259740255, 2 0.13997113997114, 1 0.13795093795093796, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
1065,1065,"2 0.20169677066228792, 0 0.15763546798029557, 4 0.14805692391899286, 1 0.12315270935960596, 3 0.12315270935960596, 5 0.12315270935960596, 6 0.12315270935960596",extract logic for checking string representation of objects into separate methods
1066,1066,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1067,1067,"0 0.21778711484593838, 4 0.1965452847805789, 6 0.13935574229691877, 3 0.11974789915966387, 2 0.111577964519141, 5 0.10830999066293187, 1 0.10667600373482729",removes unnecessary class reference of static method calls which are declared in the same classprevent redundant modifiersremove redundant type arguments.null-guard[] new type util features
1068,1068,"3 0.28190476190476194, 2 0.19153439153439158, 4 0.1219047619047619, 1 0.11005291005291004, 6 0.10412698412698414, 0 0.09523809523809527, 5 0.09523809523809527","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsremove redundant type arguments.fixing crlfsstatement unnecessarily nested within else clause.incorporated feedback from fabian, formatting adjusted, count >> 1 replaced with count / 2incorporated feedback from peteradd threadutils"
1069,1069,"0 0.3355611250348093, 2 0.16012252854358117, 4 0.14452798663324978, 3 0.11138958507379558, 6 0.10651629072681702, 1 0.07435254803675853, 5 0.06752993595098859","sort members.make whitespace use after tokens consistent and add a checkstyle rule to enforce it.removes unnecessary class reference of static method calls which are declared in the same class: stringutils.stripaccents should remove accents from ""ł"" and ""ł"" ().reuseadd final modifier to local variables.simplifying the unaccent code to no longer support java 5 use iod for stripaccent init stringutils throws java.security.accesscontrolexception on google app enginedisplay both java6 and sun exceptions when neither is available for stripaccents stringutils throws java.security.accesscontrolexception on google app enginechange static code to catch and save exception; only report failure if no method is availablerewrap textreapplying more of olivers checkstyle fixes from r1083211"
1070,1070,"6 0.24172335600907027, 4 0.21950113378684805, 2 0.12267573696145123, 1 0.10997732426303855, 0 0.10204081632653061, 3 0.10204081632653061, 5 0.10204081632653061",make sure lines in files dont have trailing white spaces and remove all trailing white spaces: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
1071,1071,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
1072,1072,"2 0.18371546149323925, 4 0.14462081128747795, 1 0.13844797178130513, 3 0.13639035861258086, 0 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
1073,1073,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1074,1074,"3 0.34873252783700537, 1 0.11324330727315801, 2 0.10992655768775171, 4 0.10826818289504857, 0 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1075,1075,"6 0.31724581724581724, 3 0.16559416559416557, 4 0.113041613041613, 2 0.11003861003861003, 0 0.09952809952809953, 1 0.09802659802659804, 5 0.09652509652509654","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
1076,1076,"3 0.2046176046176046, 2 0.14199134199134197, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1077,1077,"5 0.28695436507936506, 6 0.12896825396825393, 2 0.12375992063492063, 4 0.11855158730158732, 0 0.1150793650793651, 1 0.1150793650793651, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
1078,1078,"1 0.7139843279083783, 2 0.05153707052441228, 5 0.049427365883062076, 0 0.046614426361261806, 3 0.046614426361261806, 4 0.046614426361261806, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1079,1079,"5 0.27275132275132274, 6 0.13015873015873017, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1080,1080,"2 0.23834325396825395, 0 0.18105158730158727, 6 0.12723214285714285, 1 0.1168154761904762, 3 0.11334325396825398, 4 0.11160714285714286, 5 0.11160714285714286",make whitespace use around generic tokens consistent and add a checkstyle rule to enforce it.9ability to throw checked exceptions without declaring them
1081,1081,"4 0.2282071298464741, 0 0.16809784022898774, 2 0.13531095498308612, 1 0.11709601873536302, 3 0.11709601873536302, 5 0.11709601873536302, 6 0.11709601873536302",sort members.: bring static method references in stringutils to consistent style. thanks to alex yursha
1082,1082,"0 0.16931216931216928, 2 0.1549088771310993, 4 0.14667842445620224, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
1083,1083,"3 0.15079365079365076, 4 0.15079365079365076, 6 0.15079365079365076, 5 0.14873603762492646, 1 0.13433274544385657, 0 0.1322751322751323, 2 0.1322751322751323",use validateistrue to validate arguments: there should be a differencebuilder with a reflectiondifferencebuilder implementation
1084,1084,"2 0.19159008632692837, 0 0.16624895572263987, 4 0.13505987190197716, 1 0.1292119186856029, 3 0.1272626009468115, 5 0.12531328320802007, 6 0.12531328320802007",[] add methods to classutils to get various forms of classnames in a null-safe manner
1085,1085,"0 0.29900793650793656, 3 0.15595238095238095, 2 0.1351190476190476, 4 0.11289682539682538, 6 0.10873015873015872, 5 0.09761904761904765, 1 0.0906746031746032","make the write*field impl match its in-line comment and not rely on the default behavior of writefield(field,target,value).a bit of dog food and a lot of javadoc tweakage[] add fieldutils getdeclaredfields() to return all the fields defined in the given class and super classes.add final modifier to local variables."
1086,1086,"5 0.27089947089947086, 6 0.13015873015873017, 1 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1087,1087,"2 0.20798319327731093, 6 0.20798319327731093, 4 0.1246498599439776, 0 0.12301587301587301, 1 0.12138188608776843, 3 0.10994397759103641, 5 0.10504201680672272",use final.remove trailing white spacesadded new vararg methods to insert values into an array at an index.this implements . this commit also deprecates the add() methodsthat inserted a single value into an array at an index.
1088,1088,"6 0.2823412698412699, 2 0.16845238095238094, 0 0.13095238095238093, 3 0.1128968253968254, 4 0.1115079365079365, 1 0.10456349206349207, 5 0.0892857142857143","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to method parameters.: add support for recursive comparison to equalsbuilderreflectionequals ()minimal clean-ups: remove getter methods, improve javadoc, add unit test for reflectionappend: recursive and reflective equalsbuilder ()patch by yathos ug"
1089,1089,"5 0.28467343221441577, 4 0.12256049960967995, 0 0.12073900598490764, 6 0.12073900598490764, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1090,1090,"2 0.18886198547215494, 3 0.18697874630078015, 5 0.12859833198816248, 0 0.12671509281678775, 1 0.12671509281678775, 4 0.12106537530266345, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
1091,1091,"6 0.19897959183673466, 3 0.13747165532879815, 1 0.13350340136054423, 2 0.13350340136054423, 5 0.13350340136054423, 0 0.13151927437641725, 4 0.13151927437641725",add sugar to randomiutils: new randumutils class. thanks to duncan jones
1092,1092,"6 0.21904761904761902, 3 0.14126984126984124, 4 0.13756613756613756, 0 0.13386243386243385, 1 0.12460317460317462, 2 0.12460317460317462, 5 0.11904761904761907","<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
1093,1093,"6 0.2905733722060253, 5 0.16812439261418852, 2 0.16358924522189827, 3 0.12390670553935858, 4 0.08875931324910914, 0 0.08649173955296402, 1 0.07855523161645611",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1094,1094,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1095,1095,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",: rounding utilities for converting to bigdecimal
1096,1096,"2 0.23469387755102034, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1097,1097,"4 0.2655122655122656, 3 0.17839105339105343, 2 0.1341991341991342, 0 0.12914862914862915, 1 0.10137085137085138, 5 0.09884559884559883, 6 0.09253246753246754"," there are no tests for charsequenceutils.regionmatchesuse final consistently. statement unnecessarily nested within else clause.adding dmitry katsubos patch from , providing charsequenceutils.regionmatches with a proper green implementation instead of inefficiently converting to stringsadd final modifier to method parameters.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)formattingmoving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils class"
1098,1098,"0 0.2956645344705046, 2 0.13811892916370525, 4 0.1231935560293769, 1 0.11324330727315803, 6 0.11324330727315803, 3 0.10992655768775174, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
1099,1099,"2 0.23270975056689333, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1100,1100,"2 0.20691609977324257, 5 0.14143990929705214, 1 0.1354875283446712, 3 0.13151927437641722, 4 0.12953514739229025, 0 0.12755102040816327, 6 0.12755102040816327",: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1101,1101,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1102,1102,"3 0.22675736961451243, 1 0.13151927437641722, 2 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
1103,1103,"0 0.3015873015873016, 4 0.1453876236484932, 6 0.12284334023464458, 2 0.11318150448585233, 1 0.10674028065332415, 3 0.10674028065332415, 5 0.10351966873706007","[] objectutils.identitytostring(object) and friends shouldallocate builders and buffers with a sizerefactor magic char.better exception message.use validatenotnull instead of ""throw new nullpointerexception"" add objectutils.toidentitystring methods that support stringbuilder, strbuilder, and appendable"
1104,1104,"3 0.36321195144724555, 6 0.10830999066293186, 1 0.10667600373482727, 2 0.10667600373482727, 0 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1105,1105,"3 0.20259740259740255, 2 0.144011544011544, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
1106,1106,"5 0.25006105006105006, 3 0.16630036630036624, 2 0.12356532356532357, 6 0.12356532356532354, 1 0.11672771672771672, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1107,1107,"2 0.251494537208823, 4 0.1894454751597609, 0 0.13461142032570603, 3 0.12162440733869304, 5 0.1071943929086786, 1 0.09997938569367143, 6 0.0956503813646671","sort members.make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: stringutilsisanyempty and isanyblank should return false for an empty array (): add stringutilsisanynotempty and isanynotblank ()use final consistently. applying alexander muthmanns patch from , adding isblank/isempty charsequence... variants"
1108,1108,"3 0.3195011337868481, 4 0.13061224489795917, 6 0.11791383219954645, 1 0.11315192743764173, 0 0.10839002267573697, 2 0.10839002267573697, 5 0.10204081632653061","remove redundant type arguments.add final modifier to local variables.promote uniformity between branches by using registry accessorunused imports + uh, why would you synchronize access to a threadlocal? :p[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
1109,1109,"2 0.20238095238095236, 3 0.15238095238095234, 0 0.13756613756613756, 4 0.13386243386243385, 1 0.1283068783068783, 6 0.12645502645502646, 5 0.11904761904761907",: please add number to byte[] methods. suggested by lilianne e. blaze. final patch from vincent ricard (with thanks to henri yandell).
1110,1110,"2 0.28904249871991805, 6 0.13133640552995388, 1 0.11699948796722992, 3 0.11699948796722992, 0 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894",": add support for varargs in constructorutils, memberutils, and methodutilsthis from github.crlf -> lfjavadoc: fix typo but working is still awkward."
1111,1111,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14734950584007186, 1 0.14106019766397127, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
1112,1112,"0 0.1915900863269284, 2 0.14480646059593427, 5 0.14285714285714282, 1 0.13505987190197713, 3 0.13311055416318573, 4 0.1272626009468115, 6 0.12531328320802007","applying sebbs patch from - adding isstarted, issuspended and isstopped to stopwatch"
1113,1113,"6 0.2872503840245776, 5 0.1367127496159754, 0 0.11520737327188942, 1 0.11520737327188942, 2 0.11520737327188942, 3 0.11520737327188942, 4 0.11520737327188942",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
1114,1114,"3 0.21269841269841264, 1 0.1339105339105339, 2 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
1115,1115,"5 0.291959406713505, 4 0.12073900598490762, 6 0.11891751236013531, 0 0.11709601873536299, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1116,1116,"6 0.22089947089947087, 3 0.14497354497354495, 4 0.1431216931216931, 0 0.12645502645502646, 1 0.12275132275132278, 2 0.12275132275132278, 5 0.11904761904761907","<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
1117,1117,"4 0.4073386930529788, 2 0.1071943929086786, 1 0.1028653885796743, 0 0.10286538857967428, 6 0.09420737992166565, 3 0.09276437847866421, 5 0.09276437847866421","moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classreplacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
1118,1118,"6 0.20096371882086164, 3 0.1414399092970521, 5 0.13945578231292516, 0 0.13151927437641725, 2 0.12953514739229027, 4 0.12953514739229027, 1 0.1275510204081633"," partial: implement format u for fastdateformat, day number of week"
1119,1119,"1 0.69617294770669, 3 0.059499464407439855, 2 0.058136137890739105, 4 0.05268283182393612, 5 0.045184535982082004, 0 0.04450287272373163, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1120,1120,"2 0.2495894909688013, 3 0.12889983579638753, 6 0.126984126984127, 1 0.12506841817186645, 0 0.12315270935960591, 4 0.12315270935960591, 5 0.12315270935960591",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
1121,1121,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",validation[] new type util features
1122,1122,"5 0.2901379130887327, 0 0.12256049960967993, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 4 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1123,1123,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",validation[] new type util features
1124,1124,"0 0.21181368722352326, 4 0.16627634660421542, 2 0.13713244860785842, 6 0.12620348685922456, 1 0.12438199323445225, 3 0.117096018735363, 5 0.117096018735363",: typeutils.tostring() doesnt handle primitive and object arrays correctlyapply patch by aaron digulla[] new type util features
1125,1125,"6 0.24716553287981857, 4 0.2211915069057926, 3 0.14615543186971755, 2 0.10142238713667284, 1 0.09709338280766852, 0 0.09420737992166563, 5 0.0927643784786642",make sure lines in files dont have trailing white spaces and remove all trailing white spacesformat to 120 line length.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
1126,1126,"6 0.18298891883797538, 0 0.14315663372267146, 1 0.1347708894878706, 2 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706, 5 0.1347708894878706",[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
1127,1127,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",: rounding utilities for converting to bigdecimal
1128,1128,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
1129,1129,"0 0.17715419501133783, 4 0.15136054421768702, 2 0.14937641723356007, 1 0.13747165532879818, 3 0.12953514739229025, 5 0.12755102040816327, 6 0.12755102040816327","add hashcode and tostring methods to annotationutils, plus tests"
1130,1130,"0 0.253734827264239, 4 0.188375350140056, 2 0.13281979458450044, 1 0.10994397759103644, 3 0.1050420168067227, 5 0.1050420168067227, 6 0.1050420168067227","lan-1114 fixes bug in typeutils.equals(wildcardtype, type) where it was incorrectly returning true when the second argument was not a wildcard type.typeutils wildcard fixes[] new type util features"
1131,1131,"3 0.2080200501253133, 2 0.18170426065162906, 4 0.16562238930659984, 0 0.14807852965747703, 6 0.1012949039264829, 1 0.09837092731829576, 5 0.0969089390142022",explicit type parameters can be removedremove redundant type arguments.add final modifier to local variables.add final modifier to method parameters.[] [] fix related bugs dealing with type variable inheritance[] vastly expanded typeutils
1132,1132,"3 0.16825396825396824, 2 0.1642135642135642, 4 0.146031746031746, 1 0.13189033189033192, 0 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to method parameters.
1133,1133,"3 0.15079365079365076, 4 0.15079365079365076, 6 0.15079365079365076, 5 0.14256319811875365, 1 0.1405055849500294, 0 0.1322751322751323, 2 0.1322751322751323",use validateistrue to validate arguments: there should be a differencebuilder with a reflectiondifferencebuilder implementation
1134,1134,"5 0.19841269841269846, 2 0.1955636955636956, 6 0.17704517704517705, 4 0.11579161579161579, 0 0.11009361009361009, 1 0.11009361009361009, 3 0.09299959299959303",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefullyapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1135,1135,"0 0.18509070294784577, 1 0.15532879818594097, 4 0.13747165532879818, 3 0.13350340136054423, 2 0.13151927437641722, 5 0.12953514739229025, 6 0.12755102040816327",": add archutils - an utility class for the ""os.arch"" system property ()"
1136,1136,"5 0.291959406713505, 6 0.12073900598490764, 4 0.11891751236013533, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1137,1137,"5 0.29378090033827736, 0 0.11891751236013531, 4 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1138,1138,"6 0.2681577681577682, 3 0.13852813852813853, 0 0.13011063011063012, 2 0.12337662337662338, 5 0.12337662337662338, 1 0.10822510822510827, 4 0.10822510822510827",make sure lines in files dont have trailing white spaces and remove all trailing white spacesfixing crlfsstatement unnecessarily nested within else clause. code refactoring in numberutils
1139,1139,"0 0.17835497835497832, 2 0.141991341991342, 5 0.141991341991342, 4 0.13997113997114, 1 0.137950937950938, 3 0.1298701298701299, 6 0.1298701298701299",[] add apis classutils.isprimitivewrapper(class<?>) and isprimitiveorwrapper(class<?>)
1140,1140,"4 0.2133440947000269, 2 0.14743072370191013, 5 0.13801452784503632, 1 0.13236481033091207, 3 0.12483185364541301, 0 0.12294861447403825, 6 0.12106537530266348",sort members.applying joanne polskys patch adding appendifmissing/prependifmissing methods to stringutils []
1141,1141,"2 0.1536388140161725, 5 0.1536388140161725, 6 0.1536388140161725, 0 0.13477088948787064, 1 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
1142,1142,"6 0.1878306878306878, 1 0.15079365079365076, 0 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",: fastdateprinter generates date objects wastefully168
1143,1143,"0 0.16313932980599644, 4 0.1549088771310993, 2 0.15285126396237506, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
1144,1144,"0 0.27088554720133673, 3 0.1451545530492899, 2 0.13930659983291563, 4 0.13930659983291563, 6 0.11006683375104426, 1 0.09837092731829576, 5 0.0969089390142022","a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables.[] methodutils.invoke*(*, object... args) variants cannot handle null valuesmoving most of the methods over to varargs. a couple cant change because they are object[], class[] with both end parameters ideally wanting to be vararg. 396"
1145,1145,"5 0.28015873015873005, 1 0.12275132275132275, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1146,1146,"6 0.2674721629945511, 3 0.1712864250177683, 4 0.12153518123667377, 2 0.11987680644397061, 0 0.10660980810234545, 1 0.10660980810234545, 5 0.10660980810234545",make sure lines in files dont have trailing white spaces and remove all trailing white spacesformat to 120 line length.add final modifier to local variables.
1147,1147,"6 0.3201465201465202, 5 0.13040293040293038, 0 0.1098901098901099, 1 0.1098901098901099, 2 0.1098901098901099, 3 0.1098901098901099, 4 0.1098901098901099",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
1148,1148,"1 0.7132810930279283, 2 0.05153707052441228, 5 0.04872413100261202, 4 0.04802089612216195, 3 0.04731766124171188, 0 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1149,1149,"3 0.22660098522167488, 6 0.1403940886699507, 1 0.13464696223316913, 0 0.12889983579638756, 2 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","tab alignment[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
1150,1150,"6 0.25210084033613445, 3 0.19327731092436973, 2 0.1279178338001867, 1 0.11157796451914101, 0 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227",make sure lines in files dont have trailing white spaces and remove all trailing white spacesfixing crlfsstatement unnecessarily nested within else clause.add final modifier to local variables.
1151,1151,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter."
1152,1152,"0 0.2063492063492063, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",deprecate systemutilsline_separator in favor of java.lang.systemlineseparator
1153,1153,"2 0.21056547619047616, 0 0.16716269841269837, 4 0.1515376984126984, 6 0.13070436507936506, 1 0.1150793650793651, 5 0.11334325396825398, 3 0.11160714285714288",removes unnecessary class reference of static method calls which are declared in the same classcrlf -> lfjavadoc: fix typo but working is still awkward.
1154,1154,"5 0.26904761904761904, 6 0.13015873015873014, 1 0.1246031746031746, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1155,1155,"3 0.39087301587301587, 2 0.10846560846560847, 1 0.10383597883597884, 0 0.09920634920634921, 4 0.09920634920634921, 5 0.09920634920634921, 6 0.09920634920634921","add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1156,1156,"4 0.7195767195767196, 3 0.06076639409972742, 5 0.048981882315215636, 0 0.04505371172037838, 2 0.043370210036876695, 1 0.04112554112554113, 6 0.041125541125541114","sort members.[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
1157,1157,"5 0.269047619047619, 6 0.132010582010582, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1158,1158,"3 0.32519332519332517, 6 0.2041107041107041, 2 0.10297110297110294, 1 0.09299959299959301, 0 0.09157509157509158, 4 0.09157509157509158, 5 0.09157509157509158","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove unused constructor parameterformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1159,1159,"4 0.21683673469387751, 6 0.13945578231292516, 0 0.13350340136054423, 1 0.1275510204081633, 2 0.1275510204081633, 3 0.1275510204081633, 5 0.1275510204081633",sort members.[] stringutils join apis for primitives.
1160,1160,"0 0.15363881401617246, 6 0.15154237795747225, 4 0.1494459418987721, 5 0.13896376160527107, 3 0.13686732554657086, 1 0.1347708894878706, 2 0.1347708894878706",[] prefer throwable.getcause() in exceptionutils.getcause() ()
1161,1161,"2 0.3209109730848861, 3 0.13089487002530478, 1 0.11640211640211638, 5 0.11157119852772025, 4 0.10996089256958823, 6 0.10674028065332414, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1162,1162,"2 0.25396825396825395, 3 0.1550099206349206, 6 0.13070436507936506, 4 0.12375992063492063, 0 0.11334325396825398, 1 0.11160714285714288, 5 0.11160714285714288","make sure placement of curly braces is consistentadd final modifier to method parameters.: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
1163,1163,"6 0.2602280348759223, 3 0.14285714285714285, 0 0.1365973619494746, 5 0.12877263581488935, 2 0.12720769058797227, 1 0.10373351218421643, 4 0.10060362173038231",make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse validateistrue to validate argumentsfixing crlfsstatement unnecessarily nested within else clause.using validate where possible in math package. code refactoring in numberutils
1164,1164,"0 0.18132902878665585, 4 0.17567931127253159, 2 0.14366424535916061, 3 0.13236481033091202, 1 0.12483185364541298, 5 0.12106537530266345, 6 0.12106537530266345", add a null-safe compare() method to objectutilsadd methods for cloneables to objectutils ().
1165,1165,"3 0.20238095238095233, 2 0.20052910052910047, 1 0.12089947089947091, 0 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",: add nul byte to charutils. thanks to beluga behr.add final modifier to local variables.
1166,1166,"5 0.2883164194639604, 4 0.12620348685922456, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1167,1167,"1 0.7118746232670283, 2 0.055053244926662644, 0 0.047317661241711884, 3 0.047317661241711884, 4 0.04661442636126182, 5 0.04661442636126182, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1168,1168,"2 0.18371546149323925, 4 0.14050558495002943, 1 0.13844797178130513, 3 0.13844797178130513, 0 0.13433274544385657, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
1169,1169,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1170,1170,"0 0.21181368722352328, 4 0.16809784022898774, 2 0.14441842310694766, 1 0.12073900598490767, 6 0.12073900598490767, 3 0.11709601873536302, 5 0.11709601873536302",: typeutils.tostring() doesnt handle primitive and object arrays correctlyapply patch by aaron digulla[] new type util features
1171,1171,"6 0.254421768707483, 4 0.200453514739229, 2 0.11950113378684807, 3 0.11791383219954646, 1 0.10362811791383222, 0 0.10204081632653063, 5 0.10204081632653063",make sure lines in files dont have trailing white spaces and remove all trailing white spaces: add methods for removing all invalid characters according to xml 1.0 and xml 1.1 in an input string to stringescapeutils. thanks to adam hooper
1172,1172,"1 0.690719641639887, 3 0.06904275002434511, 2 0.05745447463238873, 5 0.048592852273833864, 4 0.04586619924043238, 0 0.04450287272373163, 6 0.043821209465381254",add final modifier to local variables.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1173,1173,"0 0.16931216931216928, 3 0.15079365079365076, 4 0.1487360376249265, 2 0.13433274544385657, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
1174,1174,"4 0.40405866988145467, 6 0.11432589913602569, 0 0.11010648985332526, 1 0.0960417922443239, 2 0.09463532248342375, 3 0.09041591320072334, 5 0.09041591320072334","sort members.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
1175,1175,"6 0.22460317460317458, 4 0.14497354497354498, 2 0.13015873015873014, 3 0.1283068783068783, 0 0.12645502645502646, 1 0.12645502645502646, 5 0.11904761904761907","<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
1176,1176,"4 0.2755659640905542, 6 0.13348946135831377, 0 0.12256049960967995, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 5 0.117096018735363","wsmoving the indexof(string, string, int) method above the ordinalindexof methods to put it with its overloaded peers. 590"
1177,1177,"3 0.35536602700781794, 2 0.11158493248045487, 0 0.10660980810234541, 1 0.10660980810234541, 4 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1178,1178,"2 0.26202686202686204, 3 0.17997557997557995, 6 0.11501831501831503, 1 0.11330891330891332, 0 0.10989010989010989, 4 0.10989010989010989, 5 0.10989010989010989",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsfixing crlfsstatement unnecessarily nested within else clause.add threadutils
1179,1179,"5 0.25860805860805863, 3 0.16971916971916967, 2 0.12185592185592187, 6 0.11501831501831503, 1 0.11330891330891332, 4 0.1115995115995116, 0 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1180,1180,"6 0.17879604672057495, 0 0.14734950584007186, 1 0.1347708894878706, 2 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706, 5 0.1347708894878706",[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
1181,1181,"4 0.30217519106408, 0 0.14030962179110326, 3 0.13756613756613756, 6 0.12247697432882616, 1 0.10875955320399763, 2 0.10052910052910054, 5 0.08818342151675487","validates string.format without arguments ()while calling string.format(""some string"") without any additionalarguments is not technically wrong, its redundant, as it justreturns the same string.removing these calls and just using the string instead both cleans upthe code and offers a (very slight) performance gain.: validate: add inclusivebetween and exclusivebetween overloads for primitives types. initial patch provided by sebb."
1182,1182,"1 0.7167972674301788, 2 0.0494273658830621, 5 0.048724131002612026, 3 0.047317661241711884, 4 0.04731766124171187, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1183,1183,"2 0.2510088781275222, 6 0.13424804950228675, 4 0.13048157115953724, 0 0.12106537530266345, 1 0.12106537530266345, 3 0.12106537530266345, 5 0.12106537530266345",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
1184,1184,"3 0.17613927291346645, 4 0.15463389656938042, 1 0.1474654377880184, 2 0.1474654377880184, 0 0.14388120839733742, 5 0.11520737327188942, 6 0.11520737327188942",[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.
1185,1185,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
1186,1186,"6 0.19137466307277626, 0 0.13477088948787064, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064", fastdateparser does not handle excess hours as per simpledateformat
1187,1187,"4 0.16931216931216925, 6 0.16725455614344498, 3 0.13433274544385657, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 5 0.1322751322751323",remove redundant type arguments.
1188,1188,"0 0.2728854098717112, 2 0.21200260926288322, 6 0.1100239182430963, 1 0.10545770819743423, 3 0.10393563818221353, 4 0.09784735812133073, 5 0.09784735812133073",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.making unescapehtml _not_ escape unfinished numeric entities by default (it ignores them); however adding options that will fire an exception or unescape the numeric entity. 710
1189,1189,"3 0.15079365079365076, 4 0.15079365079365076, 6 0.15079365079365076, 5 0.14462081128747795, 1 0.13844797178130513, 0 0.1322751322751323, 2 0.1322751322751323",use validateistrue to validate arguments: there should be a differencebuilder with a reflectiondifferencebuilder implementation
1190,1190,"0 0.21888053467000831, 2 0.13311055416318573, 3 0.13311055416318573, 1 0.1311612364243943, 5 0.1311612364243943, 4 0.1272626009468115, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
1191,1191,"6 0.2911502500543596, 2 0.19982604914111762, 5 0.1130680582735377, 3 0.10089149815177213, 1 0.09936942813655143, 0 0.09784735812133073, 4 0.09784735812133073",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
1192,1192,"5 0.29216269841269843, 6 0.12896825396825395, 2 0.12723214285714285, 4 0.1150793650793651, 1 0.113343253968254, 0 0.11160714285714289, 3 0.11160714285714289",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
1193,1193,"5 0.28695436507936506, 6 0.12896825396825393, 1 0.12375992063492065, 2 0.12028769841269842, 4 0.1150793650793651, 0 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
1194,1194,"5 0.2846734322144158, 4 0.12438199323445227, 0 0.11891751236013534, 1 0.11891751236013534, 6 0.11891751236013534, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1195,1195,"3 0.3607709750566893, 6 0.11315192743764171, 0 0.10680272108843539, 2 0.10680272108843539, 1 0.1052154195011338, 4 0.1052154195011338, 5 0.10204081632653061","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezones"
1196,1196,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1197,1197,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
1198,1198,"3 0.23469387755102036, 0 0.12755102040816327, 1 0.12755102040816327, 2 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.incorporated feedback from peteradd threadutils
1199,1199,"6 0.2908777969018933, 5 0.1985083189902467, 3 0.14496079556320518, 2 0.0981067125645439, 0 0.09141327213616372, 1 0.09007458405048768, 4 0.08605851979345958",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1200,1200,"2 0.20423280423280418, 3 0.17460317460317454, 0 0.13571428571428568, 1 0.1283068783068783, 4 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",fix typos in commentssuppress warning about vararg usage.add final modifier to local variables.
1201,1201,"0 0.16931216931216928, 2 0.15490887713109933, 4 0.14667842445620224, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
1202,1202,"3 0.31473922902494333, 4 0.12902494331065756, 6 0.12267573696145122, 1 0.1163265306122449, 2 0.10997732426303858, 0 0.10521541950113378, 5 0.10204081632653063","remove redundant type arguments.add final modifier to local variables.promote uniformity between branches by using registry accessorunused imports + uh, why would you synchronize access to a threadlocal? :p[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
1203,1203,"2 0.18697874630078015, 3 0.18321226795803064, 1 0.13424804950228678, 4 0.12671509281678775, 5 0.12483185364541298, 0 0.12294861447403822, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
1204,1204,"4 0.219047619047619, 6 0.14867724867724863, 2 0.13941798941798936, 0 0.1283068783068783, 1 0.12275132275132276, 3 0.12275132275132276, 5 0.11904761904761905","removing the unnecessary sequencetostring methodmoving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
1205,1205,"3 0.1553065670712729, 6 0.14441332088390912, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",format.
1206,1206,"4 0.1700295937584073, 1 0.15873015873015872, 0 0.15496368038740918, 6 0.1380145278450363, 2 0.13236481033091207, 3 0.124831853645413, 5 0.12106537530266347",: validate: add inclusivebetween and exclusivebetween overloads for primitives types. initial patch provided by sebb.
1207,1207,"4 0.19897959183673466, 0 0.16326530612244894, 1 0.1275510204081633, 2 0.1275510204081633, 3 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
1208,1208,"2 0.22456414259692944, 3 0.18084829560239393, 1 0.12256049960967996, 4 0.12073900598490765, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
1209,1209,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1210,1210,"6 0.21693121693121686, 3 0.1526037315510999, 4 0.1292119186856029, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
1211,1211,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
1212,1212,"5 0.2810304449648711, 4 0.12802498048399688, 0 0.12073900598490762, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1213,1213,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1214,1214,"0 0.17318594104308385, 4 0.15929705215419498, 2 0.14540816326530612, 1 0.1374716553287982, 3 0.12953514739229025, 5 0.12755102040816327, 6 0.12755102040816327","add hashcode and tostring methods to annotationutils, plus tests"
1215,1215,"5 0.27460317460317457, 1 0.1246031746031746, 6 0.1246031746031746, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1216,1216,"3 0.18783068783068776, 5 0.15079365079365076, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 6 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
1217,1217,"6 0.30818070818070814, 0 0.12014652014652015, 5 0.11843711843711845, 4 0.11672771672771674, 1 0.11330891330891332, 2 0.11330891330891332, 3 0.10989010989010989",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
1218,1218,"6 0.2752715121136174, 5 0.2284878863826232, 3 0.11737677527151208, 2 0.09690893901420218, 0 0.09398496240601505, 1 0.09398496240601505, 4 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateformats ""z"" pattern does not respect timezone of calendar instances passed to format()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1219,1219,"5 0.1590241034685479, 0 0.15079365079365076, 3 0.14462081128747797, 4 0.1425631981187537, 1 0.13639035861258086, 2 0.13433274544385657, 6 0.1322751322751323",[] added timedsemaphore class to concurrent package.
1220,1220,"5 0.2791635172587553, 6 0.15217939027462832, 1 0.11514235323759134, 0 0.11337868480725624, 2 0.11337868480725624, 3 0.11337868480725624, 4 0.11337868480725624", fastdateparser and fastdateprinter support x formatapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1221,1221,"4 0.1662337662337662, 6 0.1662337662337662, 3 0.14805194805194805, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 5 0.12987012987012989",remove redundant type arguments.format.
1222,1222,"5 0.2496392496392497, 3 0.15873015873015872, 6 0.1317941317941318, 2 0.13011063011063012, 1 0.11327561327561331, 0 0.10822510822510825, 4 0.10822510822510825",add final modifier to local variables.trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1223,1223,"2 0.32252127904301814, 3 0.1212330342765125, 5 0.11479181044398434, 4 0.11318150448585232, 1 0.1131815044858523, 6 0.10996089256958821, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1224,1224,"0 0.17191283292978207, 2 0.15873015873015875, 6 0.15496368038740918, 4 0.13801452784503632, 3 0.1285983319881625, 1 0.12671509281678778, 5 0.12106537530266348","functions.java whitspacesreplace tabs with four spaces, as per the projects checkstyle rules.added functions.trywithresources."
1225,1225,"6 0.1969954648526077, 5 0.14342403628117908, 3 0.1414399092970521, 2 0.13151927437641725, 4 0.13151927437641725, 0 0.1275510204081633, 1 0.1275510204081633"," partial: implement format u for fastdateformat, day number of week"
1226,1226,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
1227,1227,"3 0.1863711001642036, 0 0.14422550629447184, 2 0.14422550629447184, 5 0.14039408866995073, 6 0.1365626710454297, 1 0.12506841817186648, 4 0.12315270935960596",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
1228,1228,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1229,1229,"5 0.2932728647014361, 2 0.12925170068027209, 1 0.11690602166792645, 4 0.11690602166792645, 0 0.11514235323759134, 6 0.11514235323759134, 3 0.11337868480725624", simplify fastdateformat; eliminate boxingrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1230,1230,"5 0.27460317460317457, 6 0.12830687830687829, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1231,1231,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1232,1232,"2 0.33681235051098063, 0 0.1358991085018482, 1 0.1130680582735377, 3 0.1130680582735377, 4 0.10545770819743425, 5 0.09784735812133075, 6 0.09784735812133075",formatting fixes perhttps://patch-diff.githubusercontent.com/raw/apache/commons-lang/pull/128.diffcrlf -> lfjavadoc: fix typo but working is still awkward. - add issorted() to arrayutils. patch supplied by james sawle. in github.
1233,1233,"2 0.260425073984396, 4 0.13048157115953724, 0 0.12294861447403821, 6 0.12294861447403821, 1 0.12106537530266344, 3 0.12106537530266344, 5 0.12106537530266344",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
1234,1234,"3 0.2154566744730679, 0 0.1772053083528493, 6 0.1334894613583138, 1 0.12256049960967998, 2 0.11709601873536302, 4 0.11709601873536302, 5 0.11709601873536302",statement unnecessarily nested within else clause.wsfix brace positionsimproving test coverage.changing eol-style to native.misc. event utils.
1235,1235,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1236,1236,"2 0.23072562358276635, 4 0.13151927437641722, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1237,1237,"0 0.23296703296703294, 3 0.17826617826617824, 2 0.14065934065934066, 1 0.11843711843711845, 4 0.10989010989010989, 5 0.10989010989010989, 6 0.10989010989010989",add final modifier to local variables.adding vincent ricards patch to charrange.java providing an iterator that lets you walk the chars in the range. 454
1238,1238,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1239,1239,"5 0.2727513227513227, 6 0.12830687830687829, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1240,1240,"5 0.29922779922779924, 0 0.13706563706563704, 1 0.12955812955812954, 2 0.11604461604461601, 4 0.11154011154011152, 3 0.11003861003861, 6 0.09652509652509654","change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
1241,1241,"6 0.17250673854447435, 2 0.14734950584007186, 3 0.13896376160527107, 1 0.13686732554657086, 0 0.1347708894878706, 4 0.1347708894878706, 5 0.1347708894878706",add sugar to randomiutils
1242,1242,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1243,1243,"0 0.18571428571428567, 4 0.16534391534391532, 2 0.14126984126984127, 1 0.13756613756613756, 3 0.12830687830687829, 5 0.12089947089947092, 6 0.12089947089947092",adding nelson carpentiers patch adding an enumset to bit vector (and back again) to enumutils. 730
1244,1244,"6 0.17250673854447435, 5 0.14734950584007186, 4 0.14106019766397124, 0 0.1347708894878706, 1 0.1347708894878706, 2 0.1347708894878706, 3 0.1347708894878706",tab police (and trailing spaces)
1245,1245,"3 0.19262846381490448, 2 0.18132902878665585, 1 0.13048157115953726, 0 0.13048157115953724, 5 0.12294861447403822, 4 0.12106537530266345, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
1246,1246,"0 0.17989417989417986, 1 0.15455304928989136, 3 0.1448064605959343, 2 0.13505987190197719, 4 0.13311055416318576, 5 0.12726260094681152, 6 0.1253132832080201","use final.: add archutils - an utility class for the ""os.arch"" system property ()"
1247,1247,"4 0.383947289607667, 0 0.1554357592093441, 3 0.10302485774183885, 2 0.09988020365378854, 1 0.09883198562443843, 5 0.08310871518418686, 6 0.07577118897873614","add final modifier to local variables.renaming the newly public pad(int, char) method to repeat(char, int) [note the swap of param order]. ive also pulled the faster implementation out of repeat(string, int). make the pad method public. i can use this now :) ! the method used to be private and named padding. it is used internally and covered by unit tests through leftpad(), rightpad() and repeat().rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
1248,1248,"2 0.2660747914985203, 1 0.12671509281678775, 4 0.12294861447403822, 0 0.12106537530266345, 3 0.12106537530266345, 5 0.12106537530266345, 6 0.12106537530266345",crlf -> lfjavadoc: fix typo but working is still awkward.swap and shift for arrays
1249,1249,"0 0.20861678004535142, 3 0.18745275888133023, 2 0.14688838498362303, 1 0.11690602166792644, 4 0.11337868480725623, 5 0.11337868480725623, 6 0.11337868480725623",add final modifier to local variables.convert to java 5 enhanced loops. javadocremove unnecessary cast[] vastly expanded typeutils
1250,1250,"2 0.24575807334428024, 1 0.12889983579638753, 6 0.12889983579638753, 3 0.126984126984127, 0 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
1251,1251,"3 0.15363881401617246, 4 0.15363881401617246, 6 0.15363881401617246, 0 0.1347708894878706, 1 0.1347708894878706, 2 0.1347708894878706, 5 0.1347708894878706",use validateistrue to validate arguments
1252,1252,"2 0.30461073318216175, 6 0.20011337868480725, 3 0.11810279667422523, 1 0.11148904006046861, 0 0.09429327286470143, 4 0.08635676492819352, 5 0.0850340136054422",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.new test caseexplanations about algorithmtabs replaced by spacesnew tests addedswap and shift for arrays
1253,1253,"5 0.21840466144263615, 2 0.20152702431183445, 3 0.14808117339762908, 0 0.13964235483222823, 6 0.10166767128792448, 1 0.09885473176612418, 4 0.0918223829616235","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibilityadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1254,1254,"0 0.1536388140161725, 2 0.14734950584007192, 4 0.14734950584007192, 1 0.14106019766397127, 3 0.14106019766397127, 5 0.13477088948787064, 6 0.13477088948787064",: enumutils.getenumignorecase and isvalidenumignorecase methods added ()
1255,1255,"3 0.33628645256552236, 2 0.1941675895164267, 4 0.10631229235880396, 6 0.10114433370247321, 0 0.09468438538205977, 1 0.08434846806939832, 5 0.08305647840531563","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.dont need a copy of this field.add final modifier to local variables.remove redundant type arguments.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1256,1256,"6 0.21693121693121686, 3 0.15650236702868278, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
1257,1257,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1258,1258,"0 0.1693121693121693, 2 0.15285126396237506, 4 0.1487360376249265, 1 0.13227513227513232, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",: new methods for lang3.validatethis from github.
1259,1259,"1 0.7125778581474782, 2 0.05364677516576251, 3 0.04802089612216195, 5 0.04731766124171188, 0 0.046614426361261806, 4 0.046614426361261806, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1260,1260,"5 0.2727513227513227, 6 0.12830687830687829, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1261,1261,"0 0.19126984126984126, 4 0.17645502645502642, 6 0.13571428571428568, 1 0.13386243386243382, 2 0.12460317460317462, 3 0.11904761904761907, 5 0.11904761904761907",: provide methods to retrieve all fields/methods annotated with a specific type. thanks to alexander müller.
1262,1262,"3 0.3517857142857143, 2 0.18511904761904763, 6 0.09900793650793649, 1 0.09623015873015874, 0 0.0892857142857143, 4 0.0892857142857143, 5 0.0892857142857143","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1263,1263,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
1264,1264,"6 0.1910430839002267, 0 0.15334467120181403, 1 0.14540816326530606, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
1265,1265,"6 0.2614237614237615, 3 0.13852813852813853, 0 0.1317941317941318, 2 0.12842712842712842, 5 0.12337662337662338, 1 0.10822510822510827, 4 0.10822510822510827",make sure lines in files dont have trailing white spaces and remove all trailing white spacesfixing crlfsstatement unnecessarily nested within else clause. code refactoring in numberutils
1266,1266,"3 0.35994397759103636, 2 0.111577964519141, 4 0.10667600373482727, 6 0.10667600373482727, 0 0.1050420168067227, 1 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1267,1267,"3 0.19855699855699852, 2 0.15007215007215005, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1268,1268,"1 0.709061683745228, 2 0.05435001004621258, 4 0.04942736588306208, 5 0.048724131002612026, 3 0.047317661241711884, 0 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1269,1269,"2 0.3252747252747253, 4 0.11843711843711843, 1 0.11501831501831504, 3 0.11159951159951162, 0 0.1098901098901099, 5 0.1098901098901099, 6 0.1098901098901099","crlf -> lfjavadoc: fix typo but working is still awkward.simplify isnotempty by reusing isemptyapplying chandrashekar ms patch to , adding isnotempty(array) methods to arrayutils. "
1270,1270,"4 0.21198156682027647, 3 0.18509984639016894, 2 0.12775217613927292, 6 0.1277521761392729, 1 0.11699948796722992, 0 0.11520737327188942, 5 0.11520737327188942",sort members.use stringisempty() instead of stringlength() == 0add final modifier to local variables.use index_not_found instead of magic number.
1271,1271,"6 0.26438492063492064, 3 0.16716269841269837, 2 0.12202380952380955, 0 0.11160714285714288, 1 0.11160714285714288, 4 0.11160714285714288, 5 0.11160714285714288",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.
1272,1272,"5 0.22417916938464885, 2 0.20895846923244185, 3 0.1511198086540552, 6 0.11154598825831702, 1 0.10850184822787562, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1273,1273,"3 0.21269841269841264, 2 0.13593073593073596, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
1274,1274,"0 0.25488842880147233, 3 0.16954221302047387, 2 0.13250517598343686, 1 0.11801242236024843, 6 0.11801242236024843, 4 0.10351966873706007, 5 0.10351966873706007",: update java requirement from java 6 to 7use multi-catch in annotationutils and exceptionutilsadd final modifier to local variables.remove unnecessary reflection parameter argsadding nopmd tags for various empty catch blocks
1275,1275,"4 0.1662337662337662, 6 0.1642135642135642, 3 0.15007215007215008, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 5 0.12987012987012989",remove redundant type arguments.format.
1276,1276,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1277,1277,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter."
1278,1278,"4 0.2172781680978402, 0 0.15170439760603693, 2 0.1425969294821754, 3 0.13348946135831377, 1 0.12073900598490765, 5 0.117096018735363, 6 0.117096018735363",: add zero copy write method to strbuilder; : add zero copy read method to strbuilder. thanks to mikhail mazursky.
1279,1279,"1 0.7180375180375179, 3 0.05204425204425202, 2 0.050024050024050006, 5 0.048677248677248666, 4 0.044636844636844634, 0 0.04329004329004329, 6 0.04329004329004329",flips the order of conditional expressions and if statements whose conditions were negated: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1280,1280,"6 0.228110599078341, 3 0.16359447004608293, 0 0.1313364055299539, 4 0.1313364055299539, 1 0.11520737327188943, 2 0.11520737327188943, 5 0.11520737327188943",pmd: useless parentheses dateutils issamelocaltime() compares the hour using 12hour calendar.hour instead of 24hour calendar.hour_of_day - thanks to christian
1281,1281,"6 0.15659340659340654, 2 0.1459096459096459, 3 0.14377289377289376, 1 0.14163614163614163, 0 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735",add stringmatchertostring(); useful from a debugger.
1282,1282,"0 0.18132902878665585, 3 0.16061339790153345, 1 0.1436642453591606, 2 0.14178100618778583, 4 0.13048157115953726, 5 0.12106537530266345, 6 0.12106537530266345",merge branch  of https://github.com/markdacek/commons-lang: added isexcludenullvalues to reflectiontostringbuilder and test
1283,1283,"3 0.1523199023199023, 4 0.1523199023199023, 0 0.14377289377289376, 2 0.1394993894993895, 1 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
1284,1284,"2 0.2660747914985203, 4 0.12483185364541297, 1 0.12294861447403821, 6 0.12294861447403821, 0 0.12106537530266344, 3 0.12106537530266344, 5 0.12106537530266344",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
1285,1285,"3 0.2188208616780045, 1 0.13747165532879818, 2 0.13350340136054423, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
1286,1286,"0 0.17972350230414744, 3 0.17972350230414744, 2 0.1635944700460829, 4 0.1259600614439324, 1 0.12058371735791093, 5 0.11520737327188942, 6 0.11520737327188942",add final modifier to local variables. - change objectutils min() & max() functions to use varargs rather than just two parameters
1287,1287,"0 0.16931216931216928, 2 0.15079365079365079, 4 0.15079365079365076, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
1288,1288,"0 0.15573525007487268, 6 0.15573525007487268, 5 0.14944594189877208, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",fastdateformat apis that use a stringbuilder
1289,1289,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
1290,1290,"2 0.25150519978106184, 3 0.12889983579638753, 6 0.126984126984127, 0 0.12315270935960591, 1 0.12315270935960591, 4 0.12315270935960591, 5 0.12315270935960591",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
1291,1291,"4 0.3188817815683488, 0 0.1231935560293769, 6 0.1165600568585643, 1 0.1149016820658612, 2 0.11324330727315804, 3 0.10660980810234542, 5 0.10660980810234542","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
1292,1292,"3 0.20663780663780662, 2 0.14199134199134195, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1293,1293,"2 0.19451659451659445, 5 0.146031746031746, 3 0.13593073593073596, 1 0.1318903318903319, 4 0.1318903318903319, 0 0.12987012987012986, 6 0.12987012987012986",: add noclassnametostringstyle implementation of tostringstyle. this from github. thanks to innokenty shuvalov.
1294,1294,"5 0.2846734322144158, 4 0.12256049960967993, 0 0.12073900598490765, 1 0.11891751236013534, 6 0.11891751236013534, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1295,1295,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
1296,1296,"0 0.19451170298627926, 4 0.15119720204465967, 6 0.13989776701641105, 2 0.13236481033091205, 5 0.13236481033091205, 1 0.12859833198816253, 3 0.12106537530266347",removes unnecessary class reference of static method calls which are declared in the same class
1297,1297,"0 0.17136978248089355, 3 0.15079365079365076, 4 0.1466784244562022, 2 0.13433274544385657, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
1298,1298,"2 0.22274264897215715, 4 0.15534738485558156, 0 0.1498829039812646, 1 0.12073900598490765, 3 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",: fix logic in isjsonarray method of jsontostringstyleextract logic for checking string representation of objects into separate methods
1299,1299,"6 0.26612103174603174, 3 0.16542658730158727, 2 0.12202380952380952, 0 0.11160714285714288, 1 0.11160714285714288, 4 0.11160714285714288, 5 0.11160714285714288",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.
1300,1300,"0 0.17715419501133783, 2 0.15532879818594097, 4 0.1434240362811791, 6 0.1414399092970521, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327",extract some helper methods to make the code better readable
1301,1301,"5 0.25347985347985347, 3 0.17484737484737478, 2 0.11843711843711845, 1 0.11672771672771674, 6 0.11672771672771672, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1302,1302,"2 0.2267573696145124, 4 0.1335034013605442, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1303,1303,"0 0.21882086167800446, 5 0.1354875283446712, 1 0.13151927437641722, 4 0.13151927437641722, 2 0.12755102040816327, 3 0.12755102040816327, 6 0.12755102040816327",[] provide typeliteral class similar to javax.enterprise.util.typeliteral
1304,1304,"6 0.16202455825097334, 0 0.14944594189877206, 5 0.14944594189877206, 1 0.1347708894878706, 2 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",4fastdateformat apis that use a stringbuilder
1305,1305,"0 0.16624895572263992, 5 0.15065441381230854, 6 0.14285714285714285, 3 0.14090782511835148, 2 0.14090782511835145, 1 0.13116123642439434, 4 0.12726260094681152",add missing @override.[] added timedsemaphore class to concurrent package.
1306,1306,"6 0.2303791887125221, 4 0.15013227513227512, 2 0.1455026455026455, 0 0.13778659611992944, 1 0.12389770723104056, 3 0.1130952380952381, 5 0.09920634920634924",[github] commons-lang pull request : intellij idea refactorings..make sure lines in files dont have trailing white spaces and remove all trailing white spaces: performance improvements for stringescapeutils. this fixes from github. thanks to fabian lange.
1307,1307,"4 0.17209690893901416, 0 0.1584516847674742, 1 0.15455304928989133, 2 0.13895850737956, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",[github] commons-lang pull request : intellij idea refactorings..
1308,1308,"5 0.29563492063492064, 6 0.12896825396825393, 2 0.1237599206349206, 1 0.11507936507936509, 4 0.11334325396825398, 0 0.11160714285714286, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
1309,1309,"3 0.20259740259740258, 2 0.146031746031746, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1310,1310,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1311,1311,"6 0.28904249871991805, 5 0.13492063492063489, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
1312,1312,"3 0.24331065759637188, 0 0.18140589569160995, 6 0.14489795918367343, 2 0.12267573696145125, 1 0.10362811791383221, 4 0.10204081632653063, 5 0.10204081632653063",[] use the cache in fastdateparser correctly.add final modifier to local variables.tab police fastdateparser could use calendar.getdisplaynames for all text fieldsremove unnecessary keyvalue instances: fastdateparser could use calendar.getdisplaynames for all text fields
1313,1313,"5 0.28695436507936506, 6 0.12896825396825393, 2 0.12723214285714282, 0 0.11681547619047622, 4 0.11681547619047622, 1 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
1314,1314,"5 0.2617929801028393, 0 0.15694164989939638, 6 0.1334674714956405, 3 0.1256427453610552, 4 0.11155823831880171, 1 0.10999329309188467, 2 0.10060362173038231",4fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone setapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1315,1315,"2 0.23487103174603177, 0 0.16195436507936506, 3 0.12896825396825393, 6 0.12896825396825393, 1 0.11855158730158732, 4 0.1150793650793651, 5 0.11160714285714288","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
1316,1316,"0 0.20535714285714285, 3 0.1706349206349206, 2 0.1532738095238095, 6 0.12723214285714282, 4 0.12028769841269842, 1 0.11160714285714288, 5 0.11160714285714288","add final modifier to local variables.[] introduced concurrentruntimeexception and extended the exception handling methods of concurrentutils to support runtime exceptions, too."
1317,1317,"0 0.30801209372637944, 2 0.17397329302091205, 4 0.1695641219450743, 3 0.13252708490803727, 6 0.08755353993449229, 1 0.06638951877047114, 5 0.0619803476946334","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure placement of curly braces is consistentfix non-critical typos in comments and javadocfix typos in several local variablesadd final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)moving to an illegalargumentexception: 710making unescapehtml _not_ escape unfinished numeric entities by default (it ignores them); however adding options that will fire an exception or unescape the numeric entity. 710adding tests and resolving , reported by benjamin valentin. note that this changed such that the code will now escape an unfinished entity (i.e. &). this matches browser behaviour. implemented todo to protect unescaper from arrayindexoutofboundsadding a test, and code fix, to have supplementary chars working in numeric entity unescaping. see 617"
1318,1318,"3 0.33230261801690375, 5 0.19233147804576378, 2 0.09997938569367142, 6 0.09709338280766855, 0 0.09276437847866421, 1 0.09276437847866421, 4 0.09276437847866421","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1319,1319,"3 0.18783068783068776, 5 0.14256319811875368, 6 0.14050558495002935, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
1320,1320,"5 0.2901379130887327, 4 0.12073900598490762, 0 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1321,1321,"2 0.23072562358276635, 4 0.13151927437641722, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1322,1322,"0 0.17136978248089355, 3 0.15079365079365076, 2 0.14050558495002943, 4 0.14050558495002943, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
1323,1323,"3 0.15363881401617246, 4 0.15363881401617246, 6 0.15363881401617246, 0 0.1347708894878706, 1 0.1347708894878706, 2 0.1347708894878706, 5 0.1347708894878706",use validateistrue to validate arguments
1324,1324,"3 0.2286271233639654, 2 0.1428571428571428, 0 0.1272626009468115, 1 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",simplify using ternary expressions.statement unnecessarily nested within else clause.
1325,1325,"3 0.34873252783700537, 2 0.113243307273158, 4 0.1099265576877517, 6 0.10826818289504855, 0 0.1066098081023454, 1 0.1066098081023454, 5 0.1066098081023454","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1326,1326,"2 0.22607022607022606, 4 0.19913419913419908, 0 0.14189514189514185, 1 0.10822510822510824, 3 0.10822510822510824, 5 0.10822510822510824, 6 0.10822510822510824",crlf -> lfjavadoc: fix typo but working is still awkward.simplify isempty be reusing getlengths/if (foo) { return true; } return false;/return foo;/g
1327,1327,"0 0.22276029055690072, 3 0.1380145278450363, 4 0.1380145278450363, 6 0.1380145278450363, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
1328,1328,"0 0.2261904761904762, 2 0.14806547619047616, 6 0.14285714285714282, 4 0.12896825396825393, 1 0.11855158730158732, 3 0.11855158730158732, 5 0.11681547619047622","functions.java whitspacesreplace tabs with four spaces, as per the projects checkstyle rules.adding the functions class as a helper for dealing with java 8 lambdas."
1329,1329,"3 0.3082807420156818, 6 0.2547332185886403, 2 0.09275196022183975, 0 0.08605851979345958, 1 0.08605851979345958, 4 0.08605851979345958, 5 0.08605851979345958","make sure lines in files dont have trailing white spaces and remove all trailing white spacesrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesreplace tabs with spaces fastdateparser and fastdateprinter support x format"
1330,1330,"3 0.23270975056689336, 2 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
1331,1331,"4 0.16941391941391934, 0 0.14163614163614163, 2 0.1394993894993895, 1 0.13736263736263735, 3 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",sort by method name.
1332,1332,"4 0.34965986394557824, 6 0.1258503401360544, 0 0.10839002267573697, 1 0.10839002267573697, 2 0.10362811791383221, 3 0.10204081632653063, 5 0.10204081632653063","sort members.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classmoving equalsignorecase, indexofignorecase, lastindexofignorecase and containsignorecase to the charsequence api. 687"
1333,1333,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1334,1334,"3 0.21471861471861464, 2 0.13593073593073596, 0 0.12987012987012986, 1 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",reuseadd final modifier to local variables.
1335,1335,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
1336,1336,"5 0.2883164194639604, 4 0.12256049960967993, 1 0.11891751236013531, 6 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1337,1337,"5 0.2586630896490052, 0 0.15537670467247933, 6 0.13503241672255756, 3 0.12720769058797227, 1 0.11155823831880173, 4 0.11155823831880171, 2 0.10060362173038231",4fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone setapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1338,1338,"0 0.21176926054974837, 3 0.19415408439798684, 2 0.1711188540456833, 6 0.12911343399148276, 1 0.10743321718931474, 4 0.09930313588850173, 5 0.08710801393728225",add final modifier to local variables.: remove unnecessary synchronization from registry lookup in equalsbuilder and hashcodebuilder ()add final modifier to local variables.checkstyle and trailing spaces.fixing so that equalsbuilder synchronizes on itself and not hashcodebuilderapplying the copy of the hashcodebuilder code to stop cyclic references over to equalsbuilder per and oliver sauders patch
1339,1339,"0 0.20523531049846835, 4 0.16235032024505705, 5 0.1311612364243943, 1 0.12531328320802007, 2 0.12531328320802007, 3 0.12531328320802007, 6 0.12531328320802007",moving text translation classes to the range class for its configuration
1340,1340,"4 0.17679255610290093, 2 0.17487684729064037, 0 0.1442255062944718, 6 0.13081554460864805, 1 0.12698412698412703, 3 0.12315270935960596, 5 0.12315270935960596","fix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring"
1341,1341,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
1342,1342,"3 0.24212648022171832, 4 0.14512471655328793, 6 0.14159737969261774, 5 0.12219702695893168, 2 0.11866969009826155, 1 0.11690602166792645, 0 0.11337868480725624",add final modifier to local variables.remove redundant type arguments.: fastdateformat doesnt respect summer daylight in some localized strings
1343,1343,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
1344,1344,"4 0.16814635458703253, 0 0.15496368038740918, 1 0.15308044121603442, 6 0.1380145278450363, 2 0.1342480495022868, 3 0.1304815711595373, 5 0.12106537530266347",: validate: add inclusivebetween and exclusivebetween overloads for primitives types. initial patch provided by sebb.
1345,1345,"2 0.26419155232714553, 4 0.12671509281678775, 0 0.12294861447403821, 6 0.12294861447403821, 1 0.12106537530266344, 3 0.12106537530266344, 5 0.12106537530266344",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
1346,1346,"3 0.1768707482993197, 0 0.1751070798689846, 4 0.15923406399596873, 6 0.13277903754094228, 2 0.12219702695893174, 5 0.11866969009826155, 1 0.11514235323759135",removes unnecessary class reference of static method calls which are declared in the same classadd final modifier to local variables.
1347,1347,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1348,1348,"6 0.29450549450549457, 3 0.1389499389499389, 0 0.11672771672771673, 1 0.11330891330891332, 5 0.11330891330891332, 2 0.11159951159951162, 4 0.11159951159951162",make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse final consistently. [] retrieve class hierarchy
1349,1349,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1350,1350,"4 0.22660098522167488, 0 0.15763546798029554, 1 0.12315270935960594, 2 0.12315270935960594, 3 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()[] new type util features
1351,1351,"0 0.1651969429747207, 4 0.15902410346854792, 2 0.14667842445620224, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
1352,1352,"4 0.19855699855699854, 0 0.14805194805194802, 2 0.13391053391053392, 1 0.12987012987012989, 3 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",sort members.: methods for getting first non empty or non blank value ()
1353,1353,"6 0.2887172887172887, 5 0.21814671814671813, 0 0.10403260403260402, 1 0.09802659802659804, 4 0.09802659802659804, 2 0.09652509652509654, 3 0.09652509652509654"," fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses . fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1354,1354,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
1355,1355,"6 0.26747216299455107, 0 0.1663113006396588, 4 0.12153518123667374, 3 0.11490168206586118, 2 0.11490168206586115, 1 0.10826818289504857, 5 0.10660980810234542",make sure lines in files dont have trailing white spaces and remove all trailing white spaces: parsedatestrictly doest pass specified locale - dateutilsparsedate uses default locale; add locale support
1356,1356,"2 0.2560090702947846, 3 0.19410430839002263, 6 0.12743764172335598, 0 0.11156462585034012, 1 0.10680272108843539, 4 0.10204081632653061, 5 0.10204081632653061",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateparser too strict on abbreviated short month symbolsadd final modifier to local variables.format. fastdateparser_timezonestrategytesttesttimezonestrategypattern fails on windows with german localereimplementing 1107
1357,1357,"0 0.22276029055690072, 4 0.14178100618778583, 6 0.1380145278450363, 3 0.13424804950228678, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
1358,1358,"2 0.18371546149323925, 5 0.14050558495002943, 0 0.14050558495002938, 4 0.13844797178130513, 1 0.1322751322751323, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
1359,1359,"3 0.20057720057720052, 2 0.15007215007215008, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1360,1360,"1 0.7167972674301786, 2 0.05083383564396221, 3 0.04731766124171188, 0 0.046614426361261806, 4 0.046614426361261806, 5 0.046614426361261806, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1361,1361,"5 0.2864949258391881, 0 0.12438199323445225, 4 0.12073900598490762, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1362,1362,"4 0.26719576719576715, 6 0.13571428571428568, 0 0.12089947089947091, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
1363,1363,"5 0.26904761904761904, 6 0.13015873015873017, 1 0.1246031746031746, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1364,1364,"2 0.20890022675736958, 5 0.13945578231292513, 3 0.13548752834467123, 1 0.13350340136054423, 0 0.12755102040816327, 4 0.12755102040816327, 6 0.12755102040816327",: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1365,1365,"1 0.7132810930279283, 2 0.05294354028531244, 4 0.04802089612216195, 5 0.04731766124171188, 0 0.046614426361261806, 3 0.046614426361261806, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1366,1366,"5 0.2646370023419204, 6 0.13895394223263072, 0 0.12438199323445226, 1 0.12073900598490764, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1367,1367,"5 0.226843480008037, 2 0.1987140847900342, 3 0.15089411291942936, 0 0.1382358850713281, 6 0.0988547317661242, 1 0.09463532248342377, 4 0.0918223829616235","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibilityadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1368,1368,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.1473495058400719, 1 0.14106019766397127, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
1369,1369,"6 0.19699546485260766, 3 0.14342403628117908, 5 0.14143990929705214, 0 0.13151927437641725, 4 0.13151927437641725, 1 0.1275510204081633, 2 0.1275510204081633"," partial: implement format u for fastdateformat, day number of week"
1370,1370,"5 0.15748521630874568, 1 0.14223467164643636, 0 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 6 0.1400560224089636",: there should be a differencebuilder with a reflectiondifferencebuilder implementation
1371,1371,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1372,1372,"2 0.18574213311055415, 1 0.16624895572263992, 5 0.13700918964076858, 3 0.13311055416318576, 4 0.12726260094681152, 0 0.1253132832080201, 6 0.1253132832080201",adding hennings github pull request with a triple implementation. 675
1373,1373,"3 0.3156013156013157, 5 0.14643214643214647, 6 0.13542113542113546, 0 0.1093951093951094, 2 0.1063921063921064, 1 0.09438009438009438, 4 0.09237809237809237","refactor ""gmt"" magic string.add a default case to switch to appease findbugs: nullpointerexception in fastdateparser$timezonestrategy ()replicate the fix for 1186add final modifier to local variables.remove redundant type arguments. fastdateparser_timezonestrategytesttesttimezonestrategypattern fails on windows with german localereimplementing 1107 fix parsing edge cases in fastdateparserrevert muddled commit - number percentage formatting with fractional digits fastdateparser error - timezones not handled correctlyuse final consistently. : test failure in fastdateparsertest and fastdateformat_parsertest when building with jdk8. thanks to bruno p. kinoshita and henri yandell for their help in fixing this issue.add final modifier to local variables.trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1374,1374,"2 0.289042498719918, 6 0.1259600614439324, 3 0.1205837173579109, 1 0.1187916026625704, 0 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure placement of curly braces is consistent
1375,1375,"0 0.17794486215538843, 2 0.17599554441659698, 3 0.14285714285714282, 1 0.1272626009468115, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",: exception while using extendedmessageformat and escaping braces. this fixes from github. thanks to andrey khobnya.
1376,1376,"2 0.34184495054060277, 3 0.12123303427651251, 5 0.11640211640211638, 1 0.10674028065332414, 4 0.10674028065332414, 0 0.10351966873706006, 6 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1377,1377,"5 0.28015873015873005, 1 0.12275132275132275, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1378,1378,"3 0.19653679653679648, 2 0.14805194805194802, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
1379,1379,"5 0.27460317460317457, 6 0.13015873015873014, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1380,1380,"3 0.3604581072935504, 6 0.12135824794052641, 0 0.11573236889692584, 2 0.11573236889692584, 5 0.10166767128792444, 1 0.09322885272252363, 4 0.0918223829616235",": fastdateformat doesnt respect summer daylight in some localized stringsmerge branch master of https://github.com/nickmanley/commons-langthis fix nullpointerexception in fastdateparser$timezonestrategyfix nullpointerexception in fastdateparser$timezonestrategyrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1381,1381,"4 0.16338259441707714, 2 0.1595511767925561, 5 0.1595511767925561, 3 0.1461412151067323, 0 0.12506841817186648, 1 0.12315270935960594, 6 0.12315270935960594",fix brace positionsfixing the pass along of comparetransients to the reflectioncompare method as identified by robert radkiewicz in 635
1382,1382,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1383,1383,"4 0.17913832199546484, 0 0.14739229024943307, 6 0.1454081632653061, 2 0.14143990929705216, 1 0.13151927437641725, 3 0.1275510204081633, 5 0.1275510204081633",sort members.: stringutilsabbreviate should support custom ellipses parameter ()
1384,1384,"0 0.18571428571428567, 3 0.17830687830687827, 4 0.15238095238095234, 2 0.12645502645502646, 1 0.11904761904761907, 5 0.11904761904761907, 6 0.11904761904761907",: strbuilder.equals(strbuilder) doesnt check for null inputsadd final modifier to local variables.
1385,1385,"0 0.17794486215538843, 4 0.16040100250626563, 6 0.15455304928989133, 3 0.1311612364243943, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",remove redundant type arguments.changing eol-style to native.misc. event utils.
1386,1386,"6 0.2397094430992736, 3 0.1380145278450363, 4 0.1380145278450363, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
1387,1387,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1388,1388,"3 0.18266978922716626, 2 0.17902680197762164, 4 0.1498829039812646, 5 0.13166796773354147, 6 0.12256049960967996, 0 0.117096018735363, 1 0.117096018735363",add final modifier to local variables.: make logic for comparing os versions in systemutils smarter
1389,1389,"2 0.2364243943191311, 1 0.1311612364243943, 3 0.1292119186856029, 4 0.1272626009468115, 0 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007", - add issorted() to arrayutils. patch supplied by james sawle. in github.
1390,1390,"2 0.18452380952380948, 0 0.17757936507936506, 6 0.14632936507936506, 4 0.13070436507936506, 1 0.12549603174603174, 3 0.12375992063492063, 5 0.11160714285714288",allowduplicates will always be false at that pointadded new addlistener() method that takes a boolean for if duplicates are allowed.added test method to make sure that duplicate listeners are not added.
1391,1391,"3 0.1608669108669108, 2 0.15018315018315018, 1 0.1394993894993895, 0 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",: added validstate()
1392,1392,"6 0.3109371602522288, 0 0.14807566862361382, 4 0.12067840834964123, 2 0.10850184822787563, 3 0.10850184822787563, 5 0.10241356816699286, 1 0.10089149815177216",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
1393,1393,"2 0.20793650793650786, 3 0.14867724867724863, 0 0.13756613756613753, 4 0.13386243386243388, 6 0.12830687830687829, 1 0.1246031746031746, 5 0.11904761904761905",: please add number to byte[] methods. suggested by lilianne e. blaze. final patch from vincent ricard (with thanks to henri yandell).
1394,1394,"2 0.23809523809523805, 6 0.1384783798576902, 1 0.12889983579638753, 3 0.12506841817186645, 0 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
1395,1395,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
1396,1396,"6 0.18783068783068776, 0 0.14256319811875365, 2 0.1405055849500294, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",remove unnecessary white spaces
1397,1397,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
1398,1398,"0 0.23412698412698413, 3 0.17040149393090567, 4 0.13772175536881415, 2 0.123015873015873, 1 0.11321195144724559, 5 0.11321195144724559, 6 0.10830999066293186",a bit of dog food and a lot of javadoc tweakage[] add fieldutils getdeclaredfields() to return all the fields defined in the given class and super classes.add final modifier to local variables.
1399,1399,"5 0.2773874577153265, 4 0.12620348685922458, 0 0.12256049960967995, 6 0.12256049960967995, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1400,1400,"2 0.49933862433862436, 4 0.13452380952380952, 3 0.08915343915343914, 6 0.07619047619047616, 0 0.07063492063492062, 5 0.06878306878306877, 1 0.061375661375661375","add @safevarargs to some methods with vararg parameters to suppress ""type safety: potential heap pollution via varargs parameter array"" warningsremove redundant type arguments. simplify arrayutils removeelements by using newdecrementandget() method: improve arrayutils removeelements time complexity to o(n) ()based on patch submitted by jeffery yuancrlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables. arrayutils removeelements methods use unnecessary hashseteliminate conversion of bitset to int[] arrayutils removeelements methods use unnecessary hashsetreplace hashset with bitset (less memory; faster) arrayutils removeelements methods clone temporary index arrays unnecessarilyreduce number of created arrays[] complement arrayutils.addall() variants with by-index and by-value removal methods"
1401,1401,"6 0.17548500881834211, 3 0.15079365079365076, 0 0.14462081128747797, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",no need to nest.[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
1402,1402,"2 0.2979969765684051, 6 0.19746787603930457, 3 0.12207105064247918, 1 0.11413454270597123, 0 0.0942932728647014, 4 0.08900226757369616, 5 0.08503401360544219",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.new test caseexplanations about algorithmtabs replaced by spacesnew tests addedswap and shift for arrays
1403,1403,"5 0.2809271856890904, 6 0.14865205341395812, 1 0.11690602166792645, 0 0.11337868480725624, 2 0.11337868480725624, 3 0.11337868480725624, 4 0.11337868480725624", fastdateparser and fastdateprinter support x formatapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1404,1404,"2 0.20017636684303344, 6 0.1384479717813051, 0 0.1322751322751323, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",make sure placement of curly braces is consistent
1405,1405,"3 0.3652597402597403, 6 0.19354256854256852, 0 0.10389610389610386, 2 0.09126984126984125, 1 0.08243145743145742, 4 0.08243145743145742, 5 0.08116883116883115","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove unused constructor parameterformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesrename textstrategy to caseinsensitivetextstrategy per sebbs suggestion[] use the cache in fastdateparser correctly.add final modifier to local variables."
1406,1406,"5 0.24664224664224663, 3 0.17826617826617824, 6 0.12185592185592187, 1 0.11843711843711842, 2 0.11501831501831503, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1407,1407,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",changing eol-style to native.misc. event utils.
1408,1408,"1 0.7113035113035113, 3 0.053391053391053385, 2 0.052044252044252046, 4 0.04935064935064934, 5 0.04665704665704667, 0 0.043963443963443975, 6 0.0432900432900433",flips the order of conditional expressions and if statements whose conditions were negated: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1409,1409,"0 0.16725455614344503, 2 0.15490887713109933, 4 0.14873603762492651, 1 0.13227513227513232, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",: new methods for lang3.validatethis from github.
1410,1410,"2 0.21463077984817117, 6 0.21463077984817117, 4 0.1276742581090407, 1 0.11962272831838049, 0 0.10996089256958824, 3 0.10996089256958824, 5 0.10351966873706007",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefully168
1411,1411,"6 0.3174603174603175, 2 0.12464985994397756, 3 0.11974789915966384, 4 0.11974789915966384, 0 0.10830999066293186, 1 0.1050420168067227, 5 0.1050420168067227","[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .utc and gmt are the same, so simplify.refactor ""gmt"" magic string.make sure lines in files dont have trailing white spaces and remove all trailing white spaces"
1412,1412,"5 0.2838624338624338, 6 0.1208994708994709, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1413,1413,"3 0.43331271902700474, 2 0.09997938569367139, 1 0.09420737992166563, 6 0.09420737992166563, 0 0.0927643784786642, 4 0.0927643784786642, 5 0.0927643784786642","add final modifier to local variables.format.statement unnecessarily nested within else clause.\refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1414,1414,"0 0.167254556143445, 2 0.1549088771310993, 4 0.14873603762492654, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
1415,1415,"6 0.20691609977324257, 5 0.13945578231292519, 3 0.13945578231292516, 0 0.12953514739229025, 4 0.12953514739229025, 1 0.12755102040816327, 2 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
1416,1416,"6 0.2828456683878371, 5 0.19181487856186652, 3 0.1596863645056416, 2 0.09275196022183976, 1 0.09275196022183975, 4 0.09141327213616372, 0 0.08873589596481164","zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1417,1417,"6 0.32563025210084034, 5 0.1279178338001867, 3 0.11974789915966384, 0 0.11157796451914101, 1 0.1050420168067227, 2 0.1050420168067227, 4 0.1050420168067227",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor some duplicate code.
1418,1418,"3 0.327312534209086, 6 0.13318737456668492, 0 0.12552453931764276, 4 0.11913884327677432, 2 0.11275314723590586, 1 0.09998175515416895, 5 0.08210180623973731","refactor ""gmt"" magic string.add a default case to switch to appease findbugs: nullpointerexception in fastdateparser$timezonestrategy ()replicate the fix for 1186add final modifier to local variables.remove redundant type arguments. fastdateparser_timezonestrategytesttesttimezonestrategypattern fails on windows with german localereimplementing 1107 fix parsing edge cases in fastdateparserrevert muddled commit - number percentage formatting with fractional digits fastdateparser error - timezones not handled correctlyuse final consistently. "
1419,1419,"4 0.2523809523809523, 2 0.14867724867724863, 1 0.12275132275132275, 0 0.11904761904761904, 3 0.11904761904761904, 5 0.11904761904761904, 6 0.11904761904761904",: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
1420,1420,"1 0.7153907976692785, 2 0.05153707052441228, 5 0.049427365883062076, 0 0.046614426361261806, 3 0.045911191480811735, 4 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1421,1421,"5 0.2646370023419204, 6 0.14806141035649226, 1 0.11891751236013533, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1422,1422,"2 0.19763022579923986, 3 0.1929353901184887, 4 0.16007154035323048, 0 0.1381623071763917, 1 0.1052984574111335, 5 0.1052984574111335, 6 0.10060362173038231","add final modifier to local variables.add final modifier to method parameters.moving most of the methods over to varargs. a couple cant change because they are object[], class[] with both end parameters ideally wanting to be vararg. 396"
1423,1423,"3 0.3112491373360939, 4 0.13250517598343686, 2 0.12445364619277662, 6 0.11801242236024843, 1 0.10674028065332415, 0 0.10351966873706007, 5 0.10351966873706007",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerformat to 120 line length.add final modifier to local variables.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
1424,1424,"5 0.2838624338624338, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 6 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1425,1425,"6 0.21888053467000831, 3 0.1526037315510999, 4 0.1272626009468115, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
1426,1426,"3 0.2046176046176046, 2 0.14199134199134197, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1427,1427,"4 0.16313932980599644, 0 0.15079365079365076, 2 0.15079365079365076, 3 0.13844797178130513, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",sort methods.: add stopwatchgettime(timeunit) ()
1428,1428,"5 0.28521825396825395, 6 0.12896825396825393, 2 0.12375992063492061, 4 0.1202876984126984, 1 0.11855158730158731, 0 0.11160714285714286, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
1429,1429,"5 0.2846734322144158, 4 0.12438199323445227, 1 0.12073900598490765, 6 0.11891751236013534, 0 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1430,1430,"5 0.2773998488284202, 6 0.15394305870496344, 1 0.11514235323759135, 0 0.11337868480725626, 2 0.11337868480725626, 3 0.11337868480725626, 4 0.11337868480725626", fastdateparser and fastdateprinter support x formatapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1431,1431,"3 0.15079365079365076, 4 0.15079365079365076, 6 0.15079365079365076, 5 0.14873603762492646, 1 0.13433274544385657, 0 0.1322751322751323, 2 0.1322751322751323",use validateistrue to validate arguments: there should be a differencebuilder with a reflectiondifferencebuilder implementation
1432,1432,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
1433,1433,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",validation[] new type util features
1434,1434,"5 0.2883164194639604, 0 0.12073900598490762, 4 0.12073900598490762, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1435,1435,"4 0.18868407578084997, 2 0.17613927291346645, 5 0.13312852022529442, 6 0.1313364055299539, 1 0.12954429083461347, 3 0.12596006144393243, 0 0.11520737327188943","sort members.revert "": add stringutilsisanynotempty and isanynotblank"" and add "": add stringutilsisallempty and isallblank methods"" instead: add stringutilsisallempty and isallblank methods"
1436,1436,"2 0.1878306878306878, 5 0.13844797178130513, 4 0.1384479717813051, 0 0.13639035861258086, 1 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
1437,1437,"3 0.19855699855699852, 2 0.15209235209235206, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1438,1438,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1439,1439,"1 0.7002629272567923, 2 0.06018112766579023, 3 0.058136137890739105, 4 0.048592852273833864, 0 0.045184535982082004, 5 0.043821209465381254, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1440,1440,"6 0.24735449735449733, 3 0.15476190476190474, 2 0.14550264550264547, 0 0.14241622574955906, 4 0.10846560846560847, 1 0.10229276895943563, 5 0.09920634920634921",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmerge branch  of https://github.com/markdacek/commons-lang: added isexcludenullvalues to reflectiontostringbuilder and testadd final modifier to method parameters.
1441,1441,"4 0.3080411651840224, 0 0.1651840223268795, 3 0.12122797837083552, 1 0.1151229722658294, 2 0.10901796616082329, 5 0.0980289551718123, 6 0.08337694051979769","sort members.add final modifier to local variables.renaming the newly public pad(int, char) method to repeat(char, int) [note the swap of param order]. ive also pulled the faster implementation out of repeat(string, int). make the pad method public. i can use this now :) ! the method used to be private and named padding. it is used internally and covered by unit tests through leftpad(), rightpad() and repeat()."
1442,1442,"6 0.285458269329237, 5 0.13850486431131587, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
1443,1443,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1444,1444,"6 0.1651969429747207, 0 0.1549088771310993, 5 0.14873603762492646, 4 0.13433274544385657, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323",4fastdateformat apis that use a stringbuilderrefactor some duplicate code.
1445,1445,"6 0.22627865961199292, 4 0.19911816578483243, 3 0.18430335097001763, 2 0.13121693121693118, 0 0.09541446208112872, 1 0.08430335097001763, 5 0.07936507936507936","make sure lines in files dont have trailing white spaces and remove all trailing white spacesits confusing to re-use field names locallyadd final modifier to local variables.add final modifier to method parameters.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)fix pmd issues: ""these nested if statements could be combined""fix brace positions"
1446,1446,"3 0.2131910235358511, 2 0.14614121510673234, 6 0.1327312534209086, 4 0.13081554460864805, 1 0.12889983579638753, 5 0.12506841817186645, 0 0.12315270935960593",add final modifier to local variables.javadoc: add truncatedequals and truncatedcompareto
1447,1447,"6 0.20294784580498865, 5 0.1414399092970521, 3 0.13945578231292513, 4 0.13350340136054425, 0 0.1275510204081633, 1 0.1275510204081633, 2 0.1275510204081633"," partial: implement format u for fastdateformat, day number of week"
1448,1448,"3 0.36321195144724555, 1 0.10830999066293186, 4 0.10830999066293186, 0 0.1050420168067227, 2 0.1050420168067227, 5 0.1050420168067227, 6 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1449,1449,"4 0.1700295937584073, 0 0.15496368038740918, 1 0.15119720204465967, 2 0.1436642453591606, 6 0.1380145278450363, 3 0.12106537530266347, 5 0.12106537530266347",: validate: add inclusivebetween and exclusivebetween overloads for primitives types. initial patch provided by sebb.
1450,1450,"6 0.1641209943096735, 0 0.16202455825097328, 1 0.1347708894878706, 2 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706, 5 0.1347708894878706", durationformatutils does not handle large durations correctly
1451,1451,"6 0.18112244897959182, 0 0.16326530612244897, 1 0.1454081632653061, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
1452,1452,"2 0.18886198547215496, 3 0.18509550712940545, 5 0.13048157115953724, 1 0.12859833198816253, 4 0.12483185364541301, 0 0.12106537530266348, 6 0.12106537530266348",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
1453,1453,"2 0.19536019536019536, 0 0.1697191697191697, 4 0.14065934065934063, 5 0.1338217338217338, 6 0.12869352869352865, 1 0.12014652014652016, 3 0.11159951159951162",removes unnecessary class reference of static method calls which are declared in the same class: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1454,1454,"2 0.37733574442435197, 3 0.13823588507132809, 1 0.10870002009242512, 4 0.09744826200522402, 0 0.09744826200522401, 5 0.09041591320072334, 6 0.09041591320072334",add final modifier to local variables.crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodtabs replaced by spacesnew tests addedswap and shift for arrays
1455,1455,"2 0.18574213311055413, 0 0.16040100250626563, 4 0.13895850737956003, 3 0.13700918964076858, 1 0.1272626009468115, 5 0.12531328320802007, 6 0.12531328320802007",[] add methods to objectutils to get various forms of classnames in a null-safe manner
1456,1456,"6 0.29979518689196105, 2 0.12416794674859188, 0 0.1152073732718894, 1 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd sugar to randomiutils
1457,1457,"6 0.3020912068531116, 5 0.12396069538926678, 4 0.11866969009826153, 2 0.11514235323759134, 0 0.11337868480725623, 1 0.11337868480725623, 3 0.11337868480725623",make sure lines in files dont have trailing white spaces and remove all trailing white spaces[] retrieve class hierarchy
1458,1458,"5 0.2883164194639604, 4 0.12256049960967993, 1 0.11891751236013531, 6 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1459,1459,"5 0.22121760096443638, 2 0.19871408479003413, 3 0.1466747036367289, 0 0.14104882459312834, 6 0.1044806108097247, 1 0.09744826200522401, 4 0.09041591320072334","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibilityadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1460,1460,"0 0.3234309014125529, 2 0.18173875054609, 4 0.12771224697830202, 3 0.11344109509247123, 6 0.10630551914955584, 1 0.08184068734527448, 5 0.06553079947575362","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.[] wordutils.wrap throws stringindexoutofboundsexception whenwraplength is integer.max_value.use stringbuilderappend(charsequence, int, int) were possible to improve performance(similar to , thanks to stephane landelle for the suggestion)make code more readable with less nesting (move block out of elseclause).deprecate systemutilsline_separator in favor of java.lang.systemlineseparatorfixes : wordutils.wrap throws stringindexoutofboundsexceptionadd final modifier to local variables.merge branch wordutils.wrap: customizable breakable characters (not just space/whitespace)changed wrap method to use regex pattern to find breakable characters rather than only spaces. added a few basic tests for ""regex wrap"""
1461,1461,"3 0.3386243386243386, 6 0.2349206349206349, 5 0.09417989417989417, 2 0.09047619047619045, 1 0.0818342151675485, 4 0.08059964726631394, 0 0.07936507936507936","lvar should not hide ivar.add final modifier to local variables.format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1462,1462,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1463,1463,"6 0.167254556143445, 0 0.16108171663727217, 5 0.1425631981187537, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323",4fastdateformat apis that use a stringbuilderrefactor some duplicate code.
1464,1464,"5 0.2857142857142857, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 6 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1465,1465,"0 0.2016967706622879, 2 0.14614121510673234, 4 0.14230979748221126, 3 0.13081554460864808, 1 0.12889983579638756, 5 0.12698412698412703, 6 0.12315270935960594",: added methods to objectutils class to check for null elements in the array ()
1466,1466,"6 0.2825814536340852, 2 0.20071010860484545, 3 0.11445279866332496, 0 0.10714285714285712, 5 0.09983291562238933, 4 0.09837092731829576, 1 0.0969089390142022",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse final consistently. make use of existing timeunit class to manage time units.
1467,1467,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1468,1468,"1 0.7160940325497286, 2 0.05224030540486235, 5 0.04731766124171188, 3 0.046614426361261806, 4 0.046614426361261806, 0 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1469,1469,"5 0.2597631645250693, 6 0.16805240614764422, 1 0.11866969009826155, 0 0.11337868480725624, 2 0.11337868480725624, 3 0.11337868480725624, 4 0.11337868480725624", fastdateparser does not handle excess hours as per simpledateformattrailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1470,1470,"3 0.40378343118069143, 2 0.10697977821265493, 0 0.09784735812133073, 1 0.09784735812133073, 4 0.09784735812133073, 5 0.09784735812133073, 6 0.09784735812133073","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1471,1471,"3 0.22477324263038542, 2 0.13747165532879818, 0 0.12755102040816327, 1 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
1472,1472,"3 0.19764464925755246, 6 0.16717869943676392, 4 0.1474654377880184, 2 0.13671274961597538, 1 0.12058371735791093, 0 0.11520737327188942, 5 0.11520737327188942",remove redundant type arguments.add final modifier to local variables.add serialization support to eventlistenersupport
1473,1473,"1 0.7125778581474782, 2 0.05083383564396221, 0 0.04872413100261202, 4 0.04872413100261202, 5 0.04731766124171188, 3 0.046614426361261806, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1474,1474,"6 0.18371546149323922, 5 0.15079365079365076, 0 0.13639035861258084, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323", fastdateparser does not handle non-gregorian calendars properly 
1475,1475,"6 0.2049319727891156, 3 0.14143990929705214, 5 0.13945578231292516, 2 0.12953514739229025, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
1476,1476,"0 0.24522659305268005, 6 0.14699792960662525, 5 0.12606395215090868, 1 0.12445364619277662, 4 0.12445364619277662, 3 0.11801242236024843, 2 0.1147918104439844",: implementation of a memomizer ()changes suggested in https://github.com/apache/commons-lang/pull/80:- tabs to spaces- use @override- remove unused variables- other minimal clean-ups: implementation of a memomizer ()
1477,1477,"3 0.3503909026297085, 2 0.10992655768775171, 6 0.10992655768775171, 1 0.10826818289504857, 4 0.10826818289504857, 0 0.10660980810234541, 5 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1478,1478,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",: rounding utilities for converting to bigdecimal
1479,1479,"6 0.27079747561675277, 5 0.1904761904761905, 3 0.16905718110537388, 2 0.09676802447886787, 0 0.09275196022183976, 1 0.09141327213616372, 4 0.08873589596481164","zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1480,1480,"0 0.31139971139971145, 2 0.1922077922077922, 3 0.12958152958152958, 4 0.1033189033189033, 1 0.09725829725829724, 6 0.0922077922077922, 5 0.074025974025974","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use final consistently. rewriting octalunescaper as a hand rolled parser (all of 4 characters), instead of trying to handle the conversion via repeated attempts to convert the numbers. this fixes bugs, see , and also changes the behaviour for illegal octals such as \999. instead of throwing numberformatexception, it will now ignore them. this seems the better behaviour. applying github pull request https://github.com/apache/commons-lang/pull/5, linked as , fixing a bug in octalescaper trying to parse octal numbers longer than 3 digitsadd final modifier to local variables.adding an octalunescaper to handle javas support of 1->377 octal values. 646"
1481,1481,"3 0.35039090262970857, 2 0.11158493248045488, 1 0.10826818289504858, 4 0.10826818289504858, 6 0.10826818289504858, 0 0.10660980810234542, 5 0.10660980810234542","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1482,1482,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1483,1483,"2 0.315978835978836, 0 0.17671957671957672, 4 0.11894179894179892, 5 0.0996825396825397, 1 0.09820105820105822, 3 0.09523809523809526, 6 0.09523809523809526","[] serializationutils throws classnotfoundexception when cloning primitive classesapplying sven ludwigs patch from . this modifies the serializationutils.clone method to use the threadcontextloader if it is unable to find a class using the objects current classloader. this should (hopefully) help with weblogic and tomcat situations where lang is outside the web-inf for some reason (likely user error with tomcat, by design for weblogic)"
1484,1484,"2 0.18886198547215494, 3 0.18132902878665585, 1 0.13048157115953726, 0 0.12671509281678775, 5 0.12671509281678775, 4 0.12483185364541298, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
1485,1485,"2 0.25150519978106184, 6 0.12889983579638753, 1 0.12506841817186645, 3 0.12506841817186645, 0 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
1486,1486,"0 0.24835164835164836, 4 0.14236874236874233, 6 0.1372405372405372, 5 0.12698412698412698, 2 0.12014652014652015, 3 0.11501831501831503, 1 0.1098901098901099",removes unnecessary class reference of static method calls which are declared in the same classprevent redundant modifiersadd typesafe wrap variant for classes
1487,1487,"0 0.20861678004535147, 2 0.19627110103300577, 4 0.13101536911060718, 6 0.12219702695893174, 3 0.11514235323759135, 1 0.11337868480725626, 5 0.11337868480725626","make sure placement of curly braces is consistent[] equalsbuilder.append(object,object) is too big to beinlined, which prevents whole builder to be scalarized. ."
1488,1488,"0 0.21924603174603172, 4 0.17584325396825393, 2 0.13070436507936506, 6 0.12896825396825393, 1 0.11681547619047622, 5 0.11681547619047622, 3 0.11160714285714288",removes unnecessary class reference of static method calls which are declared in the same classapply patch contributed by bruno p. kinoshitavalidation[] new type util features
1489,1489,"0 0.20294784580498862, 4 0.15929705215419498, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",": extend randomstringutils with methods that generate strings between a min and max length (, )"
1490,1490,"3 0.19706959706959706, 0 0.19365079365079363, 6 0.1492063492063492, 2 0.12698412698412698, 1 0.11330891330891332, 4 0.1098901098901099, 5 0.1098901098901099",[] strsubstitutor now supports the declaration of default values for the variables to be replaced. thanks to woonsan ko for the patch. strsubstitutor does not support stringbuilder or charsequenceadd final modifier to local variables.
1491,1491,"3 0.24036281179138325, 4 0.14512471655328796, 6 0.13454270597127738, 5 0.127488032249937, 2 0.12396069538926684, 1 0.11514235323759135, 0 0.11337868480725626",add final modifier to local variables.remove redundant type arguments.: fastdateformat doesnt respect summer daylight in some localized strings
1492,1492,"5 0.2722832722832723, 2 0.13894993894993893, 3 0.1304029304029304, 4 0.12185592185592187, 6 0.11501831501831503, 1 0.11159951159951163, 0 0.10989010989010992",dont mutate parametersadd final modifier to method parameters.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1493,1493,"2 0.1878306878306878, 5 0.14462081128747797, 4 0.13639035861258086, 0 0.13433274544385657, 1 0.1322751322751323, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
1494,1494,"4 0.20508944318468125, 3 0.17863441672965477, 2 0.14336104812295283, 0 0.12572436381960192, 6 0.11866969009826155, 1 0.11514235323759134, 5 0.11337868480725624",sort members.extract method.add final modifier to local variables.[] stringutils join apis for primitives.
1495,1495,"2 0.3643892339544514, 1 0.11801242236024842, 0 0.10351966873706006, 3 0.10351966873706006, 4 0.10351966873706006, 5 0.10351966873706006, 6 0.10351966873706006",crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodswap and shift for arrays
1496,1496,"2 0.36307243203794937, 3 0.120415982484948, 0 0.11658456486042693, 4 0.10381317277869001, 6 0.10253603357051631, 1 0.09998175515416893, 5 0.09359605911330049","add @safevarargs to some methods with vararg parameters to suppress ""type safety: potential heap pollution via varargs parameter array"" warningsformatting fixes perhttps://patch-diff.githubusercontent.com/raw/apache/commons-lang/pull/128.diffcrlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.checkstyle and trailing spaces."
1497,1497,"4 0.17679255610290093, 2 0.16529830322933772, 0 0.14805692391899286, 6 0.13464696223316913, 1 0.12889983579638756, 3 0.12315270935960596, 5 0.12315270935960596","fix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring"
1498,1498,"5 0.19698819698819703, 2 0.19413919413919417, 6 0.17134717134717134, 1 0.11721611721611722, 0 0.11436711436711436, 4 0.11294261294261294, 3 0.09299959299959303",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefullyapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1499,1499,"4 0.24384236453201968, 2 0.13847837985769018, 1 0.12506841817186645, 0 0.12315270935960593, 3 0.12315270935960593, 5 0.12315270935960593, 6 0.12315270935960593","moving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
1500,1500,"5 0.15902410346854787, 0 0.15079365079365076, 2 0.14462081128747795, 4 0.1405055849500294, 3 0.1384479717813051, 1 0.13433274544385657, 6 0.1322751322751323",[] added timedsemaphore class to concurrent package.
1501,1501,"2 0.1978653530377668, 0 0.15763546798029557, 4 0.15188834154351394, 1 0.12315270935960596, 3 0.12315270935960596, 5 0.12315270935960596, 6 0.12315270935960596",extract logic for checking string representation of objects into separate methods
1502,1502,"0 0.25499231950844853, 2 0.14567332309267791, 6 0.13492063492063489, 4 0.11879160266257043, 1 0.11520737327188942, 3 0.11520737327188942, 5 0.11520737327188942","when writing about the hash code, use hash code, the compound hashcode is not a work in english. the text hashcode() is left as in of course."
1503,1503,"3 0.2334869431643625, 2 0.16180235535074242, 0 0.1331285202252944, 4 0.12596006144393238, 1 0.11520737327188942, 5 0.11520737327188942, 6 0.11520737327188942",validationadd final modifier to local variables.add final modifier to method parameters.[] vastly expanded typeutils
1504,1504,"4 0.22660098522167488, 0 0.15763546798029554, 1 0.12315270935960594, 2 0.12315270935960594, 3 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()[] new type util features
1505,1505,"3 0.15363881401617246, 4 0.15363881401617246, 6 0.15363881401617246, 0 0.1347708894878706, 1 0.1347708894878706, 2 0.1347708894878706, 5 0.1347708894878706",use validateistrue to validate arguments
1506,1506,"5 0.2792089513400988, 4 0.12620348685922456, 6 0.12256049960967993, 0 0.12073900598490762, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1507,1507,"2 0.1536388140161725, 5 0.1536388140161725, 6 0.1536388140161725, 0 0.13477088948787064, 1 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
1508,1508,"3 0.22080498866213147, 2 0.13945578231292516, 1 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
1509,1509,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1510,1510,"4 0.2168367346938775, 0 0.14143990929705214, 6 0.13151927437641722, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327",sort members.[] stringutils join apis for primitives.
1511,1511,"2 0.2939447383891829, 0 0.14442484812855183, 4 0.14442484812855183, 3 0.1361943954536547, 5 0.09778561630413482, 1 0.09367038996668628, 6 0.08955516362923772","extract logic for checking string representation of objects into separate methodsformat source codevariable names should follow naming conventionsmodified appenddetail method for object value in jsontostringstyle classfix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.add final modifier to local variables."
1512,1512,"3 0.20057720057720052, 2 0.14805194805194805, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1513,1513,"2 0.20057720057720052, 1 0.13795093795093796, 4 0.13795093795093796, 0 0.1318903318903319, 3 0.1318903318903319, 5 0.12987012987012986, 6 0.12987012987012986",added escape/unescapejson methods per maurizio cucchiaras patch in 797
1514,1514,"2 0.24575807334428024, 3 0.12889983579638753, 6 0.1288998357963875, 1 0.126984126984127, 0 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
1515,1515,"4 0.2172781680978402, 2 0.14988290398126464, 0 0.1498829039812646, 1 0.12620348685922456, 3 0.12256049960967996, 5 0.117096018735363, 6 0.117096018735363",: add zero copy write method to strbuilder; : add zero copy read method to strbuilder. thanks to mikhail mazursky.
1516,1516,"0 0.3370681605975724, 2 0.12628384687208213, 6 0.11321195144724557, 1 0.10830999066293186, 3 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227"," - followup incorporating ggregorys doc suggestion, some doc fixes, addition of const_byte() and const_short(), and junit improvements to test doc examples and make sure const_byte() and const_short() throw illegalargumentexception as required."
1517,1517,"2 0.3035113035113035, 0 0.1284271284271284, 4 0.12674362674362677, 1 0.11495911495911496, 6 0.10990860990860991, 3 0.10822510822510822, 5 0.10822510822510822",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
1518,1518,"6 0.30875576036866353, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd sugar to randomiutils
1519,1519,"6 0.18112244897959182, 0 0.16326530612244897, 1 0.1454081632653061, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
1520,1520,"1 0.7118746232670281, 2 0.05153707052441228, 4 0.04872413100261202, 3 0.04802089612216195, 5 0.04802089612216195, 0 0.046614426361261806, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1521,1521,"3 0.19855699855699852, 2 0.14805194805194802, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1522,1522,"0 0.16825396825396824, 2 0.14805194805194802, 1 0.141991341991342, 6 0.13795093795093794, 3 0.13593073593073596, 4 0.13593073593073596, 5 0.13189033189033192",added a new issuccessful() method to the result object of multibackgroundinitializer.
1523,1523,"6 0.21693121693121686, 3 0.15650236702868278, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
1524,1524,"2 0.19764464925755246, 3 0.19406041986687148, 1 0.1349206349206349, 5 0.1205837173579109, 0 0.11879160266257044, 4 0.11879160266257044, 6 0.11520737327188942","dont use single letter variable names.add final modifier to local variables.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
1525,1525,"4 0.2611640211640212, 3 0.1619047619047619, 0 0.12338624338624338, 6 0.1219047619047619, 1 0.12042328042328042, 2 0.11597883597883597, 5 0.09523809523809527",[github] commons-lang pull request : intellij idea refactorings..format to 120 line length.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
1526,1526,"1 0.7139843279083785, 2 0.05294354028531244, 3 0.048020896122161955, 4 0.047317661241711884, 5 0.04661442636126182, 0 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1527,1527,"6 0.27346938775510204, 4 0.15759637188208614, 2 0.13378684807256233, 5 0.11315192743764174, 3 0.10997732426303856, 1 0.10997732426303855, 0 0.10204081632653063",[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern. sort methods.[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern.
1528,1528,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1529,1529,"3 0.20057720057720052, 2 0.14805194805194805, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
1530,1530,"2 0.2698412698412698, 4 0.12483185364541298, 0 0.12106537530266345, 1 0.12106537530266345, 3 0.12106537530266345, 5 0.12106537530266345, 6 0.12106537530266345",crlf -> lfjavadoc: fix typo but working is still awkward.swap and shift for arrays
1531,1531,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1532,1532,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1533,1533,"2 0.3001253132832081, 0 0.1539264828738513, 4 0.14954051796157058, 5 0.10129490392648291, 1 0.09983291562238934, 6 0.09983291562238933, 3 0.09544695071010864","extract logic for checking string representation of objects into separate methodsformat source codevariable names should follow naming conventionsmodified appenddetail method for object value in jsontostringstyle classfix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade."
1534,1534,"6 0.15992812219227312, 5 0.15154237795747227, 0 0.14944594189877208, 1 0.13477088948787067, 2 0.13477088948787067, 3 0.13477088948787067, 4 0.13477088948787067",fastdateformat apis that use a stringbuilder
1535,1535,"0 0.19159008632692845, 2 0.14480646059593427, 5 0.14285714285714285, 1 0.13311055416318576, 3 0.13311055416318576, 4 0.12921191868560292, 6 0.1253132832080201","applying sebbs patch from - adding isstarted, issuspended and isstopped to stopwatch"
1536,1536,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
1537,1537,"3 0.23631175316568578, 0 0.22382735865881936, 2 0.15516318887105404, 4 0.11396468699839486, 5 0.09149277688603533, 6 0.09149277688603531, 1 0.08774745853397542",add final modifier to local variables.: performance improvements for stringescapeutils. this fixes from github. thanks to fabian lange.: numericentityescaper incorrectly encodes supplementary characters. thanks to chris karcher.add final modifier to local variables.[] stringindexoutofboundsexception in charsequencetranslator.[] stringescapeutils.escapexml(input) outputs wrong results when an input contains characters in supplementary planes. also rewrite method to avoid modification of counter variable in for loopformatting/wsbreaking 120+ line in half
1538,1538,"4 0.17209690893901416, 1 0.1584516847674742, 0 0.15650236702868278, 2 0.13700918964076858, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",[github] commons-lang pull request : intellij idea refactorings..
1539,1539,"0 0.22276029055690072, 2 0.14554748453053534, 6 0.1380145278450363, 4 0.13048157115953726, 1 0.12106537530266347, 3 0.12106537530266347, 5 0.12106537530266347","[] introduced concurrentruntimeexception and extended the exception handling methods of concurrentutils to support runtime exceptions, too."
1540,1540,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1541,1541,"3 0.3061449002043062, 6 0.22913719943422914, 5 0.1708313688511708, 2 0.07622190790507623, 1 0.07402168788307403, 0 0.07182146786107184, 4 0.07182146786107184","format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezonesadd final modifier to local variables.trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1542,1542,"4 0.46013501185914985, 0 0.12297026090129536, 1 0.08593322386425835, 2 0.08337894544791097, 6 0.08337894544791097, 3 0.08210180623973727, 5 0.08210180623973727","sort members.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classreplacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving indexof(string, int) and indexof(string, int, int) over to charsequence. . this, plus the same happening for the string, string, int variant will open up a lot of methods. "
1543,1543,"3 0.3029259896729776, 6 0.25741059475999234, 2 0.09409064830751578, 1 0.0873972078791356, 0 0.08605851979345956, 4 0.08605851979345956, 5 0.08605851979345956","make sure lines in files dont have trailing white spaces and remove all trailing white spacesrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesreplace tabs with spaces fastdateparser and fastdateprinter support x format"
1544,1544,"4 0.2060114826072273, 0 0.20128335021952043, 3 0.19655521783181357, 2 0.116176967240797, 1 0.10435663627152986, 6 0.09490037149611615, 5 0.08071597433299561",use final.: merged robs javadoc comments and updated to use code units instead of code points: changed charsequence lastindexof for supplementary characters: fixed charsequenceutils indexof for supplementary chars: fixed formatting on charsequenceutils.javafixed charsequenceutils to check for supplementary charschanged charsequence lastindexof to handle supplementary charactersrefactor magic number into constant.statement unnecessarily nested within else clause.add final modifier to local variables.formattingmoving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils class
1545,1545,"6 0.2417233560090703, 4 0.2163265306122449, 2 0.12902494331065756, 1 0.1052154195011338, 3 0.10362811791383222, 0 0.10204081632653063, 5 0.10204081632653063",make sure lines in files dont have trailing white spaces and remove all trailing white spaces: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
1546,1546,"3 0.22472848788638258, 0 0.14285714285714282, 2 0.1311612364243943, 1 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",validationadd final modifier to local variables.[] vastly expanded typeutils
1547,1547,"6 0.2872503840245776, 5 0.13671274961597538, 0 0.11520737327188942, 1 0.11520737327188942, 2 0.11520737327188942, 3 0.11520737327188942, 4 0.11520737327188942",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
1548,1548,"5 0.25396825396825395, 6 0.17931547619047616, 0 0.1185515873015873, 1 0.11334325396825398, 2 0.11160714285714288, 3 0.11160714285714288, 4 0.11160714285714288", fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1549,1549,"3 0.3566760037348272, 2 0.111577964519141, 1 0.10830999066293186, 4 0.10667600373482727, 6 0.10667600373482727, 0 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1550,1550,"0 0.23683547493071305, 3 0.1751070798689846, 2 0.1292517006802721, 5 0.11690602166792645, 1 0.11514235323759135, 4 0.11337868480725626, 6 0.11337868480725626",add explict default caseadd final modifier to local variables.convert to java 5 enhanced for loops. convert to java 5 enhanced loops. 
1551,1551,"3 0.21067821067821063, 2 0.13795093795093796, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
1552,1552,"0 0.2518865469685142, 2 0.1334894613583138, 3 0.12984647410876918, 4 0.12984647410876918, 1 0.12073900598490765, 5 0.117096018735363, 6 0.117096018735363",: reflectiontostringbuilder.tostring does not debug 3rd party object fields within 3rd party object. suggested by philip hodges. final patch from thomas neidhart.
1553,1553,"2 0.24192665571975913, 6 0.13081554460864805, 1 0.12889983579638753, 3 0.12889983579638753, 0 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
1554,1554,"6 0.27570207570207567, 0 0.15604395604395602, 2 0.11843711843711846, 1 0.11501831501831504, 3 0.11501831501831504, 4 0.1098901098901099, 5 0.1098901098901099",make sure lines in files dont have trailing white spaces and remove all trailing white spaces - dateutilsparsedate uses default locale; add locale support
1555,1555,"4 0.20332577475434618, 3 0.17334341143864954, 2 0.15041572184429325, 0 0.12572436381960195, 6 0.11866969009826153, 1 0.11514235323759135, 5 0.11337868480725626",sort members.extract method.add final modifier to local variables.[] stringutils join apis for primitives.
1556,1556,"3 0.2066378066378066, 2 0.13795093795093796, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
1557,1557,"3 0.19943676395289298, 4 0.15642601126472094, 1 0.1367127496159754, 0 0.13312852022529442, 6 0.1313364055299539, 2 0.12775217613927295, 5 0.11520737327188943",use build in methods for comparing numerical valuesformat to 120 line length.add final modifier to local variables.
1558,1558,"5 0.3022308022308023, 0 0.14006864006864006, 1 0.12205062205062205, 2 0.11904761904761904, 3 0.11003861003861003, 4 0.10703560703560704, 6 0.09952809952809956","change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
1559,1559,"5 0.22824994976893714, 2 0.19449467550733376, 3 0.1523005826803295, 0 0.13964235483222823, 6 0.10026120152702432, 1 0.09322885272252363, 4 0.0918223829616235","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibilityadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1560,1560,"3 0.40073929115025, 1 0.10241356816699282, 2 0.10241356816699282, 4 0.09936942813655142, 6 0.09936942813655142, 0 0.09784735812133072, 5 0.09784735812133072","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1561,1561,"2 0.17250673854447438, 1 0.1536388140161725, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",more varargs-related updates
1562,1562,"2 0.23927979151859746, 3 0.21937929400615966, 6 0.11158493248045488, 1 0.10992655768775172, 0 0.10660980810234542, 4 0.10660980810234542, 5 0.10660980810234542",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.fixing crlfsstatement unnecessarily nested within else clause.add final modifier to local variables.
1563,1563,"4 0.15573525007487268, 6 0.1536388140161725, 5 0.1452530697813717, 0 0.13686732554657086, 1 0.13686732554657086, 3 0.13686732554657086, 2 0.13477088948787064",: new randumutils class. thanks to duncan jones
1564,1564,"4 0.7105707531239447, 3 0.0651806822019588, 5 0.04922323539344815, 0 0.048632218844984795, 2 0.044495103005741304, 1 0.04390408645727795, 6 0.03799392097264438","sort members.[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
1565,1565,"6 0.28016829221648504, 5 0.18913750239051447, 3 0.1663798049340218, 2 0.0940906483075158, 0 0.09007458405048768, 1 0.09007458405048768, 4 0.09007458405048768","zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1566,1566,"3 0.20259740259740258, 2 0.14805194805194805, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1567,1567,"2 0.22874149659863938, 1 0.13151927437641722, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1568,1568,"2 0.17431457431457428, 3 0.16219336219336214, 4 0.14401154401154398, 0 0.12987012987012989, 1 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to method parameters.
1569,1569,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.14525306978137167, 1 0.14315663372267146, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
1570,1570,"6 0.2304324028461959, 2 0.13656267104542966, 4 0.1327312534209086, 0 0.126984126984127, 1 0.12506841817186645, 3 0.12506841817186645, 5 0.12315270935960593","added missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
1571,1571,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
1572,1572,"2 0.18852258852258855, 0 0.1663003663003663, 4 0.1440781440781441, 6 0.1406593406593407, 5 0.12527472527472527, 1 0.11843711843711846, 3 0.11672771672771677","removes unnecessary class reference of static method calls which are declared in the same class: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
1573,1573,"6 0.21498189919242547, 3 0.15650236702868278, 4 0.1272626009468115, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
1574,1574,"3 0.15079365079365076, 4 0.15079365079365076, 6 0.15079365079365076, 5 0.14873603762492646, 1 0.13433274544385657, 0 0.1322751322751323, 2 0.1322751322751323",use validateistrue to validate arguments: there should be a differencebuilder with a reflectiondifferencebuilder implementation
1575,1575,"2 0.33540372670807456, 3 0.11962272831838049, 5 0.11479181044398436, 6 0.10996089256958824, 4 0.10835058661145619, 1 0.10835058661145616, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1576,1576,"0 0.16421356421356417, 2 0.15209235209235208, 4 0.15007215007215002, 1 0.137950937950938, 5 0.13593073593073596, 3 0.12987012987012989, 6 0.12987012987012989",: add a reflection-based variant of diffbuilder
1577,1577,"6 0.17460317460317457, 0 0.1515423779574723, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
1578,1578,"3 0.4022613611654708, 2 0.10393563818221352, 1 0.10089149815177215, 6 0.09936942813655145, 0 0.09784735812133075, 4 0.09784735812133075, 5 0.09784735812133075","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1579,1579,"5 0.2649228705566734, 0 0.14598703331097695, 3 0.1334674714956405, 6 0.13190252626872348, 4 0.11312318354571875, 1 0.10999329309188467, 2 0.10060362173038231",fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone setapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1580,1580,"3 0.30961943010135784, 6 0.2547332185886403, 2 0.09007458405048768, 1 0.08739720787913562, 0 0.08605851979345958, 4 0.08605851979345958, 5 0.08605851979345958","make sure lines in files dont have trailing white spaces and remove all trailing white spacesrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesreplace tabs with spaces fastdateparser and fastdateprinter support x format"
1581,1581,"6 0.3223622782446312, 2 0.11974789915966384, 3 0.11974789915966384, 4 0.11974789915966384, 0 0.10830999066293186, 1 0.1050420168067227, 5 0.1050420168067227","[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .utc and gmt are the same, so simplify.refactor ""gmt"" magic string.make sure lines in files dont have trailing white spaces and remove all trailing white spaces"
1582,1582,"2 0.16621743036837375, 4 0.1473495058400719, 3 0.14525306978137167, 1 0.13686732554657086, 0 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",: added get methods to arrayutils
1583,1583,"3 0.21067821067821066, 2 0.13997113997113997, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1584,1584,"3 0.2046176046176046, 2 0.14603174603174604, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1585,1585,"5 0.28285193858964347, 4 0.12620348685922456, 0 0.11891751236013531, 1 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1586,1586,"3 0.23507180650037793, 4 0.14512471655328793, 2 0.14159737969261776, 0 0.12396069538926684, 1 0.12219702695893174, 6 0.11866969009826155, 5 0.11337868480725624","sort members.add final modifier to local variables.fix pmd issues: ""these nested if statements could be combined"""
1587,1587,"5 0.2791635172587553, 6 0.15394305870496341, 0 0.11337868480725624, 1 0.11337868480725624, 2 0.11337868480725624, 3 0.11337868480725624, 4 0.11337868480725624", fastdateparser and fastdateprinter support x formatapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1588,1588,"0 0.196394942157654, 2 0.15496368038740915, 5 0.1380145278450363, 3 0.13424804950228678, 1 0.13048157115953726, 6 0.12483185364541298, 4 0.12106537530266345","applying sebbs patch from - adding isstarted, issuspended and isstopped to stopwatch[] spelling fixes."
1589,1589,"2 0.23426382047071698, 6 0.13464696223316913, 3 0.13081554460864805, 1 0.13081554460864803, 0 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
1590,1590,"5 0.22874537943031095, 2 0.20134811915633835, 3 0.1526418786692759, 1 0.11154598825831702, 6 0.1100239182430963, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1591,1591,"5 0.2517704517704518, 3 0.16971916971916973, 2 0.12356532356532357, 6 0.12185592185592187, 1 0.11330891330891334, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1592,1592,"0 0.36722883597883604, 3 0.16005291005291006, 2 0.11722883597883596, 4 0.10449735449735449, 6 0.09292328042328041, 1 0.08134920634920635, 5 0.07671957671957674","[] org.apache.commons.lang3.reflect.fieldutils.removefinalmodifier(field) does not clean up after itself.make the readdeclaredfield(final object target, final string fieldname, final boolean forceaccess) impl match its in-line comment and not rely on the default behavior of readfield(field, object).a bit of dog food and a lot of javadoc tweakage[] add fieldutils getdeclaredfields() to return all the fields defined in the given class and super classes.add final modifier to local variables.checkstyle"
1593,1593,"2 0.16912972085385877, 3 0.15763546798029557, 1 0.14805692391899286, 0 0.14039408866995073, 4 0.1384783798576902, 5 0.12315270935960596, 6 0.12315270935960596",add final modifier to method parameters.more varargs-related updates
1594,1594,"2 0.18764948901935202, 6 0.1861274190041313, 0 0.1632963687758208, 4 0.1282887584257447, 5 0.1130680582735377, 3 0.111545988258317, 1 0.11002391824309635",": add bypass option for classes to recursive and reflective equalsbuilderpatch supplied by yathos ug: add support for recursive comparison to equalsbuilderreflectionequals ()minimal clean-ups: remove getter methods, improve javadoc, add unit test for reflectionappend: recursive and reflective equalsbuilder ()patch by yathos ug"
1595,1595,"4 0.23201058201058197, 3 0.1357142857142857, 6 0.13571428571428568, 2 0.132010582010582, 0 0.12275132275132278, 1 0.12275132275132278, 5 0.11904761904761907",: add methods for removing all invalid characters according to xml 1.0 and xml 1.1 in an input string to stringescapeutils. thanks to adam hooper
1596,1596,"5 0.2883164194639604, 1 0.12073900598490762, 6 0.12073900598490762, 4 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1597,1597,"5 0.2534798534798535, 3 0.17142857142857143, 2 0.12356532356532357, 6 0.11843711843711845, 1 0.11330891330891334, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1598,1598,"2 0.3119288119288119, 4 0.12506012506012507, 0 0.12337662337662333, 1 0.11159211159211159, 6 0.11159211159211159, 3 0.10822510822510822, 5 0.10822510822510822",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
1599,1599,"6 0.39916457811194656, 5 0.1664160401002506, 2 0.09156223893065996, 0 0.0903926482873851, 4 0.08922305764411025, 3 0.08571428571428569, 1 0.07752715121136175","[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .utc and gmt are the same, so simplify.refactor ""gmt"" magic string.make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .trailing spaces fastdateparser does not handle non-gregorian calendars properly unnecessary ;applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1600,1600,"2 0.20890022675736958, 5 0.14342403628117908, 1 0.13151927437641722, 3 0.13151927437641722, 4 0.12953514739229025, 0 0.12755102040816327, 6 0.12755102040816327",: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1601,1601,"6 0.22820712984647412, 0 0.15352589123080926, 2 0.1334894613583138, 4 0.1334894613583138, 1 0.11709601873536303, 3 0.11709601873536303, 5 0.11709601873536303","<action issue="""" type=""fix"">stringescapeutils.escapejava() and escapeecmascript() do not output the escaped surrogate pairs that are java parsable</action>"
1602,1602,"6 0.2908777969018933, 5 0.19716963090457068, 3 0.14228341939185313, 2 0.09944540065021991, 1 0.09275196022183976, 0 0.09141327213616372, 4 0.08605851979345958",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1603,1603,"4 0.2700746965452848, 0 0.14752567693744167, 2 0.12791783380018673, 3 0.11811391223155931, 5 0.11647992530345475, 1 0.10994397759103645, 6 0.10994397759103645",": avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.[] create strbuilder apis similar to string.format(string, object...)"
1604,1604,"3 0.15363881401617246, 4 0.15363881401617246, 6 0.15363881401617246, 0 0.1347708894878706, 1 0.1347708894878706, 2 0.1347708894878706, 5 0.1347708894878706",use validateistrue to validate arguments
1605,1605,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
1606,1606,"5 0.25347985347985347, 3 0.17484737484737478, 2 0.11843711843711845, 1 0.11672771672771674, 6 0.11672771672771674, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1607,1607,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1608,1608,"6 0.2985098801425332, 5 0.1692581794622611, 2 0.16358924522189827, 3 0.12277291869128602, 4 0.08989310009718171, 1 0.0785552316164561, 0 0.07742144476838356",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1609,1609,"2 0.32252127904301814, 3 0.12928456406717273, 5 0.11479181044398434, 1 0.1131815044858523, 4 0.10996089256958823, 6 0.10674028065332414, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1610,1610,"4 0.21156462585034014, 2 0.17505668934240362, 5 0.16077097505668933, 6 0.1163265306122449, 0 0.11632653061224488, 3 0.11315192743764173, 1 0.10680272108843536",sort members.applying joannes subsequent patch from making appendifmissing use the same logic for null as endswith (by reusing endswith). applying joanne polskys patch adding appendifmissing/prependifmissing methods to stringutils []
1611,1611,"6 0.20890022675736955, 3 0.13747165532879818, 5 0.1354875283446712, 4 0.13350340136054423, 0 0.12953514739229027, 1 0.1275510204081633, 2 0.1275510204081633"," partial: implement format u for fastdateformat, day number of week"
1612,1612,"4 0.7132069656341502, 3 0.0567884111573432, 0 0.05624903683156111, 2 0.05517028817999692, 5 0.044382801664355064, 1 0.039528432732316224, 6 0.034674063800277405","sort members.simplify boolean expressioneat own dog food: use stringutils.isempty().add final modifier to local variables.resolving - changing stringutils.isalpha, isalphanumeric and isnumeric to return false when passed an empty string. documenting this in the changes report and in the upgrade article. also fixing a javadoc c+p error in isnumericspace and isalphanumericspace. change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
1613,1613,"6 0.2872503840245776, 5 0.13671274961597538, 0 0.11520737327188942, 1 0.11520737327188942, 2 0.11520737327188942, 3 0.11520737327188942, 4 0.11520737327188942",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
1614,1614,"2 0.22874149659863938, 1 0.13151927437641722, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1615,1615,"2 0.24807256235827663, 3 0.21156462585034014, 6 0.12902494331065756, 0 0.1036281179138322, 1 0.1036281179138322, 4 0.10204081632653061, 5 0.10204081632653061",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateparser too strict on abbreviated short month symbolsadd final modifier to local variables.format. fastdateparser_timezonestrategytesttesttimezonestrategypattern fails on windows with german localereimplementing 1107
1616,1616,"6 0.32006958034355293, 0 0.141987388562731, 4 0.1282887584257447, 5 0.10850184822787562, 3 0.10241356816699285, 2 0.10089149815177215, 1 0.09784735812133075",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
1617,1617,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1618,1618,"3 0.3537076522151148, 2 0.11158493248045485, 6 0.10826818289504855, 0 0.1066098081023454, 1 0.1066098081023454, 4 0.1066098081023454, 5 0.1066098081023454","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1619,1619,"5 0.2826908541194255, 6 0.15041572184429322, 0 0.11337868480725624, 1 0.11337868480725624, 2 0.11337868480725624, 3 0.11337868480725624, 4 0.11337868480725624", fastdateparser and fastdateprinter support x formatapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1620,1620,"6 0.29757123733027346, 5 0.19449225473321854, 3 0.1462994836488812, 2 0.09409064830751578, 1 0.0914132721361637, 0 0.09007458405048767, 4 0.08605851979345956",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1621,1621,"1 0.6746965452847806, 3 0.06946778711484593, 4 0.05704948646125116, 2 0.05639589169000933, 0 0.05312791783380018, 5 0.0472455648926237, 6 0.042016806722689086",[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1622,1622,"6 0.2872503840245776, 5 0.13671274961597538, 0 0.11520737327188942, 1 0.11520737327188942, 2 0.11520737327188942, 3 0.11520737327188942, 4 0.11520737327188942",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
1623,1623,"3 0.34973544973544973, 6 0.23245149911816576, 5 0.09541446208112872, 2 0.0818342151675485, 1 0.08059964726631394, 4 0.08059964726631394, 0 0.07936507936507936","lvar should not hide ivar.add final modifier to local variables.format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1624,1624,"3 0.3537076522151148, 6 0.10992655768775171, 1 0.10826818289504857, 4 0.10826818289504857, 0 0.10660980810234541, 2 0.10660980810234541, 5 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1625,1625,"3 0.38476190476190475, 6 0.18809523809523804, 0 0.12809523809523804, 2 0.08365079365079363, 1 0.07253968253968254, 4 0.07142857142857142, 5 0.07142857142857142","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove unused constructor parameterformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesrename textstrategy to caseinsensitivetextstrategy per sebbs suggestion[] use the cache in fastdateparser correctly.add final modifier to local variables.tab police fastdateparser could use calendar.getdisplaynames for all text fieldsremove unnecessary keyvalue instances: fastdateparser could use calendar.getdisplaynames for all text fields"
1626,1626,"4 0.1740462266778056, 6 0.16819827346143135, 0 0.14285714285714282, 3 0.13505987190197716, 2 0.12921191868560292, 1 0.1253132832080201, 5 0.1253132832080201",remove redundant type arguments.[] get method override hierarchy
1627,1627,"3 0.35039090262970857, 2 0.11158493248045488, 1 0.10826818289504858, 4 0.10826818289504858, 6 0.10826818289504858, 0 0.10660980810234542, 5 0.10660980810234542","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1628,1628,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
1629,1629,"2 0.26463700234192034, 4 0.1316679677335415, 0 0.12438199323445226, 1 0.12256049960967995, 3 0.12256049960967995, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
1630,1630,"1 0.7167972674301786, 2 0.054350010046212566, 5 0.046614426361261806, 3 0.045911191480811735, 4 0.045911191480811735, 0 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1631,1631,"0 0.22111992945326284, 3 0.16865079365079366, 6 0.14087301587301587, 2 0.12235449735449735, 1 0.11926807760141094, 4 0.11463844797178131, 5 0.1130952380952381",add final modifier to local variables.: implementation of a memomizer ()changes suggested in https://github.com/apache/commons-lang/pull/80:- tabs to spaces- use @override- remove unused variables- other minimal clean-ups
1632,1632,"2 0.20586820586820584, 0 0.16714766714766713, 4 0.14526214526214523, 1 0.1385281385281385, 5 0.12169312169312166, 3 0.1132756132756133, 6 0.10822510822510824", - jsontostringstyle does not escape double quote in a stringvalue[github] commons-lang pull request : intellij idea refactorings..: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1633,1633,"3 0.35204927742241166, 2 0.11158493248045487, 1 0.1099265576877517, 0 0.10660980810234541, 4 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1634,1634,"6 0.2474174855127236, 4 0.16099773242630383, 3 0.13807004283194754, 0 0.11337868480725626, 1 0.11337868480725626, 2 0.11337868480725626, 5 0.11337868480725626",remove redundant type arguments.refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
1635,1635,"6 0.2917071590540979, 5 0.1692581794622611, 2 0.16245545837382572, 3 0.12730806608357628, 4 0.08989310009718171, 1 0.08082280531260123, 0 0.07855523161645611",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1636,1636,"2 0.2883597883597884, 4 0.12506012506012507, 0 0.12337662337662336, 3 0.12337662337662336, 6 0.12337662337662336, 1 0.10822510822510825, 5 0.10822510822510825",crlf -> lfjavadoc: fix typo but working is still awkward.simplify issamelenght implementations by reusing getlength. this also fixes a lot of the useless paranthesis warnings generated by pmd.
1637,1637,"6 0.31398130028267013, 0 0.1511198086540552, 4 0.1252446183953033, 2 0.10697977821265492, 3 0.10393563818221355, 5 0.10089149815177212, 1 0.09784735812133075",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
1638,1638,"6 0.2987606001304631, 2 0.1861274190041313, 5 0.1130680582735377, 1 0.10545770819743422, 3 0.10089149815177215, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
1639,1639,"2 0.23072562358276635, 4 0.13151927437641722, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1640,1640,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.15154237795747227, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
1641,1641,"0 0.1837928153717627, 3 0.1506544138123085, 1 0.1487050960735171, 2 0.1311612364243943, 4 0.1311612364243943, 5 0.1292119186856029, 6 0.12531328320802007","use final.: add archutils - an utility class for the ""os.arch"" system property ()"
1642,1642,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1643,1643,"5 0.28015873015873005, 1 0.12275132275132275, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1644,1644,"6 0.17879604672057495, 0 0.1473495058400719, 1 0.1347708894878706, 2 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706, 5 0.1347708894878706",[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
1645,1645,"4 0.16725455614344503, 6 0.1569664902998236, 3 0.14462081128747797, 2 0.1343327454438566, 0 0.13227513227513232, 1 0.13227513227513232, 5 0.13227513227513232",remove redundant type arguments.
1646,1646,"5 0.27460317460317457, 1 0.1246031746031746, 6 0.1246031746031746, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1647,1647,"2 0.1837928153717627, 1 0.16819827346143132, 5 0.13700918964076858, 4 0.13116123642439428, 3 0.1292119186856029, 0 0.12531328320802007, 6 0.12531328320802007",adding hennings github pull request with a triple implementation. 675
1648,1648,"3 0.3862433862433863, 2 0.1146384479717813, 1 0.10229276895943562, 0 0.09920634920634923, 4 0.09920634920634923, 5 0.09920634920634923, 6 0.09920634920634923","add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1649,1649,"6 0.3305322128851541, 5 0.12464985994397756, 3 0.11974789915966384, 0 0.10830999066293186, 4 0.10667600373482727, 1 0.1050420168067227, 2 0.1050420168067227",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor some duplicate code.
1650,1650,"2 0.2736077481840193, 0 0.12106537530266342, 1 0.12106537530266342, 3 0.12106537530266342, 4 0.12106537530266342, 5 0.12106537530266342, 6 0.12106537530266342",crlf -> lfjavadoc: fix typo but working is still awkward.swap and shift for arrays
1651,1651,"1 0.7139971139971139, 3 0.05271765271765269, 2 0.05137085137085136, 5 0.048677248677248666, 4 0.046657046657046654, 0 0.04329004329004329, 6 0.04329004329004329",flips the order of conditional expressions and if statements whose conditions were negated: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1652,1652,"2 0.21534391534391534, 3 0.15238095238095234, 0 0.1357142857142857, 4 0.13015873015873017, 6 0.1283068783068783, 1 0.11904761904761908, 5 0.11904761904761908",: please add number to byte[] methods. suggested by lilianne e. blaze. final patch from vincent ricard (with thanks to henri yandell).
1653,1653,"3 0.18783068783068776, 5 0.14873603762492646, 6 0.13433274544385657, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
1654,1654,"2 0.24460057246942496, 0 0.1334894613583138, 5 0.1334894613583138, 3 0.1262034868592246, 1 0.12438199323445226, 6 0.12073900598490767, 4 0.11709601873536302",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.refactored to generics and added isarrayindexvalid
1655,1655,"0 0.25006505334374185, 3 0.13166796773354147, 4 0.13166796773354147, 1 0.12620348685922458, 2 0.12620348685922458, 5 0.117096018735363, 6 0.117096018735363",: reflectiontostringbuilder.tostring does not debug 3rd party object fields within 3rd party object. suggested by philip hodges. final patch from thomas neidhart.
1656,1656,"3 0.196394942157654, 0 0.1700295937584073, 2 0.14178100618778583, 1 0.1285983319881625, 4 0.12106537530266345, 5 0.12106537530266345, 6 0.12106537530266345",add final modifier to local variables.: wrong name or result of stringutilsgetjarowinklerdistance ()deprecate stringutilsgetjarowinklerdistance and add stringutilsgetjarowinklersimilarity instead
1657,1657,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",changing eol-style to native.misc. event utils.
1658,1658,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
1659,1659,"2 0.21909966172261253, 3 0.18813427010148318, 4 0.12256049960967996, 1 0.11891751236013534, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
1660,1660,"5 0.28285193858964347, 1 0.12256049960967995, 4 0.12256049960967992, 0 0.12073900598490764, 2 0.117096018735363, 3 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1661,1661,"0 0.15154237795747227, 6 0.15154237795747227, 4 0.14944594189877208, 3 0.13896376160527107, 5 0.13896376160527107, 1 0.13477088948787064, 2 0.13477088948787064",[] prefer throwable.getcause() in exceptionutils.getcause() ()
1662,1662,"5 0.2883164194639604, 4 0.12256049960967993, 0 0.11891751236013531, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1663,1663,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1664,1664,"2 0.2755659640905542, 4 0.12620348685922456, 3 0.12438199323445226, 1 0.12073900598490764, 0 0.11891751236013533, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
1665,1665,"3 0.38470017636684306, 2 0.11618165784832449, 1 0.10074955908289243, 4 0.10074955908289243, 0 0.09920634920634923, 5 0.09920634920634923, 6 0.09920634920634923","add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1666,1666,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1667,1667,"6 0.2883057985098802, 5 0.1715257531584062, 2 0.16699060576611596, 3 0.1261742792355037, 4 0.09102688694525428, 0 0.08082280531260122, 1 0.07515387107223843",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1668,1668,"3 0.20259740259740255, 2 0.146031746031746, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
1669,1669,"2 0.32091097308488614, 3 0.12606395215090868, 1 0.12284334023464458, 5 0.11318150448585232, 4 0.10835058661145616, 6 0.1051299746951921, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1670,1670,"4 0.19743803954330263, 2 0.14675577833472567, 0 0.13895850737956003, 3 0.13311055416318573, 5 0.1311612364243943, 1 0.1272626009468115, 6 0.12531328320802007","sort by method name.[] add exceptionutils.throwableoftype(throwable, class) andfriends."
1671,1671,"2 0.261904761904762, 3 0.1622315592903828, 0 0.14915966386554622, 1 0.10830999066293187, 6 0.10830999066293187, 4 0.10504201680672272, 5 0.10504201680672272",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: numericentityescaper incorrectly encodes supplementary characters. thanks to chris karcher.add final modifier to local variables.
1672,1672,"2 0.21141016793190706, 3 0.16149068322981366, 0 0.15021854152288933, 4 0.12928456406717273, 6 0.12284334023464456, 5 0.11318150448585232, 1 0.1115711985277203",removes unnecessary class reference of static method calls which are declared in the same classcrlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
1673,1673,"6 0.21693121693121686, 3 0.15260373155109994, 4 0.1292119186856029, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
1674,1674,"3 0.20057720057720055, 2 0.15007215007215005, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1675,1675,"6 0.33380018674136314, 5 0.13608776844070955, 0 0.10994397759103641, 1 0.10504201680672269, 2 0.10504201680672269, 3 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
1676,1676,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.15154237795747227, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
1677,1677,"3 0.2750566893424037, 2 0.1528344671201814, 6 0.1306122448979592, 4 0.12585034013605442, 0 0.10997732426303855, 1 0.10362811791383222, 5 0.10204081632653064",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerpmd: useless parenthesesformat to 120 line length.removed unnecessary multiplication by one.add final modifier to method parameters.
1678,1678,"6 0.20096371882086164, 5 0.1434240362811791, 3 0.13945578231292519, 4 0.13151927437641722, 2 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
1679,1679,"3 0.23057644110275682, 2 0.1428571428571428, 0 0.12531328320802007, 1 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",fix non-critical typos in comments and javadocfix typos in several local variables
1680,1680,"4 0.2542328042328042, 2 0.15052910052910046, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 5 0.11904761904761904, 6 0.11904761904761904",: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
1681,1681,"2 0.20691609977324255, 5 0.1414399092970521, 3 0.1354875283446712, 1 0.13350340136054423, 0 0.12755102040816327, 4 0.12755102040816327, 6 0.12755102040816327",: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1682,1682,"3 0.22675736961451243, 1 0.13151927437641722, 2 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
1683,1683,"0 0.2279265873015873, 2 0.1532738095238095, 6 0.14285714285714282, 4 0.13244047619047616, 1 0.1150793650793651, 5 0.1150793650793651, 3 0.11334325396825398","functions.java whitspacesreplace tabs with four spaces, as per the projects checkstyle rules.adding the functions class as a helper for dealing with java 8 lambdas."
1684,1684,"3 0.19451659451659445, 2 0.15007215007215005, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
1685,1685,"2 0.22274264897215712, 3 0.18266978922716623, 4 0.12438199323445226, 1 0.11891751236013533, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
1686,1686,"5 0.2883164194639604, 4 0.12256049960967993, 1 0.11891751236013531, 6 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1687,1687,"6 0.33053221288515405, 5 0.134453781512605, 0 0.11484593837535013, 1 0.10504201680672269, 2 0.10504201680672269, 3 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
1688,1688,"5 0.28285193858964347, 4 0.12620348685922456, 0 0.12073900598490764, 1 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1689,1689,"2 0.19983719983719986, 5 0.19413919413919414, 6 0.1741961741961742, 0 0.1172161172161172, 1 0.11009361009361007, 4 0.11009361009361007, 3 0.09442409442409444",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefullyapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1690,1690,"2 0.2025012025012025, 0 0.1688311688311688, 4 0.14357864357864356, 1 0.13684463684463682, 5 0.1216931216931217, 3 0.11832611832611836, 6 0.10822510822510825", - jsontostringstyle does not escape double quote in a stringvalue[github] commons-lang pull request : intellij idea refactorings..: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1691,1691,"3 0.2114101679319071, 2 0.2017483321831148, 4 0.15343915343915343, 0 0.11962272831838049, 1 0.10512997469519211, 6 0.10512997469519211, 5 0.10351966873706007",explicit type parameters can be removedremove redundant type arguments.add final modifier to local variables.add final modifier to method parameters.[] vastly expanded typeutils
1692,1692,"6 0.26647426647426653, 3 0.13852813852813853, 2 0.12842712842712842, 0 0.12506012506012507, 5 0.12337662337662336, 4 0.10990860990860994, 1 0.10822510822510825",make sure lines in files dont have trailing white spaces and remove all trailing white spacesfixing crlfsstatement unnecessarily nested within else clause. code refactoring in numberutils
1693,1693,"5 0.22570123939986955, 2 0.21504674929332465, 3 0.1511198086540552, 6 0.10850184822787562, 1 0.10393563818221355, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1694,1694,"6 0.2631072631072631, 3 0.1385281385281385, 0 0.13347763347763344, 2 0.12506012506012504, 5 0.12337662337662335, 1 0.10822510822510824, 4 0.10822510822510824",make sure lines in files dont have trailing white spaces and remove all trailing white spacesfixing crlfsstatement unnecessarily nested within else clause. code refactoring in numberutils
1695,1695,"5 0.27275132275132274, 6 0.13015873015873014, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1696,1696,"3 0.22477324263038542, 2 0.1354875283446712, 1 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
1697,1697,"5 0.29216269841269843, 6 0.12723214285714282, 2 0.12549603174603174, 1 0.1150793650793651, 4 0.1150793650793651, 0 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
1698,1698,"3 0.20259740259740255, 2 0.14199134199134197, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
1699,1699,"3 0.19406041986687145, 0 0.1635944700460829, 6 0.1474654377880184, 4 0.14567332309267791, 2 0.11879160266257043, 1 0.11520737327188942, 5 0.11520737327188942",sort by method name.use validateistrue to validate argumentsadd final modifier to local variables.convert to java 5 enhanced loops. 
1700,1700,"2 0.17027417027417022, 3 0.1642135642135642, 4 0.13795093795093796, 1 0.13593073593073596, 0 0.1318903318903319, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to method parameters.
1701,1701,"2 0.20890022675736955, 5 0.13945578231292513, 1 0.13747165532879818, 3 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 6 0.12755102040816327",: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1702,1702,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1703,1703,"6 0.29898128405591096, 2 0.1364605543710021, 5 0.1231935560293769, 4 0.12153518123667376, 0 0.10660980810234544, 1 0.10660980810234544, 3 0.10660980810234544",make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse private utc constant to avoid corruption of mutable constant
1704,1704,"2 0.17960023515579068, 4 0.14667842445620222, 3 0.14050558495002938, 0 0.13433274544385657, 1 0.13433274544385657, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
1705,1705,"6 0.21088435374149656, 3 0.13747165532879818, 5 0.13350340136054423, 0 0.13151927437641722, 2 0.13151927437641722, 1 0.12755102040816327, 4 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
1706,1706,"6 0.24272486772486773, 2 0.20723104056437391, 3 0.14704585537918868, 1 0.10537918871252207, 0 0.09920634920634923, 4 0.09920634920634923, 5 0.09920634920634923",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.
1707,1707,"0 0.19897959183673464, 5 0.1414399092970521, 1 0.13747165532879818, 3 0.1354875283446712, 2 0.13151927437641722, 4 0.12755102040816327, 6 0.12755102040816327", - dateutilsparsedate uses default locale; add locale supportjavadoc correction
1708,1708,"4 0.2733426704014939, 0 0.14425770308123245, 2 0.13118580765639587, 3 0.11811391223155926, 5 0.11321195144724559, 6 0.11321195144724559, 1 0.10667600373482727",": avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.[] create strbuilder apis similar to string.format(string, object...)"
1709,1709,"1 0.1459096459096459, 4 0.14590964590964586, 2 0.14377289377289376, 3 0.14377289377289376, 5 0.14377289377289376, 0 0.1394993894993895, 6 0.13736263736263735",[] added constantinitializer class
1710,1710,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1711,1711,"6 0.21471861471861464, 3 0.13593073593073593, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",removes redundant + signpmd: remove useless parentheses
1712,1712,"3 0.1954887218045112, 4 0.1467557783347257, 2 0.14480646059593424, 0 0.1311612364243943, 1 0.1292119186856029, 5 0.1272626009468115, 6 0.12531328320802007",: new class classpathutils with methods for turning fqn into resource path
1713,1713,"4 0.1825396825396825, 0 0.17296113847837982, 3 0.1346469622331691, 5 0.1327312534209086, 6 0.13081554460864805, 1 0.12315270935960593, 2 0.12315270935960593","[] create strbuilder apis similar to string.format(string, object...)"
1714,1714,"5 0.2864949258391881, 4 0.12438199323445225, 0 0.12073900598490762, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1715,1715,"6 0.20798319327731093, 2 0.20144724556489263, 4 0.12791783380018676, 0 0.12464985994397758, 1 0.12138188608776843, 3 0.11157796451914101, 5 0.10504201680672272",use final.remove trailing white spacesadded new vararg methods to insert values into an array at an index.this implements . this commit also deprecates the add() methodsthat inserted a single value into an array at an index.
1716,1716,"5 0.31092436974789917, 6 0.1279178338001867, 0 0.11974789915966384, 3 0.11974789915966384, 4 0.10994397759103644, 1 0.10667600373482727, 2 0.1050420168067227",adjust fastdateformat for java 7 behavior regarding format of the year pattern ().refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1717,1717,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1718,1718,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1719,1719,"5 0.2901379130887327, 4 0.12073900598490762, 0 0.11891751236013531, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1720,1720,"2 0.19451170298627923, 0 0.1568469195587839, 5 0.1380145278450363, 4 0.1361312886736615, 6 0.13236481033091205, 1 0.12106537530266345, 3 0.12106537530266345",multilinerecursivetostringstyle: made private field indent static: multiline recursive to string style. this fixes from github. thanks to jan matèrne.
1721,1721,"3 0.1878306878306878, 5 0.14462081128747795, 6 0.1384479717813051, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
1722,1722,"3 0.18577307466196352, 5 0.15079365079365076, 2 0.13433274544385657, 0 0.1322751322751323, 1 0.1322751322751323, 4 0.1322751322751323, 6 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
1723,1723,"2 0.19403393541324576, 0 0.1595511767925561, 4 0.1538040503557745, 1 0.12315270935960594, 3 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594",extract logic for checking string representation of objects into separate methods
1724,1724,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1725,1725,"3 0.19855699855699852, 2 0.15007215007215008, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1726,1726,"6 0.24331065759637188, 4 0.2179138321995465, 2 0.13061224489795914, 0 0.10204081632653063, 1 0.10204081632653063, 3 0.10204081632653063, 5 0.10204081632653063",make sure lines in files dont have trailing white spaces and remove all trailing white spaces: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
1727,1727,"6 0.20798319327731093, 2 0.18674136321195145, 4 0.1311858076563959, 0 0.12791783380018673, 1 0.12464985994397758, 3 0.1164799253034547, 5 0.10504201680672272",use final.remove trailing white spacesadded new vararg methods to insert values into an array at an index.this implements . this commit also deprecates the add() methodsthat inserted a single value into an array at an index.
1728,1728,"3 0.25447215923406397, 2 0.1627614008566389, 0 0.12925170068027206, 1 0.11337868480725623, 4 0.11337868480725623, 5 0.11337868480725623, 6 0.11337868480725623",": add todouble(bigdecimal), todouble(bigdecimal, double)fixing crlfsstatement unnecessarily nested within else clause.add final modifier to local variables."
1729,1729,"0 0.16931216931216928, 3 0.15079365079365076, 4 0.14462081128747792, 2 0.13844797178130513, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
1730,1730,"2 0.1536388140161725, 5 0.1536388140161725, 6 0.1536388140161725, 0 0.13477088948787064, 1 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
1731,1731,"0 0.14285714285714285, 1 0.14285714285714285, 2 0.14285714285714285, 3 0.14285714285714285, 4 0.14285714285714285, 5 0.14285714285714285, 6 0.14285714285714285", and 
1732,1732,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1733,1733,"5 0.2846734322144158, 4 0.12438199323445227, 0 0.12073900598490765, 6 0.11891751236013534, 1 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1734,1734,"5 0.27563618039808513, 6 0.1557067271352985, 1 0.11514235323759134, 0 0.11337868480725624, 2 0.11337868480725624, 3 0.11337868480725624, 4 0.11337868480725624", fastdateparser and fastdateprinter support x formatapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1735,1735,"3 0.21471861471861464, 2 0.13593073593073596, 0 0.12987012987012986, 1 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",reuseadd final modifier to local variables.
1736,1736,"6 0.28904249871991805, 5 0.1349206349206349, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
1737,1737,"2 0.1536388140161725, 5 0.1536388140161725, 6 0.1536388140161725, 0 0.13477088948787064, 1 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
1738,1738,"4 0.39037698412698424, 3 0.11375661375661375, 6 0.11259920634920634, 1 0.10796957671957672, 0 0.10565476190476189, 2 0.09408068783068782, 5 0.07556216931216933","sort members.[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687tab police (and trailing spaces) rename method from truncatemiddle() to abbreviatemiddle()"
1739,1739,"0 0.29050355774493714, 3 0.26655719759168034, 6 0.11808976464148875, 4 0.10276409414340447, 2 0.08839627805145045, 1 0.07115489874110563, 5 0.06253420908593323","extract some helper methods to make the code better readableextract method for parsing locales from stringbetter local variable names: localeutilstolocale does not support language followed by un m.49 numeric-3 area code ()pmd: remove useless parenthesesreusestatement unnecessarily nested within else clause.statement unnecessarily nested within else clause.use final consistently. fall through is intentional: wrong locale handling in localeutils.tolocale(). thanks to sergio fernández: test failure in localeutilstest when building with jdk 8: test failure in localeutilstest when building with jdk 8 - make problem more explicit by checking for empty stringsstatement unnecessarily nested within else clause. localeutils test fails with new locale ""ja_jp_jp_u-ca-japanese"" of jdk7[] localeutils.tolocale does not parse strings starting with an underscore."
1740,1740,"2 0.2510088781275222, 4 0.13424804950228678, 6 0.1285983319881625, 1 0.12294861447403821, 0 0.12106537530266344, 3 0.12106537530266344, 5 0.12106537530266344",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
1741,1741,"5 0.20510076689851972, 6 0.20135544854645981, 3 0.18887105403959337, 0 0.12894596040663456, 4 0.09773497413946851, 1 0.08899589798466204, 2 0.08899589798466204",add final modifier to local variables.tab police: fastdateparser could use calendar.getdisplaynames for all text fieldsshow where the parsing failed fastdateparser does not handle unterminated quotes correctlytrailing spaces fastdateparser does not handle non-gregorian calendars properlyfix bug in java 7 (locale.tostring() format has changed) fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1742,1742,"4 0.239136091595108, 2 0.1353109549830861, 1 0.12984647410876918, 3 0.12984647410876918, 0 0.12438199323445227, 6 0.12438199323445227, 5 0.11709601873536302",moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classjavadoc; move @since; add documented constructor
1743,1743,"3 0.19855699855699852, 2 0.146031746031746, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
1744,1744,"3 0.1915900863269284, 4 0.1584516847674742, 2 0.14480646059593424, 0 0.1272626009468115, 1 0.1272626009468115, 5 0.12531328320802007, 6 0.12531328320802007",sort by method name.add final modifier to local variables.
1745,1745,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
1746,1746,"3 0.31058990760483296, 4 0.13811892916370525, 1 0.12153518123667374, 6 0.10992655768775174, 0 0.10660980810234542, 2 0.10660980810234542, 5 0.10660980810234542","use validateistrue to validate argumentsremove redundant type arguments.fixing crlfsstatement unnecessarily nested within else clause.incorporated feedback from fabian, formatting adjusted, count >> 1 replaced with count / 2incorporated feedback from peteradd threadutils"
1747,1747,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1748,1748,"6 0.23854875283446714, 4 0.16077097505668933, 2 0.15442176870748295, 0 0.13061224489795917, 3 0.10839002267573697, 1 0.1052154195011338, 5 0.10204081632653063",sort members.make sure lines in files dont have trailing white spaces and remove all trailing white spaces: add wrap (with string or char) to stringutils. this closes pr from github. thanks to thiago andrade.
1749,1749,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1750,1750,"5 0.26091269841269843, 6 0.1706349206349206, 0 0.12202380952380949, 1 0.11160714285714288, 2 0.11160714285714288, 3 0.11160714285714288, 4 0.11160714285714288", fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1751,1751,"5 0.25396825396825395, 6 0.17237103174603172, 0 0.12202380952380952, 1 0.11681547619047622, 2 0.11160714285714288, 3 0.11160714285714288, 4 0.11160714285714288", fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1752,1752,"0 0.1590241034685479, 5 0.1569664902998236, 2 0.14050558495002943, 3 0.14050558495002943, 4 0.13639035861258086, 1 0.13433274544385657, 6 0.1322751322751323",[] added timedsemaphore class to concurrent package.
1753,1753,"4 0.15873015873015867, 3 0.14804639804639802, 2 0.14163614163614163, 0 0.1394993894993895, 1 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
1754,1754,"5 0.25570436507936506, 6 0.17931547619047616, 0 0.11507936507936509, 1 0.11507936507936509, 2 0.11160714285714286, 3 0.11160714285714286, 4 0.11160714285714286", fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1755,1755,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1756,1756,"4 0.3983268983268983, 0 0.11154011154011155, 1 0.10102960102960101, 2 0.09802659802659804, 6 0.09802659802659804, 3 0.09652509652509654, 5 0.09652509652509654","sort members.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classreplacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving contains(string, int) over to charsequence. 687"
1757,1757,"2 0.17229437229437228, 3 0.16219336219336217, 4 0.146031746031746, 0 0.12987012987012989, 1 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to method parameters.
1758,1758,"6 0.21693121693121686, 3 0.15650236702868278, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
1759,1759,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
1760,1760,"5 0.27210884353741494, 6 0.15747039556563364, 1 0.11690602166792645, 0 0.11337868480725626, 2 0.11337868480725626, 3 0.11337868480725626, 4 0.11337868480725626", fastdateparser and fastdateprinter support x formatapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1761,1761,"5 0.29216269841269843, 2 0.12723214285714282, 6 0.12723214285714282, 0 0.1150793650793651, 1 0.11334325396825398, 4 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
1762,1762,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
1763,1763,"5 0.28725038402457753, 3 0.1277521761392729, 6 0.12058371735791092, 0 0.11879160266257041, 1 0.1152073732718894, 2 0.1152073732718894, 4 0.1152073732718894",document intentional drop-thruapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1764,1764,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1765,1765,"5 0.2783068783068783, 6 0.12460317460317458, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1766,1766,"2 0.3401360544217687, 4 0.13061224489795917, 0 0.11791383219954645, 1 0.1052154195011338, 3 0.10204081632653061, 5 0.10204081632653061, 6 0.10204081632653061",": arrayutils.removeall(object array, int... indices) should do the clone, not its callers ()crlf -> lfjavadoc: fix typo but working is still awkward.[] complement arrayutils.addall() variants with by-index and by-value removal methods"
1767,1767,"3 0.20663780663780662, 2 0.141991341991342, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1768,1768,"5 0.2864949258391881, 0 0.12256049960967993, 4 0.12256049960967993, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1769,1769,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",convert to java 5 enhanced loops. 
1770,1770,"3 0.2935551730732454, 6 0.2574105947599924, 5 0.09676802447886784, 2 0.09007458405048768, 4 0.08873589596481164, 1 0.08739720787913562, 0 0.08605851979345958","format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1771,1771,"4 0.16931216931216928, 6 0.16108171663727217, 3 0.14050558495002938, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 5 0.1322751322751323",remove redundant type arguments.
1772,1772,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",changing eol-style to native.misc. event utils.
1773,1773,"3 0.19855699855699852, 2 0.15007215007215008, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1774,1774,"2 0.3102453102453102, 0 0.1284271284271284, 4 0.12506012506012507, 1 0.10990860990860991, 6 0.10990860990860991, 3 0.10822510822510822, 5 0.10822510822510822",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
1775,1775,"2 0.23270975056689333, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1776,1776,"2 0.20890022675736958, 6 0.14540816326530606, 1 0.13151927437641722, 3 0.12953514739229025, 4 0.12953514739229025, 0 0.12755102040816327, 5 0.12755102040816327",": add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
1777,1777,"5 0.2701014832162373, 6 0.14259692948217537, 1 0.11891751236013534, 0 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1778,1778,"0 0.17582417582417575, 1 0.13736263736263735, 2 0.13736263736263735, 3 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735", use iod for stripaccent init
1779,1779,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1780,1780,"0 0.22435441838426917, 4 0.17957829898128408, 1 0.134802179578299, 6 0.12153518123667378, 2 0.11490168206586121, 3 0.11324330727315807, 5 0.11158493248045491",": adds methodutilsfindannotation and extend methodutilsgetmethodswithannotation for non-public, super-class and interface methods (): provide methods to retrieve all fields/methods annotated with a specific type. thanks to alexander müller."
1781,1781,"6 0.34687208216619975, 5 0.12138188608776843, 0 0.111577964519141, 1 0.10504201680672269, 2 0.10504201680672269, 3 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
1782,1782,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1783,1783,"3 0.2641915523271455, 1 0.12671509281678772, 2 0.12483185364541295, 0 0.12106537530266342, 4 0.12106537530266342, 5 0.12106537530266342, 6 0.12106537530266342",add final modifier to local variables.pmd: these nested if statements could be combined
1784,1784,"5 0.29042658730158727, 6 0.13244047619047616, 2 0.12375992063492063, 1 0.1150793650793651, 0 0.11334325396825398, 4 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
1785,1785,"5 0.28285193858964347, 4 0.12802498048399688, 0 0.12073900598490764, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1786,1786,"3 0.21269841269841264, 1 0.13593073593073596, 2 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
1787,1787,"0 0.204291593180482, 4 0.13433274544385657, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",deprecate systemutilsline_separator in favor of java.lang.systemlineseparator
1788,1788,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1789,1789,"3 0.21693121693121686, 0 0.14285714285714282, 2 0.13311055416318573, 1 0.1311612364243943, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",add final modifier to local variables.[] clear threadlocal for hashcodebuilder as well
1790,1790,"3 0.3470741530443023, 6 0.11158493248045488, 2 0.11158493248045485, 1 0.10992655768775172, 0 0.10660980810234542, 4 0.10660980810234542, 5 0.10660980810234542","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1791,1791,"3 0.33663162234590804, 5 0.1952174809317666, 1 0.09420737992166563, 2 0.09420737992166563, 6 0.09420737992166563, 0 0.0927643784786642, 4 0.0927643784786642","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1792,1792,"6 0.2433862433862434, 0 0.19005291005291006, 4 0.13375661375661374, 5 0.12783068783068782, 2 0.11449735449735447, 1 0.09523809523809526, 3 0.09523809523809526",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacespmd: useless parenthesesreplaced private integer constants with private static enum.
1793,1793,"3 0.18783068783068776, 5 0.15079365079365076, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 6 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
1794,1794,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1795,1795,"1 0.7043529068068946, 2 0.06086279092414062, 3 0.05336449508228649, 4 0.048592852273833864, 0 0.04450287272373163, 5 0.04450287272373163, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1796,1796,"2 0.2267573696145124, 1 0.13151927437641722, 4 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1797,1797,"5 0.23178951946075235, 2 0.20439225918677975, 3 0.157208088714938, 6 0.10850184822787565, 1 0.10241356816699285, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1798,1798,"0 0.3031746031746032, 3 0.1503968253968254, 2 0.12261904761904761, 6 0.11845238095238093, 4 0.1101190476190476, 1 0.09900793650793652, 5 0.09623015873015875","make the write*field impl match its in-line comment and not rely on the default behavior of writefield(field,target,value).a bit of dog food and a lot of javadoc tweakage[] add fieldutils getdeclaredfields() to return all the fields defined in the given class and super classes.add final modifier to local variables."
1799,1799,"2 0.18783068783068776, 4 0.1405055849500294, 0 0.13639035861258084, 5 0.1363903586125808, 1 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
1800,1800,"0 0.21809088932376608, 4 0.20591432920200048, 1 0.13589910850184822, 2 0.12676668841052402, 6 0.11154598825831703, 3 0.10241356816699283, 5 0.09936942813655146","[github] commons-lang pull request : intellij idea refactorings..add todos[] include the actual type in the validate.isinstance and isassignablefrom exception messages.javadocfix brace positionsapplying valentin rochers patch from , adding isinstanceof and isassignablefrom methods. "
1801,1801,"0 0.1651969429747207, 4 0.1549088771310993, 2 0.15079365079365076, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
1802,1802,"4 0.20223398001175774, 2 0.13639035861258084, 0 0.1322751322751323, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",eat own dog food: call stringutils.isempty().
1803,1803,"4 0.2504668534080299, 3 0.17366946778711484, 6 0.13772175536881415, 2 0.11974789915966386, 0 0.10667600373482727, 1 0.10667600373482727, 5 0.1050420168067227",format to 120 line length.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
1804,1804,"3 0.427540713254999, 2 0.10142238713667284, 6 0.09565038136466708, 1 0.09565038136466705, 4 0.09420737992166563, 0 0.0927643784786642, 5 0.0927643784786642","add final modifier to local variables.format.statement unnecessarily nested within else clause.\refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1805,1805,"1 0.7016262537734931, 2 0.059499464407439855, 3 0.05540948485733761, 4 0.04859285227383388, 5 0.046547862498782754, 0 0.04450287272373163, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1806,1806,"5 0.269047619047619, 6 0.13201058201058197, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1807,1807,"3 0.2267573696145124, 2 0.13350340136054423, 1 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
1808,1808,"4 0.280572322825844, 3 0.16163648558014754, 6 0.13190252626872345, 2 0.12094790968030404, 0 0.10216856695729938, 1 0.10216856695729938, 5 0.10060362173038233",sort members.remove redundant type arguments.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
1809,1809,"6 0.2046176046176046, 3 0.146031746031746, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",removes redundant + signpmd: remove useless parentheses
1810,1810,"6 0.3115995115995116, 0 0.12185592185592185, 5 0.12185592185592185, 4 0.11330891330891332, 2 0.11159951159951162, 1 0.1098901098901099, 3 0.1098901098901099",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
1811,1811,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1812,1812,"5 0.2701014832162372, 6 0.14077543585740301, 1 0.12073900598490762, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 4 0.11709601873536299",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1813,1813,"3 0.20057720057720055, 2 0.14199134199134197, 1 0.137950937950938, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1814,1814,"0 0.24667524667524668, 3 0.17310167310167307, 4 0.15057915057915056, 1 0.11304161304161302, 2 0.11003861003861001, 6 0.11003861003861001, 5 0.09652509652509654",": update java requirement from java 6 to 7replace usage of deprecated objectutilstostring with objectstostring: fix deprecation warningsadd final modifier to local variables.eat own dog food: separator == null ? """" : separator->objectutils.tostring(separator)remove superfluous parens."
1815,1815,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1816,1816,"1 0.7146875627888286, 2 0.05224030540486236, 5 0.048724131002612026, 3 0.04802089612216194, 4 0.04591119148081175, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1817,1817,"0 0.1907452246435297, 4 0.16249663707290823, 6 0.13989776701641105, 2 0.13236481033091205, 5 0.1285983319881625, 1 0.124831853645413, 3 0.12106537530266347",removes unnecessary class reference of static method calls which are declared in the same class
1818,1818,"4 0.17460317460317454, 6 0.14525306978137167, 2 0.14106019766397127, 0 0.1347708894878706, 1 0.1347708894878706, 3 0.1347708894878706, 5 0.1347708894878706",use index_not_found instead of magic number.
1819,1819,"6 0.2902754971720489, 5 0.207261448640759, 3 0.13957307060755336, 1 0.09998175515416892, 2 0.09104178069695311, 0 0.08976464148877943, 4 0.0821018062397373",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.[] fastdateformat generates date objects wastefully.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1820,1820,"4 0.3337934207499425, 0 0.11962272831838047, 6 0.11479181044398436, 1 0.11318150448585233, 2 0.11157119852772027, 3 0.10351966873706006, 5 0.10351966873706006","sort members.rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
1821,1821,"4 0.2579365079365079, 2 0.14497354497354495, 1 0.12089947089947092, 0 0.11904761904761907, 3 0.11904761904761907, 5 0.11904761904761907, 6 0.11904761904761907",: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
1822,1822,"2 0.18783068783068776, 4 0.1405055849500294, 0 0.1384479717813051, 5 0.13639035861258084, 1 0.1322751322751323, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
1823,1823,"2 0.25854183481302123, 4 0.1285983319881625, 6 0.1285983319881625, 0 0.12106537530266344, 1 0.12106537530266344, 3 0.12106537530266344, 5 0.12106537530266344",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
1824,1824,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1825,1825,"0 0.1803980851599899, 1 0.15747039556563364, 5 0.15217939027462835, 2 0.14512471655328793, 6 0.12925170068027209, 3 0.11866969009826155, 4 0.11690602166792645","checkstyle and trailing spaces.adding builder interface, and refactoring the builder classes and basicthreadfactory to implement this interface. patch from michael wooten in 601"
1826,1826,"4 0.24046706805327495, 6 0.17661010764459042, 3 0.14979018427294288, 0 0.1434044882320744, 2 0.12424740010946905, 1 0.08337894544791098, 5 0.0821018062397373",sort by method name.: exceptionutilsgetrootcause(throwable t) should return t if no lower level cause existsthis makes the behavior of getrootcause consistent with getrootcausemessage and getrootcausestacktrace.remove redundant casts ()remove redundant casts throughout the codebase to make it cleaner and easier to read.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
1827,1827,"6 0.2397094430992736, 3 0.1380145278450363, 4 0.1380145278450363, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
1828,1828,"2 0.31285944329422594, 3 0.13250517598343686, 4 0.11479181044398434, 5 0.11479181044398434, 1 0.11318150448585235, 6 0.1083505866114562, 0 0.10351966873706007",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1829,1829,"2 0.3289625028755464, 3 0.12123303427651254, 1 0.11479181044398436, 5 0.11479181044398433, 6 0.10996089256958824, 4 0.10674028065332414, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1830,1830,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14734950584007186, 1 0.14106019766397127, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
1831,1831,"0 0.242447516641065, 3 0.1492575524833589, 4 0.1456733230926779, 2 0.11699948796722992, 1 0.1152073732718894, 5 0.1152073732718894, 6 0.1152073732718894",: typeutils.isassignable throws nullpointerexception when fromtype has type variables and totype generic superclass specifies type variable ()
1832,1832,"5 0.27089947089947086, 6 0.13015873015873014, 1 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1833,1833,"5 0.2809271856890904, 6 0.14865205341395812, 1 0.11690602166792645, 0 0.11337868480725624, 2 0.11337868480725624, 3 0.11337868480725624, 4 0.11337868480725624", fastdateparser and fastdateprinter support x formatapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1834,1834,"2 0.17250673854447438, 1 0.1536388140161725, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",more varargs-related updates
1835,1835,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1836,1836,"6 0.23675385647216632, 0 0.21640956852224458, 2 0.11625307399955284, 4 0.1115582383188017, 3 0.10999329309188463, 1 0.1084283478649676, 5 0.10060362173038231",make sure lines in files dont have trailing white spaces and remove all trailing white spaces: reflectiontostringbuilder.tostring does not debug 3rd party object fields within 3rd party object. suggested by philip hodges. final patch from thomas neidhart.
1837,1837,"2 0.23386243386243383, 0 0.13571428571428568, 3 0.13571428571428568, 6 0.13571428571428568, 4 0.12089947089947092, 1 0.11904761904761907, 5 0.11904761904761907",crlf -> lfjavadoc: fix typo but working is still awkward.[] revert deletion of arrayutils.hashcode()
1838,1838,"2 0.3081807081807082, 1 0.11843711843711846, 0 0.11672771672771676, 5 0.11672771672771676, 3 0.11501831501831504, 4 0.11501831501831504, 6 0.1098901098901099","dont need internal ivar name for a boolean to carry a ""flag"" postfix.dont need internal ivar name for a boolean to carry a ""flag"" postfix.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
1839,1839,"5 0.28521825396825395, 6 0.13244047619047616, 2 0.12549603174603172, 4 0.11681547619047622, 0 0.1150793650793651, 1 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
1840,1840,"5 0.2570981444220881, 0 0.16163648558014757, 3 0.13190252626872345, 6 0.12407780013413816, 1 0.1162530739995529, 4 0.10842834786496756, 2 0.10060362173038233",4fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone setapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1841,1841,"1 0.718203737191079, 2 0.05083383564396222, 5 0.048020896122161955, 4 0.04731766124171187, 0 0.04520795660036168, 3 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1842,1842,"6 0.4260429835651075, 5 0.1566231212248911, 3 0.12614131198201992, 4 0.08484337687877508, 2 0.07206068268015169, 0 0.06714426183452732, 1 0.06714426183452732","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1843,1843,"3 0.217357910906298, 6 0.17793138760880695, 5 0.1313364055299539, 1 0.12237583205325142, 2 0.11879160266257044, 4 0.11699948796722993, 0 0.11520737327188943",add final modifier to local variables.document some @suppresswarning annotationsallow subclass custom invocation handlingadd serialization support to eventlistenersupport
1844,1844,"5 0.2791635172587553, 6 0.15394305870496341, 0 0.11337868480725624, 1 0.11337868480725624, 2 0.11337868480725624, 3 0.11337868480725624, 4 0.11337868480725624", fastdateparser and fastdateprinter support x formatapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1845,1845,"5 0.26904761904761904, 6 0.13386243386243382, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1846,1846,"5 0.27089947089947086, 6 0.1283068783068783, 1 0.12460317460317462, 0 0.11904761904761907, 2 0.11904761904761907, 3 0.11904761904761907, 4 0.11904761904761907",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1847,1847,"0 0.3045634920634921, 3 0.1601190476190476, 2 0.12261904761904761, 6 0.11428571428571427, 4 0.1101190476190476, 5 0.09484126984126987, 1 0.09345238095238098","make the write*field impl match its in-line comment and not rely on the default behavior of writefield(field,target,value).a bit of dog food and a lot of javadoc tweakage[] add fieldutils getdeclaredfields() to return all the fields defined in the given class and super classes.add final modifier to local variables."
1848,1848,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1849,1849,"5 0.2708994708994708, 6 0.132010582010582, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1850,1850,"2 0.28330928330928334, 6 0.12674362674362674, 0 0.12337662337662338, 3 0.12337662337662338, 4 0.12337662337662338, 1 0.11159211159211163, 5 0.10822510822510827",crlf -> lfjavadoc: fix typo but working is still awkward.simplify issamelenght implementations by reusing getlength. this also fixes a lot of the useless paranthesis warnings generated by pmd.
1851,1851,"3 0.3064182194616978, 4 0.1341154819415689, 2 0.12606395215090868, 6 0.11801242236024843, 1 0.10835058661145618, 0 0.10351966873706007, 5 0.10351966873706007",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerformat to 120 line length.add final modifier to local variables.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
1852,1852,"5 0.27192297684100963, 6 0.13895394223263072, 1 0.12073900598490764, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363", and trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1853,1853,"5 0.28695436507936506, 6 0.12896825396825393, 2 0.12549603174603172, 0 0.11681547619047622, 4 0.11681547619047622, 1 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
1854,1854,"1 0.7160940325497286, 2 0.052943540285312424, 4 0.048020896122161934, 0 0.046614426361261806, 5 0.045911191480811735, 3 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1855,1855,"5 0.2792089513400989, 4 0.12620348685922458, 1 0.12073900598490764, 6 0.12073900598490764, 0 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1856,1856,"1 0.7125778581474784, 2 0.05224030540486236, 5 0.048724131002612026, 3 0.047317661241711884, 4 0.047317661241711884, 0 0.04661442636126182, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1857,1857,"2 0.1810515873015873, 3 0.1775793650793651, 1 0.1359126984126984, 6 0.1307043650793651, 0 0.12896825396825395, 5 0.1272321428571429, 4 0.11855158730158734","rename parameter t to thread.add final modifier to local variables.explicit boxingadding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
1858,1858,"2 0.2566585956416465, 4 0.13424804950228678, 6 0.12483185364541297, 0 0.12106537530266344, 1 0.12106537530266344, 3 0.12106537530266344, 5 0.12106537530266344",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
1859,1859,"5 0.28285193858964347, 4 0.12802498048399685, 1 0.11891751236013531, 6 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1860,1860,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.1515423779574723, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
1861,1861,"2 0.23270975056689333, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1862,1862,"2 0.1960611405055849, 6 0.14256319811875365, 0 0.1322751322751323, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",make sure placement of curly braces is consistent
1863,1863,"4 0.22468527640941433, 2 0.1403940886699507, 3 0.13273125342090863, 6 0.13081554460864805, 1 0.12506841817186648, 0 0.12315270935960594, 5 0.12315270935960594","sort members.: defaultstring(str) reuses defaultstring(str, defaultstr)"
1864,1864,"0 0.27743271221532095, 2 0.1631009891879457, 3 0.11962272831838049, 4 0.11962272831838049, 6 0.11157119852772027, 1 0.10512997469519211, 5 0.10351966873706007",code clean-up for checkstyle.simplify expressions again.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
1865,1865,"4 0.3337742504409171, 6 0.13007054673721338, 0 0.12389770723104053, 1 0.11000881834215168, 2 0.10383597883597885, 3 0.09920634920634923, 5 0.09920634920634923","sort members.: stringutilsabbreviate should support custom ellipses parameter ()rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
1866,1866,"3 0.20663780663780662, 2 0.14199134199134197, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1867,1867,"6 0.18707482993197275, 0 0.15731292517006798, 1 0.14540816326530606, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
1868,1868,"5 0.27563618039808513, 4 0.1292517006802721, 3 0.12925170068027209, 0 0.11866969009826156, 1 0.11690602166792645, 6 0.11690602166792645, 2 0.11337868480725626",change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1869,1869,"2 0.32896250287554635, 3 0.12606395215090865, 5 0.11479181044398434, 1 0.1131815044858523, 4 0.10835058661145619, 6 0.1051299746951921, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1870,1870,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
1871,1871,"6 0.1651969429747207, 0 0.1590241034685479, 5 0.14667842445620222, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323",fastdateformat apis that use a stringbuilderrefactor some duplicate code.
1872,1872,"4 0.23928998122546508, 0 0.171189622802526, 2 0.153268475849121, 3 0.153268475849121, 1 0.10667349377026794, 6 0.09950503498890594, 5 0.07680491551459294",sort members.[] stringutils.join() with support for list<?> withconfigurable start/end indices. extract constant.[] stringutils.join() with support for list<?> withconfigurable start/end indices. reuse constant.[github] commons-lang pull request : intellij idea refactorings..: update java requirement from java 6 to 7replace usage of deprecated objectutilstostring with objectstostringuse final consistently. : fix deprecation warningsadd final modifier to local variables.
1873,1873,"0 0.2168367346938775, 6 0.14540816326530606, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327",strbuilder implements builder; provide tostringbuilder as tostringbuffer
1874,1874,"5 0.2810304449648712, 4 0.12620348685922456, 0 0.12073900598490764, 6 0.12073900598490764, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1875,1875,"6 0.33870214752567684, 5 0.134453781512605, 0 0.10667600373482726, 1 0.10504201680672269, 2 0.10504201680672269, 3 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
1876,1876,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1877,1877,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
1878,1878,"4 0.19897959183673466, 0 0.16326530612244894, 1 0.1275510204081633, 2 0.1275510204081633, 3 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
1879,1879,"5 0.2901379130887327, 4 0.12073900598490762, 0 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1880,1880,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1881,1881,"3 0.19855699855699852, 2 0.14401154401154398, 1 0.13795093795093796, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1882,1882,"6 0.31550337029789083, 0 0.1450315285931724, 4 0.1237225483800826, 3 0.10697977821265495, 2 0.10545770819743425, 5 0.10393563818221355, 1 0.09936942813655145",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
1883,1883,"2 0.29621095750128007, 6 0.12416794674859191, 3 0.11879160266257041, 0 0.1152073732718894, 1 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure placement of curly braces is consistent
1884,1884,"4 0.26719576719576715, 6 0.13571428571428568, 0 0.12089947089947091, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
1885,1885,"0 0.4110977724423103, 4 0.23369347739095636, 3 0.08523409363745496, 2 0.08243297318927569, 6 0.06562625050020009, 1 0.06189142323596106, 5 0.060024009603841535",": improve stringutilsreplace throughput ()motivation:`stringutilsreplace` uses `substring` to append a string region into astringbuilder. this causes useless copies, as `stringbuilderappend`can take start and end indexes.modification:use proper `stringbuilderappend` [overload](https://docs.oracle.com/javase/8/docs/api/java/lang/stringbuilder.htmlappend-java.lang.charsequence-int-int-).result:based on benchmark from [jooq’s post](https://blog.jooq.org/2017/10/11/benchmarking-jdk-string-replace-vs-apache-commons-stringutils-replace):benchmark mode cnt score error unitsstringreplacebenchmark.testfaststringreplacelongstringonematch thrpt 217546534,219 ± 145523,962 ops/sstringreplacebenchmark.teststringutilsreplacelongstringonematch thrpt21 7353512,552 ± 124498,228 ops/sstringreplacebenchmark.testfaststringreplacelongstringseveralmatchesthrpt 21 5077255,810 ± 62358,937 ops/sstringreplacebenchmark.teststringutilsreplacelongstringseveralmatchesthrpt 21 4108357,612 ± 92909,038 ops/sstringreplacebenchmark.testfaststringreplaceshortstringonematch thrpt21 15911221,949 ± 541064,693 ops/sstringreplacebenchmark.teststringutilsreplaceshortstringonematch thrpt21 10677897,475 ± 491091,973 ops/sstringreplacebenchmark.testfaststringreplaceshortstringseveralmatchesthrpt 21 9271742,251 ± 220150,121 ops/sstringreplacebenchmark.teststringutilsreplaceshortstringseveralmatchesthrpt 21 6158829,188 ± 99637,607 ops/smerge branch : add stringutilsremoveignorecasepatch by gokul nanthakumar c"
1886,1886,"0 0.1701475912002228, 1 0.14870509607351712, 6 0.14285714285714285, 5 0.13895850737956003, 3 0.1350598719019772, 4 0.13311055416318576, 2 0.13116123642439434",: added atomicinitializer class. introduced new concurrentinitializer interface which is now implemented by all all initializer classes.
1887,1887,"6 0.42997612024160703, 5 0.15170670037926673, 3 0.12515802781289503, 4 0.08582666104789996, 2 0.07009411434190194, 0 0.06911083017277707, 1 0.0681275460036522","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1888,1888,"2 0.2790073775989269, 0 0.14598703331097693, 4 0.13033758104180637, 6 0.12094790968030401, 3 0.11468812877263579, 1 0.1084283478649676, 5 0.10060362173038231",": make logic for comparing os versions in systemutils smarterreuse isosnamematch- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
1889,1889,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
1890,1890,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1891,1891,"5 0.2773874577153266, 6 0.1371324486078584, 0 0.11709601873536302, 1 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302", and trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1892,1892,"2 0.18371546149323925, 4 0.14462081128747795, 3 0.14050558495002938, 0 0.13433274544385657, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
1893,1893,"5 0.2737444704657819, 6 0.13166796773354147, 0 0.12438199323445225, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 4 0.11709601873536299",fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1894,1894,"2 0.23270975056689333, 3 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1895,1895,"3 0.19249639249639247, 2 0.1541125541125541, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1896,1896,"5 0.27563618039808513, 4 0.13101536911060718, 3 0.127488032249937, 0 0.11866969009826156, 1 0.11690602166792645, 6 0.11690602166792645, 2 0.11337868480725626",change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1897,1897,"2 0.3972033257747545, 3 0.1392668178382464, 1 0.10752078609221465, 4 0.09297052154195011, 6 0.09032501889644749, 0 0.08767951625094485, 5 0.0850340136054422",add final modifier to local variables.better javadoc for arrayutils.swap variantscrlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodexamples added in javadoctabs replaced by spacesnew tests addedswap and shift for arrays
1898,1898,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1899,1899,"3 0.32267573696145124, 4 0.12902494331065756, 6 0.11632653061224486, 0 0.11156462585034015, 1 0.11156462585034012, 2 0.10680272108843539, 5 0.10204081632653061","remove redundant type arguments.add final modifier to local variables.promote uniformity between branches by using registry accessorunused imports + uh, why would you synchronize access to a threadlocal? :p[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
1900,1900,"0 0.48534798534798534, 4 0.1509462759462759, 6 0.07615995115995114, 2 0.07509157509157507, 5 0.07509157509157507, 1 0.06868131868131867, 3 0.06868131868131867","use internal javas number caches instead creating new objects:- use more efficient integer cache: use ""integer.valueof(int)"" instead of ""new integer(int)"".- use more efficient long cache: use ""long.valueof(int)"" instead of ""new long(long)"".- use more efficient short cache: use ""short.valueof(int)"" instead of ""new short(short)"".in java version 1.6.0_24 (vendor: sun microsystems inc.), float and double do not implement caches, but ive made the same changes for consistency and future proofing.- use ""double.valueof(int)"" instead of ""new double(double)"".- use ""float.valueof(int)"" instead of ""new float(float)""."
1901,1901,"2 0.1878306878306878, 3 0.14050558495002943, 4 0.13844797178130513, 0 0.13433274544385657, 1 0.13433274544385657, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
1902,1902,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1903,1903,"2 0.23072562358276635, 4 0.13151927437641722, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1904,1904,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
1905,1905,"4 0.1725067385444744, 0 0.15363881401617252, 1 0.13477088948787067, 2 0.13477088948787067, 3 0.13477088948787067, 5 0.13477088948787067, 6 0.13477088948787067",moving abbreviate + abbreviatemiddle to charsequences
1906,1906,"3 0.3537076522151148, 2 0.11158493248045485, 6 0.10826818289504855, 0 0.1066098081023454, 1 0.1066098081023454, 4 0.1066098081023454, 5 0.1066098081023454","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1907,1907,"3 0.34873252783700537, 1 0.11158493248045485, 2 0.11158493248045485, 6 0.10826818289504855, 0 0.1066098081023454, 4 0.1066098081023454, 5 0.1066098081023454","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1908,1908,"1 0.7220779220779221, 2 0.05137085137085137, 3 0.050697450697450686, 4 0.04531024531024532, 0 0.043963443963443975, 5 0.0432900432900433, 6 0.0432900432900433",flips the order of conditional expressions and if statements whose conditions were negated: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1909,1909,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1910,1910,"0 0.18927822701407607, 6 0.13686732554657086, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",use not bool instead of bool == false
1911,1911,"2 0.22080498866213147, 4 0.13747165532879818, 1 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1912,1912,"4 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",eat own dog food: call stringutils.isempty().
1913,1913,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
1914,1914,"5 0.2994864612511671, 6 0.14262371615312788, 0 0.12138188608776841, 3 0.11484593837535016, 1 0.10830999066293186, 4 0.10830999066293186, 2 0.1050420168067227",adjust fastdateformat for java 7 behavior regarding format of the year pattern ().refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1915,1915,"2 0.17250673854447438, 1 0.1536388140161725, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",more varargs-related updates
1916,1916,"5 0.2551892551892552, 3 0.17484737484737484, 2 0.12185592185592187, 6 0.11672771672771677, 1 0.11159951159951163, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1917,1917,"2 0.23072562358276635, 4 0.13151927437641722, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1918,1918,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1919,1919,"5 0.2708994708994708, 1 0.12645502645502643, 6 0.12645502645502643, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1920,1920,"2 0.1954887218045112, 0 0.16040100250626563, 1 0.1311612364243943, 4 0.1311612364243943, 3 0.13116123642439428, 5 0.12531328320802007, 6 0.12531328320802007",[] add methods to classutils to get various forms of classnames in a null-safe manner
1921,1921,"0 0.2091339459760512, 5 0.13895850737956, 2 0.13505987190197716, 1 0.1311612364243943, 3 0.1311612364243943, 4 0.1292119186856029, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
1922,1922,"3 0.19047619047619044, 0 0.1635944700460829, 6 0.1474654377880184, 4 0.14388120839733742, 2 0.12416794674859193, 1 0.11520737327188942, 5 0.11520737327188942",sort by method name.use validateistrue to validate argumentsadd final modifier to local variables.convert to java 5 enhanced loops. 
1923,1923,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1924,1924,"5 0.2773998488284202, 4 0.13277903754094228, 3 0.12925170068027209, 0 0.11690602166792645, 1 0.11514235323759135, 6 0.11514235323759135, 2 0.11337868480725626",change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1925,1925,"1 0.6828248265374014, 4 0.06273167949814655, 2 0.05873966353008268, 3 0.05674365554605075, 6 0.05142096758863225, 5 0.044102271647181834, 0 0.043436935652504526",add final modifier to method parameters.remove redundant type arguments.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
1926,1926,"4 0.17368742368742363, 3 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1927,1927,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1928,1928,"2 0.22456414259692944, 3 0.18449128285193855, 4 0.12073900598490765, 1 0.11891751236013534, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
1929,1929,"4 0.16727716727716724, 2 0.1459096459096459, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort by method name.
1930,1930,"0 0.29241926655719763, 3 0.2646414887794198, 6 0.11808976464148875, 4 0.10372194854953473, 2 0.08839627805145045, 1 0.07019704433497535, 5 0.06253420908593323","extract some helper methods to make the code better readableextract method for parsing locales from stringbetter local variable names: localeutilstolocale does not support language followed by un m.49 numeric-3 area code ()pmd: remove useless parenthesesreusestatement unnecessarily nested within else clause.statement unnecessarily nested within else clause.use final consistently. fall through is intentional: wrong locale handling in localeutils.tolocale(). thanks to sergio fernández: test failure in localeutilstest when building with jdk 8: test failure in localeutilstest when building with jdk 8 - make problem more explicit by checking for empty stringsstatement unnecessarily nested within else clause. localeutils test fails with new locale ""ja_jp_jp_u-ca-japanese"" of jdk7[] localeutils.tolocale does not parse strings starting with an underscore."
1931,1931,"3 0.35536602700781794, 2 0.10992655768775171, 4 0.10826818289504857, 0 0.10660980810234541, 1 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1932,1932,"3 0.21587301587301588, 0 0.17484737484737484, 2 0.1304029304029304, 1 0.12356532356532357, 6 0.12014652014652018, 4 0.11843711843711847, 5 0.11672771672771677",add final modifier to local variables.checkstylefix brace positionscompiler/generics warnings & a typoimproving test coverage.changing eol-style to native.misc. event utils.
1933,1933,"3 0.20259740259740255, 2 0.141991341991342, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
1934,1934,"3 0.3566760037348272, 2 0.11321195144724555, 6 0.10994397759103643, 0 0.1050420168067227, 1 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1935,1935,"2 0.22270322270322268, 4 0.20081770081770076, 0 0.14021164021164018, 1 0.1115921115921116, 3 0.10822510822510824, 5 0.10822510822510824, 6 0.10822510822510824",crlf -> lfjavadoc: fix typo but working is still awkward.simplify isempty be reusing getlengths/if (foo) { return true; } return false;/return foo;/g
1936,1936,"6 0.2923477848850984, 2 0.14475242833451785, 4 0.12153518123667376, 5 0.12153518123667376, 0 0.10660980810234544, 1 0.10660980810234544, 3 0.10660980810234544",make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse private utc constant to avoid corruption of mutable constant
1937,1937,"2 0.2698412698412698, 1 0.12294861447403822, 4 0.12294861447403822, 0 0.12106537530266345, 3 0.12106537530266345, 5 0.12106537530266345, 6 0.12106537530266345",crlf -> lfjavadoc: fix typo but working is still awkward.swap and shift for arrays
1938,1938,"3 0.3142857142857143, 5 0.2240079365079365, 6 0.09345238095238097, 1 0.09345238095238094, 0 0.09206349206349207, 2 0.09206349206349207, 4 0.09067460317460319","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezonesrestore binary compartibilitytrailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1939,1939,"0 0.2348710317460318, 4 0.14806547619047616, 6 0.1359126984126984, 3 0.1307043650793651, 2 0.12202380952380956, 1 0.1168154761904762, 5 0.11160714285714289","refactor magic char.better exception message.use validatenotnull instead of ""throw new nullpointerexception"" add objectutils.toidentitystring methods that support stringbuilder, strbuilder, and appendable"
1940,1940,"0 0.182161753590325, 3 0.182161753590325, 2 0.15923406399596873, 4 0.1310153691106072, 5 0.11690602166792645, 1 0.11514235323759135, 6 0.11337868480725626",: added methods to objectutils class to check for null elements in the array ()add final modifier to local variables.
1941,1941,"5 0.2846734322144158, 4 0.12438199323445227, 0 0.11891751236013534, 1 0.11891751236013534, 6 0.11891751236013534, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1942,1942,"5 0.282010582010582, 6 0.12275132275132276, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1943,1943,"6 0.2838624338624338, 2 0.1208994708994709, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
1944,1944,"6 0.27965747702589805, 5 0.22410192147034252, 3 0.11299081035923138, 0 0.09690893901420218, 1 0.09690893901420218, 2 0.09544695071010861, 4 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateformats ""z"" pattern does not respect timezone of calendar instances passed to format()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
1945,1945,"2 0.346485260770975, 4 0.12743764172335598, 0 0.11791383219954645, 1 0.10204081632653061, 3 0.10204081632653061, 5 0.10204081632653061, 6 0.10204081632653061",": arrayutils.removeall(object array, int... indices) should do the clone, not its callers ()crlf -> lfjavadoc: fix typo but working is still awkward.[] complement arrayutils.addall() variants with by-index and by-value removal methods"
1946,1946,"3 0.2267573696145124, 2 0.1354875283446712, 0 0.12755102040816327, 1 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
1947,1947,"6 0.2904555761698619, 2 0.1937744794887652, 4 0.11152339723768293, 5 0.10863739435168006, 0 0.0999793856936714, 1 0.0999793856936714, 3 0.09565038136466708",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
1948,1948,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
1949,1949,"0 0.22472848788638258, 1 0.1331105541631857, 2 0.1311612364243943, 3 0.1292119186856029, 5 0.1292119186856029, 4 0.1272626009468115, 6 0.12531328320802007",adding the functions class as a helper for dealing with java 8 lambdas.
1950,1950,"3 0.1965367965367965, 2 0.15209235209235208, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1951,1951,"2 0.19400352733686063, 4 0.14050558495002943, 3 0.13639035861258086, 0 0.1322751322751323, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
1952,1952,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",use not bool instead of bool == false
1953,1953,"4 0.26904761904761904, 6 0.13571428571428568, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
1954,1954,"5 0.22570123939986952, 2 0.20439225918677972, 3 0.1541639486844966, 1 0.1100239182430963, 6 0.1100239182430963, 0 0.09784735812133073, 4 0.09784735812133073",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1955,1955,"5 0.2864949258391881, 4 0.12438199323445225, 0 0.12073900598490762, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1956,1956,"3 0.2187590187590187, 2 0.13189033189033192, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",reuseadd final modifier to local variables.
1957,1957,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1958,1958,"2 0.20793650793650792, 3 0.1505291005291005, 0 0.13756613756613753, 4 0.13571428571428568, 1 0.12460317460317462, 6 0.12460317460317462, 5 0.11904761904761907",: please add number to byte[] methods. suggested by lilianne e. blaze. final patch from vincent ricard (with thanks to henri yandell).
1959,1959,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
1960,1960,"0 0.18266978922716628, 4 0.16263335935467083, 3 0.14623991673172, 2 0.13713244860785842, 6 0.1334894613583138, 1 0.12073900598490767, 5 0.11709601873536302",eat own dog food: use stringutils.isempty().[] strsubstitutor now supports the declaration of default values for the variables to be replaced. thanks to woonsan ko for the patch.
1961,1961,"0 0.36758563074352557, 3 0.15939849624060148, 2 0.11261487050960733, 4 0.10442773600668337, 6 0.09624060150375938, 1 0.07986633249791145, 5 0.07986633249791145","[] org.apache.commons.lang3.reflect.fieldutils.removefinalmodifier(field) does not clean up after itself.make the readdeclaredfield(final object target, final string fieldname, final boolean forceaccess) impl match its in-line comment and not rely on the default behavior of readfield(field, object).a bit of dog food and a lot of javadoc tweakage[] add fieldutils getdeclaredfields() to return all the fields defined in the given class and super classes.add final modifier to local variables."
1962,1962,"4 0.16941391941391934, 0 0.14163614163614163, 2 0.1394993894993895, 1 0.13736263736263735, 3 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",sort by method name.
1963,1963,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
1964,1964,"5 0.2727513227513227, 6 0.12830687830687829, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1965,1965,"5 0.2864949258391882, 4 0.12256049960967993, 0 0.11891751236013534, 1 0.11891751236013534, 6 0.11891751236013534, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
1966,1966,"2 0.19983719983719989, 5 0.19983719983719989, 6 0.17134717134717134, 0 0.11294261294261294, 1 0.11151811151811152, 4 0.11009361009361009, 3 0.09442409442409445",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefullyapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1967,1967,"5 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 6 0.1400560224089636",: there should be a differencebuilder with a reflectiondifferencebuilder implementation
1968,1968,"6 0.1950113378684807, 3 0.1454081632653061, 5 0.14143990929705216, 4 0.13548752834467126, 0 0.1275510204081633, 1 0.1275510204081633, 2 0.1275510204081633"," partial: implement format u for fastdateformat, day number of week"
1969,1969,"2 0.22874149659863938, 1 0.13350340136054423, 0 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
1970,1970,"3 0.19639494215765396, 4 0.15496368038740915, 6 0.14366424535916056, 2 0.13613128867366156, 1 0.12671509281678775, 0 0.12106537530266344, 5 0.12106537530266344",remove redundant type arguments.add final modifier to local variables.
1971,1971,"2 0.33376821048053923, 0 0.1389432485322896, 1 0.11459012828875842, 3 0.1100239182430963, 4 0.10393563818221355, 6 0.10089149815177215, 5 0.09784735812133075",formatting fixes perhttps://patch-diff.githubusercontent.com/raw/apache/commons-lang/pull/128.diffcrlf -> lfjavadoc: fix typo but working is still awkward. - add issorted() to arrayutils. patch supplied by james sawle. in github.
1972,1972,"2 0.29004329004329005, 3 0.1385281385281385, 6 0.13179413179413177, 1 0.11159211159211162, 0 0.10990860990860993, 5 0.10990860990860993, 4 0.10822510822510824",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure placement of curly braces is consistent: dateutilstest.testlang530 fails for some timezonesreplace tabs with whitespaces and 
1973,1973,"2 0.1869787463007802, 0 0.15496368038740918, 5 0.13801452784503632, 6 0.13801452784503632, 4 0.13236481033091205, 1 0.12483185364541301, 3 0.12483185364541301","fix whitespaces, add missing @since tag: enhance methodutils to allow invocation of private methods ()"
1974,1974,"3 0.20328599275967693, 2 0.1662489557226399, 1 0.1292119186856029, 0 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",use validateistrue to validate argumentsfixing crlfsstatement unnecessarily nested within else clause.add threadutils
1975,1975,"5 0.2634920634920635, 6 0.13386243386243382, 1 0.12645502645502646, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1976,1976,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
1977,1977,"0 0.18310657596371877, 1 0.15136054421768702, 3 0.1374716553287982, 5 0.13747165532879818, 4 0.13350340136054423, 2 0.12953514739229025, 6 0.12755102040816327",": add archutils - an utility class for the ""os.arch"" system property ()"
1978,1978,"3 0.18783068783068776, 5 0.15079365079365076, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 6 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
1979,1979,"3 0.3470741530443023, 2 0.11324330727315801, 0 0.10826818289504858, 1 0.10826818289504858, 4 0.10826818289504858, 6 0.10826818289504858, 5 0.10660980810234542","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
1980,1980,"5 0.282010582010582, 6 0.12275132275132276, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1981,1981,"3 0.22098214285714282, 2 0.18278769841269837, 6 0.12723214285714282, 1 0.12202380952380952, 4 0.12028769841269843, 0 0.1150793650793651, 5 0.11160714285714288",add final modifier to local variables.add final modifier to method parameters.[] added support for concurrentmap.putifabsent() to concurrentutils.
1982,1982,"5 0.23026744944553165, 2 0.21961295933898675, 3 0.1495977386388345, 1 0.10393563818221355, 6 0.10089149815177215, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1983,1983,"3 0.21269841269841266, 2 0.13593073593073593, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
1984,1984,"2 0.1536388140161725, 5 0.1536388140161725, 6 0.1536388140161725, 0 0.13477088948787064, 1 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
1985,1985,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1986,1986,"6 0.28899835796387524, 5 0.21620142309797483, 3 0.14212734902390073, 1 0.09487319832147416, 2 0.08976464148877944, 0 0.08593322386425836, 4 0.0821018062397373",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.[] fastdateformat generates date objects wastefully.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1987,1987,"0 0.28314659197012143, 4 0.13281979458450047, 1 0.12138188608776844, 3 0.11974789915966387, 6 0.11974789915966387, 2 0.11811391223155929, 5 0.10504201680672273",": update java requirement from java 6 to 7replace usage of deprecated objectutilstostring with objectstostring: fix deprecation warningseat own dog food: separator == null ? """" : separator->objectutils.tostring(separator)remove superfluous parens."
1988,1988,"3 0.1663003663003663, 4 0.1645909645909646, 6 0.15604395604395602, 2 0.1492063492063492, 0 0.14065934065934066, 1 0.11330891330891334, 5 0.10989010989010992",add final modifier to local variables.support varargs in strbuilder.appendall(); also convert iterable form of method to use enhanced for loop
1989,1989,"6 0.2011183261183261, 0 0.1783910533910534, 3 0.1607142857142857, 2 0.14556277056277056, 4 0.14177489177489175, 1 0.08874458874458875, 5 0.08369408369408371",make sure lines in files dont have trailing white spaces and remove all trailing white spacespmd: remove useless parenthesesuse not string.contains instead of indexof == -1add final modifier to local variables.add final modifier to method parameters.replacing the creation of a list in the core of each builder class to test contains on the excludefields with a call to arrayutils.contains. reported by anthony whitford in 575
1990,1990,"2 0.21577380952380956, 5 0.14112103174603177, 0 0.1393849206349206, 3 0.12896825396825395, 4 0.12896825396825395, 6 0.12723214285714285, 1 0.11855158730158732", - jsontostringstyle does not escape string namesjsontostringstyle: improve private constant name and remove wrong comment: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
1991,1991,"4 0.17209690893901416, 0 0.1584516847674742, 1 0.1506544138123085, 2 0.14285714285714282, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",[github] commons-lang pull request : intellij idea refactorings..
1992,1992,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
1993,1993,"6 0.18509070294784577, 0 0.15929705215419498, 1 0.1454081632653061, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
1994,1994,"3 0.19126984126984126, 2 0.17645502645502642, 4 0.13756613756613756, 0 0.13571428571428568, 1 0.12089947089947092, 5 0.11904761904761907, 6 0.11904761904761907",add final modifier to local variables.: multiline recursive to string style. this fixes from github. thanks to jan matèrne.
1995,1995,"5 0.2701014832162373, 6 0.13895394223263072, 1 0.12256049960967995, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1996,1996,"3 0.20259740259740255, 2 0.14603174603174604, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
1997,1997,"6 0.28516694033935414, 5 0.21492428388980112, 3 0.13829593139937965, 1 0.09742747673782154, 2 0.09231891990512682, 0 0.08848750228060573, 4 0.08337894544791098",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.[] fastdateformat generates date objects wastefully.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
1998,1998,"3 0.1978653530377668, 6 0.15763546798029554, 5 0.1403940886699507, 1 0.12889983579638756, 2 0.12889983579638756, 0 0.12315270935960594, 4 0.12315270935960594",add final modifier to local variables.remove dead space.
1999,1999,"3 0.1978653530377668, 6 0.14614121510673234, 0 0.1403940886699507, 5 0.13464696223316913, 2 0.13081554460864808, 1 0.12698412698412703, 4 0.12315270935960594",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
2000,2000,"3 0.28187403993855603, 2 0.14208909370199688, 0 0.1152073732718894, 1 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894, 6 0.1152073732718894",add final modifier to local variables.[] part 2: refactor tostringstyle and tostringbuildertest to verify that we are unsetting the registry when no longer needed
2001,2001,"4 0.17599554441659698, 0 0.15455304928989133, 1 0.1526037315510999, 2 0.1409078251183514, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",[github] commons-lang pull request : intellij idea refactorings..
2002,2002,"3 0.3566760037348272, 1 0.10994397759103643, 2 0.10830999066293186, 6 0.10830999066293186, 4 0.10667600373482727, 0 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2003,2003,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
2004,2004,"4 0.1715506715506715, 2 0.14163614163614166, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort by method name.
2005,2005,"0 0.289031035299692, 2 0.14475242833451785, 4 0.1231935560293769, 6 0.11656005685856434, 1 0.10992655768775174, 3 0.10992655768775174, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
2006,2006,"0 0.2068027210884354, 2 0.16712018140589568, 3 0.14807256235827665, 1 0.13378684807256236, 4 0.12267573696145126, 6 0.1147392290249433, 5 0.1068027210884354","use final.: add null filter to reflectiontostringbuilderfix/add since javadoc tags, fix checkstyle violations and do other small clean-ups.merge branch  of https://github.com/markdacek/commons-lang: added isexcludenullvalues to reflectiontostringbuilder and test"
2007,2007,"2 0.19450367211561242, 0 0.18123667377398722, 6 0.13811892916370527, 3 0.13646055437100213, 4 0.13646055437100213, 1 0.10660980810234544, 5 0.10660980810234544",restore previous behavior that allows function results (arrays of booleans) to be modified.format to 120 line length.refactor commons constants (no need to generate new arrays on every call).
2008,2008,"6 0.19501133786848066, 5 0.14143990929705214, 3 0.1414399092970521, 2 0.13350340136054423, 4 0.13151927437641722, 0 0.12953514739229025, 1 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
2009,2009,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
2010,2010,"0 0.22445436507936506, 2 0.14806547619047616, 6 0.14285714285714282, 4 0.13244047619047616, 1 0.12028769841269843, 5 0.1185515873015873, 3 0.11334325396825398","functions.java whitspacesreplace tabs with four spaces, as per the projects checkstyle rules.adding the functions class as a helper for dealing with java 8 lambdas."
2011,2011,"3 0.18783068783068776, 5 0.14667842445620216, 6 0.13639035861258084, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
2012,2012,"0 0.2148526077097505, 6 0.14540816326530606, 4 0.12953514739229025, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327",strbuilder implements builder; provide tostringbuilder as tostringbuffer
2013,2013,"1 0.7139843279083783, 2 0.05153707052441228, 5 0.04942736588306209, 4 0.04731766124171188, 0 0.046614426361261806, 3 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2014,2014,"5 0.2883164194639604, 4 0.12256049960967991, 0 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2015,2015,"3 0.20057720057720052, 2 0.141991341991342, 1 0.13795093795093796, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
2016,2016,"5 0.28285193858964347, 4 0.12256049960967993, 6 0.12256049960967993, 0 0.12073900598490762, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2017,2017,"4 0.17538381472807701, 0 0.15352589123080926, 6 0.14441842310694766, 2 0.13895394223263074, 5 0.13713244860785842, 3 0.1280249804839969, 1 0.12256049960967998",redundant specification of type arguments.: add bypass option for classes to recursive and reflective equalsbuilderpatch supplied by yathos ug
2018,2018,"6 0.330532212885154, 5 0.12464985994397756, 3 0.11974789915966381, 0 0.10994397759103641, 1 0.10504201680672269, 2 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor some duplicate code.
2019,2019,"2 0.23072562358276635, 1 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2020,2020,"2 0.23270975056689333, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2021,2021,"6 0.2857142857142857, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
2022,2022,"2 0.23072562358276635, 4 0.13151927437641722, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2023,2023,"6 0.4280095519033574, 5 0.16055625790139064, 3 0.12319145947464531, 4 0.08582666104789997, 2 0.07107739851102682, 0 0.0681275460036522, 1 0.06321112515802782","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
2024,2024,"0 0.2866479925303455, 3 0.14285714285714285, 6 0.1337068160597572, 2 0.12455648926237159, 1 0.11279178338001865, 5 0.10233426704014936, 4 0.09710550887021473",": dateutils.getfragmentindays(date, calendar.month) returns wrong days, reported by jay xu.add explict default case: fragments are wrong by 1 day when using fragment year or month - applying patch provided by sebastian götz, several tests now fail because of wrong assertions, will fix them in a separate commitadd final modifier to local variables."
2025,2025,"3 0.15363881401617246, 4 0.15363881401617246, 6 0.15363881401617246, 0 0.1347708894878706, 1 0.1347708894878706, 2 0.1347708894878706, 5 0.1347708894878706",use validateistrue to validate arguments
2026,2026,"3 0.328042328042328, 6 0.2041107041107041, 2 0.09727309727309726, 1 0.09442409442409443, 4 0.09299959299959301, 0 0.09157509157509158, 5 0.09157509157509158","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove unused constructor parameterformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2027,2027,"5 0.29042658730158727, 6 0.12896825396825393, 2 0.12202380952380953, 1 0.12028769841269842, 0 0.11334325396825398, 4 0.11334325396825398, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2028,2028,"3 0.19691741430871867, 4 0.1872555785599264, 0 0.13250517598343686, 1 0.13250517598343686, 6 0.12445364619277663, 2 0.12284334023464459, 5 0.10351966873706009",replaces size() == 0 and length() == 0 with isempty()[github] commons-lang pull request : intellij idea refactorings..remove redundant type arguments.reuseadd final modifier to local variables.
2029,2029,"0 0.1693121693121693, 2 0.15285126396237506, 4 0.14873603762492651, 1 0.13227513227513232, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",: new methods for lang3.validatethis from github.
2030,2030,"6 0.17794486215538843, 2 0.16040100250626563, 4 0.14285714285714282, 5 0.14285714285714282, 0 0.1253132832080201, 1 0.1253132832080201, 3 0.1253132832080201",use private utc constant to avoid corruption of mutable constant
2031,2031,"3 0.21303258145363405, 6 0.14285714285714282, 2 0.13895850737956, 1 0.1292119186856029, 0 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",pmd: useless parentheses.add final modifier to local variables.
2032,2032,"0 0.21909966172261253, 4 0.17538381472807701, 6 0.1334894613583138, 2 0.12073900598490765, 1 0.117096018735363, 3 0.117096018735363, 5 0.117096018735363",https://issues.apache.org/jira/browse/ stringutils methods do not handle unicode 2.0+ supplementary characters correctly.
2033,2033,"4 0.4185839129659355, 2 0.12769752095594789, 0 0.09898341359015514, 1 0.09898341359015514, 3 0.0952380952380952, 5 0.08025682182985554, 6 0.08025682182985554","merge branch fix-: add compare methods in stringutilsthis from github. add null safe compare methods in stringutils : - stringutils.compare(string str1, string str2); - stringutils.compare(string str1, string str2, boolean nullisless); - stringutils.compareignorecase(string str1, string str2); - stringutils.compareignorecase(string str1, string str2, boolean nullisless);"
2034,2034,"4 0.33540372670807456, 0 0.1244536461927766, 6 0.11318150448585233, 2 0.11157119852772027, 1 0.10835058661145619, 3 0.10351966873706006, 5 0.10351966873706006","sort members.rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
2035,2035,"2 0.2864949258391881, 4 0.12438199323445223, 1 0.11891751236013533, 3 0.11891751236013533, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
2036,2036,"6 0.2667814113597246, 5 0.1958309428188946, 3 0.1677184930196978, 2 0.09676802447886783, 0 0.09409064830751578, 4 0.09007458405048767, 1 0.08873589596481163","zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
2037,2037,"4 0.20685311161501635, 3 0.1733434114386495, 2 0.14865205341395815, 0 0.12572436381960192, 6 0.11690602166792645, 1 0.11514235323759135, 5 0.11337868480725624",sort members.extract method.add final modifier to local variables.[] stringutils join apis for primitives.
2038,2038,"6 0.27497665732959853, 0 0.15896358543417363, 4 0.13608776844070958, 1 0.10830999066293186, 2 0.10830999066293186, 5 0.10830999066293186, 3 0.1050420168067227",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spaces
2039,2039,"5 0.30275443510737626, 6 0.1409897292250233, 0 0.12138188608776841, 3 0.11484593837535013, 4 0.10994397759103644, 1 0.1050420168067227, 2 0.1050420168067227",adjust fastdateformat for java 7 behavior regarding format of the year pattern ().refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2040,2040,"2 0.19745069745069746, 4 0.15873015873015872, 0 0.1486291486291486, 1 0.14357864357864356, 6 0.12337662337662336, 3 0.12000962000962002, 5 0.10822510822510825","[github] commons-lang pull request : intellij idea refactorings..add todosjavadocfix brace positionsapplying valentin rochers patch to , adding new regexp and in range methods to validate"
2041,2041,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
2042,2042,"0 0.18921642731166538, 4 0.182161753590325, 3 0.13454270597127738, 6 0.13277903754094228, 2 0.13101536911060718, 5 0.11690602166792645, 1 0.11337868480725624",removes unnecessary class reference of static method calls which are declared in the same classuse final consistently. [] new type util features
2043,2043,"2 0.18289504856669034, 0 0.1746031746031746, 4 0.15470267709073676, 6 0.14143567874911156, 5 0.11821843165126747, 1 0.11656005685856434, 3 0.1115849324804549",": add support for varargs in constructorutils, memberutils, and methodutilsthis from github.beanutils-381 getmatchingaccessiblemethod does not correctly handle inheritance and method overloading - thanks to todd nine for the patchremove pre java 5 workaround"
2044,2044,"3 0.20259740259740255, 2 0.144011544011544, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
2045,2045,"3 0.19274376417233557, 0 0.16099773242630386, 5 0.14512471655328796, 2 0.14159737969261776, 6 0.1292517006802721, 1 0.11690602166792646, 4 0.11337868480725626",use validateistrue to validate argumentsreplaced private integer constants with private static enum.add final modifier to local variables.
2046,2046,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.15154237795747227, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
2047,2047,"0 0.2935357717966414, 4 0.13894639981596502, 6 0.1308948700253048, 2 0.11801242236024843, 3 0.10996089256958824, 1 0.10512997469519211, 5 0.10351966873706007","[] objectutils.identitytostring(object) and friends shouldallocate builders and buffers with a sizerefactor magic char.better exception message.use validatenotnull instead of ""throw new nullpointerexception"" add objectutils.toidentitystring methods that support stringbuilder, strbuilder, and appendable"
2048,2048,"3 0.3487325278370054, 2 0.11324330727315801, 4 0.10992655768775172, 6 0.10826818289504858, 0 0.10660980810234542, 1 0.10660980810234542, 5 0.10660980810234542","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2049,2049,"0 0.20429159318048204, 2 0.13433274544385657, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",deprecate systemutilsline_separator in favor of java.lang.systemlineseparator
2050,2050,"0 0.1693121693121693, 2 0.15285126396237506, 4 0.14873603762492651, 1 0.13227513227513232, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",: new methods for lang3.validatethis from github.
2051,2051,"5 0.2810304449648711, 4 0.13166796773354147, 0 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2052,2052,"3 0.19226830517153098, 0 0.16359447004608293, 2 0.13850486431131592, 4 0.13312852022529442, 5 0.12596006144393243, 6 0.12416794674859193, 1 0.12237583205325145",: enumutils.getenumignorecase and isvalidenumignorecase methods added ()add final modifier to local variables.javadoc and clarify null handling
2053,2053,"6 0.31702544031311153, 0 0.141987388562731, 4 0.1222004783648619, 2 0.1069797782126549, 5 0.1069797782126549, 3 0.10545770819743425, 1 0.09936942813655145",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
2054,2054,"4 0.1751070798689846, 3 0.16628873771730912, 2 0.16099773242630383, 0 0.14865205341395815, 6 0.12219702695893174, 1 0.11337868480725624, 5 0.11337868480725624",deletes redundant new expression in constant array creationuse final. - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
2055,2055,"3 0.19353940406571982, 4 0.1604010025062656, 2 0.13895850737955998, 1 0.1311612364243943, 0 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",sort members.add final modifier to local variables.
2056,2056,"2 0.20978835978835975, 3 0.18941798941798937, 1 0.1246031746031746, 0 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",: add nul byte to charutils. thanks to beluga behr.add final modifier to local variables.
2057,2057,"2 0.18039808515998995, 6 0.15394305870496347, 1 0.14865205341395818, 0 0.13630637440161247, 5 0.1310153691106072, 4 0.1292517006802721, 3 0.12043335852859664",: add option to disable the objectstriviallyequal test in diffbuilder. this fixes from github. thanks to jonathan baker.rename to avoid clashing with parameter names: there should be a differencebuilder with a reflectiondifferencebuilder implementation
2058,2058,"5 0.29042658730158727, 6 0.12896825396825393, 2 0.12375992063492061, 4 0.1185515873015873, 1 0.1150793650793651, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2059,2059,"5 0.282010582010582, 6 0.12275132275132276, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2060,2060,"5 0.2883164194639604, 4 0.12256049960967993, 0 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2061,2061,"0 0.24244751664106504, 2 0.14388120839733742, 3 0.13671274961597538, 6 0.13133640552995388, 1 0.11520737327188942, 4 0.11520737327188942, 5 0.11520737327188942",revert 1391258 by veto of sebb.use conversion tables for boolean arrays.: add conversion utility to convert between data types on byte level
2062,2062,"6 0.2783068783068782, 2 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
2063,2063,"2 0.2123015873015873, 0 0.17063492063492064, 4 0.14285714285714285, 6 0.1307043650793651, 5 0.11855158730158734, 1 0.113343253968254, 3 0.11160714285714289",removes unnecessary class reference of static method calls which are declared in the same classcrlf -> lfjavadoc: fix typo but working is still awkward.
2064,2064,"3 0.15363881401617246, 4 0.15363881401617246, 6 0.15363881401617246, 0 0.1347708894878706, 1 0.1347708894878706, 2 0.1347708894878706, 5 0.1347708894878706",use validateistrue to validate arguments
2065,2065,"2 0.27374447046578193, 4 0.12984647410876918, 3 0.12438199323445225, 1 0.12073900598490765, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
2066,2066,"0 0.30395640843402033, 2 0.13148542999289264, 4 0.12153518123667373, 1 0.11490168206586115, 6 0.11158493248045488, 3 0.10992655768775172, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
2067,2067,"5 0.2864949258391881, 1 0.12073900598490762, 4 0.12073900598490762, 0 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2068,2068,"4 0.21038044847568654, 2 0.16981607457797931, 3 0.16452506928697402, 1 0.11514235323759135, 0 0.11337868480725626, 5 0.11337868480725626, 6 0.11337868480725626",sort members.use final consistently. : add fuzzy string matching logic to stringutils. this also from github. thanks to ben ripkens.
2069,2069,"6 0.31724581724581724, 3 0.16259116259116255, 2 0.113041613041613, 4 0.11154011154011151, 0 0.10102960102960104, 1 0.09802659802659804, 5 0.09652509652509654","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
2070,2070,"6 0.1950113378684807, 3 0.1434240362811791, 5 0.1434240362811791, 2 0.13350340136054425, 4 0.12953514739229027, 0 0.1275510204081633, 1 0.1275510204081633"," partial: implement format u for fastdateformat, day number of week"
2071,2071,"6 0.15992812219227315, 0 0.15154237795747227, 5 0.14944594189877206, 1 0.13477088948787067, 2 0.13477088948787067, 3 0.13477088948787067, 4 0.13477088948787067",fastdateformat apis that use a stringbuilder
2072,2072,"2 0.24565381708238848, 3 0.17687074829931967, 6 0.12043335852859663, 1 0.11690602166792645, 0 0.11337868480725624, 4 0.11337868480725624, 5 0.11337868480725624",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.
2073,2073,"3 0.22452636968766, 2 0.16897081413210444, 0 0.13492063492063489, 4 0.12237583205325143, 1 0.11879160266257044, 5 0.11520737327188942, 6 0.11520737327188942",add final modifier to local variables.add final modifier to method parameters.[] vastly expanded typeutils
2074,2074,"3 0.3615779645191409, 2 0.10994397759103643, 4 0.10830999066293186, 0 0.1050420168067227, 1 0.1050420168067227, 5 0.1050420168067227, 6 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2075,2075,"5 0.22403054048623672, 2 0.2029334940727346, 3 0.1523005826803295, 0 0.1382358850713281, 6 0.09744826200522405, 1 0.09322885272252363, 4 0.0918223829616235","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibilityadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
2076,2076,"3 0.21303258145363405, 6 0.14285714285714282, 2 0.14090782511835143, 1 0.1272626009468115, 0 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",pmd: useless parentheses.add final modifier to local variables.
2077,2077,"2 0.3128594432942259, 3 0.13411548194156886, 1 0.11640211640211637, 5 0.11318150448585232, 4 0.10996089256958823, 6 0.10835058661145619, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2078,2078,"3 0.21067821067821063, 2 0.13997113997114, 0 0.12987012987012986, 1 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
2079,2079,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
2080,2080,"2 0.2282071298464741, 4 0.15352589123080926, 0 0.1498829039812646, 1 0.11709601873536302, 3 0.11709601873536302, 5 0.11709601873536302, 6 0.11709601873536302",: fix logic in isjsonarray method of jsontostringstyleextract logic for checking string representation of objects into separate methods
2081,2081,"2 0.1924963924963925, 5 0.14401154401154398, 3 0.137950937950938, 1 0.13593073593073596, 0 0.12987012987012989, 4 0.12987012987012989, 6 0.12987012987012989",: add noclassnametostringstyle implementation of tostringstyle. this from github. thanks to innokenty shuvalov.
2082,2082,"3 0.23660714285714288, 4 0.16369047619047616, 1 0.13244047619047616, 2 0.12375992063492061, 0 0.11855158730158732, 5 0.11334325396825398, 6 0.11160714285714288",statement unnecessarily nested within else clause.add final modifier to local variables.formattingmoving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils class
2083,2083,"2 0.19400352733686063, 6 0.14256319811875365, 1 0.13433274544385657, 0 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",make sure placement of curly braces is consistent
2084,2084,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2085,2085,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
2086,2086,"3 0.2013366750208855, 4 0.15455304928989133, 2 0.14285714285714285, 0 0.12531328320802007, 1 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",sort by method name.add final modifier to local variables.
2087,2087,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
2088,2088,"0 0.28766788766788765, 4 0.156043956043956, 6 0.11501831501831501, 2 0.1115995115995116, 1 0.10989010989010989, 3 0.10989010989010989, 5 0.10989010989010989","reverting r1090111 - moving the text.translate escapers back from using range to replicating parts of the range api. see the list for details (unnecessary boxing in stringescapeutils etc), the move to range was an uncomfortable fit. "
2089,2089,"6 0.2783068783068782, 2 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
2090,2090,"5 0.27374447046578193, 6 0.13895394223263072, 1 0.11891751236013533, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363", and trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2091,2091,"2 0.3001443001443001, 4 0.1301106301106301, 0 0.12506012506012504, 1 0.11664261664261663, 6 0.11159211159211159, 3 0.10822510822510822, 5 0.10822510822510822",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
2092,2092,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2093,2093,"6 0.2980030721966206, 5 0.1259600614439324, 0 0.11520737327188942, 1 0.11520737327188942, 2 0.11520737327188942, 3 0.11520737327188942, 4 0.11520737327188942",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
2094,2094,"2 0.2613296526340005, 3 0.1663216011042098, 6 0.13250517598343683, 1 0.12123303427651251, 4 0.11157119852772027, 0 0.10351966873706006, 5 0.10351966873706006","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.add final modifier to local variables.[] add booleanutils.and/or varargs methods to complement xor"
2095,2095,"0 0.28083028083028083, 4 0.156043956043956, 2 0.11672771672771674, 6 0.11672771672771674, 1 0.10989010989010989, 3 0.10989010989010989, 5 0.10989010989010989","reverting r1090111 - moving the text.translate escapers back from using range to replicating parts of the range api. see the list for details (unnecessary boxing in stringescapeutils etc), the move to range was an uncomfortable fit. "
2096,2096,"4 0.26534391534391527, 6 0.13571428571428565, 0 0.12275132275132275, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 5 0.11904761904761904",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
2097,2097,"6 0.22276956759715374, 4 0.13656267104542966, 2 0.13464696223316913, 0 0.13081554460864803, 3 0.126984126984127, 1 0.12506841817186645, 5 0.12315270935960591","added missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
2098,2098,"4 0.25079365079365085, 2 0.16338624338624338, 3 0.1456084656084656, 0 0.1219047619047619, 6 0.11005291005291004, 5 0.10857142857142857, 1 0.09968253968253972",extract method.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)applying ilyas patch from fixing an npe when tostring returns null
2099,2099,"5 0.28285193858964347, 4 0.12256049960967995, 0 0.12073900598490764, 6 0.12073900598490761, 1 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2100,2100,"5 0.282010582010582, 1 0.1208994708994709, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2101,2101,"6 0.17250673854447435, 2 0.14315663372267148, 3 0.14315663372267148, 1 0.13686732554657086, 0 0.1347708894878706, 4 0.1347708894878706, 5 0.1347708894878706",add sugar to randomiutils
2102,2102,"0 0.2392797915185975, 2 0.15470267709073676, 1 0.1397773039564084, 3 0.1198768064439706, 5 0.1198768064439706, 4 0.11821843165126747, 6 0.10826818289504858",[] strlookup for system properties now sees updated values.the lookup implementation now directly accesses system properties withoutcaching the properties object in any way.: strsubstitutor.replacesystemproperties does not work consistently. this fixes from github. thanks to jonathan baker.
2103,2103,"3 0.31874731874731876, 2 0.14607464607464607, 4 0.12805662805662804, 6 0.11003861003861001, 1 0.10403260403260406, 0 0.09652509652509655, 5 0.09652509652509655",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerpmd: useless parenthesesformat to 120 line length.add final modifier to local variables.add final modifier to method parameters.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
2104,2104,"0 0.20313170313170315, 4 0.1791076791076791, 6 0.15958815958815958, 3 0.12505362505362505, 2 0.11754611754611753, 5 0.11454311454311453, 1 0.10102960102960105",removes unnecessary class reference of static method calls which are declared in the same classprevent redundant modifiersuse validateistrue to validate argumentssimpler (the prefix is still needed as .<t> cannot start a method call)eliminate one unchecked warning; localise and document others[] use generics in serializationutilscheckstyle and trailing spaces.
2105,2105,"2 0.4850400337126001, 4 0.11729175445989601, 6 0.08975979772439946, 3 0.08877651355527458, 0 0.0799269560331507, 5 0.07402725101840142, 1 0.06517769349627757",remove redundant type arguments. simplify arrayutils removeelements by using newdecrementandget() method: improve arrayutils removeelements time complexity to o(n) ()based on patch submitted by jeffery yuancrlf -> lfjavadoc: fix typo but working is still awkward. - add issorted() to arrayutils. patch supplied by james sawle. in github.add final modifier to local variables. arrayutils removeelements methods use unnecessary hashseteliminate conversion of bitset to int[] arrayutils removeelements methods use unnecessary hashsetreplace hashset with bitset (less memory; faster) arrayutils removeelements methods clone temporary index arrays unnecessarilyreduce number of created arrays[] complement arrayutils.addall() variants with by-index and by-value removal methods
2106,2106,"6 0.3564213564213565, 3 0.1455627705627706, 0 0.12788600288600288, 2 0.10263347763347763, 5 0.09758297258297258, 4 0.08874458874458876, 1 0.0811688311688312",make sure lines in files dont have trailing white spaces and remove all trailing white spacesusing validate where possible in time package.: durationformatutils are not able to handle negative duration/periods. document new behavior for negative inputs.: durationformatutils are not able to handle negative durations/periods. reported by michael osipov.dont assign parameter; use the work field durationformatutils does not handle large durations correctlyadd final modifier to local variables.
2107,2107,"3 0.18689196108550943, 4 0.17255504352278542, 2 0.16180235535074242, 1 0.12596006144393243, 6 0.12058371735791092, 0 0.11699948796722992, 5 0.1152073732718894","sort members.add final modifier to local variables.: add stringutilsunwrapadd more examples and testsfix formattingadd changes.xml entry: add stringutilsunwrap (, )"
2108,2108,"3 0.19403393541324576, 2 0.1652983032293377, 4 0.1403940886699507, 1 0.13081554460864808, 0 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594",add final modifier to local variables.fix raw types
2109,2109,"0 0.253968253968254, 3 0.16476637603398167, 4 0.14755197853789404, 2 0.119382964453387, 1 0.10842834786496762, 6 0.1052984574111335, 5 0.10060362173038231","add final modifier to local variables.avoid throwing checked exceptions from annotationutils.hashcode()use builder apis for annotationutils.tostring()add hashcode and tostring methods to annotationutils, plus tests"
2110,2110,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2111,2111,"4 0.1960611405055849, 2 0.14256319811875368, 0 0.1322751322751323, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",eat own dog food: call stringutils.isempty().
2112,2112,"0 0.24458874458874458, 6 0.15367965367965364, 3 0.14189514189514185, 2 0.1301106301106301, 1 0.1132756132756133, 4 0.10822510822510822, 5 0.10822510822510822",add missing since tags for strsubstitutor; wrap lines longer than 80 chars[] strsubstitutor now supports the declaration of default values for the variables to be replaced. thanks to woonsan ko for the patch.
2113,2113,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2114,2114,"0 0.28151260504201686, 4 0.13772175536881417, 1 0.12301587301587302, 6 0.11974789915966387, 3 0.11647992530345475, 2 0.11647992530345472, 5 0.10504201680672273",": update java requirement from java 6 to 7replace usage of deprecated objectutilstostring with objectstostring: fix deprecation warningseat own dog food: separator == null ? """" : separator->objectutils.tostring(separator)remove superfluous parens."
2115,2115,"0 0.2296626984126984, 6 0.17584325396825393, 3 0.14285714285714282, 1 0.1168154761904762, 2 0.11160714285714286, 4 0.11160714285714286, 5 0.11160714285714286"," - tolowercase should use locale, additional unit tests for case-insensitive matching - fastdateparser should be case insensitive: fastdateparser could use calendar.getdisplaynames for all text fields"
2116,2116,"2 0.21909966172261253, 3 0.18449128285193855, 1 0.12438199323445225, 4 0.12073900598490765, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
2117,2117,"2 0.24867724867724866, 1 0.13015873015873017, 3 0.12830687830687829, 0 0.12645502645502646, 4 0.12645502645502646, 5 0.12089947089947091, 6 0.11904761904761905","dont need internal ivar name for a boolean to carry a ""flag"" postfix.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
2118,2118,"5 0.29389880952380953, 6 0.12723214285714282, 2 0.12202380952380952, 1 0.1185515873015873, 0 0.11334325396825398, 4 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2119,2119,"4 0.3282382912012542, 0 0.18009014305310603, 6 0.12659220066627472, 1 0.09504213207916914, 2 0.09367038996668628, 3 0.08818342151675487, 5 0.08818342151675487","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687https://issues.apache.org/jira/browse/ stringutils methods do not handle unicode 2.0+ supplementary characters correctly.use index_not_found instead of magic number."
2120,2120,"4 0.20744389709906946, 0 0.1710454296661193, 2 0.12889983579638753, 1 0.12315270935960593, 3 0.12315270935960593, 5 0.12315270935960593, 6 0.12315270935960593",sort members.[] stringutils method to check for mixed case in string ()
2121,2121,"6 0.24883286647992534, 0 0.16059757236227823, 3 0.13772175536881417, 2 0.12955182072829133, 1 0.11157796451914101, 4 0.10667600373482729, 5 0.10504201680672272",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmerge branch  of https://github.com/markdacek/commons-lang: added isexcludenullvalues to reflectiontostringbuilder and test
2122,2122,"1 0.6954912844483396, 2 0.06290778069919173, 3 0.05609114811568799, 4 0.050637842048884996, 5 0.046547862498782754, 0 0.04450287272373163, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2123,2123,"3 0.2114608555286521, 0 0.1568469195587839, 6 0.13424804950228675, 2 0.13236481033091202, 1 0.12294861447403822, 4 0.12106537530266345, 5 0.12106537530266345",add final modifier to local variables.stringbuffer => stringbuilder where being used as a local-only buffer
2124,2124,"2 0.28330928330928334, 4 0.12674362674362674, 0 0.12337662337662336, 3 0.12337662337662336, 6 0.12337662337662336, 1 0.11159211159211162, 5 0.10822510822510825",crlf -> lfjavadoc: fix typo but working is still awkward.simplify issamelenght implementations by reusing getlength. this also fixes a lot of the useless paranthesis warnings generated by pmd.
2125,2125,"3 0.30963883137796183, 4 0.1308948700253048, 2 0.12606395215090868, 6 0.11801242236024843, 1 0.1083505866114562, 0 0.10351966873706007, 5 0.10351966873706007",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerpmd: useless parenthesesformat to 120 line length.add final modifier to local variables.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
2126,2126,"6 0.22089947089947087, 4 0.1431216931216931, 3 0.132010582010582, 0 0.13015873015873014, 1 0.1301587301587301, 2 0.12460317460317462, 5 0.11904761904761907","<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
2127,2127,"1 0.7146875627888284, 2 0.0557564798071127, 4 0.046614426361261806, 5 0.046614426361261806, 0 0.045911191480811735, 3 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2128,2128,"3 0.3308596165739023, 5 0.1880024737167594, 1 0.0999793856936714, 2 0.09853638425066996, 6 0.09565038136466708, 4 0.09420737992166563, 0 0.0927643784786642","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
2129,2129,"4 0.19497354497354494, 3 0.1857142857142857, 2 0.13571428571428568, 6 0.12275132275132276, 0 0.12089947089947092, 1 0.12089947089947092, 5 0.11904761904761907",sort members.add final modifier to local variables.use index_not_found instead of magic number.
2130,2130,"3 0.3311184939091916, 2 0.18899963086009597, 4 0.10760428202288665, 6 0.10631229235880396, 0 0.09468438538205977, 1 0.08822443706164639, 5 0.08305647840531563","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.dont need a copy of this field.add final modifier to local variables.remove redundant type arguments.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2131,2131,"5 0.2525467898602227, 6 0.19450367211561237, 0 0.12319355602937689, 2 0.10992655768775172, 1 0.10660980810234542, 3 0.10660980810234542, 4 0.10660980810234542",trailing spaces fastdateparser does not handle non-gregorian calendars properly unnecessary ;applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2132,2132,"5 0.28467343221441577, 4 0.12438199323445222, 0 0.12256049960967991, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2133,2133,"2 0.2343358395989975, 0 0.15977443609022557, 3 0.15685045948203843, 6 0.12468671679197993, 1 0.11006683375104426, 4 0.10714285714285712, 5 0.10714285714285712",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate arguments: update java requirement from java 6 to 7use try with resources in serializationutilsadd final modifier to local variables.adding nopmd tags for various empty catch blockscheckstyle and trailing spaces.
2134,2134,"2 0.23270975056689333, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2135,2135,"5 0.3037323037323038, 0 0.13406263406263408, 1 0.13406263406263408, 2 0.11604461604461605, 3 0.11003861003861004, 4 0.10253110253110256, 6 0.09952809952809956","change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
2136,2136,"3 0.3520492774224117, 1 0.11158493248045485, 2 0.10826818289504858, 6 0.10826818289504858, 0 0.10660980810234542, 4 0.10660980810234542, 5 0.10660980810234542","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2137,2137,"2 0.32252127904301814, 3 0.12767425810904068, 5 0.11479181044398434, 1 0.11157119852772028, 4 0.10835058661145619, 6 0.10835058661145619, 0 0.10674028065332414",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2138,2138,"2 0.2972789115646258, 0 0.14807256235827662, 4 0.146485260770975, 1 0.10204081632653063, 3 0.10204081632653063, 5 0.10204081632653063, 6 0.10204081632653063",: fix typeutils.parameterize to work correctly with narrower-typed varargs array ()fix sonarqube warning: the user-supplied array typearguments is stored directly.[] new type util features
2139,2139,"5 0.2649228705566734, 0 0.15068186899172814, 6 0.13503241672255756, 3 0.1256427453610552, 1 0.11155823831880173, 4 0.11155823831880173, 2 0.10060362173038231",4fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone setapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2140,2140,"5 0.2864949258391881, 0 0.12256049960967993, 4 0.12073900598490762, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2141,2141,"3 0.17460317460317457, 6 0.16349206349206347, 0 0.15238095238095234, 4 0.14867724867724866, 2 0.12275132275132278, 1 0.11904761904761907, 5 0.11904761904761907",remove redundant type arguments.format.tab police: fastdateparser could use calendar.getdisplaynames for all text fields
2142,2142,"2 0.2008177008177008, 0 0.16714766714766713, 1 0.1486291486291486, 4 0.14526214526214526, 5 0.11664261664261666, 3 0.11327561327561331, 6 0.10822510822510825", - jsontostringstyle does not escape double quote in a stringvalue[github] commons-lang pull request : intellij idea refactorings..: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2143,2143,"0 0.2523809523809524, 2 0.13756613756613756, 1 0.12830687830687829, 3 0.1246031746031746, 4 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",adding vincent ricards patch to charrange.java providing an iterator that lets you walk the chars in the range. 454
2144,2144,"3 0.42176870748299317, 2 0.10575139146567712, 1 0.09709338280766851, 6 0.09709338280766851, 0 0.09276437847866417, 4 0.09276437847866417, 5 0.09276437847866417","add final modifier to local variables.format.statement unnecessarily nested within else clause.\refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2145,2145,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2146,2146,"0 0.17989417989417986, 4 0.17209690893901416, 1 0.14285714285714282, 2 0.1292119186856029, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",provide simple method to wrap a given type to the typed interface
2147,2147,"5 0.28695436507936506, 6 0.13070436507936506, 2 0.12202380952380953, 4 0.11855158730158731, 1 0.1168154761904762, 0 0.11334325396825398, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2148,2148,"2 0.26202686202686204, 3 0.17655677655677654, 6 0.11672771672771674, 1 0.11501831501831503, 0 0.10989010989010989, 4 0.10989010989010989, 5 0.10989010989010989",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsfixing crlfsstatement unnecessarily nested within else clause.add threadutils
2149,2149,"2 0.31608005521049004, 1 0.1244536461927766, 3 0.12284334023464458, 6 0.11157119852772027, 5 0.10996089256958824, 4 0.10996089256958823, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2150,2150,"5 0.28695436507936506, 6 0.13070436507936506, 2 0.1220238095238095, 1 0.12028769841269842, 4 0.1168154761904762, 0 0.11160714285714286, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2151,2151,"2 0.2267573696145124, 1 0.13151927437641722, 4 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2152,2152,"6 0.2723475355054302, 5 0.22702589807852966, 3 0.11737677527151208, 1 0.09690893901420218, 2 0.09690893901420218, 0 0.09544695071010861, 4 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateformats ""z"" pattern does not respect timezone of calendar instances passed to format()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
2153,2153,"3 0.18783068783068776, 5 0.14462081128747795, 6 0.13844797178130508, 0 0.13227513227513227, 1 0.13227513227513227, 2 0.13227513227513227, 4 0.13227513227513227",: fastdateformat doesnt respect summer daylight in some localized strings
2154,2154,"2 0.1966765873015873, 4 0.16021825396825395, 0 0.1550099206349206, 1 0.1515376984126984, 3 0.11334325396825398, 5 0.11160714285714288, 6 0.11160714285714288","[github] commons-lang pull request : intellij idea refactorings..add todosjavadocfix brace positionsapplying valentin rochers patch from , adding isinstanceof and isassignablefrom methods. "
2155,2155,"4 0.2744074798869319, 3 0.1648184387910415, 6 0.1556860186997173, 2 0.10545770819743425, 1 0.10241356816699285, 0 0.09936942813655145, 5 0.09784735812133075",sort members.remove redundant type arguments.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)tab police (and trailing spaces)
2156,2156,"6 0.18905895691609972, 0 0.155328798185941, 1 0.14540816326530606, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
2157,2157,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
2158,2158,"5 0.26886446886446885, 3 0.1355311355311355, 2 0.13382173382173382, 4 0.12014652014652015, 6 0.11672771672771676, 1 0.11501831501831504, 0 0.1098901098901099",dont mutate parametersadd final modifier to method parameters.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2159,2159,"3 0.35370765221511485, 2 0.10992655768775172, 1 0.10826818289504858, 6 0.10826818289504858, 0 0.10660980810234542, 4 0.10660980810234542, 5 0.10660980810234542","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2160,2160,"0 0.19211822660098518, 3 0.1538040503557745, 6 0.1403940886699507, 1 0.13464696223316913, 2 0.12889983579638756, 4 0.12698412698412703, 5 0.12315270935960594",[] strsubstitutor now supports the declaration of default values for the variables to be replaced. thanks to woonsan ko for the patch.
2161,2161,"5 0.2838624338624338, 6 0.1208994708994709, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2162,2162,"6 0.36399711399711404, 3 0.14177489177489175, 0 0.12536075036075034, 2 0.10768398268398266, 5 0.09505772005772004, 4 0.08495670995670995, 1 0.08116883116883118",make sure lines in files dont have trailing white spaces and remove all trailing white spacesusing validate where possible in time package.: durationformatutils are not able to handle negative duration/periods. document new behavior for negative inputs.: durationformatutils are not able to handle negative durations/periods. reported by michael osipov.dont assign parameter; use the work field durationformatutils does not handle large durations correctlyadd final modifier to local variables.
2163,2163,"6 0.2227602905569007, 4 0.1436642453591606, 2 0.13048157115953726, 0 0.1285983319881625, 3 0.1285983319881625, 1 0.12294861447403822, 5 0.12294861447403822",[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern.
2164,2164,"0 0.15490887713109933, 2 0.15490887713109933, 1 0.15079365079365079, 4 0.1425631981187537, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",rename the parameter everywhere instead of just the method declaration
2165,2165,"3 0.17410714285714282, 1 0.16021825396825395, 2 0.15848214285714285, 4 0.14459325396825393, 5 0.12375992063492063, 6 0.12202380952380955, 0 0.11681547619047622",micro optimization: replace stringbuilder with string concatenation so that the compiler can better optimize the codeadding hennings github pull request with a triple implementation. 675
2166,2166,"6 0.21888053467000831, 3 0.1526037315510999, 4 0.1272626009468115, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
2167,2167,"4 0.2492300402748164, 0 0.1497275527126273, 6 0.1364605543710021, 1 0.12816868040748636, 3 0.11324330727315804, 5 0.11324330727315804, 2 0.10992655768775174",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo): added atomicinitializer class. introduced new concurrentinitializer interface which is now implemented by all all initializer classes.
2168,2168,"5 0.2901379130887327, 0 0.12073900598490762, 4 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2169,2169,"6 0.19897959183673466, 5 0.1434240362811791, 3 0.14143990929705214, 2 0.13151927437641722, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
2170,2170,"3 0.34826152683295547, 6 0.21069538926681786, 2 0.09429327286470143, 5 0.08900226757369617, 1 0.08635676492819352, 4 0.08635676492819352, 0 0.0850340136054422","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.: fastdateformat doesnt respect summer daylight in some localized stringsrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2171,2171,"0 0.17136978248089355, 3 0.14462081128747795, 2 0.1425631981187537, 4 0.14256319811875368, 1 0.13433274544385657, 5 0.1322751322751323, 6 0.1322751322751323",add methods for cloneables to objectutils ().
2172,2172,"5 0.25570436507936506, 6 0.17757936507936506, 0 0.11681547619047619, 1 0.1150793650793651, 2 0.11160714285714288, 3 0.11160714285714288, 4 0.11160714285714288", fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2173,2173,"6 0.17794486215538843, 2 0.1584516847674742, 4 0.14285714285714282, 5 0.14285714285714282, 3 0.12726260094681152, 0 0.1253132832080201, 1 0.1253132832080201",use private utc constant to avoid corruption of mutable constant
2174,2174,"3 0.2641915523271455, 2 0.1304815711595372, 0 0.12106537530266342, 1 0.12106537530266342, 4 0.12106537530266342, 5 0.12106537530266342, 6 0.12106537530266342",statements unnecessarily nested within else clause.add final modifier to local variables.
2175,2175,"5 0.2792089513400989, 6 0.1353109549830861, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2176,2176,"3 0.2042328042328042, 0 0.15238095238095234, 5 0.13571428571428568, 6 0.13571428571428568, 2 0.13015873015873014, 1 0.12275132275132278, 4 0.11904761904761907",add final modifier to local variables.refactor range with lots of new methodscheckstyle and trailing spaces.
2177,2177,"2 0.23941798941798942, 4 0.15238095238095234, 6 0.1283068783068783, 3 0.12275132275132276, 0 0.11904761904761907, 1 0.11904761904761907, 5 0.11904761904761907",sort members.make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
2178,2178,"4 0.22274264897215715, 0 0.1498829039812646, 2 0.1498829039812646, 3 0.12438199323445227, 1 0.11891751236013534, 5 0.117096018735363, 6 0.117096018735363",: add zero copy write method to strbuilder; : add zero copy read method to strbuilder. thanks to mikhail mazursky.
2179,2179,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
2180,2180,"2 0.1838772962368468, 4 0.1788835384341002, 0 0.15641162832174063, 3 0.15016943106830746, 5 0.12270376315320132, 1 0.11521312644908147, 6 0.09274121633672193",sort members.: wrong name or result of stringutilsgetjarowinklerdistance ()deprecate stringutilsgetjarowinklerdistance and add stringutilsgetjarowinklersimilarity insteadadd final modifier to local variables.: fix implementation of stringutils.getjarowinklerdistance()replace current implementation with jaro-winkler distance implementation taken from apache lucene.use final modifier where possibleremove unnecessary try-catch-blockcorrect indentation: add the jaro-winkler string distance algorithm to stringutils - partially applying the patch by rekha joshi as submitted for further refinement
2181,2181,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2182,2182,"1 0.7146875627888286, 2 0.05294354028531243, 5 0.048020896122161955, 4 0.047317661241711884, 0 0.04591119148081175, 3 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2183,2183,"2 0.2328042328042328, 0 0.16546416546416542, 3 0.14526214526214523, 5 0.12337662337662333, 4 0.11159211159211159, 6 0.11159211159211159, 1 0.10990860990860991","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibility"
2184,2184,"2 0.23139880952380953, 0 0.15674603174603172, 6 0.1324404761904762, 3 0.1307043650793651, 1 0.12549603174603177, 4 0.11160714285714289, 5 0.11160714285714289","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
2185,2185,"6 0.22966269841269843, 0 0.16195436507936506, 4 0.14459325396825393, 3 0.12375992063492065, 2 0.11681547619047622, 1 0.11160714285714288, 5 0.11160714285714288",remove redundant casts ()remove redundant casts throughout the codebase to make it cleaner and easier to read.validation[] new type util features
2186,2186,"0 0.2923477848850983, 2 0.1331438047855958, 4 0.12153518123667373, 6 0.11821843165126746, 1 0.11490168206586118, 3 0.11324330727315803, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
2187,2187,"4 0.24126984126984125, 6 0.13571428571428568, 3 0.132010582010582, 2 0.13015873015873014, 1 0.12275132275132276, 0 0.11904761904761905, 5 0.11904761904761905",: add methods for removing all invalid characters according to xml 1.0 and xml 1.1 in an input string to stringescapeutils. thanks to adam hooper
2188,2188,"0 0.2782446311858077, 3 0.15569561157796452, 2 0.12791783380018673, 5 0.11974789915966386, 4 0.10830999066293187, 1 0.10504201680672272, 6 0.10504201680672272",: use isjavaversionatleast in implementation: java 12 final modifier is no longer mutableidentical catch blocks can be combineduse final consistently. [] org.apache.commons.lang3.reflect.fieldutils.removefinalmodifier(field) does not clean up after itself.
2189,2189,"6 0.38116402116402115, 4 0.12042328042328039, 5 0.1115343915343915, 2 0.09968253968253969, 3 0.09671957671957673, 0 0.09523809523809525, 1 0.09523809523809525",make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
2190,2190,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2191,2191,"2 0.18886198547215494, 3 0.18697874630078015, 0 0.12671509281678775, 4 0.12671509281678775, 1 0.12483185364541298, 5 0.12483185364541298, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
2192,2192,"3 0.20259740259740255, 2 0.146031746031746, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
2193,2193,"5 0.28467343221441577, 4 0.12438199323445225, 1 0.12073900598490762, 0 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2194,2194,"3 0.20865800865800863, 2 0.14199134199134197, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
2195,2195,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",use not bool instead of bool == false
2196,2196,"0 0.22276029055690072, 4 0.13989776701641105, 6 0.1380145278450363, 3 0.13613128867366153, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
2197,2197,"0 0.44483159117305454, 4 0.1033681765389082, 6 0.09523809523809523, 1 0.09117305458768873, 2 0.09117305458768873, 3 0.08710801393728222, 5 0.08710801393728222","strsubstitutor can preserve escapesstrsubstitutor can now optionally preserve the escape character for anescaped reference, which is useful when substitution takes place inmultiple phases and some references are intentionally unresolved. priorto this change, an unresolved reference `${a}` and an escaped reference`$${a}` may result in the same string `${a}`, making it impossible foran additional substitution phase to distinguish between escapedreferences and non-escaped references."
2198,2198,"6 0.20798319327731093, 2 0.19491129785247432, 4 0.12955182072829133, 0 0.12628384687208216, 1 0.12301587301587301, 3 0.11321195144724558, 5 0.10504201680672272",use final.remove trailing white spacesadded new vararg methods to insert values into an array at an index.this implements . this commit also deprecates the add() methodsthat inserted a single value into an array at an index.
2199,2199,"5 0.2727513227513227, 6 0.12645502645502643, 1 0.12460317460317459, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2200,2200,"5 0.27057387057387056, 2 0.14236874236874233, 3 0.12527472527472527, 4 0.11843711843711846, 1 0.11672771672771676, 6 0.11501831501831504, 0 0.11159951159951162",dont mutate parametersadd final modifier to method parameters.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2201,2201,"3 0.18062397372742198, 0 0.17487684729064037, 2 0.13464696223316913, 6 0.1346469622331691, 4 0.12889983579638756, 1 0.12315270935960594, 5 0.12315270935960594",a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables.
2202,2202,"0 0.19639494215765402, 4 0.15684691955878394, 6 0.13989776701641105, 2 0.1304815711595373, 1 0.12859833198816253, 5 0.12671509281678778, 3 0.12106537530266347",removes unnecessary class reference of static method calls which are declared in the same class
2203,2203,"2 0.21485260770975048, 5 0.13945578231292513, 1 0.13350340136054423, 3 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 6 0.12755102040816327",: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2204,2204,"3 0.3601190476190476, 2 0.18095238095238095, 1 0.09623015873015872, 6 0.09345238095238097, 4 0.09067460317460319, 0 0.08928571428571429, 5 0.08928571428571429","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2205,2205,"2 0.23270975056689333, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2206,2206,"3 0.20663780663780662, 2 0.141991341991342, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
2207,2207,"5 0.2664584959666927, 6 0.14441842310694764, 1 0.12073900598490764, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2208,2208,"2 0.3322461404653186, 0 0.13742117851706892, 1 0.11915633833442052, 3 0.11002391824309636, 4 0.10241356816699285, 6 0.10089149815177215, 5 0.09784735812133075",formatting fixes perhttps://patch-diff.githubusercontent.com/raw/apache/commons-lang/pull/128.diffcrlf -> lfjavadoc: fix typo but working is still awkward. - add issorted() to arrayutils. patch supplied by james sawle. in github.
2209,2209,"6 0.18298891883797544, 0 0.14315663372267148, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
2210,2210,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",convert to java 5 enhanced loops. 
2211,2211,"2 0.18988830099941206, 4 0.14050558495002938, 0 0.13639035861258086, 1 0.13639035861258086, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
2212,2212,"1 0.7153907976692787, 2 0.05224030540486237, 4 0.048020896122161955, 5 0.047317661241711884, 3 0.04661442636126182, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2213,2213,"6 0.21416361416361415, 3 0.20390720390720388, 4 0.12527472527472525, 2 0.12014652014652016, 0 0.11330891330891332, 1 0.11330891330891332, 5 0.1098901098901099","add final modifier to local variables.<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
2214,2214,"2 0.30158730158730157, 3 0.1357257878997009, 1 0.12606395215090868, 4 0.11157119852772028, 5 0.11157119852772025, 6 0.10835058661145619, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2215,2215,"6 0.17027417027417022, 3 0.1581529581529581, 5 0.13997113997113997, 1 0.1339105339105339, 2 0.1339105339105339, 0 0.1318903318903319, 4 0.1318903318903319",use final consistently. : new randumutils class. thanks to duncan jones
2216,2216,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
2217,2217,"3 0.30158730158730157, 6 0.25874928284566834, 2 0.09275196022183974, 4 0.08873589596481163, 0 0.08605851979345956, 1 0.08605851979345956, 5 0.08605851979345956","make sure lines in files dont have trailing white spaces and remove all trailing white spacesrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesreplace tabs with spaces fastdateparser and fastdateprinter support x format"
2218,2218,"2 0.28775510204081634, 0 0.15283446712018137, 4 0.1496598639455782, 1 0.1036281179138322, 3 0.10204081632653061, 5 0.10204081632653061, 6 0.10204081632653061",: fix typeutils.parameterize to work correctly with narrower-typed varargs array ()fix sonarqube warning: the user-supplied array typearguments is stored directly.[] new type util features
2219,2219,"2 0.2175099206349206, 0 0.1688988095238095, 4 0.13764880952380948, 6 0.13244047619047616, 1 0.11681547619047622, 5 0.1150793650793651, 3 0.11160714285714288",removes unnecessary class reference of static method calls which are declared in the same classcrlf -> lfjavadoc: fix typo but working is still awkward.
2220,2220,"6 0.2671201814058957, 4 0.16394557823129252, 2 0.13061224489795917, 5 0.1179138321995465, 0 0.1068027210884354, 1 0.1068027210884354, 3 0.10680272108843539",[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern. sort methods.[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern.
2221,2221,"4 0.3118965799378171, 3 0.1904761904761905, 0 0.10800196367206676, 2 0.10456553755522827, 6 0.10112911143838978, 1 0.09998363606611028, 5 0.08394698085419733",sort members.add final modifier to local variables.: stringutils should use toxxxxcase(int) rather than toxxxxcase(char) ()based on patch by sebbadd final modifier to local variables.updates for : stringutils.uncapitalize performance improvement. similar fix also applied to stringutils.capitalize (as mentioned in issue). thanks to leo wang.use final consistently. tabs and trailing spacesshort circuit (un)capitalize if string is already (un)capitalized.rolling capitalize and uncapitalize back from (charsequence) to (string)
2222,2222,"2 0.260425073984396, 6 0.1285983319881625, 4 0.12671509281678775, 0 0.12106537530266344, 1 0.12106537530266344, 3 0.12106537530266344, 5 0.12106537530266344",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
2223,2223,"3 0.1620245582509733, 6 0.1536388140161725, 0 0.1452530697813717, 1 0.13477088948787064, 2 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",: dateutilstest.testlang530 fails for some timezones
2224,2224,"6 0.17835497835497832, 4 0.1642135642135642, 3 0.13593073593073596, 2 0.13189033189033192, 0 0.12987012987012989, 1 0.12987012987012989, 5 0.12987012987012989",remove redundant type arguments.validation
2225,2225,"1 0.7009445905151427, 2 0.061544454182490986, 3 0.05336449508228649, 4 0.04927451553218424, 5 0.04586619924043238, 0 0.045184535982082004, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2226,2226,"2 0.1536388140161725, 5 0.1536388140161725, 6 0.1536388140161725, 0 0.13477088948787064, 1 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
2227,2227,"3 0.2267573696145124, 2 0.13350340136054423, 1 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
2228,2228,"3 0.19226830517153096, 2 0.16001024065540193, 0 0.15104966717869941, 4 0.1474654377880184, 1 0.11879160266257043, 5 0.11520737327188942, 6 0.11520737327188942","use stringbuilderappend(charsequence, int, int) were possible to improve performance(similar to , thanks to stephane landelle for the suggestion)add final modifier to local variables."
2229,2229,"2 0.16412099430967353, 6 0.15154237795747227, 1 0.14315663372267148, 3 0.13686732554657086, 0 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",: recursive and reflective equalsbuilder ()patch by yathos ug
2230,2230,"2 0.23469387755102034, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2231,2231,"2 0.22638563622170177, 0 0.15170439760603693, 4 0.15170439760603693, 1 0.11891751236013534, 3 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",: fix logic in isjsonarray method of jsontostringstyleextract logic for checking string representation of objects into separate methods
2232,2232,"0 0.16519694297472073, 6 0.1569664902998236, 5 0.1466784244562022, 4 0.13433274544385657, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323",fastdateformat apis that use a stringbuilderrefactor some duplicate code.
2233,2233,"3 0.31845238095238093, 5 0.2198412698412698, 6 0.09623015873015872, 2 0.09345238095238097, 1 0.09206349206349207, 4 0.09067460317460319, 0 0.08928571428571429","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezonesrestore binary compartibilitytrailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
2234,2234,"5 0.2551892551892552, 3 0.17313797313797313, 1 0.11843711843711847, 2 0.11843711843711845, 6 0.11501831501831503, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2235,2235,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
2236,2236,"2 0.24867724867724866, 6 0.14497354497354492, 3 0.12645502645502646, 1 0.12089947089947091, 4 0.12089947089947091, 0 0.11904761904761905, 5 0.11904761904761905","make sure placement of curly braces is consistent: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
2237,2237,"6 0.3223622782446312, 2 0.12138188608776841, 3 0.11974789915966384, 4 0.11974789915966384, 0 0.10667600373482727, 1 0.1050420168067227, 5 0.1050420168067227","[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .utc and gmt are the same, so simplify.refactor ""gmt"" magic string.make sure lines in files dont have trailing white spaces and remove all trailing white spaces"
2238,2238,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2239,2239,"0 0.15363881401617252, 6 0.15363881401617252, 5 0.1536388140161725, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",4fastdateformat apis that use a stringbuilder
2240,2240,"0 0.21961295933898678, 4 0.19221569906501412, 2 0.13589910850184825, 1 0.13437703848662752, 6 0.11154598825831702, 5 0.10393563818221355, 3 0.10241356816699285","[github] commons-lang pull request : intellij idea refactorings..add todos[] include the actual type in the validate.isinstance and isassignablefrom exception messages.javadocfix brace positionsapplying valentin rochers patch from , adding isinstanceof and isassignablefrom methods. "
2241,2241,"0 0.15992812219227312, 5 0.1536388140161725, 6 0.14734950584007192, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",4fastdateformat apis that use a stringbuilder
2242,2242,"0 0.34528963100391674, 6 0.12306740878169448, 4 0.1201814058956916, 1 0.11152339723768294, 3 0.10575139146567718, 2 0.09709338280766852, 5 0.09709338280766852","prevent redundant modifiers[] permit bitvector generation for enums with > 64 values; plus some test correctionsrequire values parameter when generating bit vectors from enums, throwing nullpointerexception if omitted; merge check for type eligibility; add e... generatebitvector() variant; alter generatebitvector(class<e>, enumset<e>) to (class<e>, iterable<e>) by using |= << instead of + to accumulate values; process only specified values"
2243,2243,"5 0.25518925518925517, 3 0.17655677655677654, 2 0.11843711843711842, 6 0.11672771672771674, 1 0.11330891330891332, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2244,2244,"2 0.2348710317460318, 0 0.1550099206349206, 6 0.1307043650793651, 1 0.12896825396825398, 3 0.12723214285714285, 4 0.11160714285714289, 5 0.11160714285714289","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
2245,2245,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2246,2246,"3 0.2112753147235906, 0 0.14039408866995073, 6 0.14039408866995073, 2 0.13464696223316913, 1 0.12698412698412703, 4 0.12315270935960596, 5 0.12315270935960596",add final modifier to local variables.: fastdateprinter memory allocation regression169
2247,2247,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
2248,2248,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2249,2249,"6 0.16725455614344503, 0 0.15490887713109933, 5 0.1487360376249265, 1 0.13227513227513232, 2 0.13227513227513232, 3 0.13227513227513232, 4 0.13227513227513232",4fastdateformat apis that use a stringbuilderrefactor some duplicate code.
2250,2250,"4 0.1523199023199023, 2 0.14804639804639802, 3 0.14804639804639802, 0 0.1394993894993895, 1 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
2251,2251,"5 0.2500610500610501, 3 0.16800976800976802, 2 0.12356532356532357, 6 0.12356532356532357, 1 0.11501831501831504, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2252,2252,"0 0.20294784580498862, 4 0.15532879818594097, 2 0.13151927437641722, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",": extend randomstringutils with methods that generate strings between a min and max length (, )"
2253,2253,"0 0.20361247947454839, 2 0.14997263273125339, 4 0.13656267104542963, 3 0.13081554460864803, 5 0.12889983579638753, 1 0.126984126984127, 6 0.12315270935960593",: added methods to objectutils class to check for null elements in the array ()
2254,2254,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
2255,2255,"4 0.2774224117507699, 0 0.1563610518834399, 6 0.11821843165126748, 2 0.11490168206586118, 1 0.11324330727315803, 3 0.11324330727315803, 5 0.10660980810234542","adding concat(object...) and concatwith(string, object...) methods to provide varargd versions of the more prominent join methods. this ties into the string.concat method. 396"
2256,2256,"6 0.39641839641839643, 4 0.10866910866910866, 2 0.1058201058201058, 3 0.10439560439560437, 0 0.10154660154660154, 1 0.0915750915750916, 5 0.0915750915750916","[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .utc and gmt are the same, so simplify.refactor ""gmt"" magic string.make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
2257,2257,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",reusestatements unnecessarily nested within else clause.
2258,2258,"2 0.3048079135035657, 3 0.13733609385783296, 1 0.1212330342765125, 5 0.1131815044858523, 4 0.11157119852772025, 6 0.10835058661145619, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2259,2259,"2 0.26544566544566545, 3 0.1748473748473748, 1 0.11501831501831504, 6 0.11501831501831504, 0 0.1098901098901099, 4 0.1098901098901099, 5 0.1098901098901099",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsfixing crlfsstatement unnecessarily nested within else clause.add threadutils
2260,2260,"2 0.20017636684303344, 6 0.1384479717813051, 0 0.1322751322751323, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",make sure placement of curly braces is consistent
2261,2261,"6 0.1808924827792752, 0 0.14525306978137167, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
2262,2262,"5 0.2864949258391881, 0 0.12438199323445222, 1 0.11891751236013531, 4 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2263,2263,"0 0.24667524667524673, 3 0.17610467610467612, 4 0.14907764907764906, 1 0.11154011154011154, 2 0.11003861003861004, 6 0.11003861003861004, 5 0.09652509652509655",": update java requirement from java 6 to 7replace usage of deprecated objectutilstostring with objectstostring: fix deprecation warningsadd final modifier to local variables.eat own dog food: separator == null ? """" : separator->objectutils.tostring(separator)remove superfluous parens."
2264,2264,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",validation[] new type util features
2265,2265,"4 0.1921182266009852, 0 0.1499726327312534, 6 0.14805692391899286, 1 0.13464696223316913, 2 0.12698412698412703, 3 0.12506841817186648, 5 0.12315270935960596",[] add null-safe stringutils apis to wrapstringgetbytes([charset|string]).</action>
2266,2266,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",statements unnecessarily nested within else clause.
2267,2267,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2268,2268,"3 0.19855699855699852, 2 0.14805194805194805, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
2269,2269,"0 0.28766788766788765, 4 0.15775335775335772, 6 0.11501831501831503, 1 0.10989010989010989, 2 0.10989010989010989, 3 0.10989010989010989, 5 0.10989010989010989","reverting r1090111 - moving the text.translate escapers back from using range to replicating parts of the range api. see the list for details (unnecessary boxing in stringescapeutils etc), the move to range was an uncomfortable fit. "
2270,2270,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2271,2271,"6 0.2926723200695803, 2 0.19221569906501412, 5 0.11763426831919985, 3 0.10241356816699285, 1 0.09936942813655145, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
2272,2272,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",validation[] new type util features
2273,2273,"6 0.24290524290524293, 0 0.16209716209716207, 2 0.12337662337662338, 5 0.12337662337662335, 1 0.12169312169312169, 4 0.11495911495911497, 3 0.1115921115921116","make sure lines in files dont have trailing white spaces and remove all trailing white spacesapplying sebbs patch from - adding isstarted, issuspended and isstopped to stopwatch"
2274,2274,"2 0.23507180650037793, 3 0.18568909045099516, 6 0.12043335852859663, 1 0.11866969009826155, 0 0.11337868480725624, 4 0.11337868480725624, 5 0.11337868480725624",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.
2275,2275,"2 0.3096388313779618, 3 0.13733609385783296, 5 0.11479181044398434, 1 0.1131815044858523, 6 0.11157119852772028, 4 0.10835058661145619, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2276,2276,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2277,2277,"0 0.24423963133640553, 3 0.1474654377880184, 4 0.1474654377880184, 1 0.11520737327188942, 2 0.11520737327188942, 5 0.11520737327188942, 6 0.11520737327188942",: typeutils.isassignable throws nullpointerexception when fromtype has type variables and totype generic superclass specifies type variable ()
2278,2278,"0 0.28226363008971705, 2 0.1534391534391534, 3 0.12123303427651251, 4 0.12123303427651251, 6 0.11318150448585233, 1 0.1051299746951921, 5 0.10351966873706006",code clean-up for checkstyle.simplify expressions again.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
2279,2279,"1 0.7175005023106287, 2 0.05083383564396221, 4 0.04731766124171188, 3 0.046614426361261806, 5 0.046614426361261806, 0 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2280,2280,"2 0.23313492063492064, 0 0.1498015873015873, 1 0.13244047619047616, 6 0.13070436507936506, 3 0.12896825396825393, 4 0.11334325396825398, 5 0.11160714285714288","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
2281,2281,"2 0.23731459797033566, 3 0.17174082747853237, 1 0.12073900598490764, 4 0.11891751236013533, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
2282,2282,"5 0.2727513227513227, 6 0.12830687830687829, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2283,2283,"0 0.2956645344705046, 2 0.14475242833451785, 4 0.12153518123667373, 3 0.11158493248045488, 6 0.11158493248045488, 1 0.10826818289504858, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
2284,2284,"4 0.2168367346938775, 0 0.13945578231292516, 6 0.13350340136054423, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327",sort members.[] stringutils join apis for primitives.
2285,2285,"5 0.2864949258391881, 4 0.12256049960967993, 0 0.12073900598490762, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2286,2286,"3 0.3535525321239607, 6 0.20804988662131516, 5 0.09429327286470139, 2 0.08767951625094483, 1 0.08635676492819351, 0 0.08503401360544219, 4 0.08503401360544219","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.: fastdateformat doesnt respect summer daylight in some localized stringsrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2287,2287,"5 0.282010582010582, 1 0.1208994708994709, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2288,2288,"4 0.7184543851210519, 3 0.05852172518839185, 0 0.04617604617604617, 5 0.04617604617604617, 2 0.04449254449254449, 1 0.044492544492544486, 6 0.04168670835337501","sort members.[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
2289,2289,"6 0.29221648498756936, 5 0.19716963090457068, 3 0.14629948364888123, 2 0.09542933639319182, 0 0.09275196022183976, 1 0.09007458405048768, 4 0.08605851979345958",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2290,2290,"3 0.2066378066378066, 2 0.13795093795093796, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
2291,2291,"5 0.2901379130887327, 1 0.12073900598490762, 0 0.11891751236013531, 4 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2292,2292,"6 0.282010582010582, 2 0.12275132275132275, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
2293,2293,"5 0.28695436507936506, 6 0.12896825396825393, 2 0.12549603174603172, 4 0.12028769841269843, 0 0.11334325396825398, 1 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2294,2294,"0 0.19585253456221197, 5 0.15463389656938045, 3 0.13850486431131592, 4 0.1313364055299539, 6 0.1313364055299539, 2 0.12596006144393243, 1 0.12237583205325145",use validateistrue to validate arguments: diffbuilder: add null check on fieldname when appending object or object[] ().: there should be a differencebuilder with a reflectiondifferencebuilder implementation
2295,2295,"6 0.2624970386164416, 3 0.15636105188343993, 0 0.13480217957829896, 2 0.12485193082208006, 5 0.10826818289504858, 1 0.10660980810234544, 4 0.10660980810234544",make sure lines in files dont have trailing white spaces and remove all trailing white spacesreuseits confusing to re-use field names locallyadd final modifier to local variables.
2296,2296,"3 0.35610068943402284, 5 0.18438351771685105, 0 0.12041045374378706, 6 0.10020843354176685, 2 0.08449575116241782, 1 0.08112874779541446, 4 0.07327240660573996","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesadd final modifier to local variables.allow access to parsedpattern for test purposesmake parseexception text similar to that thrown by simpledateformat fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
2297,2297,"2 0.22874149659863938, 4 0.13151927437641722, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2298,2298,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.14525306978137167, 1 0.14315663372267146, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
2299,2299,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2300,2300,"3 0.20423280423280418, 0 0.17089947089947086, 2 0.132010582010582, 4 0.13015873015873014, 1 0.1246031746031746, 5 0.11904761904761905, 6 0.11904761904761905",add final modifier to local variables.[] add a method e.g. range<t> range<t>.intersectionwith(range<t>)
2301,2301,"0 0.15992812219227315, 5 0.15154237795747227, 6 0.14944594189877208, 1 0.13477088948787067, 2 0.13477088948787067, 3 0.13477088948787067, 4 0.13477088948787067",4fastdateformat apis that use a stringbuilder
2302,2302,"6 0.282010582010582, 2 0.12275132275132275, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
2303,2303,"4 0.16313932980599644, 0 0.15079365079365079, 1 0.15079365079365079, 2 0.13844797178130513, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",use build in methods for comparing numerical values
2304,2304,"2 0.24575807334428024, 1 0.13081554460864805, 6 0.12889983579638753, 3 0.12506841817186645, 0 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
2305,2305,"2 0.18184349763297128, 4 0.17209690893901416, 6 0.13505987190197713, 3 0.13311055416318573, 1 0.1272626009468115, 0 0.12531328320802007, 5 0.12531328320802007",explicit type parameters can be removedremove redundant type arguments.
2306,2306,"5 0.2664584959666927, 6 0.14441842310694764, 1 0.12073900598490764, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2307,2307,"5 0.2708994708994708, 1 0.12645502645502643, 6 0.12645502645502643, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2308,2308,"6 0.2397094430992736, 3 0.1380145278450363, 4 0.1380145278450363, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
2309,2309,"6 0.30024861350162557, 5 0.19315356664754257, 3 0.14629948364888123, 2 0.09676802447886786, 0 0.08873589596481164, 1 0.08873589596481164, 4 0.08605851979345958",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2310,2310,"5 0.28869047619047616, 6 0.12896825396825393, 2 0.12549603174603172, 4 0.11681547619047618, 1 0.11507936507936509, 0 0.11334325396825398, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2311,2311,"3 0.3566760037348272, 2 0.111577964519141, 1 0.10830999066293186, 6 0.10830999066293186, 0 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2312,2312,"4 0.2988662131519274, 0 0.15124716553287978, 6 0.1258503401360544, 2 0.10997732426303858, 3 0.10839002267573696, 1 0.10362811791383221, 5 0.10204081632653063",sort by method name.removes unnecessary class reference of static method calls which are declared in the same classremove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
2313,2313,"2 0.23185011709601866, 3 0.17720530835284928, 1 0.12073900598490764, 4 0.11891751236013533, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
2314,2314,"3 0.28798185941043075, 2 0.12925170068027206, 1 0.12219702695893171, 0 0.1204333585285966, 4 0.11337868480725623, 5 0.11337868480725623, 6 0.11337868480725623","[] part 2: refactor tostringstyle and tostringbuildertest to verify that we are unsetting the registry when no longer needed[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
2315,2315,"2 0.15659340659340656, 3 0.15659340659340656, 0 0.13736263736263737, 1 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",if statement can be simplified
2316,2316,"5 0.2901379130887327, 4 0.12073900598490762, 0 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2317,2317,"5 0.2801587301587301, 6 0.12460317460317458, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2318,2318,"4 0.1624966370729082, 0 0.1530804412160344, 1 0.1530804412160344, 2 0.1493139628732849, 3 0.13989776701641105, 5 0.12106537530266345, 6 0.12106537530266345",[github] commons-lang pull request : intellij idea refactorings..: added validstate()
2319,2319,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2320,2320,"4 0.24197261601841752, 0 0.19701926572155576, 6 0.17157397310069064, 2 0.1300133284866109, 3 0.1283169756452199, 1 0.0765782139827941, 5 0.05452562704471101","use final.make sure lines in files dont have trailing white spaces and remove all trailing white spacespmd: nested if statements can be combineduse stringbuilders instead of stringbuffers(a couple of instances were overlooked)this fixes fix for : randomstringutils random method can overflow...: randomstringutilsrandom can enter infinite loop if end parameter is to small ()1.) fixed possible infinite loop that can be caused by generating either digits or letters by calling with a to low end param.2.) added (inclusive) and (exclusive) terms to javadoc of random methodreuseadd final modifier to local variables.add final modifier to method parameters. randomstringutils throws confusing iae when end <= start randomstringutils.random(count, 0, 0, false, false, universe, random) always throws java.lang.arrayindexoutofboundsexceptionremove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)fix brace positions"
2321,2321,"0 0.19897959183673466, 4 0.16128117913832196, 2 0.12953514739229025, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",": extend randomstringutils with methods that generate strings between a min and max length (, )"
2322,2322,"5 0.25006105006105006, 3 0.16971916971916967, 2 0.12185592185592184, 6 0.12014652014652014, 1 0.11843711843711845, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2323,2323,"0 0.28314659197012143, 4 0.13445378151260504, 1 0.12301587301587302, 6 0.11974789915966387, 3 0.11811391223155931, 2 0.11647992530345472, 5 0.10504201680672273",": update java requirement from java 6 to 7replace usage of deprecated objectutilstostring with objectstostring: fix deprecation warningseat own dog food: separator == null ? """" : separator->objectutils.tostring(separator)remove superfluous parens."
2324,2324,"6 0.24900793650793648, 2 0.20456349206349203, 4 0.14067460317460315, 3 0.11289682539682537, 0 0.11011904761904757, 1 0.09206349206349207, 5 0.09067460317460319",make whitespace use around generic tokens consistent and add a checkstyle rule to enforce it.explicit type parameters can be removedmake sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.use final consistently. [] retrieve class hierarchy
2325,2325,"3 0.3566760037348272, 2 0.10994397759103643, 1 0.10830999066293186, 4 0.10830999066293186, 6 0.10667600373482727, 0 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2326,2326,"2 0.19023199023199025, 0 0.17142857142857143, 4 0.1423687423687424, 6 0.1423687423687424, 5 0.12356532356532358, 1 0.11672771672771677, 3 0.11330891330891335","removes unnecessary class reference of static method calls which are declared in the same class: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
2327,2327,"2 0.32311372037399433, 0 0.1343770384866275, 1 0.126766688410524, 3 0.11002391824309632, 4 0.10697977821265495, 6 0.10089149815177215, 5 0.09784735812133075",formatting fixes perhttps://patch-diff.githubusercontent.com/raw/apache/commons-lang/pull/128.diffcrlf -> lfjavadoc: fix typo but working is still awkward. - add issorted() to arrayutils. patch supplied by james sawle. in github.
2328,2328,"5 0.2883597883597883, 2 0.1351611351611351, 6 0.13011063011063007, 4 0.11495911495911496, 1 0.11327561327561328, 0 0.10990860990860991, 3 0.10822510822510821", simplify fastdateformat; eliminate boxingrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2329,2329,"2 0.2267573696145124, 1 0.13350340136054423, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2330,2330,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
2331,2331,"1 0.7125778581474782, 2 0.054350010046212566, 5 0.04942736588306209, 3 0.046614426361261806, 0 0.045911191480811735, 4 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2332,2332,"5 0.2883164194639604, 0 0.12073900598490762, 4 0.12073900598490762, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2333,2333,"6 0.32726423902894497, 5 0.1279178338001867, 3 0.11974789915966384, 0 0.10994397759103644, 1 0.1050420168067227, 2 0.1050420168067227, 4 0.1050420168067227",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor some duplicate code.
2334,2334,"6 0.27261904761904765, 2 0.19484126984126987, 1 0.11845238095238093, 4 0.11845238095238093, 0 0.10595238095238094, 3 0.1003968253968254, 5 0.0892857142857143",use final.make sure lines in files dont have trailing white spaces and remove all trailing white spaces: added shuffle methods to arrayutilsremove trailing white spacesadded new vararg methods to insert values into an array at an index.this implements . this commit also deprecates the add() methodsthat inserted a single value into an array at an index.
2335,2335,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
2336,2336,"0 0.2976705833848691, 4 0.14904143475572046, 2 0.1374974232117089, 6 0.11873840445269015, 3 0.1028653885796743, 1 0.10142238713667287, 5 0.09276437847866421","[] add method org.apache.commons.lang3.reflect.methodutils.invokeexactmethod(object, string)</action>[] add method org.apache.commons.lang3.reflect.methodutils.invokemethod(object, string)</action>[] add methodutil apis to call methods without parameters."
2337,2337,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
2338,2338,"3 0.20461760461760456, 2 0.13997113997114, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
2339,2339,"2 0.18184349763297128, 1 0.1642996379838485, 5 0.1409078251183514, 3 0.13116123642439434, 4 0.13116123642439434, 0 0.1253132832080201, 6 0.1253132832080201",adding hennings github pull request with a triple implementation. 675
2340,2340,"6 0.2957164601000217, 2 0.19069362904979342, 5 0.1130680582735377, 1 0.10393563818221355, 3 0.10089149815177215, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
2341,2341,"2 0.33681235051098063, 0 0.1389432485322896, 1 0.1161121983039791, 3 0.1100239182430963, 6 0.10089149815177213, 4 0.09936942813655143, 5 0.09784735812133073",formatting fixes perhttps://patch-diff.githubusercontent.com/raw/apache/commons-lang/pull/128.diffcrlf -> lfjavadoc: fix typo but working is still awkward. - add issorted() to arrayutils. patch supplied by james sawle. in github.
2342,2342,"5 0.27275132275132274, 6 0.13015873015873017, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2343,2343,"3 0.3603411513859274, 0 0.10660980810234541, 1 0.10660980810234541, 2 0.10660980810234541, 4 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2344,2344,"2 0.23098791755508175, 6 0.15138592750533045, 0 0.14475242833451785, 3 0.1231935560293769, 1 0.12153518123667374, 4 0.12153518123667374, 5 0.10660980810234542","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.[] removed unnecessary elses and use of ternary operator with primitive boolean consequences e.g. (some boolean expression) ? true : false"
2345,2345,"4 0.26719576719576715, 6 0.13571428571428568, 0 0.12089947089947091, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
2346,2346,"4 0.26719576719576715, 6 0.13571428571428568, 0 0.12089947089947091, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
2347,2347,"5 0.28869047619047616, 6 0.12723214285714282, 2 0.12375992063492061, 4 0.11855158730158732, 0 0.1150793650793651, 1 0.1150793650793651, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2348,2348,"0 0.3370681605975724, 2 0.1279178338001867, 6 0.111577964519141, 1 0.10830999066293186, 3 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227"," - followup incorporating ggregorys doc suggestion, some doc fixes, addition of const_byte() and const_short(), and junit improvements to test doc examples and make sure const_byte() and const_short() throw illegalargumentexception as required."
2349,2349,"3 0.34142857142857147, 6 0.1303174603174603, 0 0.12920634920634919, 2 0.11920634920634919, 4 0.10476190476190475, 1 0.10365079365079363, 5 0.07142857142857144","refactor ""gmt"" magic string.add a default case to switch to appease findbugs: nullpointerexception in fastdateparser$timezonestrategy ()replicate the fix for 1186add final modifier to local variables.remove redundant type arguments. fastdateparser_timezonestrategytesttesttimezonestrategypattern fails on windows with german localereimplementing 1107 fix parsing edge cases in fastdateparserrevert muddled commit - number percentage formatting with fractional digits fastdateparser error - timezones not handled correctlyuse final consistently. : test failure in fastdateparsertest and fastdateformat_parsertest when building with jdk8. thanks to bruno p. kinoshita and henri yandell for their help in fixing this issue.add final modifier to local variables."
2350,2350,"6 0.19126984126984126, 0 0.1616402116402116, 2 0.13386243386243388, 1 0.13201058201058205, 4 0.132010582010582, 3 0.13015873015873017, 5 0.11904761904761907","<action issue="""" type=""add"" dev=""ggregory"">add apis mutableboolean settrue() and setfalse()</action>"
2351,2351,"6 0.4319426885798569, 5 0.15563983705576628, 3 0.1281078803202697, 4 0.08484337687877509, 2 0.07107739851102683, 0 0.06517769349627758, 1 0.06321112515802782","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
2352,2352,"5 0.28869047619047616, 6 0.12723214285714282, 2 0.12375992063492061, 0 0.11681547619047622, 4 0.11681547619047622, 1 0.1150793650793651, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2353,2353,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2354,2354,"1 0.7097649186256779, 2 0.0557564798071127, 5 0.04942736588306209, 4 0.048020896122161934, 3 0.046614426361261806, 0 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2355,2355,"3 0.3470741530443022, 2 0.11324330727315801, 6 0.10992655768775171, 1 0.10826818289504857, 4 0.10826818289504857, 0 0.10660980810234541, 5 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2356,2356,"2 0.29569160997732424, 0 0.1496598639455782, 4 0.14489795918367343, 1 0.10362811791383221, 3 0.10204081632653063, 5 0.10204081632653063, 6 0.10204081632653063",: fix typeutils.parameterize to work correctly with narrower-typed varargs array ()fix sonarqube warning: the user-supplied array typearguments is stored directly.[] new type util features
2357,2357,"3 0.19594964422550626, 0 0.17487684729064035, 2 0.13656267104542966, 1 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593, 6 0.12315270935960593",add final modifier to local variables.convert to java 5 enhanced loops. 
2358,2358,"5 0.2688644688644689, 3 0.13894993894993893, 2 0.1304029304029304, 6 0.12014652014652018, 4 0.12014652014652016, 1 0.11159951159951163, 0 0.10989010989010992",dont mutate parametersadd final modifier to method parameters.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2359,2359,"5 0.2846734322144158, 4 0.12620348685922456, 1 0.11891751236013534, 6 0.11891751236013534, 0 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2360,2360,"5 0.27460317460317457, 6 0.12830687830687829, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2361,2361,"2 0.33540372670807456, 3 0.12284334023464458, 5 0.11318150448585232, 1 0.1115711985277203, 4 0.10835058661145616, 0 0.1051299746951921, 6 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2362,2362,"4 0.33049040511727074, 6 0.13148542999289264, 2 0.10992655768775172, 3 0.10826818289504858, 0 0.10660980810234542, 1 0.10660980810234542, 5 0.10660980810234542",sort members.use stringisempty() instead of stringlength() == 0remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)use index_not_found instead of magic number.
2363,2363,"4 0.1642135642135642, 6 0.16219336219336217, 3 0.15411255411255412, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 5 0.12987012987012989",remove redundant type arguments.format.
2364,2364,"4 0.23217648641377447, 0 0.13801452784503626, 6 0.13801452784503626, 2 0.1285983319881625, 1 0.12106537530266344, 3 0.12106537530266344, 5 0.12106537530266344",sort members.[] stringutils.join() with support for list<?> withconfigurable start/end indices.
2365,2365,"3 0.20935960591133002, 2 0.15380405035577444, 0 0.1403940886699507, 1 0.126984126984127, 4 0.12315270935960593, 5 0.12315270935960593, 6 0.12315270935960593",fixing crlfsstatement unnecessarily nested within else clause. fix createlong() so it behaves like createinteger()
2366,2366,"1 0.7104681535061282, 2 0.05294354028531243, 5 0.04942736588306208, 4 0.048724131002612026, 3 0.047317661241711884, 0 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2367,2367,"2 0.2528344671201814, 3 0.16712018140589568, 6 0.14489795918367343, 0 0.11791383219954646, 4 0.10997732426303858, 1 0.1052154195011338, 5 0.10204081632653063",add final modifier to local variables.remove trailing whitespacescrlf -> lfjavadoc: fix typo but working is still awkward.implements : add a method to arrayutils for removing all occurrences of a given element. thanks to haiyang li.
2368,2368,"2 0.1965367965367965, 4 0.14199134199134195, 1 0.13795093795093796, 3 0.13391053391053392, 0 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",added escape/unescapejson methods per maurizio cucchiaras patch in 797
2369,2369,"5 0.2783068783068783, 6 0.12460317460317458, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2370,2370,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
2371,2371,"4 0.7264819298717605, 5 0.05353779930051116, 6 0.04663258900547036, 0 0.04474934983409561, 2 0.043493857053179104, 1 0.04349385705317909, 3 0.04161061788180433","removing charsequenceutils in favour of putting the code in stringutilschange stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
2372,2372,"5 0.2727513227513227, 6 0.12645502645502643, 1 0.12460317460317459, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2373,2373,"3 0.2074438970990695, 4 0.1499726327312534, 2 0.1384783798576902, 6 0.13464696223316916, 0 0.12315270935960594, 1 0.12315270935960594, 5 0.12315270935960594",use final consistently. use enhanced for loopadd final modifier to local variables.
2374,2374,"5 0.2883164194639604, 1 0.12073900598490762, 6 0.12073900598490762, 4 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2375,2375,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2376,2376,"6 0.25140809011776755, 2 0.1528417818740399, 3 0.12954429083461338, 0 0.11879160266257043, 4 0.11699948796722992, 1 0.11520737327188942, 5 0.11520737327188942",make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove unused constructor parameter
2377,2377,"3 0.40073929115025, 2 0.10545770819743422, 1 0.09936942813655142, 4 0.09936942813655142, 6 0.09936942813655142, 0 0.09784735812133072, 5 0.09784735812133072","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2378,2378,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
2379,2379,"5 0.1955636955636956, 2 0.19413919413919417, 6 0.17704517704517705, 1 0.11436711436711436, 0 0.11294261294261294, 4 0.11294261294261294, 3 0.09299959299959303",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefullyapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2380,2380,"5 0.268279989591465, 6 0.14259692948217534, 1 0.12073900598490764, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2381,2381,"5 0.29042658730158727, 6 0.13070436507936506, 2 0.12375992063492061, 1 0.1168154761904762, 4 0.11507936507936509, 0 0.11160714285714286, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2382,2382,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2383,2383,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2384,2384,"0 0.289031035299692, 2 0.13811892916370525, 4 0.12319355602937689, 1 0.11821843165126746, 6 0.11821843165126746, 3 0.10660980810234542, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
2385,2385,"0 0.17342739564961782, 3 0.15079365079365076, 4 0.14462081128747797, 2 0.13433274544385657, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
2386,2386,"0 0.19221569906501412, 2 0.16177429876060012, 1 0.15568601869971732, 3 0.15416394868449662, 6 0.13894324853228962, 5 0.09936942813655145, 4 0.09784735812133075","add final modifier to local variables.fix brace positions: add event support utilitiesapplying documentation patch ""commons-event-support-docs.patch"" from michael wooten.using copyonwritearraylist for thread safety.changing eol-style to native.misc. event utils."
2387,2387,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
2388,2388,"2 0.2313988095238095, 3 0.2036210317460317, 1 0.1168154761904762, 6 0.11334325396825398, 0 0.11160714285714286, 4 0.11160714285714286, 5 0.11160714285714286",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.fixing crlfsstatement unnecessarily nested within else clause.add threadutils
2389,2389,"4 0.21545667447306788, 0 0.15352589123080923, 2 0.13895394223263074, 1 0.1298464741087692, 3 0.12802498048399688, 5 0.117096018735363, 6 0.117096018735363",: add zero copy write method to strbuilder; : add zero copy read method to strbuilder. thanks to mikhail mazursky.
2390,2390,"2 0.2277537277537277, 4 0.19745069745069738, 0 0.14189514189514182, 1 0.10822510822510821, 3 0.10822510822510821, 5 0.10822510822510821, 6 0.10822510822510821",crlf -> lfjavadoc: fix typo but working is still awkward.simplify isempty be reusing getlengths/if (foo) { return true; } return false;/return foo;/g
2391,2391,"2 0.25518925518925517, 3 0.18168498168498165, 6 0.12014652014652012, 1 0.11330891330891332, 0 0.1098901098901099, 4 0.1098901098901099, 5 0.1098901098901099",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsfixing crlfsstatement unnecessarily nested within else clause.add threadutils
2392,2392,"6 0.15659340659340654, 2 0.15445665445665444, 1 0.1394993894993895, 0 0.13736263736263735, 3 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735",fix brace positions
2393,2393,"0 0.35915088927137123, 3 0.1315739147064448, 2 0.12220309810671254, 4 0.10212277682157199, 1 0.10078408873589594, 6 0.09810671256454387, 5 0.08605851979345958",": update java requirement from java 6 to 7use multi-catch in annotationutils and exceptionutilsadd final modifier to local variables.retract @nonbinding support; doesnt seem proper default behaviorrespect @javax.enterprise.util.nonbindingavoid throwing checked exceptions from annotationutils.hashcode()explicitly specifying the exceptions instead of a catch(exception)add hashcode and tostring methods to annotationutils, plus testsannotationutils"
2394,2394,"0 0.17989417989417986, 1 0.1487050960735171, 2 0.14480646059593424, 3 0.13700918964076858, 4 0.13311055416318573, 5 0.1311612364243943, 6 0.12531328320802007","use final.: add archutils - an utility class for the ""os.arch"" system property ()"
2395,2395,"3 0.20663780663780662, 2 0.14401154401154398, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
2396,2396,"4 0.6924704924704925, 0 0.07081807081807082, 3 0.06284086284086284, 5 0.04916564916564916, 6 0.042328042328042326, 2 0.0411884411884412, 1 0.041188441188441186","sort members.add final modifier to local variables.https://issues.apache.org/jira/browse/ stringutils methods do not handle unicode 2.0+ supplementary characters correctly.use index_not_found instead of magic number.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
2397,2397,"2 0.1965367965367965, 1 0.14199134199134197, 4 0.13997113997113997, 3 0.13189033189033192, 0 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",added escape/unescapejson methods per maurizio cucchiaras patch in 797
2398,2398,"2 0.3080285254198298, 3 0.13089487002530478, 5 0.11640211640211638, 4 0.11479181044398439, 1 0.11479181044398436, 6 0.1115711985277203, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2399,2399,"3 0.3566760037348272, 2 0.11321195144724555, 1 0.10830999066293186, 6 0.10667600373482727, 0 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2400,2400,"0 0.20096371882086164, 4 0.15532879818594097, 2 0.13350340136054423, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",": extend randomstringutils with methods that generate strings between a min and max length (, )"
2401,2401,"3 0.15363881401617246, 4 0.15363881401617246, 6 0.15363881401617246, 0 0.1347708894878706, 1 0.1347708894878706, 2 0.1347708894878706, 5 0.1347708894878706",use validateistrue to validate arguments
2402,2402,"0 0.2523809523809524, 2 0.14312169312169307, 1 0.1246031746031746, 3 0.12275132275132276, 4 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",adding vincent ricards patch to charrange.java providing an iterator that lets you walk the chars in the range. 454
2403,2403,"6 0.23487103174603177, 0 0.16542658730158727, 4 0.14285714285714282, 3 0.12028769841269843, 2 0.11334325396825398, 1 0.11160714285714288, 5 0.11160714285714288",remove redundant casts ()remove redundant casts throughout the codebase to make it cleaner and easier to read.validation[] new type util features
2404,2404,"6 0.16412099430967353, 5 0.14944594189877208, 0 0.1473495058400719, 1 0.13477088948787067, 2 0.13477088948787067, 3 0.13477088948787067, 4 0.13477088948787067",4fastdateformat apis that use a stringbuilder
2405,2405,"3 0.21269841269841266, 2 0.13795093795093796, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
2406,2406,"4 0.22468527640941433, 0 0.1595511767925561, 1 0.12315270935960594, 2 0.12315270935960594, 3 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()[] new type util features
2407,2407,"3 0.1662337662337662, 2 0.1642135642135642, 4 0.146031746031746, 1 0.13391053391053392, 0 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to method parameters.
2408,2408,"3 0.17203548085901024, 4 0.16713352007469653, 0 0.15079365079365079, 2 0.14589169000933705, 5 0.14098972922502334, 1 0.1181139122315593, 6 0.10504201680672272",sort members.add final modifier to local variables.: fix implementation of stringutils.getjarowinklerdistance()replace current implementation with jaro-winkler distance implementation taken from apache lucene.
2409,2409,"3 0.19978106185002734, 6 0.1538040503557745, 5 0.13656267104542963, 2 0.13273125342090858, 0 0.13081554460864805, 1 0.12315270935960593, 4 0.12315270935960593",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
2410,2410,"2 0.3176903611686221, 3 0.13089487002530478, 5 0.11479181044398433, 1 0.11157119852772027, 4 0.11157119852772027, 6 0.10835058661145619, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2411,2411,"0 0.200453514739229, 4 0.19886621315192743, 1 0.13378684807256233, 2 0.13378684807256233, 6 0.12108843537414964, 5 0.10680272108843539, 3 0.1052154195011338",removes unnecessary class reference of static method calls which are declared in the same class[github] commons-lang pull request : intellij idea refactorings.. add notequal() method to objectutils
2412,2412,"2 0.20890022675736958, 6 0.14540816326530606, 1 0.13151927437641722, 3 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327",": add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
2413,2413,"5 0.26281550871714804, 6 0.14806141035649226, 1 0.12073900598490764, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2414,2414,"2 0.3241315850011502, 3 0.12928456406717273, 5 0.11479181044398434, 1 0.1131815044858523, 6 0.10835058661145616, 4 0.10674028065332414, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2415,2415,"2 0.1746031746031746, 1 0.15138592750533048, 0 0.14972755271262733, 4 0.14972755271262733, 6 0.134802179578299, 3 0.13148542999289267, 5 0.1082681828950486","[github] commons-lang pull request : intellij idea refactorings..javadocapplying valentin rochers patch to , adding new regexp and in range methods to validate: added validstate()"
2416,2416,"5 0.268279989591465, 6 0.14259692948217534, 1 0.12073900598490764, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2417,2417,"0 0.20259740259740255, 2 0.13997113997114, 3 0.13795093795093796, 1 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",: add conversion utility to convert between data types on byte level
2418,2418,"0 0.16819827346143132, 2 0.16819827346143132, 4 0.1584516847674742, 1 0.1272626009468115, 3 0.1272626009468115, 5 0.12531328320802007, 6 0.12531328320802007",: stringutilsisanyempty and isanyblank should return false for an empty array (): add stringutilsisanynotempty and isanynotblank ()
2419,2419,"6 0.18371546149323925, 3 0.14462081128747795, 2 0.13844797178130513, 0 0.13639035861258084, 1 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",use final.[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
2420,2420,"3 0.3961730811045879, 2 0.10697977821265492, 1 0.10089149815177212, 4 0.10089149815177212, 6 0.09936942813655142, 0 0.09784735812133072, 5 0.09784735812133072","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2421,2421,"3 0.28798185941043075, 2 0.12925170068027206, 0 0.12219702695893171, 1 0.1204333585285966, 4 0.11337868480725623, 5 0.11337868480725623, 6 0.11337868480725623","[] part 2: refactor tostringstyle and tostringbuildertest to verify that we are unsetting the registry when no longer needed[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
2422,2422,"4 0.17487684729064035, 0 0.17296113847837982, 5 0.1384783798576902, 3 0.1346469622331691, 6 0.1327312534209086, 1 0.12315270935960593, 2 0.12315270935960593","[] create strbuilder apis similar to string.format(string, object...)"
2423,2423,"5 0.2883164194639604, 4 0.12256049960967993, 0 0.12073900598490762, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2424,2424,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2425,2425,"4 0.6946064139941691, 0 0.08746355685131196, 5 0.04834791059280854, 6 0.04721412374473598, 1 0.04551344347262714, 3 0.03984450923226433, 2 0.03701004211208293","svn ps svn:eol-style nativesrc/main/java/org/apache/commons/lang3/charsequenceutils.javasvn ps svn:eol-style nativesrc/test/java/org/apache/commons/lang3/charsequenceutilstest.javatab police (and trailing spaces)change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
2426,2426,"0 0.19811875367430917, 4 0.1384479717813051, 2 0.13433274544385657, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",deprecate systemutilsline_separator in favor of java.lang.systemlineseparator
2427,2427,"3 0.19211822660098518, 6 0.14422550629447178, 0 0.14039408866995076, 5 0.13656267104542966, 2 0.13656267104542963, 1 0.12698412698412703, 4 0.12315270935960594",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
2428,2428,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.15154237795747227, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
2429,2429,"5 0.2727513227513227, 6 0.12645502645502643, 1 0.12460317460317459, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2430,2430,"4 0.2168367346938775, 6 0.14143990929705214, 0 0.13151927437641722, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327",sort members.[] stringutils join apis for primitives.
2431,2431,"6 0.26438492063492064, 3 0.16542658730158727, 2 0.12375992063492061, 0 0.11160714285714288, 1 0.11160714285714288, 4 0.11160714285714288, 5 0.11160714285714288",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.
2432,2432,"6 0.21693121693121686, 3 0.15650236702868278, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
2433,2433,"1 0.7175005023106287, 2 0.049427365883062076, 3 0.04872413100261202, 0 0.046614426361261806, 4 0.046614426361261806, 5 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2434,2434,"5 0.269047619047619, 6 0.13201058201058197, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2435,2435,"2 0.24958949096880131, 1 0.13081554460864805, 6 0.12698412698412698, 0 0.12315270935960593, 3 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
2436,2436,"4 0.28222996515679444, 3 0.17789392179636085, 2 0.13182346109175377, 6 0.13182346109175377, 5 0.09930313588850173, 1 0.08981804103755325, 0 0.08710801393728225",sort members.remove redundant type arguments.add final modifier to local variables.add final modifier to method parameters.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)fix brace positionstab police (and trailing spaces)
2437,2437,"0 0.30910609857978283, 4 0.1746031746031746, 6 0.1465329991645781, 2 0.11612364243943189, 3 0.09507101086048453, 5 0.07986633249791145, 1 0.0786967418546366",": performance improvements for stringescapeutils. this fixes from github. thanks to fabian lange.<action issue="""" type=""fix"">stringescapeutils.escapejava() and escapeecmascript() do not output the escaped surrogate pairs that are java parsable</action>javadoc, comments, and message strings: change ""unicode"" to ""unicode"".reverting r1090111 - moving the text.translate escapers back from using range to replicating parts of the range api. see the list for details (unnecessary boxing in stringescapeutils etc), the move to range was an uncomfortable fit. moving text translation classes to the range class for its configuration"
2438,2438,"0 0.1921182266009852, 2 0.14039408866995076, 4 0.14039408866995073, 3 0.1384783798576902, 5 0.13081554460864808, 6 0.13081554460864808, 1 0.12698412698412703",prevent redundant modifiers: add a reflection-based variant of diffbuilder
2439,2439,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
2440,2440,"6 0.20884608525057963, 5 0.20385232744783305, 3 0.19011949349027998, 0 0.12769752095594789, 4 0.09898341359015514, 1 0.08774745853397539, 2 0.08275370073122883",add final modifier to local variables.tab police: fastdateparser could use calendar.getdisplaynames for all text fieldsshow where the parsing failed fastdateparser does not handle unterminated quotes correctlytrailing spaces fastdateparser does not handle non-gregorian calendars properlyfix bug in java 7 (locale.tostring() format has changed) fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2441,2441,"3 0.21198156682027647, 0 0.17434715821812594, 6 0.1474654377880184, 2 0.12058371735791093, 1 0.11520737327188942, 4 0.11520737327188942, 5 0.11520737327188942", fastdateparser could use calendar.getdisplaynames for all text fieldsremove unnecessary keyvalue instances: fastdateparser could use calendar.getdisplaynames for all text fields
2442,2442,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.14525306978137167, 1 0.14315663372267148, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
2443,2443,"3 0.19855699855699852, 2 0.15209235209235208, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
2444,2444,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2445,2445,"0 0.20271724509012642, 2 0.20083400591875167, 3 0.1725854183481302, 6 0.14998654829163302, 4 0.12644605864944847, 5 0.07842345977939195, 1 0.06900726392251816","make sure lines in files dont have trailing white spaces and remove all trailing white spaces: methodutils.invokemethod throws arraystoreexception if using varargs arguments and smaller types than the method defines (): enhance methodutils to allow invocation of private methods (): add support for varargs in constructorutils, memberutils, and methodutilsthis from github.[] get method override hierarchyadd final modifier to local variables.add final modifier to method parameters.fix pmd issues: ""these nested if statements could be combined""convert to java 5 enhanced loops. changing comment so pmd notices the nopmdadding nopmd tags for various empty catch blocksmoving most of the methods over to varargs. a couple cant change because they are object[], class[] with both end parameters ideally wanting to be vararg. 396"
2446,2446,"5 0.28695436507936506, 6 0.12896825396825393, 2 0.12723214285714282, 4 0.12028769841269842, 0 0.11334325396825398, 1 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2447,2447,"3 0.24322344322344325, 4 0.15946275946275945, 6 0.1338217338217338, 2 0.11672771672771676, 5 0.11672771672771676, 0 0.11672771672771673, 1 0.11330891330891332",7micro optimization: replace stringbuilder with string concatenation so that the compiler can better optimize the codeformat to 120 line length.add final modifier to local variables.
2448,2448,"0 0.17517006802721083, 2 0.16128117913832196, 6 0.1414399092970521, 4 0.1374716553287982, 3 0.12953514739229025, 1 0.12755102040816327, 5 0.12755102040816327",extract some helper methods to make the code better readable
2449,2449,"4 0.19699546485260766, 0 0.16524943310657592, 1 0.1275510204081633, 2 0.1275510204081633, 3 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
2450,2450,"5 0.26719576719576715, 6 0.13201058201058202, 1 0.12460317460317458, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2451,2451,"6 0.2304324028461959, 2 0.13464696223316913, 0 0.13081554460864805, 3 0.12889983579638753, 4 0.12889983579638753, 1 0.12315270935960593, 5 0.12315270935960593","added missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
2452,2452,"2 0.43635819107517243, 4 0.14285714285714288, 3 0.10302485774183887, 6 0.0893980233602875, 0 0.07891584306678645, 5 0.07891584306678645, 1 0.07053009883198565",remove redundant type arguments. simplify arrayutils removeelements by using newdecrementandget() method: improve arrayutils removeelements time complexity to o(n) ()based on patch submitted by jeffery yuancrlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables. arrayutils removeelements methods use unnecessary hashseteliminate conversion of bitset to int[] arrayutils removeelements methods use unnecessary hashsetreplace hashset with bitset (less memory; faster) arrayutils removeelements methods clone temporary index arrays unnecessarilyreduce number of created arrays[] complement arrayutils.addall() variants with by-index and by-value removal methods
2453,2453,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2454,2454,"5 0.2737444704657819, 0 0.12802498048399688, 6 0.12802498048399688, 3 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 4 0.11709601873536299",4fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2455,2455,"5 0.2304940755644981, 3 0.21797451374916163, 6 0.12564274536105519, 2 0.11781801922646991, 1 0.10529845741113349, 4 0.10216856695729937, 0 0.10060362173038231",format.use final consistently. replace tabs with whitespaces and add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2456,2456,"6 0.2208994708994709, 3 0.1431216931216931, 4 0.1394179894179894, 0 0.12830687830687834, 2 0.1264550264550265, 1 0.12089947089947094, 5 0.12089947089947094","<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
2457,2457,"3 0.2016967706622879, 6 0.14422550629447178, 4 0.1403940886699507, 1 0.13464696223316913, 2 0.13273125342090863, 0 0.12315270935960594, 5 0.12315270935960594",format to 120 line length.add final modifier to local variables.
2458,2458,"2 0.2318501170960187, 3 0.1772053083528493, 4 0.12256049960967996, 0 0.117096018735363, 1 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
2459,2459,"5 0.2614237614237615, 2 0.1486291486291486, 3 0.12674362674362674, 4 0.12337662337662339, 1 0.11664261664261666, 0 0.11159211159211162, 6 0.11159211159211162",add final modifier to method parameters.refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2460,2460,"1 0.709061683745228, 2 0.0536467751657625, 5 0.050833835643962225, 3 0.04942736588306208, 4 0.04661442636126182, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2461,2461,"5 0.2705738705738706, 2 0.13553113553113552, 3 0.13553113553113552, 4 0.11843711843711847, 6 0.11843711843711845, 0 0.11159951159951163, 1 0.10989010989010992",dont mutate parametersadd final modifier to method parameters.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2462,2462,"0 0.26074735449735453, 3 0.1496362433862434, 4 0.13574735449735448, 2 0.12417328042328041, 1 0.123015873015873, 6 0.12070105820105818, 5 0.08597883597883596",": equalsbuilderisregistered: swappedpair construction bug ()swappedpair constructed as pair.of(rhs,lhs)add final modifier to local variables.rename getrightelement() to getright(). rename getleftelement() to getleft().decompose pair into an abstract class with element accessor methods + mutable/immutable concrete expression classesuse static method for brevity, avoiding type paramsapplying the copy of the hashcodebuilder code to stop cyclic references over to equalsbuilder per and oliver sauders patch"
2463,2463,"5 0.282010582010582, 6 0.12275132275132276, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2464,2464,"6 0.17835497835497832, 2 0.15209235209235208, 0 0.15007215007215005, 1 0.1298701298701299, 3 0.1298701298701299, 4 0.1298701298701299, 5 0.1298701298701299",javdoc and minor tweaks to contexted exception
2465,2465,"5 0.2727513227513227, 6 0.12645502645502643, 1 0.12460317460317459, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2466,2466,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2467,2467,"6 0.19897959183673466, 5 0.1434240362811791, 3 0.13945578231292519, 2 0.13151927437641722, 4 0.13151927437641722, 0 0.12755102040816327, 1 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
2468,2468,"4 0.33862433862433866, 0 0.12123303427651254, 2 0.11318150448585232, 6 0.1115711985277203, 1 0.10835058661145616, 3 0.10351966873706006, 5 0.10351966873706006","sort members.rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
2469,2469,"6 0.15992812219227312, 5 0.1536388140161725, 0 0.1473495058400719, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",1154fastdateformat apis that use a stringbuilder
2470,2470,"2 0.2641554134091447, 3 0.1729447998104714, 6 0.13148542999289264, 1 0.11158493248045488, 0 0.10660980810234542, 4 0.10660980810234542, 5 0.10660980810234542",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateparser too strict on abbreviated short month symbolsadd final modifier to local variables.format.
2471,2471,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2472,2472,"5 0.2864949258391881, 4 0.12256049960967993, 0 0.12073900598490762, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2473,2473,"5 0.28695436507936506, 6 0.12896825396825393, 2 0.12723214285714282, 4 0.12028769841269842, 1 0.11334325396825398, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2474,2474,"5 0.27460317460317457, 1 0.1246031746031746, 6 0.1246031746031746, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2475,2475,"2 0.2522321428571429, 3 0.14806547619047616, 6 0.1359126984126984, 4 0.12549603174603174, 0 0.113343253968254, 1 0.113343253968254, 5 0.11160714285714289","make sure placement of curly braces is consistentadd final modifier to method parameters.: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
2476,2476,"6 0.2397094430992736, 3 0.1380145278450363, 4 0.1380145278450363, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
2477,2477,"2 0.22874149659863938, 4 0.13350340136054423, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2478,2478,"4 0.23029324724239975, 3 0.14931396287328488, 0 0.13048157115953726, 2 0.12483185364541298, 1 0.12294861447403822, 5 0.12106537530266345, 6 0.12106537530266345","sort members and clean up comments.add a charsetutils.containsany(string, string) per 886"
2479,2479,"2 0.2366071428571429, 0 0.16021825396825395, 6 0.1307043650793651, 3 0.12723214285714285, 1 0.12202380952380953, 4 0.11160714285714289, 5 0.11160714285714289","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
2480,2480,"6 0.23782620392789883, 3 0.1380145278450363, 4 0.1380145278450363, 5 0.12294861447403824, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
2481,2481,"6 0.15659340659340654, 4 0.14804639804639805, 0 0.14163614163614163, 2 0.14163614163614163, 1 0.13736263736263735, 3 0.13736263736263735, 5 0.13736263736263735",use less confusing method name
2482,2482,"1 0.7139843279083786, 2 0.05224030540486238, 5 0.0494273658830621, 4 0.0473176612417119, 3 0.04661442636126181, 0 0.045207956600361685, 6 0.045207956600361685",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2483,2483,"5 0.28285193858964347, 4 0.12620348685922458, 0 0.12073900598490764, 1 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2484,2484,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
2485,2485,"6 0.30014430014430016, 0 0.12337662337662335, 3 0.12337662337662335, 5 0.12337662337662335, 2 0.1132756132756133, 1 0.10822510822510824, 4 0.10822510822510824",make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse validateistrue to validate argumentsusing validate where possible in math package.
2486,2486,"6 0.18112244897959182, 0 0.16326530612244897, 1 0.1454081632653061, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
2487,2487,"0 0.17715419501133783, 2 0.16128117913832196, 6 0.1434240362811791, 4 0.13350340136054423, 3 0.12953514739229025, 1 0.12755102040816327, 5 0.12755102040816327",extract some helper methods to make the code better readable
2488,2488,"0 0.20552818828680894, 2 0.14997263273125339, 4 0.14039408866995073, 1 0.12889983579638753, 5 0.126984126984127, 3 0.12506841817186645, 6 0.12315270935960593",: added methods to objectutils class to check for null elements in the array ()
2489,2489,"3 0.19743803954330263, 4 0.15455304928989133, 2 0.14285714285714288, 1 0.1292119186856029, 0 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",sort by method name.add final modifier to local variables.
2490,2490,"2 0.1569664902998236, 0 0.15490887713109933, 5 0.1425631981187537, 3 0.14050558495002943, 1 0.14050558495002938, 4 0.13227513227513232, 6 0.13227513227513232",explicit boxing[] added constantinitializer class
2491,2491,"2 0.1981187536743092, 6 0.14050558495002943, 0 0.1322751322751323, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",make sure placement of curly braces is consistent
2492,2492,"6 0.3212301587301587, 2 0.1865079365079365, 4 0.11150793650793647, 5 0.10317460317460313, 0 0.09484126984126984, 1 0.09206349206349207, 3 0.09067460317460319",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
2493,2493,"5 0.28103044496487123, 4 0.12620348685922458, 0 0.12073900598490765, 1 0.11891751236013534, 6 0.11891751236013534, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2494,2494,"5 0.27460317460317457, 6 0.1246031746031746, 1 0.12460317460317458, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2495,2495,"0 0.243616287094548, 6 0.14699792960662525, 1 0.13250517598343686, 5 0.12928456406717276, 2 0.11801242236024843, 3 0.11801242236024843, 4 0.11157119852772027",: implementation of a memomizer ()changes suggested in https://github.com/apache/commons-lang/pull/80:- tabs to spaces- use @override- remove unused variables- other minimal clean-ups: implementation of a memomizer ()
2496,2496,"3 0.327080327080327, 0 0.12000962000961997, 2 0.11664261664261664, 1 0.1115921115921116, 4 0.10822510822510824, 5 0.10822510822510824, 6 0.10822510822510824","add final modifier to local variables.promote uniformity between branches by using registry accessorunused imports + uh, why would you synchronize access to a threadlocal? :p[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
2497,2497,"0 0.29400615967780147, 2 0.13811892916370525, 4 0.12319355602937689, 3 0.11490168206586115, 6 0.11490168206586115, 1 0.10826818289504858, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
2498,2498,"3 0.3386243386243386, 6 0.23615520282186947, 5 0.09664902998236329, 1 0.0855379188712522, 2 0.08430335097001762, 0 0.07936507936507936, 4 0.07936507936507936","lvar should not hide ivar.add final modifier to local variables.format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2499,2499,"5 0.2602280348759222, 0 0.16320143080706456, 6 0.13033758104180637, 3 0.12720769058797224, 1 0.11312318354571875, 4 0.10529845741113349, 2 0.10060362173038231",fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone setapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2500,2500,"3 0.20259740259740255, 2 0.14401154401154398, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
2501,2501,"2 0.2698412698412698, 4 0.12483185364541298, 0 0.12106537530266345, 1 0.12106537530266345, 3 0.12106537530266345, 5 0.12106537530266345, 6 0.12106537530266345",crlf -> lfjavadoc: fix typo but working is still awkward.swap and shift for arrays
2502,2502,"5 0.25518925518925517, 3 0.16459096459096453, 2 0.12869352869352868, 1 0.11672771672771674, 6 0.11501831501831503, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2503,2503,"2 0.2966882226141485, 4 0.1471683323535175, 0 0.14305310601606894, 3 0.12933568489124042, 5 0.09778561630413478, 6 0.09367038996668627, 1 0.09229864785420341","extract logic for checking string representation of objects into separate methodsformat source codevariable names should follow naming conventionsmodified appenddetail method for object value in jsontostringstyle classfix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.add final modifier to local variables."
2504,2504,"5 0.291959406713505, 0 0.12073900598490762, 4 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2505,2505,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2506,2506,"2 0.23098791755508175, 3 0.1945036721156124, 0 0.1364605543710021, 1 0.11324330727315803, 6 0.11158493248045487, 4 0.10660980810234542, 5 0.10660980810234542",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: rounding utilities for converting to bigdecimalfixing crlfsstatement unnecessarily nested within else clause.add final modifier to local variables.
2507,2507,"4 0.18941798941798935, 3 0.1838624338624338, 2 0.13756613756613756, 6 0.12645502645502646, 0 0.12275132275132275, 1 0.12089947089947091, 5 0.11904761904761905",sort members.add final modifier to local variables.use index_not_found instead of magic number.
2508,2508,"2 0.19855699855699852, 5 0.14199134199134197, 1 0.13795093795093796, 3 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 6 0.12987012987012989",: add noclassnametostringstyle implementation of tostringstyle. this from github. thanks to innokenty shuvalov.
2509,2509,"5 0.27089947089947086, 6 0.13015873015873014, 1 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2510,2510,"3 0.20259740259740258, 2 0.14401154401154395, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
2511,2511,"5 0.2534798534798535, 3 0.17142857142857143, 2 0.12527472527472527, 6 0.11843711843711847, 1 0.11159951159951163, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2512,2512,"2 0.1536388140161725, 5 0.1536388140161725, 6 0.1536388140161725, 0 0.13477088948787064, 1 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
2513,2513,"3 0.2020446596717783, 4 0.1530804412160344, 6 0.14554748453053534, 2 0.13048157115953726, 1 0.12671509281678775, 0 0.12106537530266345, 5 0.12106537530266345",remove redundant type arguments.add final modifier to local variables.
2514,2514,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
2515,2515,"4 0.17517006802721086, 0 0.16326530612244897, 2 0.14143990929705216, 1 0.13350340136054423, 3 0.13151927437641725, 5 0.1275510204081633, 6 0.1275510204081633", add a null-safe compare() method to objectutils
2516,2516,"1 0.7097649186256779, 2 0.05294354028531242, 5 0.05013060076351215, 4 0.04942736588306209, 3 0.046614426361261806, 0 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2517,2517,"4 0.17669961066187476, 6 0.14106019766397124, 0 0.13896376160527107, 2 0.13896376160527107, 1 0.1347708894878706, 3 0.1347708894878706, 5 0.1347708894878706",use index_not_found instead of magic number.
2518,2518,"0 0.22271825396825395, 4 0.17237103174603172, 2 0.13417658730158727, 6 0.12723214285714282, 1 0.11681547619047622, 5 0.1150793650793651, 3 0.11160714285714288",removes unnecessary class reference of static method calls which are declared in the same classapply patch contributed by bruno p. kinoshitavalidation[] new type util features
2519,2519,"3 0.300453514739229, 2 0.1369614512471655, 6 0.13061224489795917, 4 0.11632653061224488, 0 0.10839002267573697, 1 0.1052154195011338, 5 0.10204081632653063",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerpmd: useless parenthesesformat to 120 line length.removed unnecessary multiplication by one.add final modifier to local variables.
2520,2520,"6 0.21693121693121686, 3 0.1506544138123085, 4 0.1311612364243943, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
2521,2521,"5 0.27645502645502645, 6 0.12830687830687829, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2522,2522,"5 0.2901379130887327, 4 0.12256049960967993, 1 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2523,2523,"2 0.2321995464852608, 0 0.15918367346938775, 5 0.13537414965986394, 4 0.13378684807256236, 6 0.11791383219954647, 1 0.11632653061224492, 3 0.10521541950113382",removes unnecessary class reference of static method calls which are declared in the same class: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.: add noclassnametostringstyle implementation of tostringstyle. this from github. thanks to innokenty shuvalov.
2524,2524,"5 0.2551892551892552, 3 0.16800976800976802, 2 0.12527472527472527, 6 0.11672771672771677, 1 0.11501831501831504, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2525,2525,"4 0.7280844155844157, 5 0.05384199134199134, 2 0.04626623376623376, 1 0.04500360750360752, 0 0.043109668109668126, 3 0.04247835497835499, 6 0.041215728715728726","sort members.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
2526,2526,"3 0.3163265306122449, 4 0.13061224489795917, 6 0.11791383219954646, 0 0.11156462585034013, 1 0.11156462585034013, 2 0.10997732426303858, 5 0.10204081632653063","remove redundant type arguments.add final modifier to local variables.promote uniformity between branches by using registry accessorunused imports + uh, why would you synchronize access to a threadlocal? :p[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
2527,2527,"3 0.3089315328121298, 4 0.1364605543710021, 1 0.12153518123667373, 6 0.11158493248045488, 2 0.10826818289504858, 0 0.10660980810234542, 5 0.10660980810234542","use validateistrue to validate argumentsremove redundant type arguments.fixing crlfsstatement unnecessarily nested within else clause.incorporated feedback from fabian, formatting adjusted, count >> 1 replaced with count / 2incorporated feedback from peteradd threadutils"
2528,2528,"3 0.21556579621095748, 2 0.19585253456221194, 4 0.12237583205325143, 1 0.11879160266257043, 5 0.11699948796722992, 0 0.11520737327188942, 6 0.11520737327188942",add final modifier to local variables.add final modifier to method parameters.explicit boxingjavadoc
2529,2529,"2 0.39720332577475437, 3 0.13794406651549504, 1 0.10355253212396065, 4 0.09297052154195011, 6 0.09164777021919879, 0 0.09164777021919876, 5 0.08503401360544217",add final modifier to local variables.better javadoc for arrayutils.swap variantscrlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodexamples added in javadoctabs replaced by spacesnew tests addedswap and shift for arrays
2530,2530,"3 0.16831386642707397, 6 0.14734950584007192, 0 0.14525306978137167, 1 0.13477088948787064, 2 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",: dateutilstest.testlang530 fails for some timezones
2531,2531,"6 0.30989010989010984, 0 0.12185592185592187, 5 0.11843711843711842, 2 0.11501831501831503, 4 0.11330891330891332, 1 0.1115995115995116, 3 0.10989010989010989",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
2532,2532,"0 0.21541950113378686, 3 0.17501546072974644, 2 0.1562564419707277, 4 0.15192743764172334, 6 0.10863739435168004, 5 0.09997938569367143, 1 0.09276437847866421",removes unnecessary class reference of static method calls which are declared in the same classuse final consistently. : fix deprecation warnings; found some more usagesadd final modifier to local variables.convert to java 5 enhanced loops. - add hashcodemulti varargs method
2533,2533,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
2534,2534,"5 0.2534798534798535, 3 0.17313797313797313, 2 0.12014652014652018, 6 0.11843711843711845, 1 0.11501831501831504, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2535,2535,"0 0.193342151675485, 3 0.19025573192239859, 2 0.1516754850088183, 6 0.134700176366843, 4 0.12698412698412695, 5 0.10383597883597885, 1 0.09920634920634923",remove redundant type arguments. - fix findbugs warnings in durationformatutilsunnecessary array creation durationformatutilslexx does not detect unmatched quote charfix some formatting.add final modifier to local variables.stringbuffer => stringbuilder where being used as a local-only buffer
2536,2536,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
2537,2537,"4 0.1715506715506715, 2 0.14163614163614166, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2538,2538,"5 0.2492300402748164, 3 0.17626154939587774, 6 0.12816868040748636, 2 0.1231935560293769, 1 0.10992655768775174, 0 0.10660980810234544, 4 0.10660980810234544",format.add final modifier to local variables.trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2539,2539,"4 0.29668822261414857, 0 0.14030962179110326, 3 0.133450911228689, 6 0.12933568489124045, 1 0.10875955320399763, 2 0.10327258475406623, 5 0.08818342151675487","validates string.format without arguments ()while calling string.format(""some string"") without any additionalarguments is not technically wrong, its redundant, as it justreturns the same string.removing these calls and just using the string instead both cleans upthe code and offers a (very slight) performance gain.: validate: add inclusivebetween and exclusivebetween overloads for primitives types. initial patch provided by sebb."
2540,2540,"2 0.22638563622170177, 3 0.17538381472807701, 1 0.12620348685922456, 4 0.12073900598490765, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
2541,2541,"4 0.17334341143864954, 3 0.16628873771730915, 2 0.16276140085663895, 0 0.15041572184429325, 6 0.12043335852859663, 1 0.11337868480725626, 5 0.11337868480725626",deletes redundant new expression in constant array creationuse final. - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
2542,2542,"1 0.7146875627888284, 2 0.05224030540486237, 4 0.04872413100261202, 0 0.04731766124171188, 3 0.045911191480811735, 5 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2543,2543,"6 0.2902754971720489, 5 0.21109286626528007, 3 0.13829593139937965, 1 0.09870461594599522, 2 0.08976464148877944, 0 0.08976464148877943, 4 0.0821018062397373",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.[] fastdateformat generates date objects wastefully.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2544,2544,"3 0.2603686635944701, 4 0.1313364055299539, 6 0.1313364055299539, 2 0.12596006144393243, 1 0.12058371735791094, 0 0.11520737327188943, 5 0.11520737327188943",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerformat to 120 line length.
2545,2545,"3 0.1864357864357864, 2 0.16017316017316013, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
2546,2546,"3 0.20259740259740258, 2 0.13997113997114, 1 0.13795093795093796, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
2547,2547,"5 0.291959406713505, 4 0.12073900598490762, 1 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2548,2548,"6 0.16412099430967353, 0 0.14944594189877208, 5 0.1473495058400719, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",4fastdateformat apis that use a stringbuilder
2549,2549,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2550,2550,"2 0.1878306878306878, 5 0.14050558495002943, 0 0.13844797178130513, 1 0.13433274544385657, 4 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
2551,2551,"5 0.26904761904761904, 6 0.13386243386243385, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2552,2552,"3 0.22631848438300048, 2 0.16538658474142343, 0 0.13133640552995388, 4 0.1277521761392729, 1 0.11879160266257043, 5 0.11520737327188942, 6 0.11520737327188942",add final modifier to local variables.add final modifier to method parameters.[] vastly expanded typeutils
2553,2553,"3 0.36321195144724555, 2 0.10830999066293186, 1 0.10667600373482727, 6 0.10667600373482727, 0 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2554,2554,"1 0.7118746232670281, 2 0.052943540285312424, 5 0.04872413100261202, 3 0.04802089612216195, 0 0.046614426361261806, 4 0.046614426361261806, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2555,2555,"0 0.19312169312169308, 1 0.16719576719576715, 5 0.13756613756613753, 2 0.13386243386243385, 3 0.1246031746031746, 4 0.1246031746031746, 6 0.11904761904761905","adding builder interface, and refactoring the builder classes and basicthreadfactory to implement this interface. patch from michael wooten in 601"
2556,2556,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2557,2557,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2558,2558,"3 0.2086580086580086, 2 0.13795093795093796, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
2559,2559,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2560,2560,"2 0.2044539208718313, 0 0.17294479981047142, 6 0.13811892916370527, 4 0.13646055437100213, 3 0.13314380478559582, 5 0.1082681828950486, 1 0.10660980810234544",restore previous behavior that allows function results (arrays of booleans) to be modified.format to 120 line length.refactor commons constants (no need to generate new arrays on every call).
2561,2561,"0 0.17296113847837985, 4 0.14614121510673234, 2 0.14230979748221126, 5 0.14039408866995073, 6 0.14039408866995073, 1 0.12889983579638756, 3 0.12889983579638756",[] added a tryacquire() method to timedsemaphore.this method supports non-blocking use cases.
2562,2562,"2 0.196988196988197, 5 0.19271469271469274, 6 0.17989417989417988, 0 0.11294261294261293, 1 0.11294261294261293, 4 0.11009361009361007, 3 0.09442409442409444",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefullyapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2563,2563,"2 0.25052910052910055, 3 0.1283068783068783, 4 0.12830687830687829, 1 0.12645502645502646, 5 0.1246031746031746, 0 0.12275132275132276, 6 0.11904761904761905","dont need internal ivar name for a boolean to carry a ""flag"" postfix.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
2564,2564,"2 0.17794486215538843, 4 0.17794486215538843, 6 0.13700918964076858, 3 0.13116123642439434, 0 0.1253132832080201, 1 0.1253132832080201, 5 0.1253132832080201",explicit type parameters can be removedremove redundant type arguments.
2565,2565,"2 0.18783068783068776, 5 0.14256319811875368, 0 0.13639035861258084, 1 0.13433274544385657, 4 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
2566,2566,"5 0.2864949258391881, 4 0.12256049960967993, 0 0.11891751236013531, 1 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2567,2567,"2 0.36277892799631933, 1 0.11801242236024842, 4 0.1051299746951921, 0 0.10351966873706006, 3 0.10351966873706006, 5 0.10351966873706006, 6 0.10351966873706006",crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodswap and shift for arrays
2568,2568,"6 0.339581222559946, 3 0.24974670719351566, 5 0.09844647078689628, 2 0.08308004052684903, 1 0.07716987504221547, 0 0.07598784194528875, 4 0.07598784194528875","make sure lines in files dont have trailing white spaces and remove all trailing white spaces: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2569,2569,"0 0.24517374517374524, 3 0.16409266409266413, 4 0.15358215358215357, 2 0.11454311454311454, 1 0.11154011154011154, 6 0.11003861003861004, 5 0.10102960102960107",": update java requirement from java 6 to 7replace usage of deprecated objectutilstostring with objectstostring: fix deprecation warningsadd final modifier to local variables.eat own dog food: separator == null ? """" : separator->objectutils.tostring(separator)remove superfluous parens."
2570,2570,"6 0.34033613445378147, 5 0.13118580765639587, 0 0.10830999066293184, 1 0.10504201680672269, 2 0.10504201680672269, 3 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
2571,2571,"4 0.3172234067756456, 0 0.12485193082208004, 6 0.11656005685856434, 2 0.11490168206586114, 1 0.11324330727315804, 3 0.10660980810234542, 5 0.10660980810234542","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
2572,2572,"5 0.2864949258391881, 4 0.12256049960967993, 0 0.11891751236013531, 1 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2573,2573,"5 0.19724173822534477, 0 0.1589903721051262, 1 0.14623991673172, 2 0.14441842310694766, 6 0.11891751236013536, 3 0.11709601873536302, 4 0.11709601873536302","applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
2574,2574,"2 0.23507180650037793, 3 0.18216175359032497, 1 0.1239606953892668, 6 0.11866969009826155, 0 0.11337868480725624, 4 0.11337868480725624, 5 0.11337868480725624",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.
2575,2575,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2576,2576,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2577,2577,"5 0.2846734322144158, 4 0.12438199323445225, 0 0.12073900598490765, 6 0.11891751236013534, 1 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2578,2578,"5 0.27275132275132274, 6 0.13015873015873014, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2579,2579,"2 0.18783068783068776, 4 0.14256319811875368, 5 0.1384479717813051, 0 0.13433274544385657, 1 0.1322751322751323, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
2580,2580,"1 0.7132810930279283, 2 0.05435001004621256, 3 0.04802089612216195, 0 0.04731766124171188, 4 0.045911191480811735, 5 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2581,2581,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2582,2582,"5 0.2864949258391881, 4 0.12620348685922456, 0 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2583,2583,"5 0.22570123939986952, 2 0.21352467927810392, 3 0.1511198086540552, 6 0.1130680582735377, 1 0.10089149815177213, 0 0.09784735812133073, 4 0.09784735812133073",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2584,2584,"0 0.2063492063492063, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",deprecate systemutilsline_separator in favor of java.lang.systemlineseparator
2585,2585,"3 0.18783068783068776, 5 0.1487360376249265, 6 0.13433274544385657, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
2586,2586,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
2587,2587,"5 0.2551892551892552, 3 0.17142857142857143, 2 0.12185592185592187, 6 0.11672771672771677, 1 0.11501831501831504, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2588,2588,"3 0.19406041986687148, 0 0.15463389656938045, 2 0.15104966717869941, 4 0.1474654377880184, 1 0.12058371735791094, 6 0.11699948796722993, 5 0.11520737327188943","use stringbuilderappend(charsequence, int, int) were possible to improve performance(similar to , thanks to stephane landelle for the suggestion)add final modifier to local variables."
2589,2589,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.15154237795747227, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
2590,2590,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2591,2591,"6 0.28899835796387524, 5 0.21364714468162743, 3 0.13574165298303228, 1 0.09870461594599522, 2 0.09359605911330049, 0 0.08465608465608468, 4 0.08465608465608468",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.[] fastdateformat generates date objects wastefully.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2592,2592,"0 0.21673881673881668, 4 0.1339105339105339, 1 0.12987012987012986, 2 0.12987012987012986, 3 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",provide read access to the registered listener instances
2593,2593,"6 0.20634920634920637, 2 0.19000933706816062, 0 0.1311858076563959, 4 0.12955182072829133, 1 0.12301587301587302, 3 0.11484593837535016, 5 0.10504201680672273",use final.remove trailing white spacesadded new vararg methods to insert values into an array at an index.this implements . this commit also deprecates the add() methodsthat inserted a single value into an array at an index.
2594,2594,"4 0.2046176046176046, 3 0.146031746031746, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",eat own dog food: stringutilsisempty(string) and replace some but not all stringlength() == 0 with stringisempty()
2595,2595,"3 0.19855699855699852, 2 0.14805194805194805, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
2596,2596,"6 0.2879818594104308, 0 0.12925170068027209, 5 0.12925170068027209, 1 0.11337868480725624, 2 0.11337868480725624, 3 0.11337868480725624, 4 0.11337868480725624",make sure lines in files dont have trailing white spaces and remove all trailing white spacesusing validate where possible in concurrent package.
2597,2597,"2 0.22477324263038542, 4 0.13350340136054423, 1 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2598,2598,"5 0.2801587301587301, 6 0.12460317460317458, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2599,2599,"6 0.23500881834215173, 3 0.16865079365079366, 2 0.16093474426807763, 1 0.11463844797178131, 0 0.1130952380952381, 4 0.10846560846560847, 5 0.09920634920634924",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.add final modifier to method parameters.more varargs-related updates
2600,2600,"4 0.1715506715506715, 2 0.14163614163614166, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort by method name.
2601,2601,"3 0.17313797313797313, 4 0.16800976800976802, 6 0.1543345543345543, 2 0.14236874236874236, 0 0.14065934065934066, 1 0.11159951159951163, 5 0.10989010989010992",add final modifier to local variables.support varargs in strbuilder.appendall(); also convert iterable form of method to use enhanced for loop
2602,2602,"5 0.2783068783068782, 1 0.12275132275132275, 6 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2603,2603,"4 0.1910430839002267, 0 0.16921768707482987, 2 0.12953514739229027, 1 0.1275510204081633, 3 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
2604,2604,"4 0.21428571428571427, 3 0.183982683982684, 1 0.12674362674362674, 6 0.12337662337662336, 2 0.1216931216931217, 0 0.12169312169312167, 5 0.10822510822510825",sort members and clean up comments.add final modifier to local variables.merge charsetutils string[] and string method forms to string...
2605,2605,"2 0.21363518084829558, 4 0.1626333593546708, 0 0.15170439760603693, 1 0.12073900598490765, 3 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",: fix logic in isjsonarray method of jsontostringstyleextract logic for checking string representation of objects into separate methods
2606,2606,"3 0.31567460317460316, 5 0.2198412698412698, 2 0.09623015873015871, 1 0.09345238095238097, 6 0.09345238095238097, 0 0.09067460317460319, 4 0.09067460317460319","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezonesrestore binary compartibilitytrailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
2607,2607,"6 0.27570207570207567, 0 0.15604395604395602, 2 0.12014652014652015, 3 0.11501831501831504, 1 0.11330891330891332, 4 0.1098901098901099, 5 0.1098901098901099",make sure lines in files dont have trailing white spaces and remove all trailing white spaces - dateutilsparsedate uses default locale; add locale support
2608,2608,"6 0.21471861471861464, 3 0.13593073593073596, 0 0.12987012987012986, 1 0.12987012987012986, 2 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986",removes redundant + signpmd: remove useless parentheses
2609,2609,"6 0.21693121693121686, 3 0.15650236702868278, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
2610,2610,"5 0.24795574795574793, 3 0.16378066378066372, 6 0.13516113516113512, 2 0.12506012506012507, 1 0.11159211159211159, 0 0.10822510822510822, 4 0.10822510822510822",add final modifier to local variables.trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2611,2611,"2 0.25918367346938775, 3 0.20204081632653056, 6 0.1242630385487528, 0 0.10680272108843539, 5 0.1036281179138322, 1 0.10204081632653061, 4 0.10204081632653061",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateparser too strict on abbreviated short month symbolsadd final modifier to local variables.format. fastdateparser_timezonestrategytesttesttimezonestrategypattern fails on windows with german localereimplementing 1107
2612,2612,"0 0.1642135642135642, 4 0.15411255411255412, 6 0.14805194805194805, 1 0.14401154401154403, 2 0.1298701298701299, 3 0.1298701298701299, 5 0.1298701298701299",returning notimplementedexception to lang after it was removed in lang 3.0 per the request in . 
2613,2613,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2614,2614,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
2615,2615,"3 0.19451659451659448, 2 0.15411255411255412, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
2616,2616,"4 0.21711057304277642, 2 0.14554748453053537, 5 0.13801452784503632, 1 0.1285983319881625, 0 0.12671509281678778, 3 0.12294861447403825, 6 0.12106537530266348",sort members.applying joanne polskys patch adding appendifmissing/prependifmissing methods to stringutils []
2617,2617,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2618,2618,"3 0.35994397759103636, 2 0.111577964519141, 6 0.10830999066293186, 0 0.1050420168067227, 1 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2619,2619,"1 0.7189069720715289, 2 0.04872413100261202, 5 0.04802089612216195, 4 0.04731766124171188, 3 0.046614426361261806, 0 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2620,2620,"0 0.29210758377425045, 3 0.16093474426807758, 2 0.14241622574955906, 1 0.10692239858906527, 4 0.09920634920634923, 5 0.09920634920634923, 6 0.09920634920634923",boolean comparisons in charrange ()cleaned up comparisons to false to just use the boolean negationoperator (!).add final modifier to local variables.adding vincent ricards patch to charrange.java providing an iterator that lets you walk the chars in the range. 454
2621,2621,"2 0.18371546149323925, 0 0.15079365079365076, 3 0.13639035861258086, 1 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",": add todouble(bigdecimal), todouble(bigdecimal, double)"
2622,2622,"3 0.3490079365079365, 2 0.19484126984126982, 6 0.09484126984126984, 1 0.09206349206349207, 4 0.09067460317460319, 0 0.08928571428571429, 5 0.08928571428571429","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2623,2623,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2624,2624,"5 0.28467343221441577, 0 0.12073900598490764, 4 0.12073900598490764, 6 0.12073900598490764, 1 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2625,2625,"2 0.18239538239538236, 0 0.148051948051948, 4 0.13997113997114, 1 0.13795093795093796, 3 0.1318903318903319, 5 0.12987012987012986, 6 0.12987012987012986",add checknotnull method in reflectiontostringbuilder.java to fix 1132
2626,2626,"2 0.19262846381490448, 3 0.18321226795803064, 0 0.12671509281678775, 4 0.12671509281678775, 5 0.12671509281678775, 1 0.12294861447403822, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
2627,2627,"2 0.3480725623582766, 4 0.1258503401360544, 0 0.11791383219954645, 1 0.10204081632653061, 3 0.10204081632653061, 5 0.10204081632653061, 6 0.10204081632653061",": arrayutils.removeall(object array, int... indices) should do the clone, not its callers ()crlf -> lfjavadoc: fix typo but working is still awkward.[] complement arrayutils.addall() variants with by-index and by-value removal methods"
2628,2628,"3 0.3583099906629318, 2 0.11321195144724555, 4 0.10667600373482727, 6 0.10667600373482727, 0 0.1050420168067227, 1 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2629,2629,"2 0.2318501170960187, 3 0.1772053083528493, 4 0.12256049960967996, 0 0.117096018735363, 1 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
2630,2630,"5 0.27460317460317457, 6 0.12830687830687829, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2631,2631,"0 0.2822636300897171, 2 0.15343915343915343, 3 0.12123303427651252, 4 0.11962272831838049, 6 0.11318150448585235, 1 0.10674028065332415, 5 0.10351966873706007",code clean-up for checkstyle.simplify expressions again.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
2632,2632,"3 0.19743803954330263, 4 0.16040100250626563, 2 0.13700918964076855, 1 0.1292119186856029, 0 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",sort members.add final modifier to local variables.
2633,2633,"2 0.24603174603174605, 3 0.1385048643113159, 1 0.1367127496159754, 5 0.12237583205325143, 0 0.12237583205325141, 4 0.11879160266257043, 6 0.11520737327188942","dont use single letter variable names.dont need internal ivar name for a boolean to carry a ""flag"" postfix.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
2634,2634,"5 0.27275132275132274, 6 0.13201058201058197, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2635,2635,"5 0.2846734322144158, 4 0.12438199323445227, 0 0.11891751236013534, 1 0.11891751236013534, 6 0.11891751236013534, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2636,2636,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2637,2637,"2 0.23270975056689333, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2638,2638,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2639,2639,"1 0.7118746232670283, 2 0.05435001004621257, 5 0.048020896122161955, 0 0.047317661241711884, 4 0.04731766124171187, 3 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2640,2640,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
2641,2641,"6 0.23234811165845645, 3 0.13656267104542966, 4 0.12889983579638753, 0 0.1288998357963875, 1 0.12506841817186645, 2 0.12506841817186645, 5 0.12315270935960593","added missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
2642,2642,"6 0.3354341736694677, 5 0.1279178338001867, 0 0.11647992530345469, 1 0.10504201680672269, 2 0.10504201680672269, 3 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
2643,2643,"5 0.2792089513400989, 6 0.1353109549830861, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2644,2644,"3 0.18783068783068776, 5 0.14667842445620222, 6 0.13639035861258084, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
2645,2645,"2 0.1536388140161725, 5 0.1536388140161725, 6 0.1536388140161725, 0 0.13477088948787064, 1 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
2646,2646,"5 0.27089947089947086, 6 0.12830687830687829, 1 0.12460317460317459, 0 0.11904761904761907, 2 0.11904761904761907, 3 0.11904761904761907, 4 0.11904761904761907",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2647,2647,"2 0.17835497835497832, 1 0.146031746031746, 4 0.13997113997114, 3 0.13997113997113997, 0 0.13593073593073596, 5 0.12987012987012986, 6 0.12987012987012986","adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
2648,2648,"0 0.17342739564961782, 3 0.15079365079365076, 4 0.14256319811875368, 2 0.13639035861258086, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
2649,2649,"6 0.2187590187590187, 3 0.13189033189033192, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",removes redundant + signpmd: remove useless parentheses
2650,2650,"2 0.1878306878306878, 0 0.13844797178130513, 1 0.13639035861258086, 4 0.13639035861258086, 5 0.13639035861258086, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
2651,2651,"1 0.673510122611919, 3 0.06805436745556505, 2 0.06206634350346924, 4 0.055412983556696126, 6 0.05142096758863225, 5 0.04676361562589108, 0 0.04277159965782721",add final modifier to local variables.remove redundant type arguments.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2652,2652,"6 0.28366615463389655, 5 0.1402969790066564, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
2653,2653,"3 0.4185463659147869, 2 0.10568086883876356, 1 0.09837092731829573, 4 0.0954469507101086, 0 0.09398496240601503, 5 0.09398496240601503, 6 0.09398496240601503","add final modifier to local variables.pmd: these nested if statements could be combinedformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2654,2654,"5 0.2901379130887327, 1 0.12073900598490762, 4 0.12073900598490762, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2655,2655,"3 0.4200083542188805, 2 0.10568086883876356, 1 0.09690893901420217, 4 0.0954469507101086, 0 0.09398496240601503, 5 0.09398496240601503, 6 0.09398496240601503","add final modifier to local variables.pmd: these nested if statements could be combinedformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2656,2656,"6 0.18568909045099521, 0 0.15394305870496347, 5 0.14512471655328799, 3 0.1433610481229529, 4 0.1415973796926178, 1 0.11690602166792646, 2 0.11337868480725627", fastdateparser does not handle non-gregorian calendars properlyfix bug in java 7 (locale.tostring() format has changed) fastdateparser does not handle non-gregorian calendars properly 
2657,2657,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2658,2658,"0 0.17679255610290093, 2 0.16721401204159822, 4 0.1461412151067323, 6 0.1403940886699507, 1 0.12315270935960594, 3 0.12315270935960594, 5 0.12315270935960594",: new methods for lang3.validate ()fixed method names; fixed differentobject to use object.equals
2659,2659,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",reusestatements unnecessarily nested within else clause.
2660,2660,"5 0.27460317460317457, 6 0.13015873015873014, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2661,2661,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.15154237795747227, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
2662,2662,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2663,2663,"0 0.20861678004535145, 3 0.1751070798689846, 2 0.14336104812295283, 4 0.12219702695893171, 6 0.12043335852859664, 1 0.11690602166792645, 5 0.11337868480725624",a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables.adding nopmd tags for various empty catch blocks
2664,2664,"3 0.3534080298786181, 2 0.11321195144724555, 6 0.111577964519141, 4 0.10667600373482727, 0 0.1050420168067227, 1 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2665,2665,"2 0.23270975056689333, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2666,2666,"4 0.19211822660098518, 0 0.15188834154351394, 6 0.1461412151067323, 2 0.1327312534209086, 3 0.12889983579638756, 1 0.12506841817186648, 5 0.12315270935960594",[] add null-safe stringutils apis to wrapstringgetbytes([charset|string]).</action>
2667,2667,"2 0.23072562358276635, 1 0.12953514739229025, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2668,2668,"0 0.1899557637262555, 1 0.16081186572989847, 2 0.15716887848035385, 5 0.1371324486078584, 4 0.12073900598490765, 3 0.117096018735363, 6 0.117096018735363","explicit boxingadding builder interface, and refactoring the builder classes and basicthreadfactory to implement this interface. patch from michael wooten in 601"
2669,2669,"2 0.18769145084934555, 1 0.16429963798384847, 5 0.13895850737955998, 3 0.1292119186856029, 4 0.1292119186856029, 0 0.12531328320802007, 6 0.12531328320802007",adding hennings github pull request with a triple implementation. 675
2670,2670,"0 0.20392789884315302, 2 0.18132902878665585, 1 0.1285983319881625, 6 0.12294861447403821, 3 0.12106537530266344, 4 0.12106537530266344, 5 0.12106537530266344",code clean-up for checkstyle.: add to conversion from byte[] to uuid and uuid to byte[]
2671,2671,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2672,2672,"3 0.35039682539682543, 2 0.19623015873015875, 1 0.09345238095238098, 4 0.09206349206349208, 0 0.0892857142857143, 5 0.0892857142857143, 6 0.0892857142857143","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2673,2673,"6 0.20294784580498862, 3 0.1434240362811791, 5 0.13945578231292519, 2 0.12953514739229025, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
2674,2674,"0 0.35355253212396076, 3 0.13265306122448978, 6 0.12339380196523052, 4 0.10884353741496597, 2 0.10619803476946331, 1 0.09032501889644749, 5 0.0850340136054422",": extend randomstringutils with methods that generate strings between a min and max length (, ): add randomstringutilsrandomgraph and randomprint which match corresponding regular expression classthese are useful over randomascii because they do not contain the del character but otherwise contain the full range of ascii printing characters, and optionally include whitespace. this is useful for testing user defined inputs where characters like spaces, angle brakets, semicolons, dashes, etc. can cause issues."
2675,2675,"5 0.2241527241527242, 3 0.18511368511368512, 6 0.13105963105963106, 0 0.12655512655512655, 1 0.12505362505362505, 2 0.11154011154011154, 4 0.09652509652509657",: test failure in fastdateparsertest and fastdateformat_parsertest when building with jdk8. thanks to bruno p. kinoshita and henri yandell for their help in fixing this issue.add final modifier to local variables.trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2676,2676,"5 0.27645502645502645, 6 0.12830687830687829, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2677,2677,"6 0.30941509023700803, 0 0.1495977386388345, 4 0.1252446183953033, 3 0.10697977821265493, 2 0.1069797782126549, 5 0.10241356816699283, 1 0.09936942813655143",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
2678,2678,"4 0.1921182266009852, 6 0.1499726327312534, 0 0.14805692391899286, 3 0.1327312534209086, 2 0.12889983579638756, 1 0.12506841817186648, 5 0.12315270935960596",[] add null-safe stringutils apis to wrapstringgetbytes([charset|string]).</action>
2679,2679,"6 0.2801587301587301, 2 0.12460317460317458, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
2680,2680,"6 0.17342739564961782, 5 0.15079365079365076, 0 0.1466784244562022, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323",fastdateformat apis that use a stringbuilderrefactor some duplicate code.
2681,2681,"5 0.27470558115719407, 6 0.1331285202252944, 3 0.1277521761392729, 4 0.11879160266257043, 0 0.11520737327188942, 1 0.11520737327188942, 2 0.11520737327188942",document intentional drop-thruapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2682,2682,"3 0.2833862433862434, 2 0.1856084656084656, 4 0.1219047619047619, 1 0.11597883597883597, 6 0.10264550264550268, 0 0.09523809523809527, 5 0.09523809523809527","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsremove redundant type arguments.fixing crlfsstatement unnecessarily nested within else clause.incorporated feedback from fabian, formatting adjusted, count >> 1 replaced with count / 2incorporated feedback from peteradd threadutils"
2683,2683,"0 0.1878306878306878, 4 0.14256319811875368, 6 0.14050558495002943, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323",a bit of dog food and a lot of javadoc tweakage
2684,2684,"5 0.2755659640905543, 6 0.1371324486078584, 1 0.11891751236013534, 0 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2685,2685,"5 0.2551892551892552, 3 0.16971916971916973, 2 0.1252747252747253, 1 0.11501831501831504, 6 0.11501831501831504, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2686,2686,"6 0.2488328664799253, 0 0.15896358543417366, 3 0.1409897292250233, 2 0.12791783380018673, 4 0.10994397759103644, 1 0.10830999066293186, 5 0.1050420168067227",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmerge branch  of https://github.com/markdacek/commons-lang: added isexcludenullvalues to reflectiontostringbuilder and test
2687,2687,"5 0.27676027676027676, 0 0.22405372405372403, 6 0.13003663003663, 1 0.09442409442409443, 2 0.09157509157509158, 3 0.09157509157509158, 4 0.09157509157509158",dont save short eras if they are the same as the long eras fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()getinstance() (java 1.6) supports more localesexplicit conversion to integer; save the value for use latergetinstance(locale) is java 1.6+applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2688,2688,"3 0.28621819098009565, 2 0.12925170068027206, 0 0.12396069538926678, 1 0.1186696900982615, 5 0.11514235323759134, 4 0.11337868480725623, 6 0.11337868480725623","[] part 2: refactor tostringstyle and tostringbuildertest to verify that we are unsetting the registry when no longer needed[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
2689,2689,"3 0.23970944309927353, 2 0.15308044121603437, 1 0.1229486144740382, 0 0.12106537530266342, 4 0.12106537530266342, 5 0.12106537530266342, 6 0.12106537530266342",simplify using ternary expressions instead of nested if-elses.add final modifier to local variables.
2690,2690,"3 0.20259740259740255, 2 0.14603174603174604, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
2691,2691,"2 0.27825877825877826, 6 0.12674362674362671, 4 0.12506012506012504, 0 0.12337662337662335, 3 0.12337662337662335, 1 0.11495911495911498, 5 0.10822510822510824",crlf -> lfjavadoc: fix typo but working is still awkward.simplify issamelenght implementations by reusing getlength. this also fixes a lot of the useless paranthesis warnings generated by pmd.
2692,2692,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
2693,2693,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.15154237795747227, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
2694,2694,"2 0.2495894909688013, 1 0.1346469622331691, 0 0.12315270935960591, 3 0.12315270935960591, 4 0.12315270935960591, 5 0.12315270935960591, 6 0.12315270935960591",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
2695,2695,"6 0.3115995115995116, 0 0.12527472527472525, 5 0.11843711843711843, 4 0.11330891330891332, 2 0.11159951159951162, 1 0.1098901098901099, 3 0.1098901098901099",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
2696,2696,"4 0.21711057304277642, 2 0.14743072370191013, 5 0.13801452784503632, 1 0.13236481033091205, 3 0.12294861447403825, 0 0.12106537530266348, 6 0.12106537530266348",sort members.applying joanne polskys patch adding appendifmissing/prependifmissing methods to stringutils []
2697,2697,"5 0.2901379130887327, 4 0.12073900598490762, 0 0.11891751236013531, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2698,2698,"3 0.19450743260267067, 0 0.1803980851599899, 6 0.13983371126228264, 4 0.12925170068027209, 2 0.12748803224993702, 5 0.11514235323759135, 1 0.11337868480725624",add final modifier to local variables.stringbuffer => stringbuilder where being used as a local-only bufferadding nopmd tags for various empty catch blocks
2699,2699,"0 0.20062753783684015, 2 0.1554078995939461, 3 0.1437799926172019, 5 0.13990402362495385, 6 0.13602805463270579, 4 0.12181616832779621, 1 0.10243632336655589","remove redundant type arguments.revert ""allocate array of the correct size""this reverts commit 60b32953a968e5623f82a6b27d6c679bc17c48e5.following the advices from http://shipilev.net/blog/2016/arrays-wisdom-ancients/this seems to be faster and safer on current vms.allocate array of the correct sizeadd final modifier to local variables.checkstyle and trailing spaces."
2700,2700,"2 0.314469749252358, 3 0.1598803772716816, 1 0.10674028065332415, 6 0.10674028065332414, 4 0.10512997469519211, 0 0.10351966873706007, 5 0.10351966873706007",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
2701,2701,"6 0.16128117913832196, 3 0.15334467120181403, 0 0.14739229024943307, 4 0.1454081632653061, 2 0.1374716553287982, 1 0.1275510204081633, 5 0.1275510204081633",use final consistently. strsubstitutor does not support stringbuilder or charsequence
2702,2702,"3 0.2058111380145278, 6 0.1530804412160344, 0 0.13989776701641105, 2 0.1342480495022868, 1 0.12294861447403822, 4 0.12294861447403822, 5 0.12106537530266345",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
2703,2703,"4 0.17687074829931973, 3 0.16276140085663895, 2 0.15923406399596873, 0 0.15217939027462835, 6 0.12219702695893175, 1 0.11337868480725626, 5 0.11337868480725626",deletes redundant new expression in constant array creationuse final. - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
2704,2704,"4 0.17679255610290093, 2 0.17296113847837985, 0 0.14805692391899286, 6 0.1327312534209086, 1 0.12315270935960594, 3 0.12315270935960594, 5 0.12315270935960594","fix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring"
2705,2705,"6 0.17250673854447438, 0 0.15363881401617246, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",allow subclass custom invocation handling
2706,2706,"3 0.22278911564625845, 1 0.1354875283446712, 2 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
2707,2707,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.15154237795747227, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
2708,2708,"6 0.2957164601000217, 2 0.19069362904979342, 5 0.11306805827353772, 3 0.10393563818221355, 1 0.10089149815177215, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
2709,2709,"0 0.29836668967103747, 4 0.14377731769036114, 6 0.12767425810904068, 3 0.11157119852772027, 2 0.10996089256958824, 5 0.1051299746951921, 1 0.10351966873706006","[] objectutils.identitytostring(object) and friends shouldallocate builders and buffers with a sizerefactor magic char.better exception message.use validatenotnull instead of ""throw new nullpointerexception"" add objectutils.toidentitystring methods that support stringbuilder, strbuilder, and appendable"
2710,2710,"2 0.3080285254198298, 3 0.13411548194156886, 1 0.1196227283183805, 5 0.1131815044858523, 4 0.11157119852772028, 6 0.10996089256958823, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2711,2711,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2712,2712,"3 0.20259740259740255, 2 0.14401154401154398, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
2713,2713,"2 0.3038548752834467, 1 0.12043335852859662, 4 0.11866969009826153, 3 0.11690602166792644, 0 0.11337868480725623, 5 0.11337868480725623, 6 0.11337868480725623",crlf -> lfjavadoc: fix typo but working is still awkward. - add issorted() to arrayutils. patch supplied by james sawle. in github.
2714,2714,"5 0.2901379130887327, 6 0.12073900598490764, 0 0.11891751236013533, 4 0.11891751236013533, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2715,2715,"0 0.22276029055690072, 4 0.13989776701641105, 6 0.1380145278450363, 3 0.13613128867366156, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
2716,2716,"3 0.20663780663780662, 2 0.14401154401154398, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
2717,2717,"2 0.20586820586820584, 0 0.1688311688311688, 4 0.14694564694564693, 1 0.14189514189514185, 5 0.11832611832611833, 3 0.10990860990860993, 6 0.10822510822510824", - jsontostringstyle does not escape double quote in a stringvalue[github] commons-lang pull request : intellij idea refactorings..: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2718,2718,"0 0.14285714285714285, 1 0.14285714285714285, 2 0.14285714285714285, 3 0.14285714285714285, 4 0.14285714285714285, 5 0.14285714285714285, 6 0.14285714285714285",
2719,2719,"2 0.24575807334428024, 1 0.13081554460864803, 6 0.12889983579638753, 3 0.12506841817186645, 0 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
2720,2720,"5 0.2901379130887327, 0 0.12256049960967993, 4 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2721,2721,"4 0.33218311479181045, 0 0.11962272831838049, 1 0.1164021164021164, 6 0.11318150448585229, 2 0.11157119852772027, 3 0.10351966873706006, 5 0.10351966873706006","sort members.rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
2722,2722,"2 0.2326462923477849, 6 0.15138592750533045, 0 0.14475242833451785, 1 0.12153518123667374, 3 0.12153518123667374, 4 0.12153518123667374, 5 0.10660980810234542","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws[] removed unnecessary elses and use of ternary operator with primitive boolean consequences e.g. (some boolean expression) ? true : false"
2723,2723,"6 0.21269841269841264, 3 0.13593073593073593, 1 0.1318903318903319, 0 0.12987012987012986, 2 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986",removes redundant + signpmd: remove useless parentheses
2724,2724,"3 0.2046176046176046, 2 0.14199134199134197, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
2725,2725,"0 0.36016628873771733, 3 0.13265306122448978, 6 0.1220710506424792, 2 0.10619803476946331, 4 0.10090702947845802, 1 0.09297052154195011, 5 0.0850340136054422",": extend randomstringutils with methods that generate strings between a min and max length (, ): add randomstringutilsrandomgraph and randomprint which match corresponding regular expression classthese are useful over randomascii because they do not contain the del character but otherwise contain the full range of ascii printing characters, and optionally include whitespace. this is useful for testing user defined inputs where characters like spaces, angle brakets, semicolons, dashes, etc. can cause issues."
2726,2726,"5 0.27089947089947086, 6 0.1301587301587301, 1 0.12275132275132275, 0 0.11904761904761907, 2 0.11904761904761907, 3 0.11904761904761907, 4 0.11904761904761907",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2727,2727,"5 0.2883164194639604, 0 0.12073900598490762, 4 0.12073900598490762, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2728,2728,"2 0.17794486215538843, 4 0.17794486215538843, 6 0.13505987190197713, 3 0.1331105541631857, 0 0.12531328320802007, 1 0.12531328320802007, 5 0.12531328320802007",explicit type parameters can be removedremove redundant type arguments.
2729,2729,"3 0.34484126984126984, 2 0.18928571428571425, 4 0.09623015873015872, 6 0.09623015873015872, 1 0.09484126984126984, 0 0.08928571428571429, 5 0.08928571428571429","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2730,2730,"3 0.19211822660098518, 6 0.14997263273125339, 2 0.13656267104542966, 0 0.13656267104542963, 5 0.1346469622331691, 1 0.126984126984127, 4 0.12315270935960593",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
2731,2731,"5 0.282010582010582, 1 0.1208994708994709, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2732,2732,"2 0.16991933385376004, 4 0.16081186572989847, 1 0.15352589123080923, 6 0.14259692948217537, 3 0.12802498048399688, 5 0.12802498048399688, 0 0.117096018735363",remove redundant type arguments.adding hennings github pull request with a triple implementation. 675
2733,2733,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2734,2734,"4 0.167254556143445, 6 0.16108171663727217, 3 0.14050558495002938, 2 0.13433274544385657, 0 0.1322751322751323, 1 0.1322751322751323, 5 0.1322751322751323",remove redundant type arguments.
2735,2735,"6 0.3180952380952381, 3 0.16476190476190475, 4 0.14142857142857143, 2 0.11698412698412697, 0 0.11031746031746029, 1 0.076984126984127, 5 0.07142857142857144","replaces size() == 0 and length() == 0 with isempty()make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.remove add and set methods of exceptioncontext types taking a pair. format entries with index. improve javadoc. add serialization test.javdoc and minor tweaks to contexted exceptionrefactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.fix brace positionsfixing . dont catch throwable, catch exception instead. "
2736,2736,"4 0.24664224664224665, 3 0.1731379731379731, 6 0.12527472527472525, 2 0.12014652014652016, 1 0.11330891330891332, 0 0.11159951159951162, 5 0.1098901098901099",add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
2737,2737,"5 0.30072930072930076, 1 0.13556413556413555, 0 0.13256113256113256, 2 0.12054912054912054, 3 0.11003861003861003, 4 0.10253110253110256, 6 0.09802659802659806","change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
2738,2738,"2 0.18037518037518036, 0 0.14805194805194802, 4 0.13997113997114, 1 0.13593073593073596, 3 0.13593073593073596, 5 0.12987012987012989, 6 0.12987012987012989",add checknotnull method in reflectiontostringbuilder.java to fix 1132
2739,2739,"4 0.17794486215538843, 2 0.17599554441659698, 6 0.1370091896407686, 3 0.1311612364243943, 1 0.1272626009468115, 0 0.12531328320802007, 5 0.12531328320802007",explicit type parameters can be removedremove redundant type arguments.
2740,2740,"2 0.1837928153717627, 1 0.1662489557226399, 5 0.13700918964076858, 3 0.1311612364243943, 4 0.1311612364243943, 0 0.12531328320802007, 6 0.12531328320802007",adding hennings github pull request with a triple implementation. 675
2741,2741,"0 0.19221569906501415, 1 0.16329636877582085, 3 0.15873015873015875, 2 0.14959773863883452, 6 0.13894324853228962, 4 0.09936942813655146, 5 0.09784735812133076","add final modifier to local variables.fix brace positions: add event support utilitiesapplying documentation patch ""commons-event-support-docs.patch"" from michael wooten.using copyonwritearraylist for thread safety.changing eol-style to native.misc. event utils."
2742,2742,"2 0.23537414965986395, 3 0.19251700680272107, 6 0.14489795918367343, 4 0.11632653061224488, 1 0.1052154195011338, 5 0.10362811791383221, 0 0.10204081632653063","make sure placement of curly braces is consistentadd final modifier to local variables.pmd: remove useless parenthesescheckstyle: add missing curly braces: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
2743,2743,"0 0.22271825396825395, 2 0.14459325396825393, 6 0.14285714285714282, 4 0.12896825396825393, 1 0.12549603174603172, 5 0.12028769841269843, 3 0.1150793650793651","functions.java whitspacesreplace tabs with four spaces, as per the projects checkstyle rules.adding the functions class as a helper for dealing with java 8 lambdas."
2744,2744,"4 0.180623973727422, 2 0.17487684729064037, 0 0.14230979748221126, 6 0.13081554460864808, 1 0.12506841817186648, 3 0.12315270935960596, 5 0.12315270935960596","fix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring"
2745,2745,"3 0.3939594356261023, 2 0.10537918871252204, 6 0.10229276895943565, 1 0.10074955908289243, 0 0.09920634920634923, 4 0.09920634920634923, 5 0.09920634920634923","add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2746,2746,"3 0.2046176046176046, 2 0.14401154401154398, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
2747,2747,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2748,2748,"0 0.28766788766788765, 4 0.156043956043956, 2 0.11330891330891332, 6 0.11330891330891332, 1 0.10989010989010989, 3 0.10989010989010989, 5 0.10989010989010989","reverting r1090111 - moving the text.translate escapers back from using range to replicating parts of the range api. see the list for details (unnecessary boxing in stringescapeutils etc), the move to range was an uncomfortable fit. "
2749,2749,"6 0.20096371882086161, 5 0.15532879818594097, 0 0.13350340136054423, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327",trailing spaces fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()
2750,2750,"6 0.2550705467372134, 0 0.16093474426807758, 2 0.14550264550264547, 1 0.12389770723104053, 4 0.11618165784832449, 3 0.09920634920634923, 5 0.09920634920634923",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmade it clear that the fields of the object form the hash code ().pulled magic values into constants.more varargs-related updates
2751,2751,"6 0.23782620392789883, 4 0.13989776701641105, 3 0.1380145278450363, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
2752,2752,"5 0.28467343221441577, 4 0.12620348685922456, 0 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2753,2753,"6 0.33870214752567696, 3 0.11974789915966384, 5 0.11484593837535013, 0 0.11157796451914101, 1 0.1050420168067227, 2 0.1050420168067227, 4 0.1050420168067227",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor some duplicate code.
2754,2754,"5 0.2901379130887327, 0 0.12073900598490762, 4 0.12073900598490762, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2755,2755,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2756,2756,"3 0.19548872180451124, 2 0.14480646059593427, 4 0.14090782511835143, 0 0.13311055416318576, 5 0.13311055416318573, 1 0.12726260094681152, 6 0.1253132832080201",: new class classpathutils with methods for turning fqn into resource path
2757,2757,"3 0.23507180650037796, 4 0.14512471655328796, 6 0.14336104812295286, 5 0.12572436381960192, 2 0.12043335852859666, 1 0.11690602166792646, 0 0.11337868480725627",add final modifier to local variables.remove redundant type arguments.: fastdateformat doesnt respect summer daylight in some localized strings
2758,2758,"5 0.3748641008914981, 3 0.11154598825831698, 4 0.10697977821265492, 1 0.10545770819743422, 6 0.10241356816699282, 0 0.10089149815177212, 2 0.09784735812133072",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2759,2759,"3 0.19943676395289295, 6 0.15463389656938042, 4 0.1420890937019969, 2 0.1402969790066564, 0 0.1259600614439324, 5 0.12058371735791093, 1 0.11699948796722992",use validateistrue to validate argumentsadd final modifier to local variables.add method to diffbuilder to allow appending from a diffresult.
2760,2760,"5 0.16519694297472073, 0 0.15079365079365079, 2 0.15079365079365079, 6 0.13639035861258086, 1 0.13227513227513232, 3 0.13227513227513232, 4 0.13227513227513232", simplify fastdateformat; eliminate boxing
2761,2761,"3 0.20057720057720052, 2 0.146031746031746, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
2762,2762,"0 0.17027417027417027, 4 0.1541125541125541, 2 0.141991341991342, 3 0.13997113997113997, 1 0.13391053391053395, 5 0.1298701298701299, 6 0.1298701298701299","add hashcode and tostring methods to annotationutils, plus testsannotationutils"
2763,2763,"1 0.7139843279083785, 2 0.05294354028531243, 5 0.04942736588306208, 3 0.04661442636126182, 0 0.04591119148081175, 4 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2764,2764,"3 0.16412099430967353, 0 0.14944594189877208, 6 0.14734950584007192, 1 0.13477088948787064, 2 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",: dateutilstest.testlang530 fails for some timezones
2765,2765,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
2766,2766,"2 0.23367161072079104, 3 0.175383814728077, 1 0.12073900598490764, 4 0.11891751236013533, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
2767,2767,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",: rounding utilities for converting to bigdecimal
2768,2768,"3 0.3122482823975361, 4 0.1331438047855958, 1 0.12153518123667373, 6 0.11158493248045488, 2 0.10826818289504858, 0 0.10660980810234542, 5 0.10660980810234542","use validateistrue to validate argumentsremove redundant type arguments.fixing crlfsstatement unnecessarily nested within else clause.incorporated feedback from fabian, formatting adjusted, count >> 1 replaced with count / 2incorporated feedback from peteradd threadutils"
2769,2769,"3 0.3618645770544505, 6 0.11854530841872613, 0 0.11573236889692584, 2 0.11573236889692584, 5 0.10166767128792444, 4 0.09463532248342377, 1 0.0918223829616235",": fastdateformat doesnt respect summer daylight in some localized stringsmerge branch master of https://github.com/nickmanley/commons-langthis fix nullpointerexception in fastdateparser$timezonestrategyfix nullpointerexception in fastdateparser$timezonestrategyrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2770,2770,"2 0.2633579253297564, 3 0.16946121171473283, 0 0.1412921976302258, 1 0.11781801922646992, 4 0.1052984574111335, 6 0.10216856695729937, 5 0.10060362173038231",formatting fixes perhttps://patch-diff.githubusercontent.com/raw/apache/commons-lang/pull/128.diffcrlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
2771,2771,"5 0.19983719983719986, 2 0.19413919413919414, 6 0.17562067562067563, 4 0.11436711436711434, 0 0.11294261294261293, 1 0.10866910866910866, 3 0.09442409442409444",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefullyapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2772,2772,"4 0.26904761904761904, 6 0.13571428571428568, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
2773,2773,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2774,2774,"2 0.35704487556339415, 0 0.13756613756613756, 1 0.10875955320399763, 6 0.10464432686654908, 3 0.09778561630413485, 5 0.09778561630413482, 4 0.09641387419165197",formatting fixes perhttps://patch-diff.githubusercontent.com/raw/apache/commons-lang/pull/128.diffcrlf -> lfjavadoc: fix typo but working is still awkward.implements : add a method to arrayutils for removing all occurrences of a given element. thanks to haiyang li. - add issorted() to arrayutils. patch supplied by james sawle. in github.
2775,2775,"5 0.29389880952380953, 6 0.12723214285714282, 2 0.12202380952380952, 1 0.11681547619047622, 4 0.1150793650793651, 0 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2776,2776,"5 0.2698412698412698, 0 0.15367965367965364, 6 0.12674362674362671, 3 0.11832611832611832, 2 0.1132756132756133, 1 0.10990860990860991, 4 0.10822510822510822",add explict default case and fastdateparser could use \q \e to quote regexestrailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2777,2777,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
2778,2778,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
2779,2779,"0 0.2735890652557319, 3 0.18099647266313929, 6 0.12235449735449735, 4 0.11309523809523811, 2 0.1115520282186949, 1 0.09920634920634923, 5 0.09920634920634923","a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables.[] constructorutils.invoke*(*, object... args) variants cannot handle null valuesreview and cleanup javadoc in constructorutilsmove/comment suppresswarnings(unchecked)/refactor surrounding code"
2780,2780,"6 0.3115995115995116, 5 0.12185592185592188, 0 0.12014652014652016, 4 0.11330891330891332, 1 0.1133089133089133, 2 0.1098901098901099, 3 0.1098901098901099",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
2781,2781,"2 0.30629041740152857, 6 0.19380756417793457, 0 0.12384871644130903, 1 0.10738781109151478, 4 0.09229864785420343, 3 0.08818342151675487, 5 0.08818342151675487",make sure lines in files dont have trailing white spaces and remove all trailing white spacesformatting fixes perhttps://patch-diff.githubusercontent.com/raw/apache/commons-lang/pull/128.diffcrlf -> lfjavadoc: fix typo but working is still awkward. - add issorted() to arrayutils. patch supplied by james sawle. in github.
2782,2782,"5 0.269047619047619, 6 0.132010582010582, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2783,2783,"5 0.2791635172587553, 6 0.13807004283194754, 2 0.12748803224993702, 1 0.11514235323759134, 0 0.11337868480725624, 3 0.11337868480725624, 4 0.11337868480725624",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . checkstyle and trailing spaces.
2784,2784,"2 0.26419155232714553, 4 0.12671509281678772, 0 0.12294861447403821, 6 0.12294861447403821, 1 0.12106537530266344, 3 0.12106537530266344, 5 0.12106537530266344",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
2785,2785,"2 0.30687830687830686, 4 0.1301106301106301, 0 0.12169312169312167, 1 0.11327561327561327, 6 0.11159211159211159, 3 0.10822510822510822, 5 0.10822510822510822",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
2786,2786,"1 0.7132810930279283, 5 0.05083383564396221, 2 0.04942736588306209, 3 0.04942736588306209, 4 0.046614426361261806, 0 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2787,2787,"2 0.2755659640905542, 4 0.1316679677335415, 1 0.12073900598490765, 3 0.12073900598490765, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
2788,2788,"4 0.4185839129659355, 2 0.13019439985732117, 0 0.09898341359015514, 3 0.0977349741394685, 1 0.09398965578740856, 5 0.08025682182985554, 6 0.08025682182985554","merge branch fix-: add compare methods in stringutilsthis from github. add null safe compare methods in stringutils : - stringutils.compare(string str1, string str2); - stringutils.compare(string str1, string str2, boolean nullisless); - stringutils.compareignorecase(string str1, string str2); - stringutils.compareignorecase(string str1, string str2, boolean nullisless);"
2789,2789,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2790,2790,"4 0.2318501170960187, 0 0.1498829039812646, 3 0.1316679677335415, 2 0.12802498048399688, 1 0.12438199323445227, 5 0.117096018735363, 6 0.117096018735363",: add zero copy write method to strbuilder; : add zero copy read method to strbuilder. thanks to mikhail mazursky.
2791,2791,"4 0.18973214285714285, 3 0.17063492063492064, 2 0.14285714285714285, 0 0.1376488095238095, 1 0.1359126984126984, 5 0.11160714285714289, 6 0.11160714285714289",sort members.[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.
2792,2792,"0 0.21693121693121686, 5 0.13505987190197716, 3 0.13505987190197713, 2 0.1311612364243943, 1 0.1292119186856029, 4 0.1272626009468115, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
2793,2793,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2794,2794,"5 0.27275132275132274, 6 0.13201058201058197, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2795,2795,"6 0.27358906525573196, 3 0.15939153439153442, 2 0.12544091710758376, 1 0.11926807760141094, 0 0.11463844797178131, 4 0.10846560846560846, 5 0.09920634920634924","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd dateutils.tocalendar(date, timezone)add final modifier to local variables.adding tocalendar method per 632"
2796,2796,"0 0.2291235334713596, 3 0.16471129514607774, 2 0.1308948700253048, 4 0.12445364619277662, 1 0.11801242236024846, 5 0.11801242236024843, 6 0.11479181044398437",a bit of dog food and a lot of javadoc tweakage[] add fieldutils getdeclaredfields() to return all the fields defined in the given class and super classes.add final modifier to local variables.checkstyle
2797,2797,"5 0.2962247962247963, 0 0.1400686400686401, 2 0.12054912054912058, 1 0.12054912054912055, 4 0.11304161304161307, 3 0.11003861003861004, 6 0.09952809952809956","change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
2798,2798,"2 0.29805996472663143, 4 0.14716833235351753, 0 0.14168136390358613, 3 0.1307074270037233, 5 0.0977856163041348, 1 0.09504213207916914, 6 0.08955516362923772","extract logic for checking string representation of objects into separate methodsformat source codevariable names should follow naming conventionsmodified appenddetail method for object value in jsontostringstyle classfix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.add final modifier to local variables."
2799,2799,"0 0.21899381221415118, 6 0.17191283292978204, 1 0.12483185364541298, 2 0.12106537530266345, 3 0.12106537530266345, 4 0.12106537530266345, 5 0.12106537530266345"," - tolowercase should use locale, additional unit tests for case-insensitive matching - fastdateparser should be case insensitive"
2800,2800,"2 0.44788858939802345, 4 0.134471398622342, 3 0.09673554956573821, 6 0.0904462413896376, 5 0.08206049715483676, 0 0.07996406109613653, 1 0.06843366277328541",remove redundant type arguments. simplify arrayutils removeelements by using newdecrementandget() method: improve arrayutils removeelements time complexity to o(n) ()based on patch submitted by jeffery yuancrlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables. arrayutils removeelements methods use unnecessary hashseteliminate conversion of bitset to int[] arrayutils removeelements methods use unnecessary hashsetreplace hashset with bitset (less memory; faster) arrayutils removeelements methods clone temporary index arrays unnecessarilyreduce number of created arrays[] complement arrayutils.addall() variants with by-index and by-value removal methods
2801,2801,"1 0.6988996007400916, 2 0.060862790924140604, 3 0.05677281137403836, 4 0.047229525757133115, 5 0.046547862498782754, 0 0.04586619924043238, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2802,2802,"6 0.2962423064463881, 5 0.16699060576611596, 2 0.16358924522189827, 3 0.12390670553935858, 4 0.09102688694525428, 0 0.0808228053126012, 1 0.07742144476838356",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2803,2803,"4 0.17296113847837985, 2 0.16912972085385874, 0 0.15188834154351394, 6 0.13464696223316913, 1 0.12506841817186648, 3 0.12315270935960594, 5 0.12315270935960594","fix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring"
2804,2804,"5 0.26904761904761904, 6 0.13386243386243382, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2805,2805,"0 0.19211822660098518, 3 0.1538040503557745, 6 0.1403940886699507, 2 0.13656267104542966, 1 0.12698412698412703, 4 0.12698412698412703, 5 0.12315270935960594",[] strsubstitutor now supports the declaration of default values for the variables to be replaced. thanks to woonsan ko for the patch.
2806,2806,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
2807,2807,"4 0.17041030248577416, 0 0.15154237795747227, 2 0.13686732554657086, 6 0.13686732554657086, 1 0.13477088948787064, 3 0.13477088948787064, 5 0.13477088948787064",use concurrent instead of synchronization; javadoc
2808,2808,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.1473495058400719, 1 0.14106019766397127, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
2809,2809,"4 0.1590241034685479, 2 0.15285126396237506, 5 0.14462081128747797, 0 0.1425631981187537, 6 0.13639035861258086, 1 0.13227513227513232, 3 0.13227513227513232",reduce number of created arrays
2810,2810,"4 0.23659147869674185, 0 0.22489557226399332, 2 0.13834586466165413, 3 0.13249791144527986, 1 0.11144527986633247, 5 0.0810359231411863, 6 0.07518796992481205",sort members.: stringutilsstartswithany/endswithany is case sensitive - documented as case insensitive ()improve the documentation and introduce more test cases that verify the documented behaviors.patch by matthew bartenschlag: bring static method references in stringutils to consistent style. thanks to alex yurshaadd final modifier to local variables.convert to java 5 enhanced loops. adding green regionmatches implementation and moving endswith and startswith methods to use it; thus giving them charsequence based apis. 687
2811,2811,"2 0.1981187536743092, 6 0.14050558495002938, 0 0.1322751322751323, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",make sure placement of curly braces is consistent
2812,2812,"0 0.22638563622170174, 4 0.14988290398126458, 5 0.13166796773354147, 3 0.12438199323445226, 6 0.12438199323445226, 1 0.12256049960967995, 2 0.12073900598490764", added alternative checked exception wrapping/unwrapping methodsability to throw checked exceptions without declaring them
2813,2813,"3 0.21693121693121686, 2 0.14870509607351712, 1 0.13311055416318573, 0 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",add final modifier to local variables.: add truncatedequals and truncatedcompareto
2814,2814,"0 0.19450743260267064, 4 0.1786344167296548, 3 0.14159737969261774, 6 0.12925170068027209, 2 0.12396069538926682, 5 0.11690602166792644, 1 0.11514235323759134",removes unnecessary class reference of static method calls which are declared in the same classuse final consistently. [] new type util features
2815,2815,"0 0.2956645344705046, 2 0.13646055437100213, 4 0.1231935560293769, 1 0.1149016820658612, 3 0.1115849324804549, 6 0.11158493248045487, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
2816,2816,"2 0.2575963718820862, 3 0.20997732426303856, 6 0.12108843537414962, 1 0.10521541950113378, 0 0.10204081632653061, 4 0.10204081632653061, 5 0.10204081632653061",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateparser too strict on abbreviated short month symbolsadd final modifier to local variables.format. fastdateparser_timezonestrategytesttesttimezonestrategypattern fails on windows with german localereimplementing 1107
2817,2817,"3 0.43186971758400333, 2 0.09709338280766852, 6 0.0970933828076685, 1 0.09420737992166563, 4 0.09420737992166563, 0 0.0927643784786642, 5 0.0927643784786642","add final modifier to local variables.format.statement unnecessarily nested within else clause.\refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2818,2818,"5 0.2846734322144158, 4 0.12438199323445227, 0 0.11891751236013534, 1 0.11891751236013534, 6 0.11891751236013534, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2819,2819,"2 0.17041030248577416, 1 0.1536388140161725, 0 0.13686732554657086, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",more varargs-related updates
2820,2820,"0 0.21303258145363407, 2 0.13700918964076858, 4 0.13700918964076858, 5 0.13116123642439434, 1 0.1292119186856029, 3 0.12726260094681152, 6 0.1253132832080201",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
2821,2821,"5 0.28467343221441577, 4 0.12256049960967995, 6 0.12073900598490764, 0 0.11891751236013533, 1 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2822,2822,"4 0.23074352548036758, 0 0.22606516290726816, 3 0.14887218045112782, 2 0.131328320802005, 1 0.10325814536340851, 5 0.083375104427736, 6 0.0763575605680869",sort members.: stringutilsstartswithany/endswithany is case sensitive - documented as case insensitive ()improve the documentation and introduce more test cases that verify the documented behaviors.patch by matthew bartenschlag: bring static method references in stringutils to consistent style. thanks to alex yurshaadd final modifier to local variables.convert to java 5 enhanced loops. adding green regionmatches implementation and moving endswith and startswith methods to use it; thus giving them charsequence based apis. 687
2823,2823,"6 0.28404344193817876, 5 0.21825396825396826, 3 0.11445279866332495, 1 0.09837092731829575, 0 0.09544695071010861, 2 0.09544695071010861, 4 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateformats ""z"" pattern does not respect timezone of calendar instances passed to format()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
2824,2824,"5 0.2534798534798535, 3 0.17484737484737484, 2 0.12185592185592187, 6 0.12014652014652016, 0 0.10989010989010992, 1 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2825,2825,"6 0.17913832199546484, 0 0.16524943310657594, 1 0.1454081632653061, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
2826,2826,"3 0.2267573696145124, 2 0.1354875283446712, 0 0.12755102040816327, 1 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
2827,2827,"5 0.38855354348312093, 1 0.10373351218421642, 6 0.10373351218421642, 4 0.10216856695729935, 0 0.1006036217303823, 2 0.1006036217303823, 3 0.1006036217303823",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2828,2828,"3 0.18509550712940542, 4 0.16626311541565778, 2 0.13801452784503632, 0 0.1380145278450363, 6 0.12671509281678778, 1 0.124831853645413, 5 0.12106537530266347",add final modifier to local variables.use new feature for implementing issupported(); javadoc
2829,2829,"1 0.710468153506128, 2 0.05716294956801284, 5 0.048020896122161934, 4 0.04731766124171188, 0 0.045911191480811735, 3 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2830,2830,"2 0.19274376417233557, 3 0.17687074829931973, 0 0.13630637440161247, 1 0.1310153691106072, 6 0.1292517006802721, 5 0.11866969009826156, 4 0.11514235323759135","[] constructorutils.invokeconstructor(class, object...)regressionadd final modifier to local variables.: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
2831,2831,"6 0.31550337029789083, 0 0.1435094585779517, 4 0.126766688410524, 3 0.10850184822787565, 2 0.10393563818221355, 5 0.10393563818221355, 1 0.09784735812133075",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
2832,2832,"3 0.35204927742241166, 1 0.10992655768775171, 4 0.10992655768775171, 2 0.10826818289504857, 0 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2833,2833,"6 0.26753712237583205, 2 0.1367127496159754, 3 0.1295442908346134, 1 0.12058371735791092, 0 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894",make checkstyle happy: add missing javadocreplace tabs with spaces fastdateparser and fastdateprinter support x format
2834,2834,"2 0.21288515406162467, 3 0.1687675070028011, 0 0.16713352007469653, 6 0.12791783380018673, 4 0.10994397759103644, 1 0.10830999066293187, 5 0.10504201680672272","make whitespace use before tokens consistent and add a checkstyle rule to enforce it.fixing crlfsstatement unnecessarily nested within else clause. duplicated ""0x"" check in createbiginteger in numberutils numberutilscreatebiginteger does not allow for hex and octal numbers"
2835,2835,"6 0.24581128747795417, 4 0.1593915343915344, 3 0.15167548500881833, 2 0.1146384479717813, 1 0.11309523809523808, 5 0.11155202821869488, 0 0.10383597883597885",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.merge charset getinstance/constructor string[] and string forms to string...
2836,2836,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
2837,2837,"5 0.30072930072930076, 0 0.13556413556413555, 2 0.12205062205062205, 1 0.11904761904761904, 4 0.11304161304161303, 3 0.11003861003861003, 6 0.09952809952809956","change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
2838,2838,"3 0.35204927742241166, 2 0.113243307273158, 6 0.10826818289504855, 0 0.1066098081023454, 1 0.1066098081023454, 4 0.1066098081023454, 5 0.1066098081023454","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2839,2839,"6 0.2723475355054302, 5 0.22263993316624894, 3 0.11591478696741851, 2 0.0998329156223893, 0 0.09837092731829575, 1 0.09690893901420218, 4 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateformats ""z"" pattern does not respect timezone of calendar instances passed to format()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
2840,2840,"0 0.17863441672965485, 2 0.14865205341395818, 3 0.14688838498362308, 4 0.14688838498362308, 6 0.13630637440161247, 1 0.1292517006802721, 5 0.11337868480725627", - fix findbugs warnings in durationformatutilsuse final consistently. use enhanced for loop failing tests with java 8 b128 durationformatutils does not handle large durations correctly
2841,2841,"2 0.23731459797033566, 3 0.175383814728077, 4 0.11891751236013533, 0 0.117096018735363, 1 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
2842,2842,"5 0.2864949258391881, 4 0.12256049960967993, 0 0.11891751236013531, 1 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2843,2843,"3 0.2046176046176046, 2 0.14401154401154398, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
2844,2844,"6 0.21693121693121686, 3 0.15455304928989133, 4 0.1272626009468115, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
2845,2845,"2 0.2144041696280502, 4 0.18123667377398717, 0 0.1497275527126273, 3 0.12485193082208003, 1 0.11158493248045488, 6 0.11158493248045488, 5 0.10660980810234542","sort members.make whitespace use after tokens consistent and add a checkstyle rule to enforce it.deprecating chomp(string, string) per verneri åbergs report in 748"
2846,2846,"4 0.7206990540323874, 3 0.06188872855539521, 5 0.048420715087381744, 0 0.043931377264710594, 1 0.04224787558120891, 2 0.04168670835337502, 6 0.041125541125541114","sort members.[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
2847,2847,"3 0.28725038402457753, 2 0.13671274961597538, 0 0.1152073732718894, 1 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894, 6 0.1152073732718894",add final modifier to local variables.[] part 2: refactor tostringstyle and tostringbuildertest to verify that we are unsetting the registry when no longer needed
2848,2848,"2 0.2267573696145124, 4 0.1354875283446712, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2849,2849,"5 0.29389880952380953, 6 0.12896825396825393, 2 0.12723214285714282, 4 0.1150793650793651, 0 0.11160714285714288, 1 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2850,2850,"4 0.2883164194639604, 2 0.12256049960967993, 0 0.12073900598490762, 1 0.11709601873536299, 3 0.11709601873536299, 5 0.11709601873536299, 6 0.11709601873536299","moving the indexof(string, string, int) method above the ordinalindexof methods to put it with its overloaded peers. 590"
2851,2851,"2 0.31446974925235793, 3 0.1357257878997009, 1 0.11962272831838047, 5 0.11157119852772028, 4 0.10835058661145619, 6 0.10674028065332414, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2852,2852,"4 0.25582354153782727, 3 0.17934446505875076, 0 0.12883941455370027, 1 0.11729540300968871, 6 0.11585240156668727, 2 0.1100803957946815, 5 0.09276437847866421",replaces size() == 0 and length() == 0 with isempty()[github] commons-lang pull request : intellij idea refactorings..remove redundant type arguments.add final modifier to local variables.eat own dog food: stringutilsisempty(string) and replace some but not all stringlength() == 0 with stringisempty()use concurrent instead of synchronization; javadoc
2853,2853,"4 0.3027544351073763, 3 0.13281979458450044, 1 0.11974789915966384, 6 0.11974789915966384, 0 0.11157796451914101, 2 0.10830999066293186, 5 0.1050420168067227",sort members and clean up comments.use stringisempty() instead of stringlength() == 0eat own dog food: stringutilsisempty(string) and replace some but not all stringlength() == 0 with stringisempty()merge charsetutils string[] and string method forms to string...
2854,2854,"4 0.23594296475652407, 0 0.1380145278450363, 6 0.1380145278450363, 2 0.124831853645413, 1 0.12106537530266347, 3 0.12106537530266347, 5 0.12106537530266347",sort members.[] stringutils.join() with support for list<?> withconfigurable start/end indices.
2855,2855,"0 0.29400615967780147, 2 0.1364605543710021, 4 0.12319355602937689, 1 0.11656005685856433, 6 0.11490168206586115, 3 0.10826818289504858, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
2856,2856,"4 0.3139066571902393, 0 0.12485193082208004, 6 0.11987680644397063, 1 0.11656005685856434, 2 0.1115849324804549, 3 0.10660980810234542, 5 0.10660980810234542","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
2857,2857,"5 0.27460317460317457, 1 0.1246031746031746, 6 0.1246031746031746, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2858,2858,"2 0.19353940406571982, 0 0.16235032024505702, 4 0.13895850737955998, 1 0.1272626009468115, 3 0.1272626009468115, 5 0.12531328320802007, 6 0.12531328320802007",[] add methods to classutils to get various forms of classnames in a null-safe manner
2859,2859,"4 0.26904761904761904, 6 0.13571428571428568, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
2860,2860,"2 0.22607022607022606, 4 0.1974506974506974, 0 0.14357864357864353, 1 0.10822510822510824, 3 0.10822510822510824, 5 0.10822510822510824, 6 0.10822510822510824",crlf -> lfjavadoc: fix typo but working is still awkward.simplify isempty be reusing getlengths/if (foo) { return true; } return false;/return foo;/g
2861,2861,"1 0.718203737191079, 2 0.048020896122161955, 5 0.048020896122161955, 3 0.047317661241711884, 4 0.047317661241711884, 0 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2862,2862,"3 0.1544566544566544, 4 0.1544566544566544, 2 0.14163614163614166, 0 0.13736263736263737, 1 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
2863,2863,"6 0.20732600732600734, 3 0.1970695970695971, 4 0.12527472527472527, 2 0.12356532356532357, 0 0.11843711843711845, 1 0.11843711843711845, 5 0.10989010989010992","add final modifier to local variables.<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
2864,2864,"3 0.1968253968253968, 2 0.169047619047619, 4 0.14867724867724866, 1 0.12460317460317462, 0 0.12275132275132276, 5 0.11904761904761907, 6 0.11904761904761907",add final modifier to local variables.add methods for inspecting array types
2865,2865,"1 0.7153907976692785, 2 0.05224030540486237, 3 0.04802089612216195, 0 0.046614426361261806, 5 0.046614426361261806, 4 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2866,2866,"1 0.718203737191079, 2 0.04942736588306208, 0 0.047317661241711884, 5 0.047317661241711884, 4 0.04661442636126182, 3 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2867,2867,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2868,2868,"6 0.3573117190138467, 3 0.24383654170888208, 5 0.08899020601148257, 2 0.07953394123606888, 0 0.07716987504221547, 4 0.07716987504221547, 1 0.07598784194528875","make sure lines in files dont have trailing white spaces and remove all trailing white spaces: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2869,2869,"3 0.20769437718590256, 6 0.15496368038740915, 0 0.1380145278450363, 2 0.13236481033091202, 1 0.12483185364541298, 4 0.12106537530266345, 5 0.12106537530266345",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
2870,2870,"6 0.2694235588972432, 5 0.22848788638262324, 3 0.1173767752715121, 2 0.09837092731829576, 1 0.0969089390142022, 0 0.09544695071010863, 4 0.09398496240601506","make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateformats ""z"" pattern does not respect timezone of calendar instances passed to format()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
2871,2871,"0 0.2168367346938775, 6 0.14540816326530606, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327",strbuilder implements builder; provide tostringbuilder as tostringbuffer
2872,2872,"3 0.30859430859430864, 5 0.14142714142714144, 6 0.13842413842413842, 0 0.11239811239811238, 2 0.11039611039611039, 1 0.09738309738309736, 4 0.09137709137709137","refactor ""gmt"" magic string.add a default case to switch to appease findbugs: nullpointerexception in fastdateparser$timezonestrategy ()replicate the fix for 1186add final modifier to local variables.remove redundant type arguments. fastdateparser_timezonestrategytesttesttimezonestrategypattern fails on windows with german localereimplementing 1107 fix parsing edge cases in fastdateparserrevert muddled commit - number percentage formatting with fractional digits fastdateparser error - timezones not handled correctlyuse final consistently. : test failure in fastdateparsertest and fastdateformat_parsertest when building with jdk8. thanks to bruno p. kinoshita and henri yandell for their help in fixing this issue.add final modifier to local variables.trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
2873,2873,"4 0.2662742999821652, 3 0.18138041733547355, 6 0.15266630996968075, 2 0.12020688425182807, 1 0.09773497413946851, 0 0.09648653468878186, 5 0.08525057963260212","sort members.[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern.merge branch fix-: add replace by regular expression methods in stringutilsthis from github.: add null safe methods in stringutils to replace by regular expression : - stringutils.replaceall(string, string, string) - stringutils.replacefirst(string, string, string)"
2874,2874,"0 0.167254556143445, 2 0.15285126396237503, 4 0.1507936507936508, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
2875,2875,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2876,2876,"5 0.2568986568986569, 3 0.17484737484737478, 2 0.12185592185592187, 6 0.11672771672771674, 0 0.10989010989010989, 1 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2877,2877,"4 0.16412099430967353, 0 0.1536388140161725, 6 0.14315663372267148, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 5 0.13477088948787064",use concurrent instead of synchronization; javadoc
2878,2878,"2 0.2755659640905542, 4 0.1316679677335415, 1 0.12438199323445223, 0 0.117096018735363, 3 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
2879,2879,"2 0.20634920634920634, 4 0.16627634660421545, 0 0.1334894613583138, 5 0.1334894613583138, 1 0.12256049960967998, 3 0.12073900598490767, 6 0.11709601873536302",add to changes.xml: arrayutilscontains and arrayutilsindexof should compare objects with different typescrlf -> lfjavadoc: fix typo but working is still awkward.
2880,2880,"2 0.2457580733442802, 1 0.1327312534209086, 6 0.126984126984127, 3 0.12506841817186645, 0 0.12315270935960591, 4 0.12315270935960591, 5 0.12315270935960591",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
2881,2881,"4 0.414936914936915, 2 0.10582010582010579, 0 0.10297110297110296, 1 0.09727309727309728, 6 0.09584859584859586, 3 0.09157509157509158, 5 0.09157509157509158","sort members.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classreplacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
2882,2882,"0 0.17136978248089355, 3 0.15079365079365076, 4 0.14462081128747795, 2 0.13639035861258086, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
2883,2883,"3 0.3454157782515991, 2 0.113243307273158, 4 0.10992655768775171, 6 0.10992655768775171, 1 0.10826818289504857, 0 0.10660980810234541, 5 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2884,2884,"0 0.28641456582633057, 4 0.13281979458450047, 1 0.12301587301587302, 6 0.11974789915966387, 2 0.11647992530345475, 3 0.11647992530345472, 5 0.10504201680672273",": update java requirement from java 6 to 7replace usage of deprecated objectutilstostring with objectstostring: fix deprecation warningseat own dog food: separator == null ? """" : separator->objectutils.tostring(separator)remove superfluous parens."
2885,2885,"3 0.21408221408221412, 0 0.18844118844118846, 4 0.13288563288563288, 6 0.13146113146113145, 1 0.13003663003663002, 2 0.1115181115181115, 5 0.0915750915750916",replaces size() == 0 and length() == 0 with isempty(): localeutilstolocale does not support language followed by un m.49 numeric-3 area code followed by variantintroduce some more local variables to make the code better readableremove initial if statement by adding an early returnreplace switch statement with if-else blockextract some helper methods to make the code better readable
2886,2886,"5 0.2534798534798535, 3 0.17484737484737484, 2 0.12014652014652018, 6 0.11672771672771677, 1 0.11501831501831504, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2887,2887,"5 0.2518796992481203, 3 0.16854636591478694, 0 0.15977443609022554, 6 0.12030075187969921, 1 0.10275689223057644, 2 0.10275689223057644, 4 0.09398496240601505",add final modifier to local variables.allow access to parsedpattern for test purposesmake parseexception text similar to that thrown by simpledateformat fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2888,2888,"5 0.2901379130887327, 0 0.12073900598490762, 4 0.1207390059849076, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2889,2889,"0 0.18371546149323925, 4 0.15079365079365076, 6 0.13639035861258086, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323",use builder apis for annotationutils.tostring()
2890,2890,"0 0.16623376623376623, 4 0.1642135642135642, 2 0.13997113997114, 1 0.13795093795093796, 3 0.13189033189033192, 5 0.1298701298701299, 6 0.1298701298701299",typeutils wildcard fixes[] new type util features
2891,2891,"2 0.30182780182780183, 0 0.12842712842712842, 4 0.12674362674362671, 1 0.11495911495911497, 6 0.11159211159211159, 3 0.10822510822510822, 5 0.10822510822510822",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
2892,2892,"4 0.6808561808561809, 3 0.09275292608625943, 5 0.05234888568221901, 6 0.04617604617604617, 2 0.04561487894821228, 0 0.04224787558120891, 1 0.04000320666987334","sort members.add final modifier to local variables.: stringutilsgetlevenshteindistance reduce memory consumptionminimal clean-upadd changes.xml entry: stringutilsgetlevenshteindistance reduce memory consumption ()add final modifier to local variables.ws onlytab police (and trailing spaces)change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
2893,2893,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2894,2894,"3 0.3916068710589259, 2 0.1145901282887584, 1 0.10089149815177215, 4 0.09936942813655145, 0 0.09784735812133075, 5 0.09784735812133075, 6 0.09784735812133075","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2895,2895,"3 0.20259740259740255, 2 0.146031746031746, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
2896,2896,"6 0.19897959183673464, 5 0.15532879818594097, 0 0.1354875283446712, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327",trailing spaces fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()
2897,2897,"5 0.28285193858964347, 4 0.12256049960967995, 1 0.12073900598490764, 6 0.12073900598490764, 0 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2898,2898,"4 0.2301587301587301, 3 0.13756613756613753, 2 0.1357142857142857, 6 0.13571428571428568, 1 0.12275132275132276, 0 0.11904761904761905, 5 0.11904761904761905",: add methods for removing all invalid characters according to xml 1.0 and xml 1.1 in an input string to stringescapeutils. thanks to adam hooper
2899,2899,"6 0.2707974756167527, 5 0.1958309428188946, 3 0.16905718110537385, 0 0.09275196022183974, 1 0.09141327213616371, 2 0.09141327213616371, 4 0.08873589596481163","zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
2900,2900,"5 0.27460317460317457, 6 0.13015873015873017, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2901,2901,"2 0.2698412698412698, 1 0.12294861447403822, 4 0.12294861447403822, 0 0.12106537530266345, 3 0.12106537530266345, 5 0.12106537530266345, 6 0.12106537530266345",crlf -> lfjavadoc: fix typo but working is still awkward.swap and shift for arrays
2902,2902,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
2903,2903,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
2904,2904,"2 0.31092436974789917, 4 0.12791783380018673, 0 0.123015873015873, 1 0.11157796451914101, 6 0.10994397759103644, 3 0.10830999066293186, 5 0.10830999066293183",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.[] add arrayutilsnulltoempty(class<?>[])minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
2905,2905,"3 0.19855699855699852, 2 0.144011544011544, 1 0.13795093795093796, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
2906,2906,"3 0.22098214285714282, 2 0.16369047619047616, 0 0.1498015873015873, 6 0.12202380952380952, 4 0.11681547619047622, 1 0.1150793650793651, 5 0.11160714285714288",add final modifier to local variables.add final modifier to method parameters.stringbuffer => stringbuilder where being used as a local-only buffer
2907,2907,"3 0.19451170298627923, 4 0.15496368038740915, 6 0.1474307237019101, 2 0.13613128867366156, 1 0.12483185364541298, 0 0.12106537530266345, 5 0.12106537530266345",remove redundant type arguments.add final modifier to local variables.
2908,2908,"2 0.3096388313779618, 3 0.13411548194156886, 1 0.1196227283183805, 5 0.11479181044398434, 4 0.11157119852772025, 6 0.10674028065332414, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2909,2909,"3 0.3503909026297085, 2 0.113243307273158, 1 0.10992655768775171, 0 0.10660980810234541, 4 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2910,2910,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",use stringisempty() instead of stringlength() == 0
2911,2911,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
2912,2912,"2 0.22775372775372774, 0 0.16546416546416545, 3 0.14189514189514185, 5 0.12506012506012504, 6 0.11664261664261664, 1 0.1115921115921116, 4 0.1115921115921116","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibility"
2913,2913,"1 0.7104681535061282, 2 0.05505324492666265, 3 0.04942736588306208, 5 0.047317661241711884, 0 0.04731766124171187, 4 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2914,2914,"6 0.16313932980599644, 0 0.1569664902998236, 4 0.15079365079365076, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323", strsubstitutor does not support stringbuilder or charsequence
2915,2915,"3 0.35994397759103636, 2 0.10830999066293186, 4 0.10830999066293186, 1 0.10667600373482727, 6 0.10667600373482727, 0 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2916,2916,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
2917,2917,"5 0.2701014832162373, 0 0.13166796773354147, 6 0.12984647410876918, 1 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302",4fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2918,2918,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",changing eol-style to native.misc. event utils.
2919,2919,"0 0.18571428571428567, 3 0.1838624338624338, 4 0.15238095238095234, 2 0.12089947089947092, 1 0.11904761904761907, 5 0.11904761904761907, 6 0.11904761904761907",: strbuilder.equals(strbuilder) doesnt check for null inputsadd final modifier to local variables.
2920,2920,"5 0.27460317460317457, 6 0.12830687830687829, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2921,2921,"3 0.22278911564625845, 2 0.1354875283446712, 1 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
2922,2922,"2 0.17960023515579068, 4 0.14462081128747795, 1 0.14050558495002943, 3 0.13844797178130513, 0 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
2923,2923,"3 0.19745069745069743, 6 0.18903318903318903, 4 0.14357864357864356, 0 0.12674362674362671, 2 0.12674362674362671, 1 0.10822510822510824, 5 0.10822510822510824",remove redundant type arguments.its confusing to re-use field names locallyadd final modifier to local variables.document some @suppresswarning annotationsadd serialization support to eventlistenersupport
2924,2924,"3 0.2287414965986394, 1 0.13151927437641722, 2 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
2925,2925,"0 0.28424908424908424, 4 0.156043956043956, 2 0.11672771672771672, 6 0.11330891330891332, 1 0.10989010989010989, 3 0.10989010989010989, 5 0.10989010989010989","reverting r1090111 - moving the text.translate escapers back from using range to replicating parts of the range api. see the list for details (unnecessary boxing in stringescapeutils etc), the move to range was an uncomfortable fit. "
2926,2926,"5 0.28467343221441577, 4 0.12256049960967993, 6 0.12256049960967993, 1 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2927,2927,"5 0.29563492063492064, 6 0.12896825396825393, 1 0.12028769841269842, 2 0.11855158730158731, 4 0.11334325396825398, 0 0.11160714285714286, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2928,2928,"5 0.27460317460317457, 6 0.1246031746031746, 1 0.12460317460317458, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2929,2929,"5 0.29785247432306255, 6 0.1409897292250233, 0 0.12138188608776841, 3 0.11647992530345472, 4 0.11321195144724557, 1 0.1050420168067227, 2 0.1050420168067227",adjust fastdateformat for java 7 behavior regarding format of the year pattern ().refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2930,2930,"6 0.27615222795945693, 5 0.1944922547332186, 3 0.16370242876266972, 2 0.09409064830751578, 0 0.09141327213616371, 1 0.09007458405048768, 4 0.09007458405048768","zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
2931,2931,"2 0.3927101704879482, 3 0.1389378796786204, 1 0.11013129531648046, 0 0.09229864785420341, 4 0.08955516362923771, 5 0.08818342151675486, 6 0.08818342151675486",add final modifier to local variables.crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodexamples added in javadoctabs replaced by spacesnew tests addedswap and shift for arrays
2932,2932,"3 0.36608398633715095, 6 0.11854530841872613, 0 0.11573236889692584, 2 0.11291942937512557, 5 0.10026120152702432, 1 0.09322885272252363, 4 0.09322885272252363",": fastdateformat doesnt respect summer daylight in some localized stringsmerge branch master of https://github.com/nickmanley/commons-langthis fix nullpointerexception in fastdateparser$timezonestrategyfix nullpointerexception in fastdateparser$timezonestrategyrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2933,2933,"0 0.2523809523809523, 2 0.14497354497354495, 1 0.12645502645502643, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904, 6 0.11904761904761904",adding vincent ricards patch to charrange.java providing an iterator that lets you walk the chars in the range. 454
2934,2934,"1 0.6794981465640147, 3 0.07138104742895161, 4 0.05474764756201881, 2 0.0540823115673415, 6 0.05208630358330956, 5 0.04543294363653646, 0 0.04277159965782721",add final modifier to local variables.remove redundant type arguments.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2935,2935,"5 0.2801587301587301, 6 0.12460317460317458, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2936,2936,"2 0.21088435374149656, 5 0.14540816326530606, 1 0.13151927437641722, 3 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 6 0.12755102040816327",: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2937,2937,"6 0.2894395853579527, 5 0.1692581794622611, 2 0.1658568189180434, 3 0.12277291869128602, 4 0.09216067379332683, 0 0.08195659216067377, 1 0.0785552316164561",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2938,2938,"5 0.30373230373230375, 0 0.12955812955812956, 1 0.12805662805662804, 2 0.12054912054912052, 3 0.11003861003861001, 4 0.11003861003861001, 6 0.09802659802659805","change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
2939,2939,"5 0.29560239396304966, 4 0.11891751236013531, 0 0.11709601873536299, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2940,2940,"4 0.16931216931216928, 6 0.1569664902998236, 3 0.14462081128747795, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 5 0.1322751322751323",remove redundant type arguments.
2941,2941,"4 0.1641209943096735, 5 0.15363881401617246, 2 0.14315663372267148, 0 0.1347708894878706, 1 0.1347708894878706, 3 0.1347708894878706, 6 0.1347708894878706",move private method to endannotationutils
2942,2942,"6 0.20057720057720055, 5 0.14805194805194805, 0 0.13189033189033192, 1 0.1298701298701299, 2 0.1298701298701299, 3 0.1298701298701299, 4 0.1298701298701299",allow subclass custom invocation handlingadd serialization support to eventlistenersupport
2943,2943,"2 0.17794486215538843, 4 0.17794486215538843, 3 0.13505987190197716, 6 0.13311055416318573, 0 0.12531328320802007, 1 0.12531328320802007, 5 0.12531328320802007",explicit type parameters can be removedremove redundant type arguments.
2944,2944,"6 0.35021952043228644, 3 0.24738264099966223, 5 0.09017223910840931, 0 0.07835190813914218, 2 0.07835190813914218, 4 0.07835190813914218, 1 0.07716987504221547","make sure lines in files dont have trailing white spaces and remove all trailing white spaces: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2945,2945,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
2946,2946,"3 0.3537076522151148, 2 0.11158493248045485, 6 0.10826818289504855, 0 0.1066098081023454, 1 0.1066098081023454, 4 0.1066098081023454, 5 0.1066098081023454","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2947,2947,"0 0.17997557997558, 3 0.17313797313797316, 4 0.13894993894993893, 6 0.13894993894993893, 1 0.13382173382173385, 2 0.1252747252747253, 5 0.10989010989010993","add final modifier to local variables.additional javadoc; remove illegalargumentexception from throws clauseadd hashcode and tostring methods to annotationutils, plus tests"
2948,2948,"5 0.2653439153439153, 6 0.1357142857142857, 1 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2949,2949,"2 0.22456414259692944, 3 0.1772053083528493, 1 0.12438199323445225, 4 0.12256049960967993, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
2950,2950,"6 0.1620245582509733, 4 0.1536388140161725, 3 0.14525306978137167, 0 0.13477088948787064, 1 0.13477088948787064, 2 0.13477088948787064, 5 0.13477088948787064",format to 120 line length.
2951,2951,"5 0.28521825396825395, 6 0.12896825396825393, 2 0.12375992063492061, 4 0.11855158730158731, 1 0.1168154761904762, 0 0.11507936507936509, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
2952,2952,"6 0.2397094430992736, 3 0.1380145278450363, 4 0.1380145278450363, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
2953,2953,"1 0.7175005023106287, 2 0.050833835643962204, 5 0.04942736588306209, 0 0.045911191480811735, 4 0.045911191480811735, 3 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
2954,2954,"5 0.2883164194639604, 4 0.12438199323445225, 0 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2955,2955,"5 0.2727513227513227, 6 0.12830687830687826, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2956,2956,"3 0.19786535303776678, 0 0.17487684729064035, 2 0.13081554460864805, 1 0.126984126984127, 4 0.12315270935960593, 5 0.12315270935960593, 6 0.12315270935960593",add final modifier to local variables.convert to java 5 enhanced loops. 
2957,2957,"5 0.27275132275132274, 6 0.13015873015873014, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2958,2958,"2 0.1954887218045112, 0 0.16040100250626563, 1 0.1311612364243943, 3 0.1311612364243943, 4 0.1311612364243943, 5 0.12531328320802007, 6 0.12531328320802007",[] add methods to classutils to get various forms of classnames in a null-safe manner
2959,2959,"2 0.3273521969174143, 3 0.12445364619277659, 5 0.11640211640211638, 1 0.10996089256958823, 4 0.10996089256958823, 6 0.10674028065332414, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
2960,2960,"0 0.18571428571428567, 3 0.18201058201058198, 4 0.1523809523809523, 2 0.12275132275132276, 1 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",: strbuilder.equals(strbuilder) doesnt check for null inputsadd final modifier to local variables.
2961,2961,"3 0.15079365079365076, 4 0.15079365079365076, 5 0.15079365079365076, 6 0.15079365079365076, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323",use validateistrue to validate arguments: there should be a differencebuilder with a reflectiondifferencebuilder implementation
2962,2962,"6 0.32006958034355293, 0 0.1389432485322896, 4 0.1252446183953033, 2 0.1085018482278756, 3 0.10393563818221355, 5 0.10241356816699285, 1 0.10089149815177215",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
2963,2963,"6 0.3235653235653235, 4 0.11843711843711843, 0 0.11330891330891331, 1 0.1115995115995116, 2 0.1115995115995116, 5 0.1115995115995116, 3 0.10989010989010989",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd sugar to randomiutils: new randumutils class. thanks to duncan jones
2964,2964,"6 0.2855230445591891, 5 0.2065404475043029, 3 0.1489768598202333, 2 0.09275196022183974, 0 0.0914132721361637, 1 0.08873589596481163, 4 0.08605851979345956",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2965,2965,"2 0.23270975056689333, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
2966,2966,"3 0.4246547103689961, 2 0.10142238713667283, 4 0.09709338280766852, 1 0.0970933828076685, 6 0.09420737992166563, 0 0.0927643784786642, 5 0.0927643784786642","add final modifier to local variables.format.statement unnecessarily nested within else clause.\refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2967,2967,"6 0.294194390084801, 2 0.19221569906501412, 5 0.111545988258317, 1 0.10545770819743422, 3 0.10089149815177215, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
2968,2968,"5 0.2646370023419204, 6 0.14988290398126458, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2969,2969,"0 0.16931216931216928, 3 0.15079365079365076, 4 0.1487360376249265, 2 0.13433274544385657, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
2970,2970,"4 0.3637923637923638, 0 0.13706563706563704, 2 0.11003861003861, 3 0.09802659802659804, 6 0.09802659802659804, 1 0.09652509652509654, 5 0.09652509652509654","implemented the native charsequence version of tochararrayreplacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
2971,2971,"5 0.2838624338624338, 6 0.1208994708994709, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2972,2972,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2973,2973,"5 0.25799949609473416, 6 0.17334341143864945, 1 0.11514235323759134, 0 0.11337868480725623, 2 0.11337868480725623, 3 0.11337868480725623, 4 0.11337868480725623", fastdateparser does not handle excess hours as per simpledateformattrailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2974,2974,"6 0.15659340659340654, 2 0.1544566544566544, 1 0.1394993894993895, 0 0.13736263736263735, 3 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735",fix brace positions
2975,2975,"5 0.25974025974025977, 0 0.15367965367965367, 6 0.13516113516113512, 1 0.11664261664261664, 3 0.11495911495911498, 2 0.1115921115921116, 4 0.10822510822510824",add explict default case and fastdateparser could use \q \e to quote regexestrailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2976,2976,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
2977,2977,"3 0.30527870062753787, 6 0.2561830933923957, 5 0.09726836471022515, 0 0.08564045773348102, 1 0.08564045773348102, 2 0.08564045773348102, 4 0.08434846806939832","format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezones"
2978,2978,"6 0.16202455825097328, 5 0.15154237795747227, 0 0.14734950584007186, 1 0.1347708894878706, 2 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",fastdateformat apis that use a stringbuilder
2979,2979,"4 0.2925170068027211, 3 0.16077097505668933, 6 0.12426303854875281, 1 0.11156462585034013, 2 0.1052154195011338, 0 0.10362811791383221, 5 0.10204081632653063",sort members.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)use index_not_found instead of magic number.
2980,2980,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2981,2981,"4 0.3369614512471656, 0 0.12267573696145122, 6 0.11950113378684805, 1 0.10839002267573697, 2 0.10839002267573697, 3 0.10204081632653063, 5 0.10204081632653063","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687use index_not_found instead of magic number."
2982,2982,"3 0.2758224062571889, 2 0.1486082355647573, 4 0.13572578789970094, 6 0.11801242236024843, 1 0.10996089256958824, 0 0.1083505866114562, 5 0.10351966873706007",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerformat to 120 line length.add final modifier to method parameters.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
2983,2983,"4 0.21315192743764172, 2 0.1655328798185941, 5 0.15600907029478456, 6 0.11950113378684805, 1 0.1163265306122449, 0 0.11632653061224488, 3 0.11315192743764174",sort members.applying joannes subsequent patch from making appendifmissing use the same logic for null as endswith (by reusing endswith). applying joanne polskys patch adding appendifmissing/prependifmissing methods to stringutils []
2984,2984,"3 0.21067821067821063, 1 0.13593073593073596, 2 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
2985,2985,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
2986,2986,"6 0.27824463118580767, 0 0.15079365079365076, 4 0.13281979458450044, 2 0.11321195144724559, 5 0.11321195144724559, 1 0.10667600373482727, 3 0.1050420168067227",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spaces
2987,2987,"5 0.2864949258391881, 4 0.12620348685922456, 0 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2988,2988,"4 0.15783168613357293, 0 0.15363881401617252, 6 0.14944594189877208, 1 0.13477088948787067, 2 0.13477088948787067, 3 0.13477088948787067, 5 0.13477088948787067",use concurrent instead of synchronization; javadoc
2989,2989,"5 0.26463700234192034, 6 0.14623991673171996, 1 0.12073900598490762, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 4 0.11709601873536299",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
2990,2990,"5 0.27210884353741494, 4 0.13630637440161245, 3 0.12925170068027209, 0 0.11866969009826156, 1 0.11690602166792645, 2 0.11337868480725626, 6 0.11337868480725626",change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2991,2991,"5 0.2883164194639604, 4 0.12256049960967991, 1 0.11891751236013531, 6 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
2992,2992,"3 0.35370765221511485, 2 0.10992655768775172, 1 0.10826818289504858, 6 0.10826818289504858, 0 0.10660980810234542, 4 0.10660980810234542, 5 0.10660980810234542","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
2993,2993,"3 0.22660098522167488, 6 0.1403940886699507, 0 0.13273125342090863, 1 0.13081554460864808, 2 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","tab alignment[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
2994,2994,"6 0.282010582010582, 2 0.12275132275132275, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
2995,2995,"2 0.21397649969078542, 0 0.20531849103277677, 3 0.17068645640074212, 1 0.11008039579468151, 6 0.1071943929086786, 4 0.09709338280766855, 5 0.09565038136466711","[] org.apache.commons.lang3.systemutils should not write tosystem.err.add final modifier to local variables.- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
2996,2996,"6 0.2683191998260491, 4 0.1465535986083931, 3 0.1435094585779517, 2 0.1313328984561861, 0 0.10697977821265492, 1 0.10545770819743422, 5 0.09784735812133075",remove add and set methods of exceptioncontext types taking a pair. format entries with index. improve javadoc. add serialization test.refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
2997,2997,"4 0.2572665429808287, 3 0.17645846217274785, 0 0.1273964131106988, 2 0.11729540300968869, 6 0.11585240156668725, 1 0.11296639868068437, 5 0.0927643784786642",replaces size() == 0 and length() == 0 with isempty()[github] commons-lang pull request : intellij idea refactorings..remove redundant type arguments.add final modifier to local variables.eat own dog food: stringutilsisempty(string) and replace some but not all stringlength() == 0 with stringisempty()use concurrent instead of synchronization; javadoc
2998,2998,"6 0.20935960591133002, 4 0.15763546798029554, 2 0.13656267104542966, 1 0.126984126984127, 0 0.12315270935960593, 3 0.12315270935960593, 5 0.12315270935960593",checkstyle: remove trailing white spaces on all lines.sort by method name.
2999,2999,"5 0.2647907647907648, 0 0.15367965367965367, 6 0.13347763347763344, 2 0.11495911495911498, 1 0.1132756132756133, 3 0.1115921115921116, 4 0.10822510822510824",add explict default case and fastdateparser could use \q \e to quote regexestrailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3000,3000,"0 0.30063965884861404, 2 0.14475242833451785, 5 0.12153518123667374, 1 0.10992655768775174, 3 0.10992655768775174, 4 0.10660980810234542, 6 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.use lowercase presentation for hex values as it is done in the jdk.use jdk functionality where available.: add conversion utility to convert between data types on byte level
3001,3001,"6 0.17460317460317457, 3 0.16349206349206347, 0 0.15238095238095234, 4 0.15238095238095234, 1 0.11904761904761907, 2 0.11904761904761907, 5 0.11904761904761907",remove redundant type arguments.format.tab police: fastdateparser could use calendar.getdisplaynames for all text fields
3002,3002,"3 0.2066378066378066, 2 0.13997113997114, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
3003,3003,"3 0.20259740259740258, 2 0.14805194805194805, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3004,3004,"4 0.7430044182621504, 5 0.049991818033055135, 0 0.04483717885779741, 2 0.042546228113238424, 1 0.04140075274095892, 6 0.03968253968253968, 3 0.038537064310260195","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687use index_not_found instead of magic number.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
3005,3005,"4 0.17209690893901416, 1 0.15650236702868278, 0 0.15455304928989133, 2 0.1409078251183514, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",[github] commons-lang pull request : intellij idea refactorings..
3006,3006,"2 0.1743145743145743, 1 0.14805194805194802, 3 0.144011544011544, 5 0.13997113997114002, 4 0.13391053391053392, 0 0.12987012987012989, 6 0.12987012987012989","adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
3007,3007,"6 0.28445452254976067, 2 0.14512471655328796, 1 0.11690602166792645, 0 0.11337868480725626, 3 0.11337868480725626, 4 0.11337868480725626, 5 0.11337868480725626",make sure lines in files dont have trailing white spaces and remove all trailing white spaces: recursive and reflective equalsbuilder ()patch by yathos ug
3008,3008,"6 0.4187732706251225, 4 0.11287477954144617, 5 0.10601606897903192, 3 0.09778561630413479, 0 0.08818342151675486, 1 0.08818342151675486, 2 0.08818342151675486","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of week"
3009,3009,"2 0.23313492063492064, 0 0.15674603174603172, 6 0.13244047619047616, 1 0.12723214285714285, 3 0.12723214285714282, 4 0.11160714285714288, 5 0.11160714285714288","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
3010,3010,"3 0.22675736961451243, 1 0.13151927437641722, 2 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
3011,3011,"2 0.16412099430967353, 6 0.1536388140161725, 1 0.14315663372267148, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",: recursive and reflective equalsbuilder ()patch by yathos ug
3012,3012,"6 0.21067821067821063, 3 0.13997113997114, 0 0.12987012987012986, 1 0.12987012987012986, 2 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986",removes redundant + signpmd: remove useless parentheses
3013,3013,"2 0.19249639249639244, 1 0.14199134199134197, 4 0.13997113997114, 3 0.13593073593073596, 0 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",added escape/unescapejson methods per maurizio cucchiaras patch in 797
3014,3014,"4 0.16931216931216925, 3 0.16108171663727217, 2 0.13639035861258084, 6 0.13639035861258084, 0 0.1322751322751323, 1 0.1322751322751323, 5 0.1322751322751323",use final consistently. [] new type util features
3015,3015,"4 0.2189381499726327, 0 0.16338259441707714, 6 0.12506841817186645, 1 0.12315270935960593, 2 0.12315270935960593, 3 0.12315270935960593, 5 0.12315270935960593", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()[] new type util features
3016,3016,"6 0.20294784580498865, 3 0.1414399092970521, 5 0.13945578231292513, 4 0.13151927437641725, 2 0.12953514739229027, 0 0.1275510204081633, 1 0.1275510204081633"," partial: implement format u for fastdateformat, day number of week"
3017,3017,"3 0.20769437718590253, 6 0.16061339790153345, 2 0.13424804950228678, 0 0.13236481033091202, 1 0.12294861447403821, 4 0.12106537530266344, 5 0.12106537530266344",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
3018,3018,"2 0.243966079582518, 0 0.15111980865405522, 6 0.14655359860839312, 1 0.11915633833442053, 4 0.11763426831919983, 3 0.11154598825831703, 5 0.11002391824309633","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.fix javadoc bug; improve implementation and tests[] removed unnecessary elses and use of ternary operator with primitive boolean consequences e.g. (some boolean expression) ? true : false"
3019,3019,"0 0.17582417582417575, 1 0.13736263736263735, 2 0.13736263736263735, 3 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735", use iod for stripaccent init
3020,3020,"5 0.2864949258391881, 0 0.12256049960967993, 4 0.12256049960967993, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3021,3021,"3 0.1672771672771672, 2 0.1459096459096459, 0 0.13736263736263735, 1 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",: added validstate()
3022,3022,"2 0.24427952999381572, 4 0.19088847660276234, 0 0.14038342609771182, 3 0.12306740878169448, 5 0.10575139146567716, 1 0.09997938569367142, 6 0.0956503813646671","sort members.make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: stringutilsisanyempty and isanyblank should return false for an empty array (): add stringutilsisanynotempty and isanynotblank ()use final consistently. applying alexander muthmanns patch from , adding isblank/isempty charsequence... variants"
3023,3023,"5 0.2783068783068783, 6 0.12460317460317458, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3024,3024,"1 0.7125778581474784, 2 0.05435001004621257, 3 0.047317661241711884, 4 0.047317661241711884, 5 0.047317661241711884, 0 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3025,3025,"2 0.25971934667586843, 3 0.1566597653554175, 6 0.13250517598343683, 1 0.12767425810904068, 4 0.11318150448585233, 0 0.10674028065332414, 5 0.10351966873706006","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.add final modifier to local variables.[] add booleanutils.and/or varargs methods to complement xor"
3026,3026,"3 0.34067460317460324, 6 0.2003968253968254, 2 0.09623015873015875, 1 0.09206349206349208, 4 0.09206349206349208, 0 0.0892857142857143, 5 0.0892857142857143","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove unused constructor parameterformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesrename textstrategy to caseinsensitivetextstrategy per sebbs suggestion"
3027,3027,"4 0.2985638699924414, 6 0.12219702695893171, 0 0.1204333585285966, 1 0.11690602166792644, 2 0.11514235323759134, 3 0.11337868480725623, 5 0.11337868480725623","sort members.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classmoving countmatches, ordinalindexof and lastordinalindexof over to a charsequence-based api. 687"
3028,3028,"3 0.23469387755102036, 0 0.12755102040816327, 1 0.12755102040816327, 2 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.incorporated feedback from peteradd threadutils
3029,3029,"4 0.2985734378139442, 0 0.16073940124573036, 2 0.12839059674502712, 1 0.10870002009242515, 6 0.107293550331525, 5 0.10307414104882458, 3 0.09322885272252363","[] add null-safe stringutils apis to wrapstringgetbytes([charset|string]).</action>sort members.: bring static method references in stringutils to consistent style. thanks to alex yurshaadding stringutils.defaultifblank(string, string). requested by adam dyga, patch from nicklas holm. 655"
3030,3030,"3 0.3697742007601162, 5 0.11468812877263576, 0 0.1037335121842164, 1 0.1037335121842164, 2 0.1037335121842164, 6 0.1037335121842164, 4 0.10060362173038229","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezonesrestore binary compartibility"
3031,3031,"4 0.18445539135194308, 0 0.16721401204159825, 6 0.13656267104542968, 3 0.13464696223316913, 5 0.13081554460864808, 1 0.12315270935960596, 2 0.12315270935960596","[] create strbuilder apis similar to string.format(string, object...)"
3032,3032,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3033,3033,"6 0.24743230625583568, 0 0.19122315592903827, 4 0.15723622782446312, 2 0.13893557422969185, 3 0.09187675070028012, 1 0.08926237161531281, 5 0.08403361344537817",": numberutils.isnumber assumes number starting with zero is octal ()make sure lines in files dont have trailing white spaces and remove all trailing white spacespmd: remove useless parentheses: replacing system call for java 1.6 to systemutils.is_java_1_6: cleaning up checkstyle warnings: whitespace, line length: better naming and java 6 specifics around handling a leading +"
3034,3034,"2 0.307997557997558, 0 0.17658730158730157, 3 0.1509462759462759, 6 0.121031746031746, 4 0.09432234432234429, 1 0.07722832722832722, 5 0.0718864468864469","remove redundant modifiers (support recent checkstyle versions) ()add final modifier to local variables.use try-with-resources.formating.<action issue="""" type=""add"" dev=""ggregory"">add serializationutils.roundtrip(t extends serializable) to serialize then deserialize</action>add final modifier to local variables.suppress generic warningapplying sven ludwigs patch from . this modifies the serializationutils.clone method to use the threadcontextloader if it is unable to find a class using the objects current classloader. this should (hopefully) help with weblogic and tomcat situations where lang is outside the web-inf for some reason (likely user error with tomcat, by design for weblogic)"
3035,3035,"2 0.30857898715041576, 6 0.1961451247165533, 3 0.1167800453514739, 1 0.10487528344671199, 0 0.10090702947845802, 4 0.08767951625094485, 5 0.0850340136054422",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.new test caseexplanations about algorithmtabs replaced by spacesnew tests addedswap and shift for arrays
3036,3036,"6 0.28366615463389655, 5 0.14029697900665639, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
3037,3037,"4 0.20259740259740258, 3 0.14805194805194802, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",eat own dog food: stringutilsisempty(string) and replace some but not all stringlength() == 0 with stringisempty()
3038,3038,"5 0.28015873015873005, 1 0.12275132275132275, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3039,3039,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
3040,3040,"3 0.36712018140589564, 0 0.10997732426303856, 6 0.10997732426303856, 2 0.1052154195011338, 1 0.1036281179138322, 4 0.10204081632653061, 5 0.10204081632653061","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezones"
3041,3041,"3 0.22477324263038542, 1 0.1354875283446712, 2 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
3042,3042,"3 0.20259740259740258, 2 0.14805194805194802, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3043,3043,"4 0.21904761904761905, 2 0.13941798941798939, 6 0.13941798941798939, 3 0.13201058201058202, 0 0.13015873015873017, 1 0.12089947089947094, 5 0.11904761904761907","removing the unnecessary sequencetostring methodmoving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
3044,3044,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3045,3045,"6 0.1651969429747207, 0 0.1569664902998236, 5 0.1487360376249265, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323",4fastdateformat apis that use a stringbuilderrefactor some duplicate code.
3046,3046,"3 0.23057644110275682, 0 0.1428571428571428, 1 0.12531328320802007, 2 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",validationadd final modifier to local variables.[] vastly expanded typeutils
3047,3047,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3048,3048,"3 0.20259740259740255, 2 0.13997113997114, 1 0.13795093795093796, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
3049,3049,"6 0.2962423064463881, 5 0.1658568189180434, 2 0.16472303206997083, 3 0.12504049238743115, 4 0.08762552640103659, 0 0.08535795270489148, 1 0.07515387107223843",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3050,3050,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3051,3051,"3 0.20057720057720052, 2 0.14805194805194805, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3052,3052,"0 0.17120181405895687, 2 0.15334467120181403, 6 0.14739229024943307, 4 0.14342403628117914, 3 0.12953514739229027, 1 0.1275510204081633, 5 0.1275510204081633",extract some helper methods to make the code better readable
3053,3053,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3054,3054,"4 0.18964076858813703, 2 0.14480646059593427, 0 0.14285714285714285, 1 0.13895850737956003, 6 0.12921191868560292, 5 0.1292119186856029, 3 0.1253132832080201",simplify code; javadocformattingmoving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils class
3055,3055,"4 0.28709454796411316, 3 0.1663216011042098, 6 0.11801242236024842, 2 0.11318150448585233, 1 0.10674028065332414, 0 0.1051299746951921, 5 0.10351966873706006",add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)eat own dog food: call stringutils.isempty().
3056,3056,"3 0.21198156682027647, 0 0.17793138760880695, 6 0.1474654377880184, 2 0.11699948796722992, 1 0.11520737327188942, 4 0.11520737327188942, 5 0.11520737327188942", fastdateparser could use calendar.getdisplaynames for all text fieldsremove unnecessary keyvalue instances: fastdateparser could use calendar.getdisplaynames for all text fields
3057,3057,"0 0.17487684729064037, 2 0.16338259441707717, 4 0.14805692391899286, 6 0.14039408866995073, 1 0.12698412698412703, 3 0.12315270935960596, 5 0.12315270935960596",: new methods for lang3.validate ()fixed method names; fixed differentobject to use object.equals
3058,3058,"3 0.38365079365079363, 6 0.18698412698412695, 0 0.13031746031746028, 2 0.08253968253968251, 1 0.07253968253968254, 4 0.07253968253968254, 5 0.07142857142857142","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove unused constructor parameterformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesrename textstrategy to caseinsensitivetextstrategy per sebbs suggestion[] use the cache in fastdateparser correctly.add final modifier to local variables.tab police fastdateparser could use calendar.getdisplaynames for all text fieldsremove unnecessary keyvalue instances: fastdateparser could use calendar.getdisplaynames for all text fields"
3059,3059,"6 0.2397094430992736, 3 0.1380145278450363, 4 0.1380145278450363, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
3060,3060,"2 0.19403393541324576, 0 0.15763546798029554, 4 0.15571975916803502, 1 0.12315270935960594, 3 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594",extract logic for checking string representation of objects into separate methods
3061,3061,"3 0.20663780663780662, 2 0.14401154401154395, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3062,3062,"2 0.23139880952380953, 3 0.20362103174603172, 1 0.1185515873015873, 0 0.11160714285714288, 4 0.11160714285714288, 5 0.11160714285714288, 6 0.11160714285714288",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.fixing crlfsstatement unnecessarily nested within else clause.add threadutils
3063,3063,"2 0.2161531279178338, 0 0.17857142857142858, 3 0.17040149393090567, 6 0.11321195144724558, 1 0.11157796451914101, 4 0.10504201680672272, 5 0.10504201680672272",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.prevent redundant modifiersadd final modifier to local variables. extendedmessageformat doesnt override equals(object)
3064,3064,"0 0.20743639921722115, 2 0.1632963687758208, 3 0.157208088714938, 6 0.1404653185475103, 4 0.1191563383344205, 1 0.11459012828875842, 5 0.09784735812133075",add missing since tags for strsubstitutor; wrap lines longer than 80 chars[] strsubstitutor now supports the declaration of default values for the variables to be replaced. thanks to woonsan ko for the patch.add final modifier to method parameters.fix raw types
3065,3065,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
3066,3066,"2 0.3643892339544514, 1 0.11801242236024842, 0 0.10351966873706006, 3 0.10351966873706006, 4 0.10351966873706006, 5 0.10351966873706006, 6 0.10351966873706006",crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodswap and shift for arrays
3067,3067,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",validation[] new type util features
3068,3068,"1 0.6788328105693375, 3 0.0693850394449197, 4 0.057408991540728066, 2 0.054082311567341515, 6 0.052086303583309575, 5 0.04476760764185916, 0 0.04343693565250453",add final modifier to local variables.remove redundant type arguments.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3069,3069,"3 0.3900848010437052, 2 0.10850184822787562, 6 0.10241356816699285, 1 0.10241356816699282, 4 0.10089149815177215, 0 0.09784735812133075, 5 0.09784735812133075","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3070,3070,"5 0.2783068783068782, 1 0.12275132275132275, 6 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3071,3071,"2 0.2523809523809524, 6 0.14497354497354495, 3 0.12460317460317462, 1 0.12089947089947092, 0 0.11904761904761907, 4 0.11904761904761907, 5 0.11904761904761907","make sure placement of curly braces is consistent: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
3072,3072,"3 0.38862724577010294, 6 0.2042560613989185, 5 0.08581894296180011, 2 0.08215593929879644, 0 0.079713936856794, 1 0.079713936856794, 4 0.079713936856794","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.: fastdateformat doesnt respect summer daylight in some localized stringsrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesuse final consistently. tab policeremove keyvalues map per sebbs suggestion"
3073,3073,"4 0.20332577475434616, 3 0.1751070798689846, 2 0.14865205341395815, 0 0.12572436381960192, 1 0.11690602166792645, 6 0.11690602166792645, 5 0.11337868480725624",sort members.extract method.add final modifier to local variables.[] stringutils join apis for primitives.
3074,3074,"2 0.28103378103378107, 3 0.15282865282865282, 6 0.13003663003663002, 0 0.12433862433862433, 4 0.1115181115181115, 1 0.10866910866910866, 5 0.0915750915750916","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.add final modifier to local variables.ws[] add booleanutils.and/or varargs methods to complement xor[] removed unnecessary elses and use of ternary operator with primitive boolean consequences e.g. (some boolean expression) ? true : false"
3075,3075,"4 0.16931216931216925, 6 0.1631393298059964, 3 0.1384479717813051, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 5 0.1322751322751323",remove redundant type arguments.
3076,3076,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",statements unnecessarily nested within else clause.
3077,3077,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3078,3078,"0 0.20535714285714285, 3 0.1706349206349206, 2 0.14285714285714282, 6 0.12723214285714282, 4 0.12549603174603174, 1 0.11681547619047622, 5 0.11160714285714288","add final modifier to local variables.[] introduced concurrentruntimeexception and extended the exception handling methods of concurrentutils to support runtime exceptions, too."
3079,3079,"4 0.2496947496947497, 3 0.1642246642246642, 0 0.16137566137566134, 2 0.12718762718762716, 6 0.10724460724460722, 1 0.09869759869759871, 5 0.09157509157509158","sort members and clean up comments.use final.use foreach loop for arrays ()since the project no longer supports java versions older than 6, itssafe to use the enhanced for loop syntax introduced in java 5.this patch employs this syntax where possible to clean up the code.add final modifier to local variables."
3080,3080,"5 0.291959406713505, 0 0.12073900598490764, 1 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3081,3081,"0 0.24642206609419726, 2 0.1353109549830861, 1 0.13348946135831377, 3 0.12802498048399688, 4 0.12256049960967996, 5 0.11709601873536302, 6 0.11709601873536302",: update java requirement from java 6 to 7replace usage of deprecated objectutilshashcode with objectshashcode extendedmessageformat doesnt override equals(object)
3082,3082,"6 0.17250673854447435, 5 0.14315663372267146, 4 0.14106019766397127, 0 0.13896376160527107, 1 0.1347708894878706, 2 0.1347708894878706, 3 0.1347708894878706",[] retrieve class hierarchy
3083,3083,"6 0.28261266192300677, 5 0.2174785623061485, 3 0.13701879219120597, 1 0.09870461594599522, 2 0.09104178069695314, 0 0.08976464148877943, 4 0.08337894544791098",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.[] fastdateformat generates date objects wastefully.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3084,3084,"2 0.19262846381490448, 3 0.18321226795803064, 5 0.13048157115953724, 0 0.12483185364541298, 1 0.12483185364541298, 4 0.12294861447403822, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
3085,3085,"5 0.2883164194639604, 4 0.12256049960967993, 0 0.11891751236013531, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3086,3086,"0 0.3370681605975724, 2 0.1279178338001867, 6 0.111577964519141, 1 0.10830999066293186, 3 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227"," - followup incorporating ggregorys doc suggestion, some doc fixes, addition of const_byte() and const_short(), and junit improvements to test doc examples and make sure const_byte() and const_short() throw illegalargumentexception as required."
3087,3087,"3 0.30743525480367584, 6 0.2109440267335004, 2 0.10275689223057644, 1 0.09690893901420218, 0 0.09398496240601505, 4 0.09398496240601505, 5 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spacesrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3088,3088,"0 0.33713624338624343, 4 0.15079365079365079, 3 0.1079695767195767, 6 0.10681216931216929, 1 0.10449735449735448, 2 0.10333994708994707, 5 0.08945105820105818","revert ; java7 has synthetic fields on integer, jacoco does not yet work with java9: fieldutils should ignore any synthetic fields[github] commons-lang pull request : intellij idea refactorings..remove redundant type arguments.use final consistently. a bit of dog food and a lot of javadoc tweakage[] add fieldutils getallfields() to return all the fields defined in the given class and super classes. alternate impl that splits into two apis, one with an array result, the other with a list."
3089,3089,"4 0.22638563622170177, 0 0.15170439760603693, 2 0.1371324486078584, 3 0.12802498048399688, 1 0.12256049960967996, 5 0.117096018735363, 6 0.117096018735363",: add zero copy write method to strbuilder; : add zero copy read method to strbuilder. thanks to mikhail mazursky.
3090,3090,"0 0.2468368990108121, 6 0.14699792960662525, 4 0.12606395215090868, 5 0.12284334023464459, 1 0.12284334023464458, 3 0.11801242236024843, 2 0.11640211640211641",: implementation of a memomizer ()changes suggested in https://github.com/apache/commons-lang/pull/80:- tabs to spaces- use @override- remove unused variables- other minimal clean-ups: implementation of a memomizer ()
3091,3091,"4 0.1715506715506715, 2 0.14163614163614166, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",validation[] new type util features
3092,3092,"0 0.167254556143445, 2 0.15285126396237503, 4 0.15079365079365079, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
3093,3093,"3 0.15363881401617246, 4 0.15363881401617246, 6 0.15363881401617246, 0 0.1347708894878706, 1 0.1347708894878706, 2 0.1347708894878706, 5 0.1347708894878706",use validateistrue to validate arguments
3094,3094,"3 0.2066378066378066, 2 0.13795093795093796, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
3095,3095,"4 0.18697874630078018, 6 0.15873015873015872, 3 0.1380145278450363, 5 0.13613128867366153, 0 0.1342480495022868, 1 0.124831853645413, 2 0.12106537530266347",removing charsequenceutils in favour of putting the code in stringutilsadding shashi kant sharmas implementation of endswithany - 614
3096,3096,"2 0.19353940406571982, 0 0.16235032024505702, 4 0.13505987190197713, 3 0.1311612364243943, 1 0.1272626009468115, 5 0.12531328320802007, 6 0.12531328320802007",[] add methods to classutils to get various forms of classnames in a null-safe manner
3097,3097,"2 0.30828074201568184, 0 0.14228341939185316, 3 0.13558997896347297, 6 0.12220309810671257, 4 0.10613884107860011, 1 0.09944540065021992, 5 0.08605851979345959","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter. - booleanutils.xor(boolean...) produces wrong resultsadd final modifier to local variables.ws[] add booleanutils.and/or varargs methods to complement xor[] removed unnecessary elses and use of ternary operator with primitive boolean consequences e.g. (some boolean expression) ? true : false"
3098,3098,"2 0.31608005521049, 3 0.13089487002530478, 1 0.11640211640211638, 5 0.11479181044398434, 4 0.10996089256958823, 6 0.10835058661145619, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3099,3099,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
3100,3100,"3 0.34145441122185316, 2 0.18770764119601333, 4 0.1050203026947213, 6 0.10243632336655592, 0 0.0946843853820598, 1 0.08564045773348103, 5 0.08305647840531565","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.dont need a copy of this field.add final modifier to local variables.remove redundant type arguments.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3101,3101,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",reusestatements unnecessarily nested within else clause.
3102,3102,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3103,3103,"5 0.26904761904761904, 6 0.12830687830687829, 1 0.12645502645502646, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3104,3104,"4 0.6861319966583125, 0 0.0720969089390142, 3 0.06040100250626566, 5 0.052213868003341685, 2 0.044611528822055144, 1 0.04285714285714286, 6 0.041687552213868","add final modifier to local variables.https://issues.apache.org/jira/browse/ stringutils methods do not handle unicode 2.0+ supplementary characters correctly.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
3105,3105,"3 0.18845598845598843, 2 0.16017316017316013, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3106,3106,"3 0.19353940406571982, 4 0.16040100250626563, 2 0.14090782511835143, 1 0.1292119186856029, 0 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",sort members.add final modifier to local variables.
3107,3107,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",reusestatements unnecessarily nested within else clause.
3108,3108,"4 0.20361247947454839, 0 0.1767925561029009, 2 0.126984126984127, 1 0.12315270935960593, 3 0.12315270935960593, 5 0.12315270935960593, 6 0.12315270935960593",dropping the concat methods. moving the join(object[]) to join(object...). . . 
3109,3109,"3 0.2456538170823885, 4 0.14512471655328796, 6 0.13807004283194754, 5 0.12396069538926684, 2 0.12043335852859664, 0 0.11337868480725626, 1 0.11337868480725626",add final modifier to local variables.remove redundant type arguments.: fastdateformat doesnt respect summer daylight in some localized strings
3110,3110,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
3111,3111,"6 0.22660098522167485, 0 0.1346469622331691, 2 0.1346469622331691, 3 0.12889983579638753, 4 0.12889983579638753, 1 0.12315270935960593, 5 0.12315270935960593","added missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
3112,3112,"4 0.178796046720575, 6 0.14525306978137167, 0 0.13686732554657086, 1 0.1347708894878706, 2 0.1347708894878706, 3 0.1347708894878706, 5 0.1347708894878706",use index_not_found instead of magic number.
3113,3113,"2 0.3043240284619595, 4 0.18555008210180626, 3 0.13701879219120597, 6 0.12169312169312167, 0 0.08593322386425836, 5 0.08337894544791098, 1 0.0821018062397373","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.remove redundant type arguments.crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.reverting ""generification"" of tomap() method in arrayutils.generifying tomap() method (adding in possibility for type inference on return type)."
3114,3114,"2 0.30802852541982984, 3 0.1453876236484932, 5 0.11640211640211641, 1 0.11157119852772027, 6 0.10835058661145618, 4 0.10674028065332415, 0 0.10351966873706007",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3115,3115,"2 0.3385487528344671, 4 0.13219954648526075, 0 0.11791383219954645, 1 0.1052154195011338, 3 0.10204081632653061, 5 0.10204081632653061, 6 0.10204081632653061",": arrayutils.removeall(object array, int... indices) should do the clone, not its callers ()crlf -> lfjavadoc: fix typo but working is still awkward.[] complement arrayutils.addall() variants with by-index and by-value removal methods"
3116,3116,"2 0.2671201814058957, 3 0.1956916099773242, 6 0.1226757369614512, 0 0.10839002267573696, 1 0.10204081632653061, 4 0.10204081632653061, 5 0.10204081632653061",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateparser too strict on abbreviated short month symbolsadd final modifier to local variables.format. fastdateparser_timezonestrategytesttesttimezonestrategypattern fails on windows with german localereimplementing 1107
3117,3117,"2 0.2267573696145124, 1 0.13151927437641722, 4 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3118,3118,"4 0.33101045296167253, 3 0.13859852884243126, 2 0.11962833914053425, 0 0.11420828493999224, 6 0.10607820363917923, 1 0.10336817653890823, 5 0.08710801393728225","sort members.add final modifier to local variables.[] stringutils join with var args. add and use space string constant for "" "".rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
3119,3119,"5 0.25518925518925517, 3 0.17142857142857137, 2 0.12356532356532357, 6 0.11672771672771674, 1 0.11330891330891332, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3120,3120,"5 0.27645502645502645, 6 0.12830687830687829, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3121,3121,"3 0.39087301587301587, 2 0.11000881834215166, 1 0.10229276895943563, 0 0.09920634920634921, 4 0.09920634920634921, 5 0.09920634920634921, 6 0.09920634920634921","add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3122,3122,"5 0.27460317460317457, 1 0.12645502645502646, 6 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3123,3123,"5 0.25518925518925517, 3 0.17313797313797308, 2 0.12185592185592187, 1 0.11501831501831503, 6 0.11501831501831503, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3124,3124,"2 0.2722007722007722, 3 0.15057915057915056, 6 0.13706563706563704, 0 0.13406263406263402, 4 0.10853710853710853, 1 0.10102960102960105, 5 0.09652509652509654",: add arrayutilstostringarray(object[]) methodpatch supplied by igadd final modifier to local variables.remove trailing whitespacescrlf -> lfjavadoc: fix typo but working is still awkward.implements : add a method to arrayutils for removing all occurrences of a given element. thanks to haiyang li.
3125,3125,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3126,3126,"0 0.17599554441659698, 4 0.17209690893901416, 1 0.14480646059593424, 2 0.1311612364243943, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",provide simple method to wrap a given type to the typed interface
3127,3127,"3 0.29365079365079366, 6 0.14765596160944996, 0 0.13732004429678846, 4 0.11923218899963084, 2 0.11794019933554815, 1 0.09985234403839052, 5 0.08434846806939832","refactor ""gmt"" magic string.add a default case to switch to appease findbugs: nullpointerexception in fastdateparser$timezonestrategy ()replicate the fix for 1186add final modifier to local variables.remove redundant type arguments. fastdateparser_timezonestrategytesttesttimezonestrategypattern fails on windows with german localereimplementing 1107 fix parsing edge cases in fastdateparserrevert muddled commit - number percentage formatting with fractional digits fastdateparser error - timezones not handled correctly"
3128,3128,"0 0.22276029055690072, 4 0.13989776701641105, 6 0.1380145278450363, 3 0.13613128867366156, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
3129,3129,"6 0.25805675805675804, 3 0.14021164021164018, 0 0.13516113516113512, 2 0.12674362674362671, 4 0.12337662337662335, 1 0.10822510822510824, 5 0.10822510822510824","make sure lines in files dont have trailing white spaces and remove all trailing white spacesfixing crlfsstatement unnecessarily nested within else clause.: numberutilscreatenumber - bad behaviour for leading ""--"" "
3130,3130,"0 0.16164021164021158, 2 0.1542328042328042, 3 0.15052910052910048, 4 0.14867724867724866, 1 0.13756613756613756, 5 0.12645502645502646, 6 0.12089947089947092",use 1.5 method for determining inner class-ness; null safety is really the only remaining advantage of isinnerclass. this goes nicely with r919340
3131,3131,"3 0.20769437718590256, 6 0.15496368038740915, 0 0.13801452784503632, 2 0.13424804950228678, 1 0.12294861447403822, 4 0.12106537530266345, 5 0.12106537530266345",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
3132,3132,"5 0.2883164194639604, 6 0.12073900598490762, 0 0.11891751236013531, 1 0.11891751236013531, 4 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3133,3133,"3 0.2066378066378066, 2 0.13997113997114, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
3134,3134,"0 0.1459096459096459, 2 0.14590964590964586, 1 0.14377289377289376, 3 0.14377289377289376, 4 0.14377289377289376, 5 0.1394993894993895, 6 0.13736263736263735",[] added constantinitializer class
3135,3135,"5 0.2883164194639604, 1 0.12073900598490762, 0 0.11891751236013531, 4 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3136,3136,"4 0.19312169312169308, 3 0.18386243386243384, 2 0.13386243386243385, 6 0.12645502645502646, 1 0.12460317460317462, 0 0.11904761904761907, 5 0.11904761904761907",sort members.add final modifier to local variables.use index_not_found instead of magic number.
3137,3137,"0 0.19098009574200045, 3 0.18745275888133026, 2 0.14159737969261776, 4 0.12748803224993702, 1 0.12219702695893173, 5 0.11690602166792644, 6 0.11337868480725624",: added methods to objectutils class to check for null elements in the array ()add final modifier to local variables.
3138,3138,"2 0.2157738095238095, 0 0.14112103174603172, 5 0.13417658730158727, 3 0.13244047619047616, 4 0.12896825396825393, 6 0.12723214285714282, 1 0.12028769841269843", - jsontostringstyle does not escape string namesjsontostringstyle: improve private constant name and remove wrong comment: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3139,3139,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3140,3140,"3 0.33370247323735697, 2 0.1941675895164267, 4 0.10631229235880396, 6 0.10114433370247321, 0 0.09468438538205977, 1 0.0869324473975637, 5 0.08305647840531563","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.dont need a copy of this field.add final modifier to local variables.remove redundant type arguments.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3141,3141,"6 0.20294784580498862, 3 0.14143990929705214, 5 0.13945578231292516, 4 0.13151927437641722, 2 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
3142,3142,"6 0.2318501170960187, 2 0.16627634660421542, 4 0.1298464741087692, 0 0.11891751236013534, 1 0.11891751236013534, 3 0.117096018735363, 5 0.117096018735363",fix defaultexceptioncontext.addvalue that overwrites information in a recursive situation (). allow explicit replacement of a label with the new replacevalue methods.
3143,3143,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",validation[] new type util features
3144,3144,"3 0.3664799253034547, 1 0.10667600373482727, 2 0.10667600373482727, 0 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227, 6 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3145,3145,"4 0.26904761904761904, 6 0.13571428571428568, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
3146,3146,"2 0.22477324263038542, 4 0.1354875283446712, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3147,3147,"6 0.17835497835497832, 2 0.15209235209235208, 0 0.15007215007215005, 1 0.1298701298701299, 3 0.1298701298701299, 4 0.1298701298701299, 5 0.1298701298701299",javdoc and minor tweaks to contexted exception
3148,3148,"2 0.22874149659863938, 4 0.13151927437641722, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3149,3149,"0 0.2962301587301588, 2 0.18095238095238098, 4 0.14484126984126983, 1 0.1003968253968254, 6 0.09484126984126987, 5 0.09345238095238095, 3 0.0892857142857143","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.reverting r1090111 - moving the text.translate escapers back from using range to replicating parts of the range api. see the list for details (unnecessary boxing in stringescapeutils etc), the move to range was an uncomfortable fit. moving text translation classes to the range class for its configuration"
3150,3150,"1 0.7097649186256781, 2 0.05083383564396224, 5 0.050130600763512154, 3 0.04942736588306208, 4 0.047317661241711884, 0 0.04731766124171187, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3151,3151,"5 0.28348214285714285, 6 0.12896825396825393, 2 0.12375992063492063, 4 0.12375992063492063, 1 0.11681547619047622, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3152,3152,"6 0.18371546149323922, 5 0.15079365079365076, 0 0.13639035861258084, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323", fastdateparser does not handle non-gregorian calendars properly 
3153,3153,"3 0.31359931359931364, 5 0.14443014443014443, 6 0.13041613041613043, 0 0.11640211640211638, 2 0.10439010439010436, 1 0.09738309738309736, 4 0.09337909337909336","refactor ""gmt"" magic string.add a default case to switch to appease findbugs: nullpointerexception in fastdateparser$timezonestrategy ()replicate the fix for 1186add final modifier to local variables.remove redundant type arguments. fastdateparser_timezonestrategytesttesttimezonestrategypattern fails on windows with german localereimplementing 1107 fix parsing edge cases in fastdateparserrevert muddled commit - number percentage formatting with fractional digits fastdateparser error - timezones not handled correctlyuse final consistently. : test failure in fastdateparsertest and fastdateformat_parsertest when building with jdk8. thanks to bruno p. kinoshita and henri yandell for their help in fixing this issue.add final modifier to local variables.trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
3154,3154,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14734950584007186, 1 0.14106019766397127, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
3155,3155,"3 0.21693121693121686, 0 0.14285714285714282, 2 0.13895850737956003, 1 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",add final modifier to local variables.[] vastly expanded typeutils
3156,3156,"6 0.21498189919242547, 3 0.1526037315510999, 4 0.1311612364243943, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
3157,3157,"5 0.282010582010582, 1 0.1208994708994709, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3158,3158,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3159,3159,"0 0.2523809523809524, 2 0.13756613756613753, 1 0.12830687830687829, 3 0.1246031746031746, 4 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",adding vincent ricards patch to charrange.java providing an iterator that lets you walk the chars in the range. 454
3160,3160,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3161,3161,"6 0.2781954887218045, 5 0.22702589807852966, 3 0.11445279866332495, 2 0.09690893901420218, 1 0.09544695071010861, 0 0.09398496240601505, 4 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateformats ""z"" pattern does not respect timezone of calendar instances passed to format()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
3162,3162,"6 0.2681200994454006, 5 0.1958309428188946, 3 0.16905718110537385, 4 0.09275196022183975, 0 0.09275196022183974, 2 0.09141327213616371, 1 0.09007458405048767","zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
3163,3163,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3164,3164,"3 0.19919517102615691, 0 0.18980549966465457, 2 0.1444220880840599, 6 0.1334674714956405, 4 0.12877263581488935, 1 0.10373351218421643, 5 0.10060362173038231",add final modifier to local variables.: remove unnecessary synchronization from registry lookup in equalsbuilder and hashcodebuilder ()reread threadlocal value in synchronized block to avoid any timing issues[] clear threadlocal for hashcodebuilder as well
3165,3165,"3 0.20663780663780662, 2 0.14199134199134195, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3166,3166,"3 0.21693121693121686, 6 0.14285714285714282, 2 0.13505987190197716, 1 0.1292119186856029, 0 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",pmd: useless parentheses.add final modifier to local variables.
3167,3167,"5 0.2921626984126984, 6 0.12896825396825393, 2 0.1237599206349206, 4 0.1168154761904762, 1 0.11507936507936509, 0 0.11160714285714286, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3168,3168,"2 0.22438672438672436, 4 0.20250120250120243, 0 0.1385281385281385, 1 0.10990860990860991, 3 0.10822510822510824, 5 0.10822510822510824, 6 0.10822510822510824",crlf -> lfjavadoc: fix typo but working is still awkward.simplify isempty be reusing getlengths/if (foo) { return true; } return false;/return foo;/g
3169,3169,"6 0.3370681605975724, 3 0.11974789915966384, 0 0.11484593837535013, 5 0.11321195144724557, 1 0.1050420168067227, 2 0.1050420168067227, 4 0.1050420168067227",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor some duplicate code.
3170,3170,"0 0.19262846381490448, 4 0.16626311541565778, 6 0.1380145278450363, 5 0.13048157115953726, 2 0.12859833198816253, 1 0.12294861447403824, 3 0.12106537530266347",removes unnecessary class reference of static method calls which are declared in the same class
3171,3171,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.1473495058400719, 1 0.14106019766397127, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
3172,3172,"6 0.31093716025222873, 0 0.1526418786692759, 4 0.1237225483800826, 3 0.1085018482278756, 2 0.10545770819743425, 5 0.10089149815177215, 1 0.09784735812133075",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
3173,3173,"6 0.23426382047071695, 0 0.12889983579638753, 1 0.12889983579638753, 3 0.12889983579638753, 2 0.1288998357963875, 4 0.126984126984127, 5 0.12315270935960591","added missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
3174,3174,"5 0.27192297684100963, 6 0.14259692948217537, 0 0.11709601873536302, 1 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3175,3175,"3 0.4273182957393483, 2 0.09983291562238929, 1 0.09544695071010859, 4 0.09544695071010859, 0 0.09398496240601502, 5 0.09398496240601502, 6 0.09398496240601502","add final modifier to local variables.pmd: these nested if statements could be combinedformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3176,3176,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",validation[] new type util features
3177,3177,"4 0.1662337662337662, 6 0.15815295815295813, 3 0.15613275613275612, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 5 0.12987012987012989",remove redundant type arguments.format.
3178,3178,"0 0.1878306878306878, 2 0.14050558495002938, 3 0.13844797178130513, 1 0.13639035861258086, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: add empty checks to objectutils
3179,3179,"5 0.2883164194639604, 4 0.12438199323445225, 6 0.11891751236013531, 0 0.11709601873536299, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3180,3180,"6 0.18298891883797544, 0 0.14315663372267146, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
3181,3181,"5 0.27275132275132274, 6 0.13015873015873017, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3182,3182,"4 0.3337934207499425, 0 0.12606395215090865, 6 0.11318150448585232, 1 0.10996089256958824, 2 0.10996089256958823, 3 0.10351966873706006, 5 0.10351966873706006","sort members.rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
3183,3183,"6 0.282010582010582, 2 0.12275132275132275, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
3184,3184,"0 0.17794486215538843, 4 0.17599554441659698, 1 0.14285714285714282, 2 0.1272626009468115, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",provide simple method to wrap a given type to the typed interface
3185,3185,"6 0.20294784580498862, 5 0.14143990929705214, 3 0.13747165532879818, 0 0.13151927437641722, 2 0.12953514739229025, 4 0.12953514739229025, 1 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
3186,3186,"1 0.7132810930279283, 2 0.051537070524412296, 5 0.04872413100261202, 4 0.04802089612216195, 3 0.04731766124171188, 0 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3187,3187,"6 0.20096371882086164, 3 0.14143990929705214, 5 0.14143990929705214, 0 0.12953514739229025, 2 0.12953514739229025, 4 0.12953514739229025, 1 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
3188,3188,"3 0.1641209943096735, 0 0.15154237795747227, 6 0.14525306978137167, 1 0.1347708894878706, 2 0.1347708894878706, 4 0.1347708894878706, 5 0.1347708894878706",: dateutilstest.testlang530 fails for some timezones
3189,3189,"3 0.20238095238095238, 0 0.16349206349206347, 2 0.13941798941798939, 4 0.1357142857142857, 5 0.12089947089947094, 1 0.11904761904761907, 6 0.11904761904761907",add final modifier to local variables.[] avoid npe in classutils.toclass(object[])
3190,3190,"3 0.2114608555286521, 6 0.1530804412160344, 0 0.13989776701641105, 2 0.13048157115953726, 1 0.12294861447403822, 4 0.12106537530266345, 5 0.12106537530266345",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
3191,3191,"2 0.2967563837129054, 3 0.15827007131354956, 6 0.12767425810904068, 1 0.10674028065332414, 0 0.10351966873706006, 4 0.10351966873706006, 5 0.10351966873706006","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
3192,3192,"2 0.32252127904301814, 3 0.13089487002530478, 1 0.11640211640211638, 4 0.11157119852772028, 5 0.10996089256958823, 6 0.1051299746951921, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3193,3193,"0 0.17794486215538843, 4 0.17014759120022274, 1 0.14285714285714282, 2 0.1331105541631857, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",provide simple method to wrap a given type to the typed interface
3194,3194,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3195,3195,"6 0.3187473187473187, 3 0.16259116259116255, 2 0.11154011154011152, 4 0.11003861003861, 0 0.10253110253110254, 1 0.09802659802659804, 5 0.09652509652509654","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
3196,3196,"5 0.28285193858964347, 0 0.12256049960967993, 4 0.12256049960967993, 1 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3197,3197,"6 0.29757123733027346, 5 0.19449225473321854, 3 0.15165423599158537, 2 0.09141327213616371, 0 0.09007458405048765, 1 0.08873589596481163, 4 0.08605851979345956",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3198,3198,"5 0.23362396601833224, 3 0.21014978761457634, 6 0.12251285490722108, 2 0.12094790968030403, 4 0.10686340263805051, 1 0.10529845741113349, 0 0.10060362173038231",format.use final consistently. replace tabs with whitespaces and add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3199,3199,"6 0.2838624338624338, 2 0.1208994708994709, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
3200,3200,"5 0.269047619047619, 6 0.13201058201058197, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3201,3201,"4 0.21765271765271763, 3 0.1806156806156806, 1 0.12674362674362671, 2 0.12506012506012507, 6 0.12337662337662335, 0 0.11832611832611832, 5 0.10822510822510824",sort members and clean up comments.add final modifier to local variables.merge charsetutils string[] and string method forms to string...
3202,3202,"2 0.3035113035113035, 4 0.1301106301106301, 0 0.12842712842712842, 1 0.11159211159211159, 6 0.10990860990860991, 3 0.10822510822510822, 5 0.10822510822510822",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
3203,3203,"3 0.19913419913419914, 6 0.1924001924001924, 4 0.13684463684463685, 2 0.12842712842712845, 0 0.12506012506012507, 1 0.10990860990860994, 5 0.10822510822510825",remove redundant type arguments.its confusing to re-use field names locallyadd final modifier to local variables.document some @suppresswarning annotationsadd serialization support to eventlistenersupport
3204,3204,"2 0.1536388140161725, 5 0.1536388140161725, 6 0.1536388140161725, 0 0.13477088948787064, 1 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
3205,3205,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3206,3206,"4 0.15659340659340656, 3 0.15231990231990225, 0 0.1394993894993895, 2 0.1394993894993895, 1 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
3207,3207,"4 0.26904761904761904, 6 0.13571428571428568, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
3208,3208,"4 0.23507180650037793, 0 0.15747039556563364, 6 0.13630637440161245, 2 0.12219702695893174, 3 0.11866969009826155, 1 0.11690602166792644, 5 0.11337868480725624",[] add null-safe stringutils apis to wrapstringgetbytes([charset|string]).</action>sort members.: methods for getting first non empty or non blank value ()
3209,3209,"3 0.22278911564625845, 2 0.1354875283446712, 1 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
3210,3210,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3211,3211,"4 0.7351245898731932, 5 0.052939611598829456, 1 0.0442493570985191, 2 0.0442493570985191, 3 0.04300789216990333, 0 0.04052496231267182, 6 0.03990422984836393","sort members.use index_not_found instead of magic number.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
3212,3212,"5 0.26815776815776815, 0 0.15367965367965367, 6 0.12674362674362671, 2 0.11495911495911498, 3 0.11495911495911497, 1 0.1132756132756133, 4 0.10822510822510824",add explict default case and fastdateparser could use \q \e to quote regexestrailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3213,3213,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
3214,3214,"5 0.23766623766623765, 2 0.20012870012870013, 3 0.15658515658515657, 1 0.10553410553410554, 6 0.10253110253110254, 4 0.10102960102960104, 0 0.09652509652509654",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3215,3215,"2 0.2300286234712464, 3 0.1772053083528493, 1 0.12073900598490765, 4 0.12073900598490765, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
3216,3216,"0 0.2438423645320197, 4 0.1403940886699507, 1 0.12315270935960594, 2 0.12315270935960594, 3 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594","use more efficient long cache: use ""long.valueof(int)"" instead of ""new long(long)"""
3217,3217,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3218,3218,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",: rounding utilities for converting to bigdecimal
3219,3219,"5 0.28695436507936506, 6 0.13244047619047616, 2 0.12202380952380952, 1 0.11681547619047622, 0 0.1150793650793651, 4 0.1150793650793651, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3220,3220,"6 0.28904249871991805, 5 0.13492063492063489, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
3221,3221,"2 0.1837928153717627, 0 0.1662489557226399, 4 0.13895850737956, 3 0.13311055416318573, 1 0.1272626009468115, 5 0.12531328320802007, 6 0.12531328320802007",[] add methods to objectutils to get various forms of classnames in a null-safe manner
3222,3222,"4 0.19497354497354494, 0 0.17089947089947088, 6 0.13571428571428568, 2 0.132010582010582, 3 0.12645502645502646, 1 0.12089947089947092, 5 0.11904761904761907",modifying tostring method to cache in a thread-safe way per 481adding string lazy caching
3223,3223,"5 0.2901379130887327, 4 0.12438199323445225, 0 0.11709601873536299, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3224,3224,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3225,3225,"5 0.29042658730158727, 6 0.12896825396825393, 2 0.12549603174603172, 4 0.11681547619047622, 0 0.11334325396825398, 1 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3226,3226,"2 0.2366071428571429, 0 0.1498015873015873, 6 0.1359126984126984, 3 0.12723214285714285, 1 0.12549603174603177, 4 0.113343253968254, 5 0.11160714285714289","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
3227,3227,"3 0.21009452470126627, 0 0.19261637239165327, 4 0.17513822008204027, 2 0.14392723381487424, 1 0.10272873194221506, 6 0.0952380952380952, 5 0.08025682182985554",use final.: merged robs javadoc comments and updated to use code units instead of code points: fixed charsequenceutils indexof for supplementary chars: fixed formatting on charsequenceutils.javafixed charsequenceutils to check for supplementary charsrefactor magic number into constant.statement unnecessarily nested within else clause.add final modifier to local variables.formattingmoving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classfix defaultisempty typing.
3228,3228,"0 0.23660714285714285, 6 0.16889880952380948, 3 0.14285714285714282, 1 0.1168154761904762, 2 0.11160714285714286, 4 0.11160714285714286, 5 0.11160714285714286"," - tolowercase should use locale, additional unit tests for case-insensitive matching - fastdateparser should be case insensitive: fastdateparser could use calendar.getdisplaynames for all text fields"
3229,3229,"2 0.1878306878306878, 4 0.14050558495002938, 0 0.13639035861258086, 5 0.13639035861258086, 1 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
3230,3230,"5 0.2901379130887327, 4 0.12073900598490762, 0 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3231,3231,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3232,3232,"3 0.21303258145363402, 0 0.1428571428571428, 2 0.1409078251183514, 1 0.1272626009468115, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",add final modifier to local variables.[] vastly expanded typeutils
3233,3233,"6 0.2528344671201814, 3 0.16394557823129247, 4 0.1369614512471655, 2 0.12267573696145125, 1 0.11950113378684804, 0 0.10204081632653063, 5 0.10204081632653063",sort methods.make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.adding a createstarted() method per request in 1138
3234,3234,"0 0.296218487394958, 4 0.1491596638655462, 6 0.12628384687208213, 2 0.11321195144724557, 1 0.1050420168067227, 3 0.1050420168067227, 5 0.1050420168067227","reverting r1090111 - moving the text.translate escapers back from using range to replicating parts of the range api. see the list for details (unnecessary boxing in stringescapeutils etc), the move to range was an uncomfortable fit. removing unnecessary code"
3235,3235,"1 0.7090616837452278, 2 0.052943540285312424, 5 0.05153707052441228, 4 0.048020896122161934, 0 0.046614426361261806, 3 0.046614426361261806, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3236,3236,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3237,3237,"3 0.20732600732600734, 0 0.18510378510378508, 2 0.14065934065934066, 5 0.12014652014652016, 6 0.11843711843711845, 4 0.11501831501831503, 1 0.11330891330891334",add final modifier to local variables.checkstylefix brace positionscompiler/generics warnings & a typoimproving test coverage.changing eol-style to native.misc. event utils.
3238,3238,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
3239,3239,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3240,3240,"2 0.314469749252358, 3 0.13411548194156886, 5 0.11801242236024842, 4 0.11318150448585232, 6 0.10835058661145619, 1 0.10674028065332414, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3241,3241,"0 0.2634920634920635, 4 0.1523809523809524, 3 0.14770258980785297, 2 0.1465329991645781, 6 0.10676691729323307, 1 0.09156223893065997, 5 0.09156223893065997","pmd: remove useless parenthesesequalsexlcude notation, hashcodeexclude notation and tostringexludenotationpmd: useless parenthesesuse not string.contains instead of indexof == -1add final modifier to local variables.add final modifier to method parameters.checkstyle and trailing spaces.applying the copy of the hashcodebuilder code to stop cyclic references over to equalsbuilder per and oliver sauders patchreplacing the creation of a list in the core of each builder class to test contains on the excludefields with a call to arrayutils.contains. reported by anthony whitford in 575"
3242,3242,"0 0.1818434976329713, 1 0.1545530492898914, 3 0.1467557783347257, 2 0.13116123642439434, 5 0.13116123642439434, 4 0.12921191868560292, 6 0.1253132832080201","use final.: add archutils - an utility class for the ""os.arch"" system property ()"
3243,3243,"2 0.2757020757020757, 3 0.14236874236874236, 6 0.1252747252747253, 0 0.12356532356532357, 1 0.11330891330891334, 4 0.10989010989010992, 5 0.10989010989010992",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure placement of curly braces is consistent: dateutilstest.testlang530 fails for some timezones
3244,3244,"6 0.29221648498756936, 5 0.1985083189902467, 3 0.15031554790590934, 2 0.0940906483075158, 0 0.09141327213616371, 1 0.08739720787913562, 4 0.08605851979345958",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3245,3245,"5 0.2883164194639604, 6 0.12073900598490764, 0 0.12073900598490761, 4 0.11891751236013533, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3246,3246,"3 0.3115343915343915, 2 0.14857142857142855, 6 0.12190476190476188, 4 0.11746031746031743, 0 0.10264550264550265, 1 0.10264550264550265, 5 0.09523809523809525",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerpmd: useless parenthesesformat to 120 line length.removed unnecessary multiplication by one.add final modifier to local variables.add final modifier to method parameters.
3247,3247,"5 0.25744047619047616, 6 0.17757936507936506, 0 0.11681547619047622, 1 0.11334325396825398, 2 0.11160714285714288, 3 0.11160714285714288, 4 0.11160714285714288", fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3248,3248,"2 0.27399267399267396, 0 0.1338217338217338, 4 0.12527472527472525, 6 0.12527472527472525, 3 0.11672771672771676, 1 0.11330891330891332, 5 0.11159951159951162"," - add isonetrue(booleans...) to booleanutils to preserve old behavior of booleanutils.xor(booleans...). added isonetrue for primitives and wrappers, isonefalse still missing."
3249,3249,"0 0.2825814536340852, 2 0.14223057644110274, 3 0.13784461152882202, 4 0.13492063492063489, 6 0.10275689223057644, 1 0.10129490392648287, 5 0.09837092731829575","a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables.[] methodutils.invoke*(*, object... args) variants cannot handle null valuesmoving most of the methods over to varargs. a couple cant change because they are object[], class[] with both end parameters ideally wanting to be vararg. 396"
3250,3250,"0 0.1878306878306878, 3 0.14256319811875368, 2 0.14050558495002938, 1 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: add empty checks to objectutils
3251,3251,"5 0.2579994960947342, 6 0.1715797430083144, 1 0.11514235323759134, 2 0.11514235323759134, 0 0.11337868480725624, 3 0.11337868480725624, 4 0.11337868480725624", fastdateparser does not handle excess hours as per simpledateformattrailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3252,3252,"0 0.21719576719576716, 2 0.14867724867724866, 1 0.13941798941798939, 5 0.13571428571428568, 6 0.12089947089947092, 3 0.11904761904761907, 4 0.11904761904761907",applying the copy of the hashcodebuilder code to stop cyclic references over to equalsbuilder per and oliver sauders patch
3253,3253,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.15154237795747227, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
3254,3254,"1 0.7125778581474782, 2 0.050833835643962225, 5 0.05013060076351216, 3 0.048724131002612005, 4 0.046614426361261806, 0 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3255,3255,"2 0.19194591416813633, 4 0.14050558495002938, 3 0.13639035861258086, 1 0.13433274544385657, 0 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
3256,3256,"2 0.201137171286425, 4 0.18455342335939348, 0 0.14475242833451785, 3 0.12319355602937693, 5 0.12153518123667374, 6 0.11324330727315804, 1 0.1115849324804549",reuse code already available in stringutilsmore source code to format...: add the jaro-winkler string distance algorithm to stringutils - partially applying the patch by rekha joshi as submitted for further refinement
3257,3257,"5 0.28725038402457753, 3 0.12416794674859191, 6 0.12058371735791092, 0 0.11879160266257041, 4 0.11879160266257041, 1 0.1152073732718894, 2 0.1152073732718894",document intentional drop-thruapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3258,3258,"6 0.16108171663727217, 0 0.15902410346854792, 5 0.15079365079365076, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323",4fastdateformat apis that use a stringbuilderrefactor some duplicate code.
3259,3259,"5 0.291959406713505, 4 0.12256049960967995, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3260,3260,"0 0.25570436507936506, 3 0.13764880952380948, 2 0.12896825396825393, 6 0.12723214285714282, 4 0.12375992063492063, 1 0.1150793650793651, 5 0.11160714285714288",[] org.apache.commons.lang3.reflect.fieldutils.removefinalmodifier(field) does not clean up after itself.add in-line comment.removefinalmodifier does not clean up after itself.ws - add removefinalmodifier to fieldutils
3261,3261,"5 0.25223214285714285, 6 0.18278769841269837, 0 0.1168154761904762, 1 0.11334325396825398, 2 0.11160714285714286, 3 0.11160714285714286, 4 0.11160714285714286", fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3262,3262,"2 0.24958949096880126, 1 0.12698412698412698, 3 0.12698412698412698, 6 0.12698412698412698, 0 0.1231527093596059, 4 0.1231527093596059, 5 0.1231527093596059",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
3263,3263,"4 0.19501133786848068, 0 0.1672335600907029, 1 0.1275510204081633, 2 0.1275510204081633, 3 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
3264,3264,"2 0.19249639249639244, 4 0.14199134199134197, 1 0.13795093795093796, 3 0.13593073593073596, 0 0.1318903318903319, 5 0.12987012987012986, 6 0.12987012987012986",added escape/unescapejson methods per maurizio cucchiaras patch in 797
3265,3265,"0 0.1642996379838485, 2 0.16040100250626563, 1 0.15260373155109994, 3 0.13505987190197719, 4 0.13116123642439434, 5 0.1311612364243943, 6 0.1253132832080201","use validatenotnull instead of ""throw new nullpointerexception""adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
3266,3266,"4 0.2560846560846561, 2 0.14682539682539678, 1 0.12089947089947091, 0 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
3267,3267,"1 0.7146875627888286, 2 0.05294354028531244, 3 0.048724131002612026, 4 0.047317661241711884, 0 0.04591119148081175, 5 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3268,3268,"3 0.22278911564625845, 2 0.1354875283446712, 1 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
3269,3269,"4 0.26904761904761904, 6 0.13571428571428568, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
3270,3270,"4 0.6839611466477139, 6 0.08473505488430862, 0 0.054331517018084176, 2 0.04935639263997472, 5 0.0454868514570007, 1 0.0421701018715944, 3 0.03995893548132354","sort members.make sure lines in files dont have trailing white spaces and remove all trailing white spaces: bring static method references in stringutils to consistent style. thanks to alex yurshaapplying alexander muthmanns patch from , adding isblank/isempty charsequence... variantschange stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
3271,3271,"0 0.22262922262922266, 2 0.1585266585266585, 3 0.15567765567765568, 6 0.13146113146113145, 4 0.1286121286121286, 1 0.1115181115181115, 5 0.0915750915750916",remove redundant type arguments.: remove unnecessary synchronization from registry lookup in equalsbuilder and hashcodebuilder ()add final modifier to local variables.fixing so that equalsbuilder synchronizes on itself and not hashcodebuilderapplying the copy of the hashcodebuilder code to stop cyclic references over to equalsbuilder per and oliver sauders patch
3272,3272,"5 0.1651969429747207, 2 0.15079365079365076, 0 0.14873603762492646, 6 0.13844797178130513, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323", simplify fastdateformat; eliminate boxing
3273,3273,"6 0.26091269841269843, 3 0.16542658730158724, 2 0.12723214285714285, 0 0.11160714285714286, 1 0.11160714285714286, 4 0.11160714285714286, 5 0.11160714285714286",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.
3274,3274,"2 0.20169677066228792, 0 0.15763546798029557, 4 0.14805692391899286, 1 0.12315270935960596, 3 0.12315270935960596, 5 0.12315270935960596, 6 0.12315270935960596",extract logic for checking string representation of objects into separate methods
3275,3275,"5 0.2864949258391882, 4 0.12620348685922458, 6 0.11891751236013534, 0 0.11709601873536302, 1 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3276,3276,"6 0.18298891883797544, 0 0.14315663372267148, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
3277,3277,"2 0.28162578162578167, 4 0.12842712842712842, 6 0.12506012506012507, 0 0.12337662337662336, 3 0.12337662337662336, 1 0.10990860990860993, 5 0.10822510822510825",crlf -> lfjavadoc: fix typo but working is still awkward.simplify issamelenght implementations by reusing getlength. this also fixes a lot of the useless paranthesis warnings generated by pmd.
3278,3278,"6 0.17229437229437228, 4 0.1662337662337662, 3 0.141991341991342, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 5 0.12987012987012989",remove redundant type arguments.validation
3279,3279,"6 0.28516694033935414, 5 0.2174785623061485, 3 0.13446451377485857, 2 0.09742747673782154, 1 0.09487319832147416, 0 0.08721036307243206, 4 0.08337894544791098",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.[] fastdateformat generates date objects wastefully.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3280,3280,"2 0.20890022675736958, 6 0.14540816326530606, 3 0.13151927437641722, 1 0.12953514739229025, 4 0.12953514739229025, 0 0.12755102040816327, 5 0.12755102040816327",": add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
3281,3281,"0 0.1693121693121693, 2 0.1569664902998236, 4 0.14462081128747797, 1 0.13227513227513232, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",: new methods for lang3.validatethis from github.
3282,3282,"5 0.26645849596669263, 6 0.14623991673171996, 1 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 4 0.11709601873536299",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3283,3283,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3284,3284,"5 0.2783068783068782, 1 0.12275132275132275, 6 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3285,3285,"0 0.20535714285714285, 3 0.1706349206349206, 2 0.14806547619047616, 6 0.12723214285714282, 4 0.12202380952380952, 1 0.1150793650793651, 5 0.11160714285714288","add final modifier to local variables.[] introduced concurrentruntimeexception and extended the exception handling methods of concurrentutils to support runtime exceptions, too."
3286,3286,"2 0.22477324263038542, 4 0.13350340136054423, 1 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3287,3287,"5 0.27645502645502645, 6 0.12830687830687829, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3288,3288,"2 0.1904761904761904, 0 0.13997113997114, 1 0.13593073593073596, 3 0.13593073593073596, 5 0.13593073593073596, 4 0.1318903318903319, 6 0.12987012987012986","adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
3289,3289,"0 0.15659340659340656, 3 0.15659340659340656, 1 0.13736263736263737, 2 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] clear threadlocal for hashcodebuilder as well
3290,3290,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",: rounding utilities for converting to bigdecimal
3291,3291,"5 0.28695436507936506, 6 0.13070436507936506, 2 0.12202380952380953, 1 0.1168154761904762, 4 0.1168154761904762, 0 0.11507936507936509, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3292,3292,"4 0.23571428571428568, 3 0.1357142857142857, 6 0.13571428571428568, 2 0.13015873015873014, 1 0.12460317460317462, 0 0.11904761904761907, 5 0.11904761904761907",: add methods for removing all invalid characters according to xml 1.0 and xml 1.1 in an input string to stringescapeutils. thanks to adam hooper
3293,3293,"2 0.3048079135035657, 3 0.1631009891879457, 6 0.11157119852772027, 1 0.10674028065332414, 4 0.10674028065332414, 0 0.10351966873706006, 5 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
3294,3294,"5 0.2650541698160746, 4 0.13630637440161247, 3 0.1292517006802721, 0 0.12396069538926682, 6 0.11866969009826156, 1 0.11337868480725626, 2 0.11337868480725626",change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3295,3295,"0 0.24702380952380953, 3 0.1688988095238095, 2 0.12549603174603174, 1 0.12028769841269843, 6 0.1150793650793651, 4 0.11160714285714288, 5 0.11160714285714288", enumutils *bitvector issue with more than 32 values enumthis add final modifier to local variables.[] permit bitvector generation for enums with > 64 values; plus some test corrections
3296,3296,"2 0.27994227994228, 4 0.12842712842712842, 0 0.12506012506012507, 3 0.12337662337662336, 6 0.12337662337662336, 1 0.11159211159211162, 5 0.10822510822510825",crlf -> lfjavadoc: fix typo but working is still awkward.simplify issamelenght implementations by reusing getlength. this also fixes a lot of the useless paranthesis warnings generated by pmd.
3297,3297,"0 0.2962347729789591, 6 0.22775932078257666, 4 0.10760428202288667, 1 0.10114433370247324, 2 0.09210040605389444, 5 0.08951642672572907, 3 0.08564045773348103","make sure lines in files dont have trailing white spaces and remove all trailing white spacesdont write parameter[] permit bitvector generation for enums with > 64 values; plus some test correctionsrequire values parameter when generating bit vectors from enums, throwing nullpointerexception if omitted; merge check for type eligibility; add e... generatebitvector() variant; alter generatebitvector(class<e>, enumset<e>) to (class<e>, iterable<e>) by using |= << instead of + to accumulate values; process only specified values"
3298,3298,"5 0.2883164194639604, 4 0.12073900598490762, 0 0.11891751236013531, 1 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3299,3299,"0 0.21693121693121686, 5 0.1370091896407686, 3 0.13311055416318573, 2 0.1311612364243943, 1 0.13116123642439428, 4 0.12531328320802007, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
3300,3300,"6 0.16931216931216928, 0 0.15490887713109933, 5 0.14462081128747795, 1 0.13433274544385657, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323",fastdateformat apis that use a stringbuilderrefactor some duplicate code.
3301,3301,"5 0.291959406713505, 4 0.12256049960967995, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3302,3302,"3 0.2718820861678005, 2 0.15442176870748298, 6 0.1306122448979592, 4 0.12426303854875283, 0 0.11156462585034013, 1 0.10521541950113382, 5 0.10204081632653064",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerpmd: useless parenthesesformat to 120 line length.removed unnecessary multiplication by one.add final modifier to method parameters.
3303,3303,"4 0.16624895572263992, 1 0.1584516847674742, 0 0.15650236702868278, 2 0.14285714285714282, 3 0.1253132832080201, 5 0.1253132832080201, 6 0.1253132832080201",[github] commons-lang pull request : intellij idea refactorings..
3304,3304,"1 0.7002629272567923, 2 0.060862790924140604, 3 0.05472782159898724, 4 0.04927451553218423, 0 0.04586619924043238, 5 0.045184535982082004, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3305,3305,"2 0.2123015873015873, 0 0.1654265873015873, 4 0.1498015873015873, 6 0.12896825396825395, 1 0.11681547619047623, 5 0.1150793650793651, 3 0.11160714285714289",removes unnecessary class reference of static method calls which are declared in the same classcrlf -> lfjavadoc: fix typo but working is still awkward.
3306,3306,"2 0.2326462923477849, 6 0.15138592750533045, 0 0.14475242833451785, 1 0.12153518123667374, 3 0.12153518123667374, 4 0.12153518123667374, 5 0.10660980810234542","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.[] removed unnecessary elses and use of ternary operator with primitive boolean consequences e.g. (some boolean expression) ? true : false"
3307,3307,"6 0.3218559218559218, 5 0.11843711843711843, 1 0.11330891330891331, 2 0.11330891330891331, 0 0.1115995115995116, 4 0.1115995115995116, 3 0.10989010989010989",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd sugar to randomiutils: new randumutils class. thanks to duncan jones
3308,3308,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
3309,3309,"2 0.1642135642135642, 4 0.1541125541125541, 0 0.15209235209235208, 1 0.13593073593073596, 3 0.13391053391053395, 5 0.1298701298701299, 6 0.1298701298701299",[] add methodutil apis to call methods without parameters.
3310,3310,"0 0.16313932980599644, 2 0.15490887713109933, 4 0.15285126396237506, 1 0.13227513227513232, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",: new methods for lang3.validatethis from github.
3311,3311,"6 0.263952892985151, 2 0.14029697900665639, 3 0.12775217613927287, 1 0.12237583205325141, 0 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894",make checkstyle happy: add missing javadocreplace tabs with spaces fastdateparser and fastdateprinter support x format
3312,3312,"6 0.15659340659340654, 3 0.1459096459096459, 2 0.14377289377289373, 1 0.14163614163614163, 0 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735",add stringmatchertostring(); useful from a debugger.
3313,3313,"0 0.17136978248089355, 3 0.15079365079365076, 4 0.14462081128747795, 2 0.13639035861258086, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
3314,3314,"6 0.20096371882086164, 3 0.14342403628117908, 5 0.1374716553287982, 4 0.13350340136054425, 2 0.12953514739229027, 0 0.1275510204081633, 1 0.1275510204081633"," partial: implement format u for fastdateformat, day number of week"
3315,3315,"5 0.28521825396825395, 6 0.12896825396825393, 2 0.12549603174603172, 4 0.1202876984126984, 1 0.11507936507936509, 0 0.11334325396825398, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3316,3316,"4 0.7238259725306356, 2 0.05543219014721604, 0 0.05370507443046301, 5 0.048523727280203946, 3 0.041039559174274196, 1 0.04046385393535653, 6 0.03700962250185048","sort members.: add stringutilsisanynotempty and isanynotblank (): bring static method references in stringutils to consistent style. thanks to alex yurshaapplying alexander muthmanns patch from , adding isblank/isempty charsequence... variantschange stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
3317,3317,"4 0.1786344167296548, 2 0.16805240614764425, 1 0.15041572184429325, 6 0.13630637440161247, 3 0.1327790375409423, 5 0.12043335852859666, 0 0.11337868480725627",sort methods.remove redundant type arguments.adding hennings github pull request with a triple implementation. 675
3318,3318,"3 0.34958427815570675, 6 0.2067271352985639, 5 0.09429327286470143, 2 0.09297052154195011, 4 0.08635676492819352, 0 0.0850340136054422, 1 0.0850340136054422","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.: fastdateformat doesnt respect summer daylight in some localized stringsrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3319,3319,"4 0.20586820586820587, 3 0.19913419913419914, 2 0.13684463684463682, 0 0.12506012506012507, 6 0.11664261664261666, 1 0.10822510822510825, 5 0.10822510822510825",reuseadd final modifier to local variables.eat own dog food: call stringutils.isempty().making it explicit that the else statement expects to jump to the next iteration of the loop
3320,3320,"5 0.28869047619047616, 6 0.12896825396825393, 1 0.12202380952380953, 2 0.1202876984126984, 4 0.11681547619047618, 0 0.11160714285714286, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3321,3321,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3322,3322,"0 0.28553791887125224, 3 0.15220458553791888, 6 0.1435626102292769, 2 0.12134038800705467, 4 0.10529100529100528, 5 0.10158730158730157, 1 0.09047619047619047","use validateistrue to validate arguments: update java requirement from java 6 to 7use try with resources in serializationutils: serializationutils::deserialize has unnecessary code and a comment for that ()there is no real cce possible, even the javadoc say so. githubs blame showed the code and javadoc is written by two indiviual person in two different years, so that may be the cause.eliminate one unchecked warning; localise and document othersadd final modifier to local variables.[] use generics in serializationutilsadding nopmd tags for various empty catch blockscheckstyle and trailing spaces."
3323,3323,"6 0.282010582010582, 2 0.12275132275132275, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
3324,3324,"2 0.15659340659340656, 3 0.15659340659340656, 0 0.13736263736263737, 1 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",if statement can be simplified
3325,3325,"2 0.28330928330928334, 4 0.12842712842712842, 0 0.12337662337662338, 3 0.12337662337662338, 6 0.12337662337662338, 1 0.10990860990860994, 5 0.10822510822510827",crlf -> lfjavadoc: fix typo but working is still awkward.simplify issamelenght implementations by reusing getlength. this also fixes a lot of the useless paranthesis warnings generated by pmd.
3326,3326,"2 0.2468253968253968, 6 0.14682539682539678, 3 0.1246031746031746, 1 0.12275132275132275, 4 0.12089947089947091, 0 0.11904761904761905, 5 0.11904761904761905","make sure placement of curly braces is consistent: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
3327,3327,"0 0.19327731092436976, 1 0.16713352007469653, 6 0.15406162464985992, 4 0.13281979458450047, 2 0.12955182072829133, 3 0.1181139122315593, 5 0.10504201680672272","remove redundant type arguments.: add event support utilitiesapplying documentation patch ""commons-event-support-docs.patch"" from michael wooten.changing eol-style to native.misc. event utils."
3328,3328,"0 0.1878306878306878, 2 0.14462081128747795, 3 0.13639035861258086, 1 0.13433274544385657, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: add empty checks to objectutils
3329,3329,"2 0.19274376417233557, 3 0.16981607457797934, 1 0.13630637440161247, 0 0.1327790375409423, 6 0.1292517006802721, 4 0.12396069538926685, 5 0.11514235323759135","[] constructorutils.invokeconstructor(class, object...)regressionadd final modifier to local variables.: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
3330,3330,"3 0.3232518232518233, 2 0.14307164307164308, 4 0.12655512655512655, 6 0.11003861003861001, 0 0.10102960102960105, 1 0.09952809952809955, 5 0.09652509652509655",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerpmd: useless parenthesesformat to 120 line length.add final modifier to local variables.add final modifier to method parameters.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
3331,3331,"3 0.20057720057720055, 2 0.15007215007215005, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3332,3332,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3333,3333,"1 0.6954912844483396, 2 0.06563443373259324, 3 0.05404615834063686, 4 0.04927451553218423, 5 0.046547862498782754, 0 0.045184535982082004, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3334,3334,"4 0.21074481074481075, 0 0.1526251526251526, 1 0.1492063492063492, 2 0.14407814407814407, 3 0.12185592185592187, 5 0.11159951159951163, 6 0.10989010989010992","[github] commons-lang pull request : intellij idea refactorings..add todosfix brace positionsapplying valentin rochers patch from , adding isinstanceof and isassignablefrom methods. "
3335,3335,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3336,3336,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
3337,3337,"3 0.1959496442255063, 6 0.14422550629447178, 5 0.1403940886699507, 0 0.13656267104542966, 2 0.13464696223316913, 1 0.12506841817186648, 4 0.12315270935960594",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
3338,3338,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3339,3339,"2 0.20017636684303344, 6 0.1384479717813051, 0 0.1322751322751323, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",make sure placement of curly braces is consistent
3340,3340,"3 0.28798185941043075, 2 0.12925170068027206, 1 0.1221970269589317, 0 0.12043335852859662, 4 0.11337868480725623, 5 0.11337868480725623, 6 0.11337868480725623","[] part 2: refactor tostringstyle and tostringbuildertest to verify that we are unsetting the registry when no longer needed[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
3341,3341,"2 0.2226823096388314, 6 0.20174833218311478, 4 0.1276742581090407, 1 0.12445364619277662, 0 0.11318150448585232, 3 0.10674028065332417, 5 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefully168
3342,3342,"5 0.30823680823680827, 0 0.13856713856713856, 1 0.12054912054912054, 2 0.12054912054912054, 3 0.11003861003861003, 4 0.10553410553410555, 6 0.09652509652509657","change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
3343,3343,"0 0.4421215640727836, 4 0.10878823073945021, 2 0.09523809523809522, 6 0.09117305458768873, 1 0.08846302748741773, 3 0.08710801393728222, 5 0.08710801393728222","strsubstitutor can preserve escapesstrsubstitutor can now optionally preserve the escape character for anescaped reference, which is useful when substitution takes place inmultiple phases and some references are intentionally unresolved. priorto this change, an unresolved reference `${a}` and an escaped reference`$${a}` may result in the same string `${a}`, making it impossible foran additional substitution phase to distinguish between escapedreferences and non-escaped references."
3344,3344,"5 0.1590241034685479, 0 0.15285126396237503, 1 0.14462081128747795, 3 0.13844797178130513, 2 0.13639035861258086, 4 0.13639035861258086, 6 0.1322751322751323",[] added timedsemaphore class to concurrent package.
3345,3345,"3 0.1980347694633409, 0 0.19450743260267067, 1 0.1345427059712774, 4 0.12396069538926682, 2 0.12043335852859666, 5 0.11514235323759135, 6 0.11337868480725626",: update java requirement from java 6 to 7replace usage of deprecated objectutilsequals with objectsequalsadd final modifier to local variables.[] added constantinitializer class
3346,3346,"6 0.2049319727891156, 5 0.15731292517006798, 0 0.12755102040816327, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327",trailing spaces fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()
3347,3347,"0 0.253734827264239, 4 0.188375350140056, 2 0.13281979458450044, 1 0.10994397759103644, 3 0.1050420168067227, 5 0.1050420168067227, 6 0.1050420168067227","lan-1114 fixes bug in typeutils.equals(wildcardtype, type) where it was incorrectly returning true when the second argument was not a wildcard type.typeutils wildcard fixes[] new type util features"
3348,3348,"6 0.21498189919242547, 3 0.1526037315510999, 4 0.1311612364243943, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
3349,3349,"0 0.22276029055690072, 4 0.14178100618778583, 6 0.1380145278450363, 3 0.1342480495022868, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
3350,3350,"2 0.1878306878306878, 4 0.14462081128747795, 5 0.13639035861258086, 0 0.13433274544385657, 1 0.1322751322751323, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
3351,3351,"0 0.22276029055690072, 4 0.14178100618778583, 6 0.1380145278450363, 3 0.1342480495022868, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
3352,3352,"6 0.22468527640941435, 2 0.13656267104542968, 4 0.13656267104542966, 0 0.12889983579638753, 1 0.12506841817186648, 3 0.12506841817186648, 5 0.12315270935960596","added missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
3353,3353,"3 0.22477324263038542, 2 0.1354875283446712, 1 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
3354,3354,"6 0.17342739564961782, 1 0.15079365079365076, 5 0.14667842445620222, 0 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323",[] fastdateformat generates date objects wastefully.
3355,3355,"5 0.2864949258391881, 6 0.12438199323445222, 0 0.11891751236013531, 4 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3356,3356,"2 0.17960023515579068, 4 0.14462081128747795, 1 0.13844797178130513, 0 0.13639035861258086, 3 0.13639035861258086, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
3357,3357,"0 0.19177725735102782, 2 0.15170439760603693, 6 0.14623991673172, 4 0.14441842310694766, 3 0.1262034868592246, 1 0.12256049960967998, 5 0.11709601873536302",make usage of default charset explicit and remove findbugs exclusion. kudos to sebb for spotting this.
3358,3358,"2 0.21577380952380953, 0 0.16889880952380953, 4 0.14632936507936506, 6 0.12896825396825395, 5 0.1168154761904762, 1 0.11160714285714289, 3 0.11160714285714289",removes unnecessary class reference of static method calls which are declared in the same classcrlf -> lfjavadoc: fix typo but working is still awkward.
3359,3359,"5 0.282010582010582, 6 0.12275132275132276, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3360,3360,"3 0.19691741430871867, 0 0.16632160110420982, 2 0.15988037727168164, 4 0.14055670577409707, 6 0.12284334023464459, 1 0.10996089256958826, 5 0.10351966873706009",a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables.add final modifier to method parameters.removing unncessary bracketsvararging constructor methods; much like the method ones were in methodutils. 396
3361,3361,"2 0.17404622667780562, 3 0.16235032024505708, 1 0.1467557783347257, 0 0.13311055416318573, 4 0.12921191868560292, 5 0.12921191868560292, 6 0.1253132832080201","dont use single letter variable names.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
3362,3362,"5 0.2846734322144158, 0 0.12438199323445225, 4 0.12073900598490765, 6 0.11891751236013534, 1 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3363,3363,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3364,3364,"5 0.2883164194639604, 4 0.12438199323445225, 0 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3365,3365,"3 0.20204465967177831, 4 0.15308044121603442, 6 0.1436642453591606, 2 0.1380145278450363, 0 0.12106537530266347, 1 0.12106537530266347, 5 0.12106537530266347",remove redundant type arguments.add final modifier to local variables.
3366,3366,"5 0.2883164194639604, 0 0.12073900598490762, 1 0.11891751236013531, 4 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3367,3367,"5 0.2727513227513227, 6 0.12830687830687829, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3368,3368,"2 0.31285944329422594, 3 0.12928456406717276, 1 0.11801242236024845, 4 0.1164021164021164, 5 0.11157119852772027, 6 0.10835058661145619, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3369,3369,"4 0.19194139194139193, 3 0.19023199023199022, 2 0.15775335775335775, 0 0.12698412698412695, 1 0.1133089133089133, 5 0.1098901098901099, 6 0.1098901098901099",: add classutils.getabbreviatedname(). this fixes from github. thanks to fabian lange.add final modifier to local variables.eat own dog food: stringutilsisempty(string) and replace some but not all stringlength() == 0 with stringisempty()
3370,3370,"1 0.6794981465640149, 2 0.06273167949814656, 4 0.06140100750879195, 6 0.054082311567341515, 3 0.052086303583309575, 5 0.04609827963121378, 0 0.04410227164718184",add final modifier to method parameters.remove redundant type arguments.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3371,3371,"3 0.31182121971595655, 6 0.20509607351712614, 2 0.10714285714285714, 0 0.09398496240601505, 1 0.09398496240601505, 4 0.09398496240601505, 5 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spacesrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3372,3372,"6 0.31582633053221293, 2 0.12464985994397756, 3 0.11974789915966384, 4 0.11974789915966384, 0 0.10994397759103644, 1 0.1050420168067227, 5 0.1050420168067227","[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .utc and gmt are the same, so simplify.refactor ""gmt"" magic string.make sure lines in files dont have trailing white spaces and remove all trailing white spaces"
3373,3373,"5 0.26479076479076485, 0 0.15367965367965367, 6 0.1317941317941318, 2 0.11495911495911498, 1 0.11327561327561331, 3 0.11327561327561331, 4 0.10822510822510825",add explict default case and fastdateparser could use \q \e to quote regexestrailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3374,3374,"4 0.22456414259692944, 0 0.1498829039812646, 2 0.13713244860785842, 1 0.12984647410876915, 3 0.12438199323445227, 5 0.117096018735363, 6 0.117096018735363",: add zero copy write method to strbuilder; : add zero copy read method to strbuilder. thanks to mikhail mazursky.
3375,3375,"2 0.23430466714048803, 6 0.15138592750533045, 0 0.1430940535418147, 1 0.12153518123667374, 3 0.12153518123667374, 4 0.12153518123667374, 5 0.10660980810234542","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws[] removed unnecessary elses and use of ternary operator with primitive boolean consequences e.g. (some boolean expression) ? true : false"
3376,3376,"0 0.2563793449869399, 1 0.15370705244122965, 2 0.15370705244122965, 6 0.14104882459312837, 3 0.10870002009242515, 4 0.09604179224432391, 5 0.09041591320072336","add serialization support to eventlistenersupportprovide read access to the registered listener instances: add event support utilitiesapplying documentation patch ""commons-event-support-docs.patch"" from michael wooten.improving error checking logic and adding test cases to verify.changing eol-style to native.misc. event utils."
3377,3377,"4 0.1987789987789988, 3 0.1663003663003663, 2 0.14236874236874236, 0 0.1304029304029304, 1 0.12698412698412698, 6 0.12527472527472527, 5 0.10989010989010992",add final modifier to local variables.eat own dog food: call stringutils.isempty().remove unnecessary parens.[] swapcase and *capitalize speedups.
3378,3378,"6 0.2764550264550264, 2 0.12830687830687829, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
3379,3379,"5 0.29772629772629783, 0 0.1385671385671386, 1 0.12205062205062206, 2 0.12205062205062206, 3 0.11003861003861004, 4 0.11003861003861004, 6 0.09952809952809956","change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
3380,3380,"0 0.22276029055690072, 4 0.13989776701641105, 6 0.1380145278450363, 3 0.13613128867366153, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
3381,3381,"6 0.2702191987906274, 2 0.17630385487528347, 0 0.13662131519274376, 4 0.1339758125472411, 1 0.10487528344671199, 3 0.09297052154195014, 5 0.0850340136054422","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove trailing white spacesadded new vararg methods to insert values into an array at an index.this implements . this commit also deprecates the add() methodsthat inserted a single value into an array at an index.: add arrayutilstostringarray(object[], string) method (and minimal clean-up of arrayutilstostringarray(object[]))add changes.xml entry"
3382,3382,"2 0.16809784022898774, 0 0.16627634660421545, 6 0.1498829039812646, 4 0.14623991673172, 1 0.13531095498308612, 3 0.11709601873536302, 5 0.11709601873536302",fix introduced failures having to do with removing the call to internal helper method tononullstringarray()more varargs-related updates
3383,3383,"4 0.23739495798319332, 3 0.16549953314659197, 0 0.14915966386554622, 6 0.11974789915966386, 2 0.11484593837535015, 1 0.10830999066293187, 5 0.10504201680672272",add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)convert to java 5 enhanced loops. 
3384,3384,"5 0.28285193858964347, 0 0.12256049960967995, 4 0.12256049960967995, 6 0.12073900598490764, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3385,3385,"3 0.23878536922015187, 4 0.14699792960662525, 6 0.13894639981596502, 0 0.13250517598343686, 2 0.12928456406717276, 1 0.10996089256958824, 5 0.10351966873706007","refactor ""gmt"" magic string.add a default case to switch to appease findbugs: nullpointerexception in fastdateparser$timezonestrategy ()replicate the fix for 1186add final modifier to local variables.remove redundant type arguments."
3386,3386,"6 0.15992812219227312, 0 0.1515423779574723, 5 0.14944594189877208, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",1154fastdateformat apis that use a stringbuilder
3387,3387,"4 0.31556503198294245, 0 0.12153518123667377, 1 0.1182184316512675, 6 0.11821843165126744, 2 0.11324330727315804, 3 0.10660980810234542, 5 0.10660980810234542","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
3388,3388,"2 0.19194139194139193, 0 0.1714285714285714, 4 0.1509157509157509, 6 0.14236874236874233, 5 0.11843711843711843, 3 0.1133089133089133, 1 0.11159951159951162","removes unnecessary class reference of static method calls which are declared in the same class: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
3389,3389,"3 0.18445539135194305, 0 0.16146688560481662, 2 0.14422550629447178, 4 0.1403940886699507, 1 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594",rewrite to avoid (im)possible npe warningadd final modifier to local variables.
3390,3390,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3391,3391,"6 0.21888053467000831, 3 0.1506544138123085, 4 0.1292119186856029, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
3392,3392,"0 0.17136978248089355, 2 0.15079365079365079, 4 0.1487360376249265, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
3393,3393,"0 0.2168367346938775, 6 0.14540816326530606, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327",strbuilder implements builder; provide tostringbuilder as tostringbuffer
3394,3394,"4 0.1620245582509733, 0 0.1536388140161725, 6 0.14315663372267148, 5 0.13686732554657086, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064",use concurrent instead of synchronization; javadoc
3395,3395,"2 0.32091097308488614, 3 0.12606395215090868, 5 0.11640211640211638, 1 0.11479181044398439, 4 0.10996089256958824, 6 0.10674028065332414, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3396,3396,"6 0.22851669403393537, 0 0.1327312534209086, 2 0.13081554460864805, 3 0.12889983579638753, 4 0.1288998357963875, 1 0.126984126984127, 5 0.12315270935960593","added missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
3397,3397,"4 0.28667628667628664, 2 0.1604136604136604, 1 0.11832611832611832, 3 0.10990860990860993, 0 0.10822510822510824, 5 0.10822510822510824, 6 0.10822510822510824",: fix deprecation warningsremove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo) - add hashcodemulti varargs method
3398,3398,"3 0.2046176046176046, 2 0.14603174603174604, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3399,3399,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3400,3400,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3401,3401,"4 0.1894179894179894, 3 0.18756613756613755, 2 0.1357142857142857, 6 0.1264550264550265, 1 0.12275132275132278, 0 0.11904761904761908, 5 0.11904761904761908",sort members.add final modifier to local variables.use index_not_found instead of magic number.
3402,3402,"6 0.22472848788638258, 3 0.14675577833472567, 4 0.1272626009468115, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
3403,3403,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3404,3404,"6 0.21471861471861467, 3 0.13593073593073593, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",removes redundant + signpmd: remove useless parentheses
3405,3405,"6 0.18112244897959182, 0 0.16326530612244897, 1 0.1454081632653061, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
3406,3406,"0 0.2276711679696754, 4 0.179578298981284, 2 0.15470267709073673, 6 0.11158493248045487, 1 0.10992655768775172, 3 0.10992655768775172, 5 0.10660980810234541",[] add methods to classutils to get various forms of classnames in a null-safe manneradd two new null-safe apis: getsimplename(*). see https://issues.apache.org/jira/browse/696
3407,3407,"5 0.1590241034685479, 0 0.1549088771310993, 1 0.14256319811875368, 3 0.14050558495002943, 2 0.13639035861258086, 4 0.13433274544385657, 6 0.1322751322751323",[] added timedsemaphore class to concurrent package.
3408,3408,"0 0.21909966172261253, 4 0.16627634660421542, 2 0.13348946135831377, 1 0.12438199323445225, 6 0.12256049960967996, 3 0.117096018735363, 5 0.117096018735363",: typeutils.tostring() doesnt handle primitive and object arrays correctlyapply patch by aaron digulla[] new type util features
3409,3409,"0 0.24425491589670695, 1 0.14806917791992416, 4 0.13480217957829896, 3 0.12816868040748636, 2 0.12485193082208004, 5 0.11324330727315804, 6 0.10660980810234542","use final.: add methodutilsfindannotation and extend methodutilsgetmethodswithannotation for non-public, super-class and interface methodsadd changes.xml entry and minimal clean-up.: adds methodutilsfindannotation and extend methodutilsgetmethodswithannotation for non-public, super-class and interface methods ()"
3410,3410,"0 0.22278911564625845, 4 0.1354875283446712, 5 0.13151927437641722, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 6 0.12755102040816327",[] provide typeliteral class similar to javax.enterprise.util.typeliteral
3411,3411,"2 0.18577307466196352, 4 0.14050558495002938, 5 0.13844797178130513, 0 0.13639035861258086, 1 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
3412,3412,"5 0.2764550264550264, 6 0.12460317460317456, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3413,3413,"4 0.2831465919701214, 0 0.14752567693744165, 2 0.1279178338001867, 3 0.11811391223155927, 5 0.10994397759103643, 6 0.10830999066293186, 1 0.1050420168067227",": avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.[] create strbuilder apis similar to string.format(string, object...)"
3414,3414,"2 0.20268620268620274, 5 0.19271469271469277, 6 0.18274318274318277, 4 0.11294261294261294, 0 0.11009361009361009, 1 0.10724460724460724, 3 0.0915750915750916",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefullyapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3415,3415,"4 0.2852296134738883, 6 0.16987762025929962, 2 0.13934326911426148, 0 0.13764691627287046, 3 0.12492426996243788, 5 0.07997091966557612, 1 0.06300739125166605","sort members.make sure placement of curly braces is consistentmake sure lines in files dont have trailing white spaces and remove all trailing white spaces: getlevenshteindistance with a threshold: optimize implementation if the strings lengths differ more than the threshold ()if the string lengths differ more than the threshold, theres no need for the algorithm to begin allocating arrays etc.pmd: useless parentheses: add the jaro-winkler string distance algorithm to stringutils - partially applying the patch by rekha joshi as submitted for further refinementapplying eli lindseys patch to yaniv kundas report in that stringutils.getlevensteindistance(string, string, int) gave the wrong answer when the int threshold is near integer.max_valuetabs and trailing spacesstatements unnecessarily nested within else clause.add final modifier to local variables.ws onlymatch exception message from threshold-free ld implementation[] levenshtein distance within a given threshold; submitted by eli lindsey"
3416,3416,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3417,3417,"3 0.278289810547875, 2 0.14388120839733737, 1 0.1169994879672299, 0 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894, 6 0.1152073732718894",add final modifier to local variables.[] part 2: refactor tostringstyle and tostringbuildertest to verify that we are unsetting the registry when no longer needed
3418,3418,"0 0.15573525007487268, 6 0.15573525007487268, 5 0.14944594189877206, 1 0.1347708894878706, 2 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",4fastdateformat apis that use a stringbuilder
3419,3419,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3420,3420,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",convert to java 5 enhanced loops. 
3421,3421,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",statements unnecessarily nested within else clause.
3422,3422,"2 0.22820712984647407, 3 0.1772053083528493, 1 0.12620348685922458, 0 0.117096018735363, 4 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
3423,3423,"3 0.19827818132902875, 4 0.15496368038740915, 6 0.14554748453053534, 2 0.13613128867366153, 1 0.12294861447403822, 0 0.12106537530266345, 5 0.12106537530266345",remove redundant type arguments.add final modifier to local variables.
3424,3424,"3 0.22660098522167488, 6 0.1403940886699507, 1 0.1327312534209086, 0 0.13081554460864808, 2 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","tab alignment[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
3425,3425,"5 0.28869047619047616, 6 0.12723214285714282, 4 0.12202380952380955, 2 0.12202380952380952, 1 0.11681547619047622, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3426,3426,"6 0.30818070818070814, 5 0.12185592185592187, 0 0.12014652014652014, 4 0.11501831501831503, 1 0.11330891330891332, 2 0.1115995115995116, 3 0.10989010989010989",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
3427,3427,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3428,3428,"3 0.20057720057720055, 2 0.14805194805194802, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3429,3429,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3430,3430,"6 0.3337868480725623, 4 0.11791383219954646, 2 0.11632653061224489, 3 0.11632653061224486, 0 0.10839002267573698, 1 0.1052154195011338, 5 0.10204081632653063","make sure lines in files dont have trailing white spaces and remove all trailing white spaces<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
3431,3431,"3 0.35994397759103636, 2 0.10830999066293186, 4 0.10830999066293186, 6 0.10830999066293186, 0 0.1050420168067227, 1 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3432,3432,"0 0.30789302022178733, 2 0.1709067188519243, 4 0.11306805827353769, 6 0.1054577081974342, 1 0.10241356816699283, 3 0.10241356816699283, 5 0.09784735812133073",code clean-up for checkstyle.: add to conversion from byte[] to uuid and uuid to byte[]document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
3433,3433,"4 0.16040100250626563, 5 0.16040100250626563, 0 0.15065441381230854, 2 0.14285714285714282, 6 0.13116123642439434, 1 0.12921191868560292, 3 0.1253132832080201","use term ""binary"" instead of ""boolarray"" in conversion. improve javadoc of class."
3434,3434,"5 0.29013791308873277, 4 0.12256049960967996, 6 0.11891751236013534, 0 0.11709601873536302, 1 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3435,3435,"2 0.18783068783068776, 4 0.14256319811875368, 0 0.13639035861258084, 1 0.13433274544385657, 5 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
3436,3436,"2 0.20686680469289168, 3 0.1718426501035197, 0 0.16097308488612838, 4 0.13198757763975155, 6 0.12715665976535542, 1 0.11991028295376122, 5 0.08126293995859216","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.removes unnecessary class reference of static method calls which are declared in the same classremove redundant type arguments.add final modifier to local variables.fix brace positionsremoved my author tag, typo, trailing spaces.adding ulrich + tomas patch to adding a replace(string, properties) variant to strsubstitutor"
3437,3437,"6 0.22089947089947087, 4 0.13941798941798939, 0 0.13386243386243385, 3 0.13386243386243385, 2 0.13015873015873017, 1 0.12275132275132278, 5 0.11904761904761907","<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
3438,3438,"6 0.2896281800391389, 2 0.19069362904979342, 5 0.1222004783648619, 3 0.10241356816699285, 1 0.09936942813655145, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
3439,3439,"0 0.19451659451659448, 3 0.13997113997113997, 4 0.137950937950938, 6 0.13795093795093796, 1 0.12987012987012989, 2 0.12987012987012989, 5 0.12987012987012989","prevent redundant modifiersequalsexlcude notation, hashcodeexclude notation and tostringexludenotation"
3440,3440,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
3441,3441,"3 0.19682539682539682, 2 0.17645502645502645, 1 0.1375661375661376, 4 0.1264550264550265, 5 0.12275132275132279, 0 0.12089947089947094, 6 0.11904761904761907","add final modifier to local variables.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
3442,3442,"0 0.207093253968254, 2 0.16889880952380953, 3 0.1359126984126984, 4 0.1359126984126984, 6 0.12723214285714285, 1 0.11334325396825401, 5 0.1116071428571429","add final modifier to method parameters.[] introduced concurrentruntimeexception and extended the exception handling methods of concurrentutils to support runtime exceptions, too."
3443,3443,"5 0.2883164194639604, 4 0.1207390059849076, 0 0.11891751236013531, 1 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3444,3444,"0 0.2504668534080299, 4 0.19327731092436973, 2 0.12628384687208216, 1 0.11484593837535013, 3 0.1050420168067227, 5 0.1050420168067227, 6 0.1050420168067227","lan-1114 fixes bug in typeutils.equals(wildcardtype, type) where it was incorrectly returning true when the second argument was not a wildcard type.typeutils wildcard fixes[] new type util features"
3445,3445,"2 0.15659340659340656, 6 0.15659340659340656, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737",the the patrol.validation
3446,3446,"2 0.23537414965986395, 0 0.15442176870748295, 4 0.14013605442176869, 5 0.13219954648526075, 6 0.11791383219954646, 1 0.11473922902494331, 3 0.1052154195011338",removes unnecessary class reference of static method calls which are declared in the same class: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.: add noclassnametostringstyle implementation of tostringstyle. this from github. thanks to innokenty shuvalov.
3447,3447,"3 0.18509984639016894, 0 0.17972350230414744, 2 0.1528417818740399, 1 0.1259600614439324, 4 0.1259600614439324, 5 0.11520737327188942, 6 0.11520737327188942",add final modifier to local variables. - change objectutils min() & max() functions to use varargs rather than just two parameters
3448,3448,"6 0.17250673854447438, 0 0.15363881401617246, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
3449,3449,"3 0.19764464925755246, 2 0.15642601126472092, 0 0.1528417818740399, 4 0.1474654377880184, 1 0.11520737327188942, 5 0.11520737327188942, 6 0.11520737327188942","use stringbuilderappend(charsequence, int, int) were possible to improve performance(similar to , thanks to stephane landelle for the suggestion)add final modifier to local variables."
3450,3450,"4 0.2518751090179662, 2 0.15785801500087218, 3 0.15297401011686726, 0 0.1371009942438514, 5 0.10901796616082329, 1 0.10657596371882085, 6 0.08459794174079892","sort members.add final modifier to local variables.merge branch fix-: add stringutils methods to compare a string to multiple stringsthis from github.thanks to arman sharif for providing a patch.thanks to rafal glowinski for providing an alternative implementations, see .thanks to robert parr for providing an alternative implementations, see .conflicts: src/changes/changes.xml added equalsany() and equalsanyignorecase() methods to stringutils."
3451,3451,"6 0.29538405400474366, 5 0.207261448640759, 3 0.13957307060755336, 1 0.09870461594599522, 2 0.08976464148877943, 0 0.08593322386425836, 4 0.08337894544791098",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.[] fastdateformat generates date objects wastefully.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3452,3452,"4 0.1715506715506715, 2 0.14163614163614166, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3453,3453,"6 0.21303258145363402, 3 0.1604010025062656, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
3454,3454,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3455,3455,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.15154237795747227, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
3456,3456,"3 0.39465101108936723, 2 0.10545770819743423, 1 0.10393563818221353, 6 0.10089149815177213, 4 0.09936942813655143, 0 0.09784735812133073, 5 0.09784735812133073","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3457,3457,"3 0.23886328725038408, 2 0.14925755248335892, 0 0.13312852022529442, 4 0.12775217613927292, 1 0.12058371735791096, 5 0.11520737327188944, 6 0.11520737327188944",add final modifier to local variables.add final modifier to method parameters.[] vastly expanded typeutils
3458,3458,"4 0.2735760971055089, 0 0.2173669467787115, 6 0.14547152194211016, 2 0.09841269841269841, 1 0.09318394024276379, 3 0.08795518207282915, 5 0.08403361344537817","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687checkstyletab and trailing space removalminor text changes; during 1.6 backcompat code isnt meaningfuladding cedrik limes patch from ; adding unaccenting for java 1.3->1.5 via reflection usage of sun jvms"
3459,3459,"4 0.18574213311055413, 0 0.17014759120022274, 2 0.1370091896407686, 6 0.1292119186856029, 5 0.1272626009468115, 1 0.12531328320802007, 3 0.12531328320802007", method returns number of inheritance hops between parent and subclass
3460,3460,"5 0.25860805860805863, 3 0.17655677655677654, 1 0.11672771672771674, 2 0.11501831501831503, 6 0.11330891330891332, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3461,3461,"0 0.3172643543013914, 2 0.14991181657848324, 3 0.14305310601606896, 4 0.10190084264158336, 5 0.1005291005291005, 6 0.09641387419165198, 1 0.09092690574172058",add final modifier to local variables.code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.use lowercase presentation for hex values as it is done in the jdk.use jdk functionality where available.use conversion tables for boolean arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
3462,3462,"3 0.19450743260267067, 0 0.1768707482993197, 6 0.14688838498362305, 2 0.12748803224993702, 4 0.127488032249937, 1 0.11337868480725624, 5 0.11337868480725624",add final modifier to local variables.removing the note on 2 being in the api. that can be dealt with if people find doubling to be an issue
3463,3463,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
3464,3464,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3465,3465,"3 0.21334409470002683, 6 0.15496368038740913, 0 0.13801452784503626, 2 0.12859833198816248, 1 0.1229486144740382, 4 0.12106537530266342, 5 0.12106537530266342",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
3466,3466,"5 0.2883164194639604, 6 0.12073900598490762, 0 0.11891751236013531, 1 0.11891751236013531, 4 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3467,3467,"5 0.2722832722832723, 2 0.13724053724053722, 3 0.1304029304029304, 4 0.12185592185592187, 6 0.11672771672771677, 1 0.11159951159951163, 0 0.10989010989010992",dont mutate parametersadd final modifier to method parameters.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3468,3468,"0 0.22268907563025211, 4 0.19817927170868344, 6 0.13281979458450044, 3 0.12301587301587301, 2 0.11157796451914101, 1 0.10667600373482727, 5 0.1050420168067227",removes unnecessary class reference of static method calls which are declared in the same classprevent redundant modifiersremove redundant type arguments.null-guard[] new type util features
3469,3469,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
3470,3470,"0 0.1549088771310993, 5 0.1549088771310993, 2 0.14667842445620222, 4 0.1425631981187537, 1 0.13433274544385657, 3 0.13433274544385657, 6 0.1322751322751323",[] added timedsemaphore class to concurrent package.
3471,3471,"3 0.2046176046176046, 2 0.14199134199134197, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3472,3472,"6 0.2862181909800957, 5 0.12925170068027209, 0 0.12748803224993702, 2 0.11690602166792645, 1 0.11337868480725624, 3 0.11337868480725624, 4 0.11337868480725624",make sure lines in files dont have trailing white spaces and remove all trailing white spacesusing validate where possible in concurrent package.
3473,3473,"0 0.22268907563025211, 4 0.1949112978524743, 6 0.14425770308123245, 2 0.11484593837535016, 3 0.111577964519141, 5 0.10667600373482727, 1 0.1050420168067227",removes unnecessary class reference of static method calls which are declared in the same classprevent redundant modifiersremove redundant type arguments.null-guard[] new type util features
3474,3474,"5 0.38385870780236975, 6 0.10686340263805051, 1 0.10529845741113347, 4 0.10216856695729935, 0 0.1006036217303823, 2 0.1006036217303823, 3 0.1006036217303823",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3475,3475,"6 0.2783068783068782, 2 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
3476,3476,"2 0.30182780182780183, 4 0.13684463684463682, 0 0.12000962000962002, 1 0.11495911495911496, 6 0.10990860990860991, 3 0.10822510822510822, 5 0.10822510822510822",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
3477,3477,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",: rounding utilities for converting to bigdecimal
3478,3478,"0 0.24667524667524668, 3 0.17009867009867005, 4 0.14907764907764903, 2 0.11604461604461602, 1 0.11154011154011151, 6 0.11003861003861001, 5 0.09652509652509654",": update java requirement from java 6 to 7replace usage of deprecated objectutilstostring with objectstostring: fix deprecation warningsadd final modifier to local variables.eat own dog food: separator == null ? """" : separator->objectutils.tostring(separator)remove superfluous parens."
3479,3479,"0 0.22560846560846565, 2 0.20783068783068787, 6 0.1293121693121693, 1 0.11746031746031746, 3 0.11597883597883597, 4 0.10857142857142858, 5 0.09523809523809527",added new addlistener() method that takes a boolean for if duplicates are allowed.added test method to make sure that duplicate listeners are not added.using copyonwritearraylist for thread safety.improving error checking logic and adding test cases to verify.changing eol-style to native.misc. event utils.
3480,3480,"5 0.2701014832162373, 6 0.14259692948217537, 1 0.11891751236013534, 0 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3481,3481,"0 0.2982804232804233, 3 0.1624779541446208, 2 0.13315696649029982, 1 0.1084656084656085, 4 0.09920634920634923, 5 0.09920634920634923, 6 0.09920634920634923",boolean comparisons in charrange ()cleaned up comparisons to false to just use the boolean negationoperator (!).add final modifier to local variables.adding vincent ricards patch to charrange.java providing an iterator that lets you walk the chars in the range. 454
3482,3482,"4 0.2569077013521458, 6 0.18283362727807173, 0 0.14030962179110326, 3 0.12659220066627472, 2 0.10875955320399763, 1 0.09229864785420343, 5 0.09229864785420343","sort members.[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern. add remove by regular expression methods in stringutils : - string stringutils.removeall(string text, string regex); - string stringutils.removefirst(string text, string regex);"
3483,3483,"3 0.21303258145363402, 6 0.1604010025062656, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",use validateistrue to validate argumentsadd final modifier to local variables.
3484,3484,"3 0.43475572047000616, 2 0.09997938569367139, 1 0.09420737992166561, 0 0.09276437847866417, 4 0.09276437847866417, 5 0.09276437847866417, 6 0.09276437847866417","add final modifier to local variables.format.statement unnecessarily nested within else clause.\refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3485,3485,"4 0.19211822660098518, 0 0.1538040503557745, 6 0.14422550629447178, 2 0.13464696223316913, 3 0.12698412698412703, 1 0.12506841817186648, 5 0.12315270935960594",[] add null-safe stringutils apis to wrapstringgetbytes([charset|string]).</action>
3486,3486,"5 0.28285193858964347, 4 0.12256049960967992, 0 0.12073900598490764, 6 0.12073900598490764, 1 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3487,3487,"1 0.6948096211899892, 2 0.06222611744084136, 3 0.05540948485733761, 4 0.04995617879053463, 5 0.04722952575713313, 0 0.04654786249878275, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3488,3488,"5 0.28545826932923707, 3 0.12596006144393243, 6 0.12058371735791092, 4 0.11879160266257041, 0 0.11699948796722992, 1 0.11699948796722992, 2 0.1152073732718894",document intentional drop-thruapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3489,3489,"2 0.33224614046531853, 0 0.1374211785170689, 1 0.1206784083496412, 3 0.1100239182430963, 4 0.10089149815177215, 6 0.10089149815177215, 5 0.09784735812133075",formatting fixes perhttps://patch-diff.githubusercontent.com/raw/apache/commons-lang/pull/128.diffcrlf -> lfjavadoc: fix typo but working is still awkward. - add issorted() to arrayutils. patch supplied by james sawle. in github.
3490,3490,"5 0.2719229768410096, 6 0.14077543585740301, 1 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 4 0.11709601873536299",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3491,3491,"2 0.254421768707483, 3 0.20521541950113376, 6 0.1242630385487528, 1 0.10680272108843539, 0 0.1052154195011338, 4 0.10204081632653061, 5 0.10204081632653061",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateparser too strict on abbreviated short month symbolsadd final modifier to local variables.format. fastdateparser_timezonestrategytesttesttimezonestrategypattern fails on windows with german localereimplementing 1107
3492,3492,"3 0.3877865961199295, 2 0.10846560846560846, 1 0.10229276895943565, 6 0.10229276895943565, 4 0.10074955908289243, 0 0.09920634920634923, 5 0.09920634920634923","add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3493,3493,"2 0.22874149659863938, 4 0.13151927437641722, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3494,3494,"4 0.31390665719023925, 6 0.12153518123667376, 0 0.12153518123667373, 1 0.11656005685856433, 2 0.11324330727315803, 3 0.10660980810234542, 5 0.10660980810234542","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
3495,3495,"6 0.19137466307277626, 0 0.13477088948787064, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064", fastdateparser does not handle excess hours as per simpledateformat
3496,3496,"3 0.2086580086580086, 2 0.13997113997114, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
3497,3497,"2 0.2938542938542939, 4 0.16849816849816848, 3 0.13858363858363856, 6 0.10724460724460723, 0 0.1058201058201058, 1 0.09442409442409445, 5 0.0915750915750916","add @safevarargs to some methods with vararg parameters to suppress ""type safety: potential heap pollution via varargs parameter array"" warningsremove redundant type arguments.add final modifier to local variables.[] add mode and median comparable... methods to objectutils"
3498,3498,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
3499,3499,"4 0.3127413127413127, 3 0.15658515658515657, 2 0.11304161304161303, 0 0.11154011154011152, 6 0.10553410553410553, 1 0.10403260403260405, 5 0.09652509652509654","sort members.add final modifier to local variables.rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
3500,3500,"4 0.15659340659340656, 6 0.15659340659340656, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737",use less confusing method name
3501,3501,"2 0.2972789115646258, 0 0.1496598639455782, 4 0.14331065759637185, 1 0.10362811791383221, 3 0.10204081632653063, 5 0.10204081632653063, 6 0.10204081632653063",: fix typeutils.parameterize to work correctly with narrower-typed varargs array ()fix sonarqube warning: the user-supplied array typearguments is stored directly.[] new type util features
3502,3502,"2 0.3257418909592823, 3 0.12928456406717276, 5 0.11640211640211638, 1 0.10996089256958824, 4 0.10835058661145619, 6 0.10674028065332414, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3503,3503,"5 0.2727513227513227, 6 0.12830687830687829, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3504,3504,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3505,3505,"4 0.26904761904761904, 6 0.13571428571428568, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
3506,3506,"2 0.23731459797033566, 3 0.17356232110330466, 1 0.11891751236013533, 4 0.11891751236013533, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
3507,3507,"2 0.2279265873015873, 0 0.16021825396825395, 3 0.13070436507936506, 6 0.12896825396825393, 1 0.12723214285714282, 4 0.11334325396825398, 5 0.11160714285714288","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
3508,3508,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3509,3509,"4 0.2431216931216931, 6 0.13571428571428568, 3 0.13386243386243385, 2 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 5 0.11904761904761905",: add methods for removing all invalid characters according to xml 1.0 and xml 1.1 in an input string to stringescapeutils. thanks to adam hooper
3510,3510,"5 0.28695436507936506, 6 0.12896825396825393, 2 0.12549603174603172, 4 0.11855158730158732, 0 0.1150793650793651, 1 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3511,3511,"3 0.3440383905500185, 2 0.18641565153193063, 4 0.10631229235880396, 6 0.10114433370247321, 0 0.09468438538205977, 1 0.08434846806939832, 5 0.08305647840531563","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.dont need a copy of this field.add final modifier to local variables.remove redundant type arguments.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3512,3512,"6 0.2397094430992736, 3 0.1380145278450363, 4 0.1380145278450363, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
3513,3513,"5 0.27374447046578193, 6 0.1298464741087692, 0 0.12802498048399688, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",4fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3514,3514,"5 0.2824582824582825, 0 0.2212047212047212, 6 0.12576312576312573, 1 0.09584859584859586, 2 0.09157509157509158, 3 0.09157509157509158, 4 0.09157509157509158",dont save short eras if they are the same as the long eras fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()getinstance() (java 1.6) supports more localesexplicit conversion to integer; save the value for use latergetinstance(locale) is java 1.6+applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3515,3515,"4 0.16931216931216928, 3 0.16313932980599644, 2 0.13844797178130513, 0 0.1322751322751323, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",use final consistently. [] new type util features
3516,3516,"3 0.20259740259740255, 2 0.146031746031746, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
3517,3517,"3 0.3219421101774043, 2 0.18860877684407096, 1 0.10887021475256767, 4 0.10887021475256767, 6 0.10364145658263303, 0 0.08403361344537817, 5 0.08403361344537817","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsremove redundant type arguments.fixing crlfsstatement unnecessarily nested within else clause.merge branch remove_threadutils_compiler_warningsremove compiler warnings from threadutils. thanks to pascal schuhmacher.remove compiler warnings from threadutilsincorporated feedback from fabian, formatting adjusted, count >> 1 replaced with count / 2incorporated feedback from peteradd threadutils"
3518,3518,"1 0.6941279579316388, 2 0.06290778069919173, 3 0.05677281137403836, 4 0.050637842048884996, 5 0.04654786249878275, 0 0.045184535982082004, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3519,3519,"3 0.2066378066378066, 2 0.13997113997114, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
3520,3520,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3521,3521,"6 0.28904249871991805, 5 0.13492063492063489, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
3522,3522,"3 0.29355517307324536, 6 0.25339453050296423, 5 0.103461464907248, 2 0.08873589596481163, 0 0.0873972078791356, 4 0.0873972078791356, 1 0.08605851979345956","format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3523,3523,"2 0.31446974925235793, 3 0.13089487002530478, 5 0.11479181044398434, 6 0.11318150448585232, 1 0.11157119852772028, 4 0.10996089256958823, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3524,3524,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3525,3525,"6 0.22660098522167485, 0 0.13656267104542966, 2 0.13081554460864805, 3 0.13081554460864805, 4 0.126984126984127, 1 0.12506841817186645, 5 0.12315270935960593","added missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
3526,3526,"2 0.18577307466196352, 1 0.13844797178130513, 4 0.13844797178130513, 0 0.13639035861258086, 3 0.13639035861258086, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
3527,3527,"6 0.1831065759637188, 0 0.16128117913832196, 1 0.1454081632653061, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
3528,3528,"5 0.29216269841269843, 2 0.12723214285714282, 6 0.12723214285714282, 0 0.11681547619047622, 4 0.11334325396825398, 1 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3529,3529,"5 0.27089947089947086, 6 0.13015873015873014, 1 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3530,3530,"4 0.744493035309362, 5 0.04721412374473598, 1 0.045513443472627146, 0 0.0438127632005183, 2 0.040411402656300624, 6 0.040411402656300624, 3 0.038143828960155494","sort members.rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687use index_not_found instead of magic number.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
3531,3531,"4 0.2300286234712464, 0 0.1498829039812646, 2 0.1334894613583138, 3 0.1334894613583138, 1 0.11891751236013534, 5 0.117096018735363, 6 0.117096018735363",: add zero copy write method to strbuilder; : add zero copy read method to strbuilder. thanks to mikhail mazursky.
3532,3532,"2 0.2748917748917749, 3 0.16546416546416542, 6 0.12506012506012504, 1 0.10990860990860991, 0 0.10822510822510824, 4 0.10822510822510824, 5 0.10822510822510824",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateparser too strict on abbreviated short month symbolsadd final modifier to local variables.
3533,3533,"6 0.22276029055690064, 4 0.13801452784503626, 2 0.13613128867366153, 3 0.12859833198816248, 5 0.12859833198816248, 0 0.1229486144740382, 1 0.1229486144740382",[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern.
3534,3534,"5 0.2883164194639604, 1 0.12073900598490762, 4 0.12073900598490762, 0 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3535,3535,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3536,3536,"5 0.26544566544566545, 2 0.1355311355311355, 3 0.13040293040293038, 4 0.12185592185592185, 6 0.12014652014652015, 1 0.11672771672771676, 0 0.1098901098901099",dont mutate parametersadd final modifier to method parameters.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3537,3537,"0 0.17598343685300208, 2 0.17598343685300208, 6 0.16310098918794572, 4 0.13250517598343683, 5 0.12928456406717276, 1 0.11318150448585233, 3 0.10996089256958827","functions.java whitspacesreplace tabs with four spaces, as per the projects checkstyle rules.add spaces after commas in functions.javaadd spaces after commas as per the projects checkstyle rules.added functions.trywithresources."
3538,3538,"1 0.7125778581474782, 2 0.05224030540486237, 5 0.04942736588306209, 3 0.04872413100261202, 4 0.046614426361261806, 0 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3539,3539,"5 0.2901379130887327, 4 0.12073900598490762, 0 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3540,3540,"5 0.20634920634920634, 6 0.2026038879971464, 3 0.1963616907437132, 0 0.12769752095594789, 4 0.09898341359015514, 1 0.0852505796326021, 2 0.08275370073122883",add final modifier to local variables.tab police: fastdateparser could use calendar.getdisplaynames for all text fieldsshow where the parsing failed fastdateparser does not handle unterminated quotes correctlytrailing spaces fastdateparser does not handle non-gregorian calendars properlyfix bug in java 7 (locale.tostring() format has changed) fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3541,3541,"4 0.20223398001175774, 2 0.13639035861258084, 0 0.1322751322751323, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",eat own dog food: call stringutils.isempty().
3542,3542,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
3543,3543,"5 0.28467343221441577, 4 0.12256049960967992, 0 0.12073900598490764, 6 0.12073900598490764, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3544,3544,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3545,3545,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",use not bool instead of bool == false
3546,3546,"5 0.2727513227513227, 6 0.13201058201058197, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3547,3547,"5 0.22570123939986952, 2 0.21504674929332462, 3 0.1480756686236138, 6 0.1100239182430963, 1 0.10545770819743423, 0 0.09784735812133073, 4 0.09784735812133073",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3548,3548,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3549,3549,"5 0.2883164194639604, 1 0.12256049960967995, 0 0.11891751236013533, 4 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3550,3550,"4 0.15873015873015867, 3 0.1523199023199023, 2 0.1394993894993895, 0 0.13736263736263735, 1 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
3551,3551,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3552,3552,"6 0.22660098522167485, 0 0.1327312534209086, 3 0.13081554460864805, 4 0.13081554460864805, 2 0.12889983579638753, 1 0.126984126984127, 5 0.12315270935960593","added missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
3553,3553,"5 0.2977262977262978, 1 0.13406263406263405, 0 0.13256113256113256, 2 0.12054912054912052, 3 0.11003861003861001, 4 0.10703560703560706, 6 0.09802659802659805","change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
3554,3554,"4 0.2293844367015099, 6 0.20363917924893538, 0 0.14130855594270228, 2 0.12640340689121177, 3 0.11285327138985675, 1 0.09388308168795977, 5 0.09252806813782426",sort members.[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern.stringutilsreplacepattern: fix source code formatting making replacepattern/removepattern methods null safe in stringutils[] add stringutils api to call string.replaceall in dotall a.k.a. single-line mode.
3555,3555,"3 0.28187403993855603, 2 0.14208909370199688, 0 0.1152073732718894, 1 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894, 6 0.1152073732718894",add final modifier to local variables.[] part 2: refactor tostringstyle and tostringbuildertest to verify that we are unsetting the registry when no longer needed
3556,3556,"0 0.17757936507936511, 6 0.1619543650793651, 3 0.15848214285714288, 4 0.15500992063492064, 2 0.12375992063492065, 1 0.1116071428571429, 5 0.1116071428571429",pmd: remove useless parenthesesfixing crlfsstatement unnecessarily nested within else clause.: numberutilscreatenumber() returns positive bigdecimal when negative float is expected. thanks to renat zhilkibaev.
3557,3557,"6 0.1950113378684807, 3 0.1434240362811791, 5 0.1414399092970522, 4 0.13350340136054425, 0 0.12953514739229027, 2 0.12953514739229027, 1 0.1275510204081633"," partial: implement format u for fastdateformat, day number of week"
3558,3558,"5 0.2921626984126984, 6 0.12896825396825393, 2 0.1237599206349206, 4 0.1168154761904762, 1 0.11507936507936509, 0 0.11160714285714286, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3559,3559,"5 0.2727513227513227, 6 0.12830687830687829, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3560,3560,"6 0.3305322128851541, 5 0.12301587301587301, 3 0.11974789915966384, 0 0.11157796451914101, 1 0.1050420168067227, 2 0.1050420168067227, 4 0.1050420168067227",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor some duplicate code.
3561,3561,"2 0.32252127904301814, 3 0.12928456406717273, 5 0.11640211640211638, 1 0.11157119852772028, 6 0.10996089256958821, 4 0.10674028065332414, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3562,3562,"5 0.34639340968454896, 2 0.17480409885473175, 6 0.10166767128792445, 3 0.09744826200522405, 1 0.0960417922443239, 0 0.0918223829616235, 4 0.0918223829616235",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3563,3563,"2 0.3076621595140113, 4 0.14030962179110323, 0 0.1389378796786204, 3 0.13207916911620612, 5 0.09641387419165197, 1 0.09367038996668627, 6 0.09092690574172056","extract logic for checking string representation of objects into separate methodsformat source codevariable names should follow naming conventionsmodified appenddetail method for object value in jsontostringstyle classfix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.add final modifier to local variables."
3564,3564,"4 0.19302721088435368, 0 0.1672335600907029, 3 0.12953514739229027, 1 0.1275510204081633, 2 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
3565,3565,"2 0.27172450901264456, 4 0.12294861447403822, 0 0.12106537530266345, 1 0.12106537530266345, 3 0.12106537530266345, 5 0.12106537530266345, 6 0.12106537530266345",crlf -> lfjavadoc: fix typo but working is still awkward.swap and shift for arrays
3566,3566,"3 0.19406041986687145, 2 0.16180235535074242, 4 0.1474654377880184, 0 0.14567332309267791, 1 0.12058371735791093, 5 0.11520737327188942, 6 0.11520737327188942","use stringbuilderappend(charsequence, int, int) were possible to improve performance(similar to , thanks to stephane landelle for the suggestion)add final modifier to local variables."
3567,3567,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3568,3568,"4 0.22631848438300045, 0 0.1600102406554019, 5 0.1259600614439324, 2 0.12416794674859191, 1 0.1241679467485919, 6 0.12058371735791092, 3 0.11879160266257038",adding green regionmatches implementation and moving endswith and startswith methods to use it; thus giving them charsequence based apis. 687
3569,3569,"2 0.17679255610290093, 4 0.17487684729064037, 0 0.1442255062944718, 6 0.1327312534209086, 1 0.12506841817186648, 3 0.12315270935960596, 5 0.12315270935960596","fix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring"
3570,3570,"6 0.2774114774114774, 0 0.15604395604395602, 2 0.12014652014652015, 3 0.11672771672771673, 1 0.1098901098901099, 4 0.1098901098901099, 5 0.1098901098901099",make sure lines in files dont have trailing white spaces and remove all trailing white spaces - dateutilsparsedate uses default locale; add locale support
3571,3571,"5 0.26463700234192034, 6 0.14623991673171996, 1 0.12073900598490762, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 4 0.11709601873536299",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3572,3572,"2 0.3080285254198298, 3 0.13250517598343683, 1 0.12284334023464456, 6 0.11157119852772028, 5 0.11157119852772025, 4 0.10996089256958823, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3573,3573,"0 0.2504668534080299, 4 0.19327731092436973, 2 0.13118580765639587, 1 0.10830999066293186, 3 0.10667600373482727, 5 0.1050420168067227, 6 0.1050420168067227","lan-1114 fixes bug in typeutils.equals(wildcardtype, type) where it was incorrectly returning true when the second argument was not a wildcard type.typeutils wildcard fixes[] new type util features"
3574,3574,"3 0.3064182194616977, 4 0.13250517598343683, 2 0.12606395215090868, 6 0.1180124223602484, 1 0.10996089256958823, 0 0.10351966873706005, 5 0.10351966873706005",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerformat to 120 line length.add final modifier to local variables.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
3575,3575,"3 0.18783068783068776, 5 0.15079365079365076, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 6 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
3576,3576,"0 0.16326530612244894, 3 0.16326530612244894, 6 0.14540816326530606, 5 0.13945578231292516, 4 0.13350340136054423, 1 0.12755102040816327, 2 0.12755102040816327",tab police: fastdateparser could use calendar.getdisplaynames for all text fields
3577,3577,"3 0.3324104835732743, 2 0.18770764119601327, 4 0.10889627168696933, 6 0.10372831303063859, 0 0.09468438538205977, 1 0.08951642672572906, 5 0.08305647840531563","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.dont need a copy of this field.add final modifier to local variables.remove redundant type arguments.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3578,3578,"4 0.6725274725274726, 0 0.07252747252747253, 3 0.061701261701261695, 6 0.056003256003256, 5 0.04802604802604801, 2 0.04631664631664631, 1 0.042897842897842896","add final modifier to local variables.fix tabs to spaces, thank you jörg.https://issues.apache.org/jira/browse/ stringutils.containsany methods incorrectly matches unicode 2.0+ supplementary characters.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
3579,3579,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3580,3580,"3 0.27470558115719407, 2 0.14746543778801838, 1 0.11699948796722992, 0 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894, 6 0.1152073732718894",add final modifier to local variables.[] part 2: refactor tostringstyle and tostringbuildertest to verify that we are unsetting the registry when no longer needed
3581,3581,"3 0.20057720057720052, 2 0.144011544011544, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
3582,3582,"0 0.2523809523809523, 2 0.13756613756613753, 1 0.12830687830687829, 3 0.12460317460317459, 4 0.11904761904761904, 5 0.11904761904761904, 6 0.11904761904761904",adding vincent ricards patch to charrange.java providing an iterator that lets you walk the chars in the range. 454
3583,3583,"2 0.2267573696145124, 1 0.13151927437641722, 4 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3584,3584,"2 0.23072562358276635, 1 0.12953514739229025, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3585,3585,"5 0.27460317460317457, 1 0.1246031746031746, 6 0.1246031746031746, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3586,3586,"2 0.4457671957671958, 4 0.1350676072898295, 3 0.10934744268077597, 6 0.08774250440917103, 0 0.07951205173427392, 5 0.07539682539682535, 1 0.06716637272192827",remove redundant type arguments. simplify arrayutils removeelements by using newdecrementandget() method: improve arrayutils removeelements time complexity to o(n) ()based on patch submitted by jeffery yuancrlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables. arrayutils removeelements methods use unnecessary hashseteliminate conversion of bitset to int[] arrayutils removeelements methods use unnecessary hashsetreplace hashset with bitset (less memory; faster)there are only two distinct boolean values arrayutils removeelements methods clone temporary index arrays unnecessarilyreduce number of created arrays[] complement arrayutils.addall() variants with by-index and by-value removal methods
3587,3587,"3 0.40226136116547073, 1 0.10089149815177213, 2 0.10089149815177213, 6 0.10089149815177213, 4 0.09936942813655143, 0 0.09784735812133073, 5 0.09784735812133073","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3588,3588,"5 0.28521825396825395, 6 0.12723214285714282, 2 0.12375992063492063, 4 0.12028769841269843, 1 0.11681547619047622, 0 0.1150793650793651, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3589,3589,"2 0.2724472873726605, 3 0.1663113006396588, 6 0.12816868040748636, 1 0.11324330727315803, 0 0.10660980810234542, 4 0.10660980810234542, 5 0.10660980810234542",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateparser too strict on abbreviated short month symbolsadd final modifier to local variables.format.
3590,3590,"3 0.4229323308270677, 2 0.10129490392648287, 4 0.09837092731829573, 1 0.0954469507101086, 0 0.09398496240601503, 5 0.09398496240601503, 6 0.09398496240601503","add final modifier to local variables.pmd: these nested if statements could be combinedformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3591,3591,"3 0.16086691086691082, 1 0.1459096459096459, 2 0.1437728937728938, 0 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",: added validstate()
3592,3592,"2 0.24767378215654073, 3 0.12889983579638753, 1 0.1288998357963875, 6 0.12506841817186645, 0 0.12315270935960591, 4 0.12315270935960591, 5 0.12315270935960591",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
3593,3593,"0 0.21693121693121686, 2 0.13700918964076858, 1 0.1331105541631857, 4 0.1311612364243943, 5 0.1292119186856029, 3 0.1272626009468115, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
3594,3594,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",statements unnecessarily nested within else clause.
3595,3595,"2 0.2966742252456538, 6 0.19746787603930457, 3 0.12603930461073312, 1 0.11281179138321991, 0 0.09561602418745274, 4 0.0863567649281935, 5 0.08503401360544217",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.new test caseexplanations about algorithmtabs replaced by spacesnew tests addedswap and shift for arrays
3596,3596,"5 0.29856386999244144, 2 0.12925170068027209, 1 0.11690602166792645, 6 0.11514235323759135, 0 0.11337868480725626, 3 0.11337868480725626, 4 0.11337868480725626", simplify fastdateformat; eliminate boxingrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3597,3597,"5 0.28667628667628664, 2 0.13516113516113512, 6 0.1284271284271284, 4 0.12169312169312169, 1 0.1115921115921116, 0 0.10822510822510824, 3 0.10822510822510824", simplify fastdateformat; eliminate boxingrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3598,3598,"3 0.21067821067821063, 2 0.13997113997114, 0 0.12987012987012986, 1 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
3599,3599,"4 0.1878306878306878, 0 0.14667842445620222, 6 0.13639035861258086, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323",[] stringutils join apis for primitives.
3600,3600,"2 0.3480725623582766, 4 0.1242630385487528, 0 0.11950113378684804, 1 0.10204081632653061, 3 0.10204081632653061, 5 0.10204081632653061, 6 0.10204081632653061",": arrayutils.removeall(object array, int... indices) should do the clone, not its callers ()crlf -> lfjavadoc: fix typo but working is still awkward.[] complement arrayutils.addall() variants with by-index and by-value removal methods"
3601,3601,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3602,3602,"5 0.2901379130887327, 4 0.12438199323445222, 0 0.11709601873536299, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3603,3603,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3604,3604,"5 0.28348214285714285, 6 0.13070436507936506, 2 0.12549603174603174, 0 0.12028769841269842, 1 0.11507936507936509, 4 0.11334325396825398, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3605,3605,"0 0.18151561699948798, 3 0.17972350230414744, 6 0.1474654377880184, 4 0.14567332309267791, 1 0.11520737327188943, 2 0.11520737327188943, 5 0.11520737327188943",fixing crlfsstatement unnecessarily nested within else clause.: numberutilscreatenumber() returns positive bigdecimal when negative float is expected. thanks to renat zhilkibaev.
3606,3606,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
3607,3607,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
3608,3608,"5 0.16108171663727217, 0 0.15079365079365076, 2 0.15079365079365076, 6 0.14050558495002943, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323", simplify fastdateformat; eliminate boxing
3609,3609,"0 0.17250673854447438, 2 0.1473495058400719, 1 0.13896376160527107, 3 0.13686732554657086, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",add explict default case
3610,3610,"2 0.2702947845804989, 3 0.1496598639455782, 6 0.14489795918367343, 0 0.11791383219954646, 4 0.1131519274376417, 1 0.10204081632653063, 5 0.10204081632653063",add final modifier to local variables.remove trailing whitespacescrlf -> lfjavadoc: fix typo but working is still awkward.implements : add a method to arrayutils for removing all occurrences of a given element. thanks to haiyang li.
3611,3611,"3 0.2046176046176046, 2 0.144011544011544, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3612,3612,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3613,3613,"2 0.22820712984647407, 3 0.18084829560239393, 4 0.12073900598490765, 1 0.11891751236013534, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
3614,3614,"6 0.22751322751322753, 4 0.19691741430871862, 3 0.1276742581090407, 2 0.11801242236024842, 0 0.1164021164021164, 1 0.10996089256958824, 5 0.10351966873706006",[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern.[] add stringutils api to call string.replaceall in dotall a.k.a. single-line mode.
3615,3615,"0 0.18310657596371877, 1 0.153344671201814, 5 0.1374716553287982, 2 0.13350340136054423, 4 0.13350340136054423, 3 0.13151927437641722, 6 0.12755102040816327",": add archutils - an utility class for the ""os.arch"" system property ()"
3616,3616,"5 0.2534798534798535, 3 0.17313797313797313, 2 0.12356532356532357, 6 0.11843711843711847, 1 0.11159951159951163, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3617,3617,"4 0.15231990231990233, 3 0.15018315018315015, 2 0.14377289377289373, 0 0.14163614163614163, 1 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
3618,3618,"6 0.3452380952380952, 5 0.12464985994397755, 0 0.10994397759103641, 1 0.10504201680672269, 2 0.10504201680672269, 3 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
3619,3619,"2 0.25637325637325636, 0 0.14357864357864356, 6 0.1385281385281385, 4 0.12000962000962004, 5 0.11664261664261667, 1 0.11495911495911498, 3 0.10990860990860993","crlf -> lfjavadoc: fix typo but working is still awkward.checkstyle and trailing spaces. arrayutils.add(t[] array[, offset], t element) can create unexpected classcastexception"
3620,3620,"2 0.31361231361231356, 4 0.12506012506012507, 0 0.12169312169312167, 1 0.1132756132756133, 6 0.10990860990860991, 3 0.10822510822510822, 5 0.10822510822510822",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
3621,3621,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
3622,3622,"3 0.24200598113641592, 4 0.14699792960662522, 6 0.13411548194156886, 0 0.13250517598343683, 2 0.13250517598343683, 1 0.10835058661145619, 5 0.10351966873706006","refactor ""gmt"" magic string.add a default case to switch to appease findbugs: nullpointerexception in fastdateparser$timezonestrategy ()replicate the fix for 1186add final modifier to local variables.remove redundant type arguments."
3623,3623,"5 0.2846734322144158, 4 0.12620348685922456, 0 0.11891751236013534, 6 0.11891751236013534, 1 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3624,3624,"0 0.1569664902998236, 5 0.1569664902998236, 2 0.14462081128747795, 4 0.13844797178130513, 1 0.13639035861258086, 3 0.13433274544385657, 6 0.1322751322751323",[] added timedsemaphore class to concurrent package.
3625,3625,"6 0.2783068783068782, 2 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
3626,3626,"0 0.28612657184085755, 3 0.15625644197072766, 2 0.15481344052772622, 4 0.11296639868068435, 1 0.10430839002267571, 5 0.0927643784786642, 6 0.0927643784786642",[] org.apache.commons.lang3.reflect.fieldutils.removefinalmodifier(field) does not clean up after itself. only call setaccessible if neccessary and tell the caller about it so it can undo the change if need be.add final modifier to local variables.adding nopmd tags for various empty catch blocksremove pre java 5 workaround
3627,3627,"4 0.7087977034785546, 3 0.06222559945964201, 0 0.04981425194191151, 5 0.04804120229652144, 2 0.04745018574805809, 1 0.04567713610266802, 6 0.03799392097264438","sort members.[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
3628,3628,"0 0.2890125747268604, 4 0.20676149247577819, 3 0.11152339723768294, 6 0.10575139146567716, 2 0.0999793856936714, 1 0.09420737992166564, 5 0.0927643784786642",prevent redundant modifiersremove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)making unescapehtml _not_ escape unfinished numeric entities by default (it ignores them); however adding options that will fire an exception or unescape the numeric entity. 710
3629,3629,"5 0.2921626984126984, 6 0.13070436507936506, 2 0.12549603174603174, 0 0.11334325396825398, 1 0.11334325396825398, 4 0.11334325396825398, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3630,3630,"2 0.3611686220381873, 1 0.11801242236024842, 4 0.10674028065332414, 0 0.10351966873706006, 3 0.10351966873706006, 5 0.10351966873706006, 6 0.10351966873706006",crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodswap and shift for arrays
3631,3631,"4 0.3337868480725623, 6 0.1226757369614512, 0 0.11791383219954645, 1 0.11156462585034015, 2 0.10997732426303856, 3 0.10204081632653061, 5 0.10204081632653061","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687use index_not_found instead of magic number."
3632,3632,"2 0.22477324263038542, 1 0.13350340136054423, 4 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3633,3633,"2 0.1878306878306878, 0 0.13844797178130513, 5 0.13844797178130513, 4 0.13639035861258086, 1 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
3634,3634,"5 0.2883164194639604, 4 0.12438199323445225, 6 0.11891751236013531, 0 0.11709601873536299, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3635,3635,"3 0.22278911564625847, 2 0.13945578231292516, 0 0.12755102040816327, 1 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
3636,3636,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3637,3637,"5 0.28285193858964347, 4 0.12256049960967995, 6 0.12073900598490764, 0 0.12073900598490761, 1 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3638,3638,"3 0.2188208616780045, 2 0.13945578231292516, 1 0.12953514739229025, 6 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327",format.add final modifier to local variables.
3639,3639,"3 0.35039090262970857, 2 0.10992655768775172, 4 0.10992655768775172, 1 0.10826818289504858, 6 0.10826818289504858, 0 0.10660980810234542, 5 0.10660980810234542","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3640,3640,"6 0.2764550264550264, 2 0.12830687830687829, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
3641,3641,"5 0.27645502645502645, 6 0.12830687830687829, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3642,3642,"3 0.3586827765932243, 4 0.10826818289504857, 0 0.10660980810234541, 1 0.10660980810234541, 2 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3643,3643,"3 0.22087705138552594, 1 0.14178100618778583, 2 0.1380145278450363, 4 0.13424804950228675, 0 0.12294861447403822, 5 0.12106537530266345, 6 0.12106537530266345",fix non-critical typos in comments and javadocfix typos in several local variablesuse better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
3644,3644,"5 0.2783068783068782, 1 0.12275132275132275, 6 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3645,3645,"3 0.36321195144724555, 1 0.10830999066293186, 6 0.10830999066293186, 0 0.1050420168067227, 2 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3646,3646,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3647,3647,"4 0.17679255610290093, 2 0.16912972085385877, 0 0.14614121510673234, 6 0.13273125342090863, 1 0.12889983579638756, 3 0.12315270935960596, 5 0.12315270935960596","fix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring"
3648,3648,"5 0.30072930072930076, 0 0.13856713856713856, 1 0.12655512655512655, 2 0.12054912054912054, 3 0.11003861003861003, 4 0.10403260403260407, 6 0.09952809952809956","change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
3649,3649,"2 0.3637923637923638, 3 0.13856713856713854, 1 0.11003861003861001, 4 0.09802659802659805, 0 0.09652509652509654, 5 0.09652509652509654, 6 0.09652509652509654",add final modifier to local variables.crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodswap and shift for arrays
3650,3650,"3 0.21693121693121686, 6 0.14285714285714282, 2 0.13505987190197713, 1 0.1292119186856029, 0 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",pmd: useless parentheses.add final modifier to local variables.
3651,3651,"6 0.2857142857142857, 5 0.22114972114972115, 0 0.10403260403260405, 1 0.09802659802659804, 4 0.09802659802659804, 2 0.09652509652509654, 3 0.09652509652509654"," fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses . fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
3652,3652,"5 0.2838624338624338, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 6 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3653,3653,"5 0.2517704517704518, 3 0.1663003663003663, 2 0.1286935286935287, 6 0.12014652014652014, 1 0.11330891330891334, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3654,3654,"3 0.23131799536293915, 0 0.2138398430533262, 4 0.16515070447654714, 2 0.12020688425182804, 6 0.09773497413946851, 1 0.0914927768860353, 5 0.08025682182985554",": better naming and java 6 specifics around handling a leading +fixing crlfsstatement unnecessarily nested within else clause.: numberutilsisparsable method(s). thanks to juan pablo santos rodríguez. fix numberutilsisnumber() returns false for ""0.0"", ""0.4790"", et al numberutilsisnumber(string) fails to reject invalid octal numbers numberutilsisnumber does not allow for hex 0xabcdadd final modifier to local variables.fix pmd issues: ""these nested if statements could be combined""wsfixing numberutils.isnumber so that 1.1l is not considered a number. 664"
3655,3655,"4 0.1725067385444744, 0 0.15363881401617252, 1 0.13477088948787067, 2 0.13477088948787067, 3 0.13477088948787067, 5 0.13477088948787067, 6 0.13477088948787067",moving abbreviate + abbreviatemiddle to charsequences
3656,3656,"2 0.22874149659863938, 4 0.13151927437641722, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3657,3657,"3 0.27828981054787505, 2 0.1456733230926779, 0 0.1152073732718894, 1 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894, 6 0.1152073732718894",add final modifier to local variables.[] part 2: refactor tostringstyle and tostringbuildertest to verify that we are unsetting the registry when no longer needed
3658,3658,"6 0.21498189919242547, 3 0.1584516847674742, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
3659,3659,"3 0.34356261022927687, 6 0.2386243386243386, 5 0.09047619047619045, 2 0.08800705467372134, 1 0.08059964726631394, 0 0.07936507936507936, 4 0.07936507936507936","lvar should not hide ivar.add final modifier to local variables.format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3660,3660,"6 0.2612433862433862, 0 0.21649029982363316, 2 0.12081128747795414, 4 0.10383597883597884, 1 0.09920634920634923, 3 0.09920634920634923, 5 0.09920634920634923","make sure lines in files dont have trailing white spaces and remove all trailing white spaceswhen writing about the hash code, use hash code, the compound hashcode is not a work in english. the text hashcode() is left as in of course."
3661,3661,"3 0.22278911564625845, 1 0.1354875283446712, 2 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
3662,3662,"5 0.2708994708994708, 6 0.13201058201058197, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3663,3663,"5 0.2783068783068782, 1 0.12275132275132275, 6 0.12275132275132272, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3664,3664,"4 0.7290783678218232, 5 0.05077702983462144, 6 0.047868362004487644, 1 0.04670489487243412, 0 0.04495969417435384, 2 0.04088755921216654, 3 0.03972409208011302","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
3665,3665,"2 0.28467343221441577, 4 0.12256049960967995, 0 0.12073900598490764, 1 0.11891751236013533, 3 0.11891751236013533, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
3666,3666,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
3667,3667,"2 0.3945578231292517, 3 0.13662131519274373, 1 0.10884353741496594, 4 0.09297052154195012, 6 0.09164777021919876, 0 0.09032501889644748, 5 0.08503401360544219",add final modifier to local variables.better javadoc for arrayutils.swap variantscrlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodexamples added in javadoctabs replaced by spacesnew tests addedswap and shift for arrays
3668,3668,"3 0.3570244018005211, 2 0.10992655768775171, 0 0.10660980810234541, 1 0.10660980810234541, 4 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3669,3669,"5 0.2901379130887327, 4 0.12073900598490764, 6 0.12073900598490764, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3670,3670,"5 0.27089947089947086, 6 0.1283068783068783, 1 0.12460317460317462, 0 0.11904761904761907, 2 0.11904761904761907, 3 0.11904761904761907, 4 0.11904761904761907",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3671,3671,"5 0.28725038402457753, 2 0.13133640552995388, 6 0.11879160266257041, 1 0.11699948796722992, 0 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",restore binary compartibilitytrailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3672,3672,"2 0.18769145084934555, 1 0.16429963798384847, 5 0.13505987190197713, 3 0.1311612364243943, 4 0.1311612364243943, 0 0.12531328320802007, 6 0.12531328320802007",adding hennings github pull request with a triple implementation. 675
3673,3673,"1 0.6914013048982374, 2 0.061544454182490986, 3 0.05745447463238873, 4 0.05200116856558573, 5 0.04791118901548349, 0 0.04586619924043238, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3674,3674,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3675,3675,"0 0.167254556143445, 2 0.15285126396237503, 4 0.15079365079365076, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
3676,3676,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3677,3677,"3 0.28621819098009565, 2 0.12925170068027206, 0 0.1257243638196019, 1 0.11690602166792644, 6 0.11514235323759134, 4 0.11337868480725623, 5 0.11337868480725623","[] part 2: refactor tostringstyle and tostringbuildertest to verify that we are unsetting the registry when no longer needed[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
3678,3678,"5 0.2886904761904762, 6 0.12896825396825395, 2 0.12549603174603174, 1 0.1168154761904762, 0 0.1150793650793651, 4 0.113343253968254, 3 0.11160714285714289",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3679,3679,"2 0.22274264897215712, 3 0.18631277647671085, 1 0.12073900598490764, 4 0.11891751236013533, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
3680,3680,"0 0.27357609710550895, 3 0.15723622782446314, 2 0.13893557422969188, 6 0.12455648926237162, 4 0.11409897292250235, 1 0.09579831932773109, 5 0.09579831932773109","use validateistrue to validate arguments: update java requirement from java 6 to 7use try with resources in serializationutils: serializationutils::deserialize has unnecessary code and a comment for that ()there is no real cce possible, even the javadoc say so. githubs blame showed the code and javadoc is written by two indiviual person in two different years, so that may be the cause.eliminate one unchecked warning; localise and document othersadd final modifier to local variables.[] use generics in serializationutils"
3681,3681,"5 0.2883164194639604, 4 0.12256049960967993, 0 0.12073900598490762, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3682,3682,"3 0.2508884150675195, 4 0.15138592750533045, 2 0.1430940535418147, 6 0.11821843165126748, 5 0.11656005685856431, 0 0.11324330727315803, 1 0.10660980810234542",7micro optimization: replace stringbuilder with string concatenation so that the compiler can better optimize the codeuse final consistently. : new class classpathutils with methods for turning fqn into resource path
3683,3683,"1 0.7097649186256781, 2 0.05224030540486236, 3 0.050130600763512154, 4 0.04942736588306208, 0 0.048020896122161955, 5 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3684,3684,"6 0.2838624338624338, 2 0.1208994708994709, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
3685,3685,"0 0.2591802890310353, 1 0.1298270552001895, 3 0.1298270552001895, 5 0.1265103056147832, 4 0.1231935560293769, 2 0.1182184316512675, 6 0.11324330727315804","[] add fieldutils getallfields() to return all the fields defined in the given class and super classes. alternate impl that splits into two apis, one with an array result, the other with a list."
3686,3686,"5 0.29042658730158727, 6 0.12896825396825393, 2 0.12549603174603172, 1 0.1150793650793651, 4 0.1150793650793651, 0 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3687,3687,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3688,3688,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
3689,3689,"0 0.19327731092436976, 1 0.17040149393090567, 6 0.1573295985060691, 4 0.13281979458450047, 2 0.12628384687208216, 3 0.11484593837535018, 5 0.10504201680672272","remove redundant type arguments.: add event support utilitiesapplying documentation patch ""commons-event-support-docs.patch"" from michael wooten.changing eol-style to native.misc. event utils."
3690,3690,"0 0.22472848788638256, 2 0.13700918964076858, 1 0.1292119186856029, 4 0.1292119186856029, 3 0.1272626009468115, 5 0.1272626009468115, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
3691,3691,"0 0.17989417989417986, 4 0.16819827346143132, 1 0.14285714285714282, 2 0.13116123642439428, 3 0.1272626009468115, 5 0.12531328320802007, 6 0.12531328320802007",provide simple method to wrap a given type to the typed interface
3692,3692,"2 0.3257418909592823, 3 0.12445364619277663, 1 0.11801242236024842, 5 0.11479181044398436, 4 0.10674028065332414, 6 0.10674028065332414, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3693,3693,"0 0.1693121693121693, 2 0.15285126396237506, 4 0.1487360376249265, 1 0.13227513227513232, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",: new methods for lang3.validatethis from github.
3694,3694,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3695,3695,"0 0.15659340659340656, 3 0.15659340659340656, 1 0.13736263736263737, 2 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] vastly expanded typeutils
3696,3696,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3697,3697,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
3698,3698,"0 0.17679255610290093, 2 0.16338259441707714, 4 0.14997263273125344, 6 0.1403940886699507, 1 0.12315270935960594, 3 0.12315270935960594, 5 0.12315270935960594",: new methods for lang3.validate ()fixed method names; fixed differentobject to use object.equals
3699,3699,"2 0.23270975056689333, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3700,3700,"2 0.23549310434556336, 3 0.17174082747853237, 1 0.12438199323445227, 0 0.117096018735363, 4 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
3701,3701,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3702,3702,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort methods.
3703,3703,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",use not bool instead of bool == false
3704,3704,"2 0.2041847041847042, 0 0.16378066378066378, 1 0.1486291486291486, 4 0.14694564694564693, 5 0.11664261664261666, 3 0.11159211159211162, 6 0.10822510822510825", - jsontostringstyle does not escape double quote in a stringvalue[github] commons-lang pull request : intellij idea refactorings..: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3705,3705,"0 0.21108326371484268, 4 0.13700918964076864, 3 0.13311055416318576, 2 0.13311055416318573, 1 0.13116123642439434, 5 0.12921191868560292, 6 0.1253132832080201",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
3706,3706,"6 0.22445436507936506, 0 0.16542658730158727, 4 0.14285714285714282, 3 0.12375992063492063, 2 0.12028769841269843, 1 0.11160714285714288, 5 0.11160714285714288",remove redundant casts ()remove redundant casts throughout the codebase to make it cleaner and easier to read.validation[] new type util features
3707,3707,"0 0.2705026455026456, 3 0.1763668430335097, 6 0.1316137566137566, 2 0.11155202821869492, 4 0.11155202821869489, 1 0.09920634920634923, 5 0.09920634920634923","a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables.[] constructorutils.invoke*(*, object... args) variants cannot handle null valuesreview and cleanup javadoc in constructorutilsmove/comment suppresswarnings(unchecked)/refactor surrounding code"
3708,3708,"3 0.2126022126022126, 0 0.18566618566618567, 4 0.13516113516113515, 2 0.12674362674362677, 1 0.12337662337662336, 5 0.10822510822510825, 6 0.10822510822510825",add final modifier to local variables.merge branch : add method containsallwords to wordutils. thanks to eduardo martins.always return false to contains a null word
3709,3709,"6 0.3235653235653236, 5 0.12698412698412698, 0 0.1098901098901099, 1 0.1098901098901099, 2 0.1098901098901099, 3 0.1098901098901099, 4 0.1098901098901099",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
3710,3710,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",validation[] new type util features
3711,3711,"4 0.20508944318468128, 3 0.1803980851599899, 2 0.14336104812295286, 0 0.12219702695893175, 6 0.12043335852859666, 1 0.11514235323759137, 5 0.11337868480725627",sort members.extract method.add final modifier to local variables.[] stringutils join apis for primitives.
3712,3712,"2 0.23072562358276635, 1 0.12953514739229025, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3713,3713,"0 0.22448979591836732, 4 0.15923406399596873, 1 0.14512471655328793, 2 0.1257243638196019, 5 0.11866969009826155, 3 0.11337868480725624, 6 0.11337868480725624",[github] commons-lang pull request : intellij idea refactorings..[] provide typeliteral class similar to javax.enterprise.util.typeliteral
3714,3714,"6 0.15659340659340654, 2 0.1459096459096459, 3 0.1459096459096459, 1 0.1394993894993895, 0 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735",add stringmatchertostring(); useful from a debugger.
3715,3715,"5 0.2810304449648711, 4 0.12802498048399688, 1 0.12073900598490762, 6 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3716,3716,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3717,3717,"5 0.1642996379838485, 4 0.1545530492898914, 0 0.14870509607351712, 2 0.14285714285714285, 6 0.13311055416318573, 1 0.13116123642439434, 3 0.1253132832080201","use term ""binary"" instead of ""boolarray"" in conversion. improve javadoc of class."
3718,3718,"6 0.20238095238095236, 0 0.15238095238095234, 2 0.1375661375661376, 4 0.13571428571428568, 3 0.1283068783068783, 1 0.12460317460317462, 5 0.11904761904761907","<action issue="""" type=""add"" dev=""ggregory"">add apis mutableboolean settrue() and setfalse()</action>"
3719,3719,"5 0.2727513227513227, 6 0.12645502645502643, 1 0.12460317460317459, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3720,3720,"6 0.29221648498756936, 5 0.19716963090457068, 3 0.14897685982023331, 2 0.0940906483075158, 0 0.09275196022183975, 1 0.08873589596481164, 4 0.08605851979345958",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3721,3721,"3 0.3487325278370054, 1 0.11158493248045488, 2 0.10992655768775172, 4 0.10826818289504858, 6 0.10826818289504858, 0 0.10660980810234542, 5 0.10660980810234542","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3722,3722,"3 0.18799603174603174, 4 0.1636904761904762, 2 0.15848214285714285, 6 0.1341765873015873, 0 0.12896825396825395, 1 0.1150793650793651, 5 0.11160714285714289",remove redundant type arguments.add final modifier to local variables.[] add mode and median comparable... methods to objectutils
3723,3723,"3 0.35204927742241166, 2 0.11324330727315801, 4 0.10826818289504857, 0 0.10660980810234541, 1 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3724,3724,"2 0.2154566744730679, 3 0.1772053083528493, 6 0.1334894613583138, 1 0.12256049960967998, 0 0.11709601873536302, 4 0.11709601873536302, 5 0.11709601873536302","add final modifier to local variables.: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
3725,3725,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.15154237795747227, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
3726,3726,"3 0.2016967706622879, 0 0.1442255062944718, 6 0.14230979748221126, 5 0.13464696223316913, 2 0.13081554460864808, 1 0.12315270935960594, 4 0.12315270935960594",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
3727,3727,"5 0.28521825396825395, 6 0.13070436507936506, 2 0.12375992063492061, 4 0.11855158730158731, 1 0.1168154761904762, 0 0.11334325396825398, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3728,3728,"5 0.28467343221441577, 4 0.12620348685922456, 0 0.11891751236013531, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3729,3729,"3 0.18689196108550948, 1 0.15642601126472094, 0 0.1474654377880184, 6 0.1313364055299539, 4 0.12775217613927292, 5 0.12596006144393246, 2 0.12416794674859194",add final modifier to local variables.: added atomicinitializer class. introduced new concurrentinitializer interface which is now implemented by all all initializer classes.
3730,3730,"2 0.19867724867724862, 3 0.18201058201058198, 0 0.13571428571428568, 1 0.12645502645502646, 4 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",fix typos in commentssuppress warning about vararg usage.add final modifier to local variables.
3731,3731,"5 0.25518925518925517, 3 0.17484737484737478, 2 0.12185592185592187, 6 0.11672771672771674, 1 0.1115995115995116, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3732,3732,"4 0.17584325396825395, 2 0.1619543650793651, 0 0.15848214285714285, 3 0.14459325396825395, 6 0.12202380952380956, 1 0.12028769841269844, 5 0.11681547619047623",sort by method name.add final modifier to method parameters. added alternative checked exception wrapping/unwrapping methods
3733,3733,"3 0.2046176046176046, 2 0.14401154401154398, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3734,3734,"3 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",format.
3735,3735,"2 0.285458269329237, 6 0.1259600614439324, 1 0.12237583205325141, 3 0.1205837173579109, 0 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure placement of curly braces is consistent
3736,3736,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3737,3737,"5 0.28015873015873005, 1 0.12275132275132275, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3738,3738,"5 0.2883164194639604, 4 0.12620348685922456, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3739,3739,"2 0.196394942157654, 3 0.18132902878665585, 0 0.1285983319881625, 5 0.12671509281678775, 1 0.12294861447403822, 4 0.12294861447403822, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
3740,3740,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3741,3741,"5 0.28695436507936506, 2 0.12723214285714282, 6 0.12723214285714282, 0 0.11681547619047622, 4 0.11681547619047622, 1 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3742,3742,"5 0.2755659640905543, 6 0.1371324486078584, 1 0.11891751236013534, 0 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3743,3743,"5 0.29322179322179326, 0 0.14157014157014156, 1 0.13105963105963106, 2 0.11604461604461602, 3 0.11003861003861001, 4 0.10703560703560706, 6 0.10102960102960105","change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
3744,3744,"2 0.2005291005291005, 3 0.15052910052910048, 4 0.1357142857142857, 0 0.13571428571428568, 6 0.132010582010582, 1 0.12645502645502646, 5 0.11904761904761907",: please add number to byte[] methods. suggested by lilianne e. blaze. final patch from vincent ricard (with thanks to henri yandell).
3745,3745,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3746,3746,"4 0.22141237447359896, 3 0.16699060576611596, 1 0.15565273728539036, 6 0.14885001619695498, 2 0.13411078717201166, 5 0.08875931324910914, 0 0.0842241658568189","sort members.flips the order of conditional expressions and if statements whose conditions were negatedadd final modifier to local variables.: stringutilsnormalizespace does not trim the string anymore ()fix typo: improve performance of normalize space. thanks to libor ondrusek. this from github.[] stringutils join with var args. add and use space string constant for "" "".rename private whitespace_block to whitespace_pattern.format.tab and trailing space removaladding shashi kant sharmas implementation of endswithany - 614: add normalizespace to stringutils"
3747,3747,"3 0.20057720057720052, 2 0.14401154401154398, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
3748,3748,"3 0.15659340659340656, 6 0.15659340659340656, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737",pmd: useless parentheses
3749,3749,"4 0.33540372670807456, 0 0.1244536461927766, 6 0.11157119852772027, 2 0.10996089256958824, 1 0.10996089256958823, 5 0.1051299746951921, 3 0.10351966873706006","sort members.rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
3750,3750,"0 0.17794486215538843, 4 0.17209690893901416, 1 0.14285714285714282, 2 0.13116123642439428, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",provide simple method to wrap a given type to the typed interface
3751,3751,"3 0.20865800865800863, 2 0.13795093795093794, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3752,3752,"5 0.22420634920634924, 3 0.15321869488536155, 4 0.13315696649029982, 1 0.1300705467372134, 2 0.12698412698412698, 0 0.12389770723104054, 6 0.1084656084656085",[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3753,3753,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.1473495058400719, 1 0.14106019766397127, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
3754,3754,"5 0.29389880952380953, 6 0.12896825396825393, 2 0.12549603174603174, 1 0.1150793650793651, 4 0.11334325396825398, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3755,3755,"2 0.18886198547215494, 3 0.18886198547215494, 0 0.12671509281678775, 5 0.12671509281678772, 4 0.12483185364541298, 1 0.12294861447403822, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
3756,3756,"6 0.282010582010582, 2 0.12275132275132275, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
3757,3757,"5 0.269047619047619, 6 0.13201058201058197, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3758,3758,"2 0.19764464925755246, 0 0.15463389656938042, 3 0.1528417818740399, 1 0.13492063492063489, 4 0.1277521761392729, 5 0.11699948796722992, 6 0.11520737327188942","use validatenotnull instead of ""throw new nullpointerexception""add final modifier to method parameters.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
3759,3759,"4 0.20429159318048204, 2 0.13433274544385657, 0 0.1322751322751323, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",eat own dog food: call stringutils.isempty().
3760,3760,"4 0.1966604823747681, 0 0.19521748093176666, 3 0.173572459286745, 2 0.14615543186971758, 6 0.09853638425066999, 1 0.09709338280766855, 5 0.09276437847866421",[] fix classutils.getshortname to only do a reverse lookup for array types.add final modifier to local variables.eat own dog food: stringutilsisempty(string) and replace some but not all stringlength() == 0 with stringisempty()add two new null-safe apis: getsimplename(*). see https://issues.apache.org/jira/browse/696
3761,3761,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.15154237795747227, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
3762,3762,"6 0.29355517307324536, 5 0.19449225473321854, 3 0.1489768598202333, 2 0.09542933639319179, 1 0.09007458405048767, 0 0.08873589596481163, 4 0.08873589596481163",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3763,3763,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3764,3764,"2 0.19855699855699852, 4 0.14401154401154398, 1 0.13593073593073596, 3 0.1318903318903319, 0 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",added escape/unescapejson methods per maurizio cucchiaras patch in 797
3765,3765,"3 0.17757936507936506, 2 0.1706349206349206, 1 0.14459325396825393, 5 0.13070436507936506, 6 0.13070436507936506, 0 0.12723214285714282, 4 0.11855158730158732","rename parameter t to thread.add final modifier to local variables.explicit boxingadding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
3766,3766,"2 0.23072562358276635, 1 0.12953514739229025, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3767,3767,"3 0.19020251778872463, 0 0.17487684729064035, 2 0.1384783798576902, 1 0.126984126984127, 4 0.12315270935960591, 5 0.12315270935960591, 6 0.12315270935960591",add final modifier to local variables.convert to java 5 enhanced loops. 
3768,3768,"6 0.18905895691609972, 0 0.155328798185941, 1 0.14540816326530606, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
3769,3769,"3 0.1509492685963274, 6 0.14877061935885466, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",format.
3770,3770,"2 0.20268620268620272, 5 0.19841269841269843, 6 0.1699226699226699, 0 0.11436711436711434, 1 0.1115181115181115, 4 0.11009361009361007, 3 0.09299959299959303",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefullyapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3771,3771,"3 0.20259740259740255, 2 0.141991341991342, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
3772,3772,"2 0.1878306878306878, 5 0.13844797178130513, 0 0.13639035861258086, 1 0.13639035861258086, 4 0.13639035861258086, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
3773,3773,"3 0.1520923520923521, 4 0.14603174603174604, 0 0.146031746031746, 1 0.146031746031746, 6 0.146031746031746, 2 0.13189033189033192, 5 0.13189033189033192","scratch that, compiler disagrees (aka, im wrong)"
3774,3774,"6 0.30647130647130644, 0 0.12527472527472527, 5 0.12185592185592184, 2 0.11330891330891332, 4 0.11330891330891332, 1 0.10989010989010989, 3 0.10989010989010989",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
3775,3775,"6 0.28899835796387524, 5 0.21237000547345375, 3 0.14085020981572705, 1 0.09615033752964784, 2 0.09104178069695311, 0 0.08848750228060574, 4 0.0821018062397373",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.[] fastdateformat generates date objects wastefully.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3776,3776,"2 0.23469387755102034, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3777,3777,"5 0.2783068783068783, 6 0.12460317460317458, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3778,3778,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
3779,3779,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3780,3780,"3 0.22477324263038545, 1 0.1354875283446712, 2 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
3781,3781,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3782,3782,"3 0.38496424210709923, 6 0.20303506017791728, 5 0.08703994418280131, 2 0.08581894296180011, 0 0.079713936856794, 1 0.079713936856794, 4 0.079713936856794","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.: fastdateformat doesnt respect summer daylight in some localized stringsrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesuse final consistently. tab policeremove keyvalues map per sebbs suggestion"
3783,3783,"2 0.22874149659863938, 4 0.13350340136054423, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3784,3784,"2 0.2698412698412698, 1 0.12294861447403822, 4 0.12294861447403822, 0 0.12106537530266345, 3 0.12106537530266345, 5 0.12106537530266345, 6 0.12106537530266345",crlf -> lfjavadoc: fix typo but working is still awkward.swap and shift for arrays
3785,3785,"6 0.27615222795945693, 5 0.1944922547332186, 3 0.16905718110537388, 1 0.09141327213616372, 2 0.09007458405048768, 4 0.09007458405048768, 0 0.08873589596481164","zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
3786,3786,"3 0.1965367965367965, 2 0.15209235209235208, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3787,3787,"6 0.2318501170960187, 2 0.16627634660421542, 4 0.12984647410876918, 0 0.11891751236013534, 1 0.11891751236013534, 3 0.117096018735363, 5 0.117096018735363",fix defaultexceptioncontext.addvalue that overwrites information in a recursive situation (). allow explicit replacement of a label with the new replacevalue methods.
3788,3788,"0 0.16912972085385877, 2 0.16529830322933772, 4 0.1538040503557745, 6 0.14039408866995073, 1 0.12506841817186648, 3 0.12315270935960596, 5 0.12315270935960596",: new methods for lang3.validate ()fixed method names; fixed differentobject to use object.equals
3789,3789,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
3790,3790,"2 0.20691609977324257, 6 0.14540816326530606, 3 0.1335034013605442, 1 0.12953514739229025, 5 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327",": add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
3791,3791,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3792,3792,"0 0.2523809523809524, 2 0.1357142857142857, 3 0.12830687830687829, 1 0.12645502645502646, 4 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",adding vincent ricards patch to charrange.java providing an iterator that lets you walk the chars in the range. 454
3793,3793,"1 0.6773109243697479, 3 0.06489262371615312, 2 0.060317460317460304, 4 0.058356676003734814, 0 0.05508870214752567, 5 0.042016806722689086, 6 0.042016806722689086",[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3794,3794,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3795,3795,"3 0.31285944329422594, 4 0.13089487002530478, 2 0.12445364619277663, 6 0.11801242236024842, 0 0.1051299746951921, 1 0.1051299746951921, 5 0.10351966873706006",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerformat to 120 line length.add final modifier to local variables.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
3796,3796,"5 0.2810304449648711, 4 0.12802498048399688, 0 0.11891751236013531, 1 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3797,3797,"6 0.21286848072562353, 3 0.13747165532879818, 5 0.1354875283446712, 4 0.13151927437641722, 0 0.12755102040816327, 1 0.12755102040816327, 2 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
3798,3798,"2 0.22874149659863938, 4 0.13151927437641722, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3799,3799,"0 0.15659340659340656, 3 0.15659340659340656, 1 0.13736263736263737, 2 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] vastly expanded typeutils
3800,3800,"6 0.2838624338624338, 2 0.1208994708994709, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
3801,3801,"4 0.16326530612244894, 3 0.155328798185941, 1 0.14937641723356007, 0 0.1454081632653061, 2 0.13151927437641725, 5 0.1275510204081633, 6 0.1275510204081633",sort members.merge branch : add stringutilsremoveignorecasepatch by gokul nanthakumar c
3802,3802,"3 0.2046176046176046, 2 0.141991341991342, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3803,3803,"5 0.2956349206349207, 2 0.12723214285714282, 6 0.12723214285714282, 4 0.1150793650793651, 0 0.11160714285714288, 1 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3804,3804,"0 0.17582417582417575, 1 0.13736263736263735, 2 0.13736263736263735, 3 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735", use iod for stripaccent init
3805,3805,"0 0.20328599275967693, 3 0.1526037315510999, 1 0.13505987190197713, 5 0.13311055416318573, 2 0.12531328320802007, 4 0.12531328320802007, 6 0.12531328320802007",allow access to parsedpattern for test purposesmake parseexception text similar to that thrown by simpledateformat
3806,3806,"0 0.22276029055690072, 4 0.13989776701641105, 6 0.1380145278450363, 3 0.13613128867366156, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
3807,3807,"5 0.2838624338624338, 6 0.1208994708994709, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3808,3808,"2 0.31124913733609383, 3 0.12928456406717273, 1 0.12284334023464455, 4 0.11479181044398434, 5 0.11157119852772028, 6 0.10674028065332414, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3809,3809,"5 0.3553906411049268, 6 0.14615543186971755, 2 0.12018140589569158, 1 0.09709338280766854, 0 0.09420737992166564, 4 0.09420737992166564, 3 0.0927643784786642",make checkstyle happy and applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3810,3810,"2 0.2984607984607984, 4 0.13347763347763344, 0 0.12674362674362674, 1 0.11327561327561327, 6 0.11159211159211159, 3 0.10822510822510822, 5 0.10822510822510822",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
3811,3811,"6 0.44962042788129747, 3 0.12111801242236021, 4 0.10058661145617664, 5 0.09334023464458244, 2 0.0800552104899931, 0 0.07763975155279504, 1 0.07763975155279504","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x format"
3812,3812,"2 0.22943722943722947, 4 0.1924001924001924, 0 0.14526214526214523, 1 0.10822510822510824, 3 0.10822510822510824, 5 0.10822510822510824, 6 0.10822510822510824",crlf -> lfjavadoc: fix typo but working is still awkward.simplify isempty be reusing getlengths/if (foo) { return true; } return false;/return foo;/g
3813,3813,"3 0.34274640088593583, 2 0.18512366186784793, 4 0.10502030269472128, 6 0.10243632336655589, 0 0.09468438538205977, 1 0.0869324473975637, 5 0.08305647840531563","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.dont need a copy of this field.add final modifier to local variables.remove redundant type arguments.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3814,3814,"3 0.3349944629014397, 2 0.19158361018826134, 4 0.10889627168696933, 6 0.09985234403839052, 0 0.09468438538205977, 1 0.0869324473975637, 5 0.08305647840531563","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.dont need a copy of this field.add final modifier to local variables.remove redundant type arguments.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3815,3815,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3816,3816,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3817,3817,"0 0.15363881401617246, 2 0.15154237795747227, 4 0.14525306978137167, 3 0.14106019766397127, 1 0.13896376160527107, 5 0.1347708894878706, 6 0.1347708894878706",: enumutils.getenumignorecase and isvalidenumignorecase methods added ()
3818,3818,"6 0.33543417366946776, 5 0.13118580765639587, 0 0.11321195144724558, 1 0.10504201680672269, 2 0.10504201680672269, 3 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
3819,3819,"4 0.30599647266313934, 3 0.15476190476190474, 0 0.11463844797178128, 6 0.11309523809523807, 2 0.11155202821869488, 1 0.10074955908289243, 5 0.09920634920634923",add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)eat own dog food: call stringutils.isempty().[] swapcase and *capitalize speedups.
3820,3820,"1 0.7139843279083785, 2 0.05013060076351217, 5 0.0494273658830621, 3 0.048724131002612026, 4 0.047317661241711884, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3821,3821,"6 0.42997612024160703, 5 0.15465655288664135, 3 0.13499086950414382, 4 0.08484337687877508, 2 0.0681275460036522, 1 0.06419440932715269, 0 0.0632111251580278","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
3822,3822,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3823,3823,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
3824,3824,"3 0.20259740259740255, 2 0.146031746031746, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
3825,3825,"3 0.19146825396825395, 4 0.17063492063492064, 2 0.14806547619047616, 6 0.1324404761904762, 0 0.12723214285714285, 1 0.11855158730158734, 5 0.11160714285714289",remove redundant type arguments.add final modifier to local variables.[] add mode and median comparable... methods to objectutils
3826,3826,"3 0.31874731874731876, 2 0.14907764907764906, 4 0.12655512655512655, 6 0.11003861003861001, 1 0.10102960102960105, 0 0.09802659802659805, 5 0.09652509652509655",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerpmd: useless parenthesesformat to 120 line length.add final modifier to local variables.add final modifier to method parameters.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
3827,3827,"0 0.28595848595848594, 4 0.156043956043956, 6 0.11501831501831501, 2 0.11330891330891332, 1 0.10989010989010989, 3 0.10989010989010989, 5 0.10989010989010989","reverting r1090111 - moving the text.translate escapers back from using range to replicating parts of the range api. see the list for details (unnecessary boxing in stringescapeutils etc), the move to range was an uncomfortable fit. "
3828,3828,"6 0.22123015873015878, 0 0.1781746031746032, 3 0.15595238095238098, 2 0.13373015873015875, 1 0.10873015873015873, 5 0.10178571428571428, 4 0.1003968253968254","make sure lines in files dont have trailing white spaces and remove all trailing white spaces: update java requirement from java 6 to 7replace usage of deprecated arrayutilsisequals with objectsdeepequalsadd final modifier to local variables.fix whitespaces, add missing @since tag: enhance methodutils to allow invocation of private methods ()"
3829,3829,"2 0.25918367346938775, 3 0.15759637188208617, 6 0.14489795918367343, 0 0.11632653061224488, 4 0.11315192743764173, 1 0.10680272108843539, 5 0.10204081632653063",add final modifier to local variables.remove trailing whitespacescrlf -> lfjavadoc: fix typo but working is still awkward.implements : add a method to arrayutils for removing all occurrences of a given element. thanks to haiyang li.
3830,3830,"6 0.22087705138552594, 4 0.13989776701641105, 2 0.13613128867366153, 5 0.13424804950228678, 1 0.12483185364541298, 0 0.12294861447403822, 3 0.12106537530266345",[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern.
3831,3831,"1 0.7167972674301788, 2 0.050130600763512154, 5 0.048020896122161955, 3 0.047317661241711884, 4 0.047317661241711884, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3832,3832,"4 0.25507054673721347, 3 0.18253968253968256, 1 0.11772486772486772, 0 0.11618165784832452, 6 0.11618165784832452, 2 0.1130952380952381, 5 0.09920634920634924",merge branch : add stringutilsremoveignorecasepatch by gokul nanthakumar cadd final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)use index_not_found instead of magic number.
3833,3833,"6 0.33375661375661375, 3 0.1441269841269841, 0 0.12634920634920632, 4 0.11005291005291001, 1 0.09523809523809525, 2 0.09523809523809525, 5 0.09523809523809525","replace tabs with spaces fastdateparser and fastdateprinter support x format fastdateparser does not handle excess hours as per simpledateformatdocsadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .dont mutate parameterstab police: fastdateparser could use calendar.getdisplaynames for all text fields"
3834,3834,"6 0.32385690594645816, 3 0.12816868040748636, 4 0.11821843165126746, 0 0.10992655768775172, 1 0.10660980810234542, 2 0.10660980810234542, 5 0.10660980810234542","replace tabs with spaces fastdateparser and fastdateprinter support x format fastdateparser does not handle excess hours as per simpledateformatdocsadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
3835,3835,"5 0.25347985347985347, 3 0.16800976800976797, 2 0.12185592185592184, 1 0.11843711843711845, 6 0.11843711843711845, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3836,3836,"4 0.39261809141327214, 3 0.13425129087779686, 2 0.1061388410786001, 0 0.09810671256454384, 1 0.09676802447886783, 5 0.08605851979345956, 6 0.08605851979345956","sort members.add final modifier to local variables.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classreplacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
3837,3837,"2 0.19353940406571982, 0 0.16429963798384847, 4 0.1311612364243943, 3 0.13116123642439428, 1 0.1292119186856029, 5 0.12531328320802007, 6 0.12531328320802007",[] add methods to objectutils to get various forms of classnames in a null-safe manner
3838,3838,"5 0.282010582010582, 1 0.1208994708994709, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3839,3839,"5 0.26645849596669263, 6 0.14623991673171996, 1 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 4 0.11709601873536299",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3840,3840,"4 0.22274264897215712, 0 0.1517043976060369, 2 0.13895394223263074, 3 0.12620348685922458, 1 0.12438199323445226, 5 0.11891751236013533, 6 0.117096018735363",: add zero copy write method to strbuilder; : add zero copy read method to strbuilder. thanks to mikhail mazursky.
3841,3841,"0 0.16437987624428302, 1 0.15873015873015875, 6 0.15684691955878396, 4 0.13989776701641107, 5 0.13236481033091205, 2 0.12483185364541301, 3 0.12294861447403825",rename to avoid clashing with parameter namesrenamed difflist to diffresult as per discussion in .: there should be a differencebuilder with a reflectiondifferencebuilder implementation
3842,3842,"5 0.2883164194639604, 4 0.12256049960967993, 0 0.11891751236013531, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3843,3843,"5 0.25860805860805863, 3 0.1697191697191697, 2 0.12527472527472527, 1 0.11330891330891332, 6 0.1133089133089133, 0 0.1098901098901099, 4 0.1098901098901099",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3844,3844,"5 0.2864949258391881, 0 0.12256049960967995, 6 0.12073900598490764, 4 0.11891751236013533, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3845,3845,"4 0.26904761904761904, 6 0.13571428571428568, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
3846,3846,"0 0.17972350230414744, 3 0.17255504352278545, 2 0.16538658474142343, 4 0.1277521761392729, 1 0.12416794674859191, 5 0.11520737327188942, 6 0.11520737327188942",add final modifier to local variables. - change objectutils min() & max() functions to use varargs rather than just two parameters
3847,3847,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3848,3848,"5 0.268279989591465, 6 0.14259692948217534, 1 0.12073900598490764, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3849,3849,"1 0.708358448864778, 2 0.05364677516576251, 3 0.050130600763512154, 4 0.048724131002612026, 5 0.04872413100261201, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3850,3850,"3 0.21198156682027647, 0 0.17613927291346645, 6 0.1474654377880184, 2 0.11879160266257043, 1 0.11520737327188942, 4 0.11520737327188942, 5 0.11520737327188942", fastdateparser could use calendar.getdisplaynames for all text fieldsremove unnecessary keyvalue instances: fastdateparser could use calendar.getdisplaynames for all text fields
3851,3851,"2 0.2267573696145124, 4 0.13350340136054423, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3852,3852,"6 0.4015037593984963, 5 0.1664160401002506, 2 0.0927318295739348, 0 0.09156223893065997, 3 0.08571428571428569, 4 0.08571428571428569, 1 0.07635756056808689","[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .utc and gmt are the same, so simplify.refactor ""gmt"" magic string.make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .trailing spaces fastdateparser does not handle non-gregorian calendars properly unnecessary ;applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
3853,3853,"6 0.4240764152268578, 5 0.15957297373226573, 3 0.12810788032026968, 4 0.08484337687877508, 2 0.07304396684927657, 0 0.06616097766540245, 1 0.06419440932715269","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
3854,3854,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3855,3855,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3856,3856,"3 0.21067821067821063, 2 0.13795093795093796, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
3857,3857,"2 0.22477324263038542, 4 0.13747165532879818, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3858,3858,"4 0.1829889188379754, 2 0.13896376160527107, 6 0.13896376160527107, 0 0.1347708894878706, 1 0.1347708894878706, 3 0.1347708894878706, 5 0.1347708894878706",use index_not_found instead of magic number.
3859,3859,"5 0.2701014832162372, 6 0.14077543585740301, 1 0.12073900598490762, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 4 0.11709601873536299",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3860,3860,"5 0.2774114774114774, 3 0.13553113553113552, 2 0.1321123321123321, 4 0.12185592185592184, 1 0.1115995115995116, 6 0.1115995115995116, 0 0.10989010989010989",dont mutate parametersadd final modifier to method parameters.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3861,3861,"5 0.2883164194639604, 0 0.12073900598490762, 6 0.12073900598490762, 4 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3862,3862,"3 0.3237133237133236, 1 0.12000962000962, 2 0.11664261664261663, 0 0.11495911495911496, 4 0.10822510822510822, 5 0.10822510822510822, 6 0.10822510822510822","add final modifier to local variables.promote uniformity between branches by using registry accessorunused imports + uh, why would you synchronize access to a threadlocal? :p[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
3863,3863,"5 0.2883164194639604, 6 0.12256049960967993, 0 0.11891751236013531, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 4 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3864,3864,"2 0.1743145743145743, 3 0.16017316017316016, 4 0.14401154401154398, 1 0.13189033189033192, 0 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to method parameters.
3865,3865,"3 0.1980347694633409, 0 0.16099773242630386, 5 0.14512471655328796, 2 0.13630637440161247, 6 0.1292517006802721, 1 0.11690602166792646, 4 0.11337868480725626",use validateistrue to validate argumentsreplaced private integer constants with private static enum.add final modifier to local variables.
3866,3866,"2 0.2226823096388314, 3 0.22107200368069935, 4 0.13250517598343683, 1 0.1115711985277203, 6 0.1051299746951921, 0 0.10351966873706006, 5 0.10351966873706006",sort members.make whitespace use after tokens consistent and add a checkstyle rule to enforce it.statements unnecessarily nested within else clause.add final modifier to local variables.
3867,3867,"0 0.2523809523809523, 2 0.13386243386243385, 1 0.13201058201058197, 3 0.12460317460317456, 4 0.11904761904761904, 5 0.11904761904761904, 6 0.11904761904761904",adding vincent ricards patch to charrange.java providing an iterator that lets you walk the chars in the range. 454
3868,3868,"2 0.206084656084656, 3 0.18201058201058198, 0 0.13571428571428568, 1 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",fix typos in commentssuppress warning about vararg usage.add final modifier to local variables.
3869,3869,"5 0.28467343221441577, 4 0.12256049960967993, 6 0.12256049960967993, 0 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3870,3870,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
3871,3871,"5 0.28285193858964347, 4 0.12620348685922456, 0 0.12073900598490762, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3872,3872,"2 0.20418470418470416, 0 0.1604136604136604, 4 0.15536315536315531, 1 0.1385281385281385, 5 0.12169312169312166, 3 0.11159211159211162, 6 0.10822510822510824", - jsontostringstyle does not escape double quote in a stringvalue[github] commons-lang pull request : intellij idea refactorings..: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3873,3873,"4 0.19699546485260766, 0 0.16524943310657592, 1 0.1275510204081633, 2 0.1275510204081633, 3 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
3874,3874,"4 0.22271825396825395, 3 0.19146825396825395, 6 0.12723214285714282, 2 0.12028769841269842, 1 0.1150793650793651, 0 0.11160714285714288, 5 0.11160714285714288",statement unnecessarily nested within else clause.: add methods for removing all invalid characters according to xml 1.0 and xml 1.1 in an input string to stringescapeutils. thanks to adam hooper
3875,3875,"6 0.27749091604513293, 5 0.19181487856186652, 3 0.16905718110537388, 2 0.09542933639319184, 0 0.09007458405048768, 4 0.09007458405048768, 1 0.08605851979345958","zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
3876,3876,"0 0.1811224489795918, 1 0.15532879818594097, 4 0.13548752834467123, 2 0.13350340136054423, 5 0.1335034013605442, 3 0.13151927437641722, 6 0.12953514739229025",": add archutils - an utility class for the ""os.arch"" system property ()"
3877,3877,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3878,3878,"0 0.17104542966611927, 6 0.16912972085385874, 5 0.1403940886699507, 1 0.13847837985769018, 2 0.12889983579638753, 4 0.12889983579638753, 3 0.12315270935960593", make some private fields finalreturning notimplementedexception to lang after it was removed in lang 3.0 per the request in . 
3879,3879,"2 0.19047619047619047, 5 0.146031746031746, 1 0.141991341991342, 4 0.13189033189033192, 0 0.12987012987012989, 3 0.12987012987012989, 6 0.12987012987012989",: add noclassnametostringstyle implementation of tostringstyle. this from github. thanks to innokenty shuvalov.
3880,3880,"6 0.2838624338624338, 2 0.1208994708994709, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
3881,3881,"6 0.2783068783068782, 2 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
3882,3882,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3883,3883,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3884,3884,"6 0.22460317460317458, 3 0.14126984126984124, 4 0.14126984126984124, 1 0.12830687830687829, 0 0.12460317460317462, 2 0.12089947089947092, 5 0.11904761904761907","<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
3885,3885,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3886,3886,"1 0.7163893669917767, 2 0.052400076496462035, 4 0.05106138841078599, 0 0.049053356282271934, 3 0.04436794798240582, 5 0.04369860393956781, 6 0.04302925989672979", fix eventcountcircuitbreaker increment batchfixes incrementandcheckstate(integer increment) by passing the increment downstream.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3887,3887,"0 0.24458874458874463, 6 0.15367965367965367, 3 0.13852813852813853, 2 0.1250601250601251, 1 0.12000962000962002, 4 0.10990860990860994, 5 0.10822510822510825",add missing since tags for strsubstitutor; wrap lines longer than 80 chars[] strsubstitutor now supports the declaration of default values for the variables to be replaced. thanks to woonsan ko for the patch.
3888,3888,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3889,3889,"5 0.27089947089947086, 6 0.13201058201058197, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3890,3890,"0 0.20743639921722115, 3 0.18460534898891062, 2 0.17395085888236572, 5 0.12828875842574472, 1 0.10697977821265496, 4 0.10089149815177215, 6 0.09784735812133075",: exception while using extendedmessageformat and escaping braces. this fixes from github. thanks to andrey khobnya.applying thomas patch from - fixing arne burmeisters reported exception when combining custom and choice formatsadd final modifier to local variables.
3891,3891,"3 0.17584325396825395, 4 0.17063492063492064, 2 0.1619543650793651, 6 0.1359126984126984, 0 0.12723214285714285, 1 0.11681547619047623, 5 0.11160714285714289",remove redundant type arguments.add final modifier to local variables.[] add mode and median comparable... methods to objectutils
3892,3892,"3 0.19450367211561242, 2 0.167969675432362, 5 0.14475242833451787, 0 0.13977730395640842, 6 0.12153518123667376, 1 0.11656005685856435, 4 0.11490168206586118",using validate where possible in concurrent package.add final modifier to local variables.add final modifier to method parameters.[] added timedsemaphore class to concurrent package.
3893,3893,"2 0.21349206349206346, 3 0.18941798941798937, 1 0.12089947089947091, 0 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",: add nul byte to charutils. thanks to beluga behr.add final modifier to local variables.
3894,3894,"4 0.7201378868045536, 3 0.05739939073272406, 5 0.04729838063171395, 2 0.04505371172037839, 1 0.04505371172037838, 0 0.043931377264710594, 6 0.041125541125541114","sort members.[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
3895,3895,"6 0.24572253143681713, 4 0.2211915069057926, 3 0.1447124304267161, 2 0.10719439290867858, 0 0.09420737992166563, 1 0.09420737992166563, 5 0.0927643784786642",make sure lines in files dont have trailing white spaces and remove all trailing white spacesformat to 120 line length.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
3896,3896,"3 0.21964821964821965, 4 0.1776061776061776, 0 0.17009867009867008, 6 0.11754611754611753, 5 0.10853710853710855, 2 0.10703560703560706, 1 0.09952809952809953",micro optimization: replace stringbuilder with string concatenation so that the compiler can better optimize the codeadd final modifier to local variables.refactor range with lots of new methodsmodifying tostring method to cache in a thread-safe way per 481adding string lazy caching
3897,3897,"2 0.3184371184371184, 4 0.12185592185592187, 0 0.11330891330891332, 1 0.11330891330891332, 3 0.11330891330891332, 5 0.10989010989010989, 6 0.10989010989010989","crlf -> lfjavadoc: fix typo but working is still awkward.simplify isnotempty by reusing isemptyapplying chandrashekar ms patch to , adding isnotempty(array) methods to arrayutils. "
3898,3898,"6 0.32024882024882023, 3 0.16108966108966105, 2 0.11454311454311451, 4 0.11003861003861, 0 0.09952809952809953, 1 0.09802659802659804, 5 0.09652509652509654","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
3899,3899,"6 0.3305322128851541, 5 0.12301587301587301, 3 0.11974789915966384, 0 0.10830999066293186, 4 0.10830999066293186, 1 0.1050420168067227, 2 0.1050420168067227",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor some duplicate code.
3900,3900,"6 0.25918367346938775, 4 0.2020408163265306, 2 0.11791383219954646, 3 0.11473922902494331, 0 0.10204081632653063, 1 0.10204081632653063, 5 0.10204081632653063",make sure lines in files dont have trailing white spaces and remove all trailing white spaces: add methods for removing all invalid characters according to xml 1.0 and xml 1.1 in an input string to stringescapeutils. thanks to adam hooper
3901,3901,"3 0.20016142050040353, 4 0.15496368038740915, 6 0.14554748453053534, 2 0.13236481033091205, 1 0.12483185364541298, 0 0.12106537530266345, 5 0.12106537530266345",remove redundant type arguments.add final modifier to local variables.
3902,3902,"2 0.2348710317460318, 0 0.1515376984126984, 6 0.1359126984126984, 3 0.12723214285714285, 1 0.12549603174603177, 4 0.113343253968254, 5 0.11160714285714289","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
3903,3903,"2 0.1878306878306878, 4 0.14256319811875368, 5 0.13639035861258086, 0 0.13433274544385657, 1 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
3904,3904,"5 0.28521825396825395, 6 0.13070436507936506, 2 0.12549603174603172, 4 0.1202876984126984, 0 0.11334325396825398, 1 0.11334325396825398, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3905,3905,"0 0.2634116937914406, 2 0.15230058268032948, 1 0.14526823387582877, 6 0.1396423548322282, 3 0.11432589913602567, 4 0.09463532248342374, 5 0.09041591320072334","add serialization support to eventlistenersupportprovide read access to the registered listener instances: add event support utilitiesapplying documentation patch ""commons-event-support-docs.patch"" from michael wooten.improving error checking logic and adding test cases to verify.changing eol-style to native.misc. event utils."
3906,3906,"5 0.26719576719576715, 6 0.132010582010582, 1 0.12460317460317462, 0 0.11904761904761907, 2 0.11904761904761907, 3 0.11904761904761907, 4 0.11904761904761907",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3907,3907,"2 0.16825396825396824, 3 0.1662337662337662, 4 0.13997113997113997, 1 0.13593073593073596, 0 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to method parameters.
3908,3908,"3 0.3646775165762508, 6 0.11995177817962627, 2 0.11713883865782598, 0 0.11573236889692584, 5 0.0988547317661242, 4 0.09322885272252363, 1 0.09041591320072336",": fastdateformat doesnt respect summer daylight in some localized stringsmerge branch master of https://github.com/nickmanley/commons-langthis fix nullpointerexception in fastdateparser$timezonestrategyfix nullpointerexception in fastdateparser$timezonestrategyrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3909,3909,"3 0.3537076522151148, 2 0.113243307273158, 0 0.10660980810234541, 1 0.10660980810234541, 4 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3910,3910,"4 0.26719576719576715, 6 0.13571428571428568, 0 0.12089947089947091, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
3911,3911,"3 0.3462301587301587, 2 0.18789682539682537, 1 0.09761904761904762, 6 0.09761904761904759, 4 0.09206349206349207, 0 0.08928571428571429, 5 0.08928571428571429","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3912,3912,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
3913,3913,"3 0.22278911564625845, 2 0.13747165532879818, 1 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
3914,3914,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14734950584007186, 1 0.14106019766397127, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
3915,3915,"6 0.18112244897959182, 0 0.1454081632653061, 2 0.14143990929705214, 5 0.13945578231292519, 4 0.13350340136054423, 1 0.13151927437641725, 3 0.1275510204081633",make use of existing timeunit class to manage time units.
3916,3916,"3 0.21673881673881668, 2 0.1339105339105339, 0 0.12987012987012986, 1 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",reuseadd final modifier to local variables.
3917,3917,"6 0.20798319327731093, 2 0.18837535014005602, 4 0.1311858076563959, 0 0.12955182072829133, 1 0.12138188608776843, 3 0.11647992530345473, 5 0.10504201680672272",use final.remove trailing white spacesadded new vararg methods to insert values into an array at an index.this implements . this commit also deprecates the add() methodsthat inserted a single value into an array at an index.
3918,3918,"5 0.2783068783068782, 1 0.12460317460317459, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3919,3919,"2 0.3257418909592823, 3 0.12767425810904068, 5 0.11640211640211638, 1 0.1115711985277203, 4 0.10996089256958824, 6 0.1051299746951921, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3920,3920,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3921,3921,"2 0.3051948051948052, 4 0.1301106301106301, 0 0.12674362674362671, 1 0.11159211159211159, 6 0.10990860990860991, 3 0.10822510822510822, 5 0.10822510822510822",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
3922,3922,"0 0.2281746031746032, 2 0.1906746031746032, 3 0.14345238095238094, 4 0.1351190476190476, 5 0.10595238095238094, 6 0.10317460317460315, 1 0.09345238095238098","pmd: nested if statements can be combinedmethodutilsinvokemethod(object object, boolean forceaccess, string methodname, object[] args, class<?>[] parametertypes): do not restore the accessibility of the method object, because methodsetaccessible only modifies the behavior of the accessibleobject not of the actual method.fix whitespaces, add missing @since tag: enhance methodutils to allow invocation of private methods ()"
3923,3923,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3924,3924,"2 0.22456414259692944, 3 0.17902680197762164, 1 0.12256049960967996, 4 0.12256049960967996, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
3925,3925,"2 0.17835497835497832, 1 0.14805194805194802, 5 0.14603174603174598, 3 0.13593073593073596, 4 0.1318903318903319, 0 0.12987012987012986, 6 0.12987012987012986","adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
3926,3926,"2 0.3193006671267541, 3 0.13250517598343683, 4 0.11318150448585232, 5 0.1131815044858523, 1 0.11157119852772028, 0 0.1051299746951921, 6 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3927,3927,"4 0.17613927291346643, 3 0.16538658474142343, 0 0.1546338965693804, 1 0.14029697900665639, 2 0.1331285202252944, 5 0.1152073732718894, 6 0.1152073732718894",[github] commons-lang pull request : intellij idea refactorings..throw illegalstateexception as documented from validstate(): added validstate()
3928,3928,"3 0.20392789884315307, 6 0.15684691955878394, 2 0.13801452784503632, 0 0.13613128867366156, 1 0.12294861447403824, 4 0.12106537530266347, 5 0.12106537530266347",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
3929,3929,"3 0.34209902866619274, 2 0.11324330727315801, 1 0.11158493248045487, 4 0.10992655768775171, 6 0.10992655768775171, 0 0.10660980810234541, 5 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3930,3930,"3 0.33985890652557316, 6 0.2435626102292769, 2 0.08800705467372133, 5 0.08800705467372133, 1 0.0818342151675485, 0 0.07936507936507936, 4 0.07936507936507936","lvar should not hide ivar.add final modifier to local variables.format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
3931,3931,"0 0.2774838330393886, 1 0.1595140113658632, 2 0.13893787967862042, 4 0.12110523221634331, 3 0.11699000587889476, 5 0.09778561630413485, 6 0.08818342151675487","explicit type parameters can be removeduse final.: add methodutilsfindannotation and extend methodutilsgetmethodswithannotation for non-public, super-class and interface methodsfix bug introduced by last commit: add methodutilsfindannotation and extend methodutilsgetmethodswithannotation for non-public, super-class and interface methodsadd changes.xml entry and minimal clean-up.: adds methodutilsfindannotation and extend methodutilsgetmethodswithannotation for non-public, super-class and interface methods ()"
3932,3932,"0 0.23330813807004286, 3 0.14512471655328796, 6 0.12925170068027214, 1 0.1292517006802721, 5 0.12748803224993702, 4 0.12219702695893173, 2 0.11337868480725626",[] constructorutils.getaccessibleconstructor() does not check the accessibility of enclosing classesa bit of dog food and a lot of javadoc tweakagemove/comment suppresswarnings(unchecked)/refactor surrounding code
3933,3933,"2 0.24384236453201968, 6 0.13081554460864805, 1 0.12889983579638753, 3 0.126984126984127, 0 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
3934,3934,"6 0.24272486772486773, 2 0.2056878306878307, 3 0.1516754850088183, 1 0.10229276895943565, 0 0.09920634920634923, 4 0.09920634920634923, 5 0.09920634920634923",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.
3935,3935,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3936,3936,"2 0.15018315018315015, 5 0.1459096459096459, 1 0.14377289377289376, 0 0.14163614163614163, 3 0.14163614163614163, 4 0.1394993894993895, 6 0.13736263736263735",[] added constantinitializer class
3937,3937,"3 0.16313932980599644, 0 0.15079365079365076, 6 0.15079365079365076, 2 0.13639035861258086, 1 0.13433274544385657, 4 0.1322751322751323, 5 0.1322751322751323",[] added support for substitution in variable names.
3938,3938,"2 0.2027588813303099, 4 0.17762660619803478, 3 0.14323507180650036, 6 0.14191232048374905, 0 0.13000755857898713, 1 0.11942554799697655, 5 0.0850340136054422","sort members.[github] commons-lang pull request : intellij idea refactorings..: add nul byte to charutils. thanks to beluga behr.remove trailing white spaces - add method for converting string to an array of code pointsadd final modifier to local variables.: add stringutilsunwrapadd more examples and testsfix formattingadd changes.xml entry: add stringutilsunwrap (, )"
3939,3939,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3940,3940,"5 0.27089947089947086, 6 0.13015873015873014, 1 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3941,3941,"4 0.19501133786848068, 0 0.16524943310657592, 2 0.12953514739229027, 1 0.1275510204081633, 3 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
3942,3942,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3943,3943,"2 0.31446974925235793, 3 0.12606395215090865, 1 0.12284334023464456, 5 0.11157119852772028, 4 0.11157119852772025, 6 0.10996089256958823, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
3944,3944,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3945,3945,"2 0.18886198547215494, 1 0.1587301587301587, 4 0.1530804412160344, 5 0.13048157115953726, 3 0.12483185364541298, 0 0.12294861447403822, 6 0.12106537530266345",sort methods.adding hennings github pull request with a triple implementation. 675
3946,3946,"2 0.1915900863269284, 0 0.16040100250626563, 4 0.13895850737956, 3 0.1311612364243943, 1 0.1272626009468115, 5 0.12531328320802007, 6 0.12531328320802007",[] add methods to classutils to get various forms of classnames in a null-safe manner
3947,3947,"6 0.22820712984647412, 0 0.15352589123080926, 2 0.1334894613583138, 4 0.1334894613583138, 1 0.11709601873536303, 3 0.11709601873536303, 5 0.11709601873536303","<action issue="""" type=""fix"">stringescapeutils.escapejava() and escapeecmascript() do not output the escaped surrogate pairs that are java parsable</action>"
3948,3948,"1 0.699581263998442, 2 0.058136137890739105, 3 0.05609114811568799, 4 0.05131950530723536, 5 0.046547862498782754, 0 0.04450287272373163, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3949,3949,"2 0.1536388140161725, 5 0.1536388140161725, 6 0.1536388140161725, 0 0.13477088948787064, 1 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
3950,3950,"0 0.29732290926320776, 2 0.14143567874911156, 4 0.12319355602937689, 6 0.11158493248045488, 1 0.10992655768775172, 3 0.10992655768775172, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
3951,3951,"0 0.21909966172261255, 4 0.16627634660421545, 2 0.13348946135831383, 6 0.12438199323445226, 1 0.12256049960967998, 3 0.11709601873536302, 5 0.11709601873536302",: typeutils.tostring() doesnt handle primitive and object arrays correctlyapply patch by aaron digulla[] new type util features
3952,3952,"5 0.3435804701627487, 2 0.18042997789833234, 6 0.09885473176612418, 3 0.0960417922443239, 1 0.09463532248342377, 0 0.09322885272252363, 4 0.09322885272252363",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3953,3953,"4 0.18441558441558442, 6 0.15007215007215005, 0 0.14603174603174604, 1 0.1298701298701299, 2 0.1298701298701299, 3 0.1298701298701299, 5 0.1298701298701299",removing charsequenceutils in favour of putting the code in stringutils
3954,3954,"3 0.25665859564164645, 2 0.132364810330912, 1 0.12671509281678772, 0 0.12106537530266342, 4 0.12106537530266342, 5 0.12106537530266342, 6 0.12106537530266342",statements unnecessarily nested within else clause.add final modifier to local variables.
3955,3955,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
3956,3956,"3 0.33085961657390234, 5 0.1894454751597609, 6 0.09853638425066999, 1 0.09709338280766855, 2 0.09709338280766855, 4 0.09420737992166565, 0 0.09276437847866421","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
3957,3957,"5 0.27275132275132274, 6 0.13015873015873017, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3958,3958,"2 0.2866762866762867, 4 0.12506012506012507, 0 0.12337662337662336, 3 0.12337662337662336, 6 0.12337662337662336, 1 0.10990860990860993, 5 0.10822510822510825",crlf -> lfjavadoc: fix typo but working is still awkward.simplify issamelenght implementations by reusing getlength. this also fixes a lot of the useless paranthesis warnings generated by pmd.
3959,3959,"5 0.2901379130887327, 4 0.12073900598490762, 0 0.11891751236013531, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3960,3960,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3961,3961,"3 0.4194271911663217, 2 0.12957211870255347, 0 0.11387163561076603, 6 0.09454796411318149, 4 0.08367839889579023, 1 0.08126293995859216, 5 0.07763975155279505","make sure placement of curly braces is consistentadd final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezonesadd final modifier to local variables.add final modifier to method parameters. - dateutilsparsedate uses default locale; add locale support"
3962,3962,"1 0.7175005023106289, 4 0.048724131002612026, 2 0.04872413100261201, 3 0.047317661241711884, 5 0.047317661241711884, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3963,3963,"0 0.18571428571428567, 3 0.18201058201058198, 4 0.1523809523809523, 2 0.12275132275132276, 1 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",: strbuilder.equals(strbuilder) doesnt check for null inputsadd final modifier to local variables.
3964,3964,"6 0.2261904761904762, 0 0.16195436507936506, 4 0.14632936507936506, 3 0.12375992063492061, 2 0.11855158730158732, 1 0.11160714285714288, 5 0.11160714285714288",remove redundant casts ()remove redundant casts throughout the codebase to make it cleaner and easier to read.validation[] new type util features
3965,3965,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3966,3966,"5 0.20634920634920637, 6 0.19636169074371324, 3 0.1926163723916533, 0 0.13144283930800785, 4 0.10148029249152843, 2 0.08649901908328878, 1 0.08525057963260213",add final modifier to local variables.tab police: fastdateparser could use calendar.getdisplaynames for all text fieldsshow where the parsing failed fastdateparser does not handle unterminated quotes correctlytrailing spaces fastdateparser does not handle non-gregorian calendars properlyfix bug in java 7 (locale.tostring() format has changed) fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3967,3967,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
3968,3968,"2 0.23072562358276635, 1 0.12953514739229025, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3969,3969,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
3970,3970,"6 0.4270262677342324, 5 0.15465655288664135, 3 0.12909116448939456, 4 0.0838600927096502, 2 0.0720606826801517, 0 0.0681275460036522, 1 0.06517769349627757","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
3971,3971,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort methods.
3972,3972,"5 0.27563618039808513, 4 0.1310153691106072, 3 0.12925170068027209, 0 0.12043335852859663, 1 0.11514235323759134, 6 0.11514235323759134, 2 0.11337868480725624",change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3973,3973,"0 0.2279265873015873, 4 0.15674603174603172, 6 0.13764880952380948, 3 0.13417658730158727, 1 0.11681547619047622, 2 0.1150793650793651, 5 0.11160714285714288","refactor magic char.better exception message.use validatenotnull instead of ""throw new nullpointerexception"" add objectutils.toidentitystring methods that support stringbuilder, strbuilder, and appendable"
3974,3974,"2 0.23072562358276635, 4 0.13151927437641722, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
3975,3975,"3 0.22278911564625845, 2 0.13747165532879818, 1 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
3976,3976,"6 0.4240764152268578, 5 0.1615395420705155, 3 0.13302430116589406, 4 0.08287680854052533, 2 0.06911083017277708, 0 0.06517769349627757, 1 0.06419440932715269","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
3977,3977,"6 0.19302721088435373, 5 0.1434240362811791, 3 0.1394557823129252, 2 0.13548752834467123, 4 0.13350340136054425, 0 0.1275510204081633, 1 0.1275510204081633"," partial: implement format u for fastdateformat, day number of week"
3978,3978,"5 0.2992277992277993, 0 0.14006864006864006, 1 0.12805662805662804, 2 0.11754611754611753, 3 0.11003861003861001, 4 0.10703560703560704, 6 0.09802659802659805","change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
3979,3979,"5 0.2701014832162373, 6 0.1316679677335415, 0 0.12620348685922458, 1 0.12073900598490764, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",4fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3980,3980,"5 0.27460317460317457, 6 0.13015873015873014, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3981,3981,"3 0.35497835497835506, 5 0.18999518999519, 0 0.12265512265512264, 6 0.09796376463043129, 2 0.08337341670675003, 1 0.07888407888407889, 4 0.07215007215007217","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesadd final modifier to local variables.allow access to parsedpattern for test purposesmake parseexception text similar to that thrown by simpledateformat fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
3982,3982,"2 0.23367161072079104, 3 0.17356232110330466, 1 0.12256049960967995, 4 0.11891751236013533, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
3983,3983,"5 0.28467343221441577, 4 0.12802498048399688, 0 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3984,3984,"1 0.7125778581474782, 2 0.05505324492666263, 5 0.048020896122161934, 0 0.046614426361261806, 3 0.046614426361261806, 4 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
3985,3985,"3 0.20978835978835977, 6 0.1579365079365079, 2 0.13756613756613753, 4 0.13571428571428568, 1 0.12089947089947092, 0 0.11904761904761907, 5 0.11904761904761907",use validateistrue to validate argumentsformat to 120 line length.add final modifier to local variables.
3986,3986,"0 0.21181368722352328, 4 0.16445485297944312, 2 0.13348946135831383, 1 0.1298464741087692, 6 0.12620348685922458, 3 0.11709601873536302, 5 0.11709601873536302",: typeutils.tostring() doesnt handle primitive and object arrays correctlyapply patch by aaron digulla[] new type util features
3987,3987,"5 0.28695436507936506, 6 0.12896825396825393, 2 0.12723214285714282, 4 0.11681547619047622, 0 0.1150793650793651, 1 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
3988,3988,"3 0.19594964422550626, 6 0.14997263273125339, 5 0.13656267104542963, 0 0.13464696223316913, 2 0.1327312534209086, 1 0.126984126984127, 4 0.12315270935960593",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
3989,3989,"5 0.2883164194639604, 1 0.12073900598490762, 4 0.1207390059849076, 6 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
3990,3990,"3 0.3179138321995465, 4 0.13061224489795917, 6 0.12108843537414964, 1 0.11315192743764173, 0 0.10997732426303855, 2 0.1052154195011338, 5 0.10204081632653063","remove redundant type arguments.add final modifier to local variables.promote uniformity between branches by using registry accessorunused imports + uh, why would you synchronize access to a threadlocal? :p[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
3991,3991,"6 0.3305322128851541, 5 0.12628384687208213, 3 0.11974789915966384, 0 0.10830999066293186, 1 0.1050420168067227, 2 0.1050420168067227, 4 0.1050420168067227",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor some duplicate code.
3992,3992,"5 0.27275132275132274, 6 0.13201058201058197, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
3993,3993,"0 0.17296113847837985, 6 0.16721401204159822, 5 0.1403940886699507, 1 0.13847837985769018, 2 0.13081554460864808, 4 0.12698412698412703, 3 0.12315270935960594", make some private fields finalreturning notimplementedexception to lang after it was removed in lang 3.0 per the request in . 
3994,3994,"3 0.22101972101972103, 4 0.1738816738816739, 6 0.1317941317941318, 2 0.13011063011063012, 0 0.12674362674362674, 1 0.10822510822510825, 5 0.10822510822510825",remove redundant type arguments.validationadd final modifier to local variables.setting the length of the new array to optimize speed[] vastly expanded typeutils
3995,3995,"3 0.20259740259740258, 2 0.14805194805194805, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
3996,3996,"0 0.21067821067821066, 4 0.13997113997113997, 1 0.12987012987012989, 2 0.12987012987012989, 3 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",provide read access to the registered listener instances
3997,3997,"2 0.18184349763297128, 1 0.16235032024505705, 5 0.13895850737956003, 3 0.13311055416318573, 4 0.13311055416318573, 0 0.12531328320802007, 6 0.12531328320802007",adding hennings github pull request with a triple implementation. 675
3998,3998,"0 0.2168367346938775, 6 0.14540816326530606, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327",strbuilder implements builder; provide tostringbuilder as tostringbuffer
3999,3999,"6 0.26616057050839664, 0 0.1695422130204739, 4 0.12123303427651254, 2 0.11962272831838049, 1 0.11640211640211642, 3 0.10351966873706007, 5 0.10351966873706007",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmade it clear that the fields of the object form the hash code ().pulled magic values into constants.
4000,4000,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
4001,4001,"6 0.22456414259692947, 0 0.15170439760603693, 4 0.1334894613583138, 2 0.1316679677335415, 5 0.12256049960967998, 1 0.11891751236013536, 3 0.11709601873536302","<action issue="""" type=""fix"">stringescapeutils.escapejava() and escapeecmascript() do not output the escaped surrogate pairs that are java parsable</action>"
4002,4002,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4003,4003,"4 0.20663780663780665, 3 0.14401154401154398, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",eat own dog food: stringutilsisempty(string) and replace some but not all stringlength() == 0 with stringisempty()
4004,4004,"0 0.1878306878306878, 6 0.15079365079365076, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",remove pre java 5 workaround
4005,4005,"2 0.22767116796967543, 6 0.15138592750533045, 0 0.1497275527126273, 1 0.12153518123667374, 3 0.12153518123667374, 4 0.12153518123667374, 5 0.10660980810234542","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws[] removed unnecessary elses and use of ternary operator with primitive boolean consequences e.g. (some boolean expression) ? true : false"
4006,4006,"3 0.2623083131557707, 2 0.12859833198816248, 1 0.12483185364541295, 0 0.12106537530266342, 4 0.12106537530266342, 5 0.12106537530266342, 6 0.12106537530266342",fixing crlfsstatement unnecessarily nested within else clause.add final modifier to local variables.
4007,4007,"0 0.2208298524087997, 2 0.13311055416318573, 3 0.13311055416318573, 4 0.13311055416318573, 1 0.1272626009468115, 5 0.1272626009468115, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
4008,4008,"0 0.29234778488509827, 2 0.13646055437100207, 5 0.12153518123667371, 1 0.11490168206586117, 3 0.113243307273158, 6 0.11158493248045487, 4 0.10992655768775171",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.use lowercase presentation for hex values as it is done in the jdk.use jdk functionality where available.: add conversion utility to convert between data types on byte level
4009,4009,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14734950584007186, 1 0.14106019766397127, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
4010,4010,"5 0.30438842203548083, 6 0.13772175536881415, 0 0.12464985994397756, 3 0.11321195144724557, 4 0.10994397759103644, 1 0.1050420168067227, 2 0.1050420168067227",adjust fastdateformat for java 7 behavior regarding format of the year pattern ().refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4011,4011,"1 0.7118746232670283, 2 0.05294354028531243, 5 0.04942736588306208, 0 0.047317661241711884, 3 0.047317661241711884, 4 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4012,4012,"3 0.20259740259740258, 2 0.14805194805194805, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4013,4013,"3 0.2757640369580668, 2 0.14475242833451785, 4 0.1331438047855958, 6 0.12153518123667373, 1 0.10992655768775172, 0 0.10826818289504858, 5 0.10660980810234542",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerformat to 120 line length.add final modifier to method parameters.
4014,4014,"5 0.2864949258391881, 4 0.12620348685922456, 0 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4015,4015,"6 0.15992812219227312, 5 0.15363881401617252, 0 0.1473495058400719, 1 0.13477088948787067, 2 0.13477088948787067, 3 0.13477088948787067, 4 0.13477088948787067",4fastdateformat apis that use a stringbuilder
4016,4016,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4017,4017,"3 0.22085385878489325, 2 0.14614121510673234, 0 0.1403940886699507, 1 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594",the the patrol.validationadd final modifier to local variables.[] vastly expanded typeutils
4018,4018,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4019,4019,"6 0.2972385301152424, 2 0.19069362904979342, 5 0.11154598825831702, 3 0.10393563818221355, 1 0.10089149815177215, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
4020,4020,"6 0.21693121693121686, 3 0.15650236702868278, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
4021,4021,"5 0.1553065670712729, 1 0.14441332088390912, 0 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 6 0.1400560224089636",: there should be a differencebuilder with a reflectiondifferencebuilder implementation
4022,4022,"0 0.22445436507936506, 2 0.15674603174603172, 6 0.14285714285714282, 4 0.13591269841269837, 5 0.1150793650793651, 3 0.11334325396825398, 1 0.11160714285714288","functions.java whitspacesreplace tabs with four spaces, as per the projects checkstyle rules.adding the functions class as a helper for dealing with java 8 lambdas."
4023,4023,"0 0.19897959183673466, 4 0.15532879818594097, 2 0.13350340136054423, 1 0.12953514739229025, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",": extend randomstringutils with methods that generate strings between a min and max length (, )"
4024,4024,"6 0.4289928360724822, 5 0.157606405394016, 3 0.12319145947464528, 4 0.08287680854052533, 2 0.07402725101840144, 1 0.0671442618345273, 0 0.06616097766540245","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
4025,4025,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
4026,4026,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
4027,4027,"6 0.26719576719576715, 0 0.13015873015873014, 4 0.12645502645502646, 1 0.11904761904761907, 2 0.11904761904761907, 3 0.11904761904761907, 5 0.11904761904761907"," fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
4028,4028,"5 0.2508884150675196, 3 0.18621179815209662, 6 0.12651030561478321, 2 0.1149016820658612, 1 0.10826818289504858, 0 0.10660980810234544, 4 0.10660980810234544",format.add final modifier to local variables.trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4029,4029,"5 0.2708994708994708, 6 0.13201058201058197, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4030,4030,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4031,4031,"4 0.26719576719576715, 6 0.13571428571428568, 0 0.12089947089947091, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
4032,4032,"3 0.22278911564625847, 2 0.1354875283446712, 1 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
4033,4033,"2 0.18707482993197277, 0 0.1454081632653061, 3 0.14143990929705214, 4 0.13945578231292519, 6 0.13151927437641725, 1 0.1275510204081633, 5 0.1275510204081633",: strsubstitutor.replacesystemproperties does not work consistently. this fixes from github. thanks to jonathan baker.
4034,4034,"1 0.7167972674301788, 5 0.048724131002612026, 3 0.04872413100261201, 4 0.048020896122161955, 2 0.047317661241711884, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4035,4035,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4036,4036,"3 0.19585253456221197, 0 0.16359447004608293, 5 0.1474654377880184, 2 0.14388120839733742, 1 0.11699948796722993, 4 0.11699948796722993, 6 0.11520737327188943",replaced private integer constants with private static enum.add final modifier to local variables.
4037,4037,"5 0.2956349206349207, 6 0.12723214285714282, 2 0.12549603174603172, 1 0.1150793650793651, 4 0.11334325396825398, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4038,4038,"3 0.22660098522167488, 6 0.1403940886699507, 0 0.1327312534209086, 1 0.13081554460864808, 2 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","tab alignment[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
4039,4039,"4 0.16931216931216925, 6 0.1631393298059964, 3 0.1384479717813051, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 5 0.1322751322751323",remove redundant type arguments.
4040,4040,"6 0.2397094430992736, 3 0.1380145278450363, 4 0.1380145278450363, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
4041,4041,"6 0.28904249871991805, 5 0.13492063492063489, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
4042,4042,"1 0.6828248265374015, 2 0.06007033551943732, 4 0.06007033551943732, 3 0.05674365554605076, 6 0.052086303583309575, 5 0.04476760764185916, 0 0.04343693565250453",add final modifier to method parameters.remove redundant type arguments.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4043,4043,"3 0.1907452246435297, 2 0.18697874630078015, 0 0.1285983319881625, 4 0.12671509281678775, 1 0.12294861447403822, 5 0.12294861447403822, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
4044,4044,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4045,4045,"0 0.276832955404384, 2 0.1855631141345427, 4 0.1220710506424792, 6 0.11413454270597126, 3 0.11281179138321994, 1 0.10355253212396066, 5 0.0850340136054422","removed isjavaversionatleast(float) and (int), and added an enum variant with the new javaversion enum. updated the rest of the code, switched isjavaversionatleast over to using java.specification.version and not java.version (the vendor code) and dropped java_version_trimmed, java_version_float and java_version_int. see: 624- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
4046,4046,"3 0.2086580086580086, 1 0.13593073593073596, 2 0.13593073593073593, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
4047,4047,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4048,4048,"6 0.15659340659340654, 2 0.14804639804639805, 3 0.14377289377289376, 1 0.1394993894993895, 0 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735",add stringmatchertostring(); useful from a debugger.
4049,4049,"0 0.2168367346938775, 6 0.14540816326530606, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327",strbuilder implements builder; provide tostringbuilder as tostringbuffer
4050,4050,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4051,4051,"0 0.22276029055690072, 4 0.14178100618778583, 6 0.1380145278450363, 3 0.13424804950228678, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
4052,4052,"0 0.318342151675485, 4 0.1655643738977072, 5 0.10846560846560847, 1 0.10383597883597884, 2 0.10229276895943563, 6 0.10229276895943563, 3 0.09920634920634921","reverting r1090111 - moving the text.translate escapers back from using range to replicating parts of the range api. see the list for details (unnecessary boxing in stringescapeutils etc), the move to range was an uncomfortable fit. moving text translation classes to the range class for its configuration"
4053,4053,"2 0.2005291005291005, 3 0.15238095238095234, 0 0.13571428571428568, 4 0.13571428571428568, 1 0.12830687830687829, 6 0.12830687830687829, 5 0.11904761904761907",: please add number to byte[] methods. suggested by lilianne e. blaze. final patch from vincent ricard (with thanks to henri yandell).
4054,4054,"4 0.1767925561029009, 0 0.17296113847837982, 3 0.13656267104542963, 5 0.1346469622331691, 6 0.1327312534209086, 1 0.12315270935960593, 2 0.12315270935960593","[] create strbuilder apis similar to string.format(string, object...)"
4055,4055,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4056,4056,"2 0.1878306878306878, 4 0.1425631981187537, 5 0.13639035861258086, 0 0.13433274544385657, 1 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
4057,4057,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4058,4058,"6 0.2781954887218045, 5 0.22410192147034252, 3 0.11591478696741851, 0 0.09837092731829573, 1 0.09544695071010861, 2 0.09398496240601505, 4 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateformats ""z"" pattern does not respect timezone of calendar instances passed to format()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
4059,4059,"0 0.22601279317697232, 3 0.1746031746031746, 4 0.13314380478559582, 6 0.13148542999289267, 2 0.11821843165126748, 1 0.10992655768775174, 5 0.10660980810234544","[] objectutils.identitytostring(object) and friends shouldallocate builders and buffers with a size add objectutils.toidentitystring methods that support stringbuilder, strbuilder, and appendableadd final modifier to local variables."
4060,4060,"5 0.2646370023419204, 6 0.14988290398126458, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4061,4061,"5 0.167254556143445, 0 0.15079365079365076, 2 0.15079365079365076, 6 0.13433274544385657, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323", simplify fastdateformat; eliminate boxing
4062,4062,"1 0.7220779220779221, 2 0.05137085137085137, 3 0.04935064935064934, 5 0.04531024531024532, 4 0.045310245310245315, 0 0.0432900432900433, 6 0.0432900432900433",flips the order of conditional expressions and if statements whose conditions were negated: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4063,4063,"0 0.16519694297472073, 2 0.1569664902998236, 4 0.14873603762492651, 1 0.13227513227513232, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",: new methods for lang3.validatethis from github.
4064,4064,"6 0.2911502500543596, 2 0.1906936290497934, 5 0.11915633833442049, 3 0.10241356816699283, 1 0.10089149815177213, 0 0.09784735812133073, 4 0.09784735812133073",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
4065,4065,"3 0.20122887864823347, 0 0.16359447004608293, 5 0.1474654377880184, 2 0.1367127496159754, 1 0.11879160266257044, 4 0.11699948796722993, 6 0.11520737327188943",replaced private integer constants with private static enum.add final modifier to local variables.
4066,4066,"6 0.2318501170960187, 2 0.16991933385376004, 4 0.12620348685922456, 0 0.11891751236013534, 1 0.11891751236013534, 3 0.117096018735363, 5 0.117096018735363",fix defaultexceptioncontext.addvalue that overwrites information in a recursive situation (). allow explicit replacement of a label with the new replacevalue methods.
4067,4067,"6 0.35140155352921315, 3 0.24147247551502865, 5 0.09371833839918943, 2 0.0807159743329956, 1 0.07953394123606888, 4 0.07716987504221547, 0 0.07598784194528875","make sure lines in files dont have trailing white spaces and remove all trailing white spaces: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4068,4068,"3 0.19047619047619044, 2 0.15411255411255412, 1 0.13593073593073596, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4069,4069,"2 0.3001253132832081, 4 0.15685045948203843, 0 0.15100250626566417, 5 0.1056808688387636, 1 0.09544695071010864, 3 0.09544695071010864, 6 0.09544695071010864","extract logic for checking string representation of objects into separate methodsformat source codevariable names should follow naming conventionsmodified appenddetail method for object value in jsontostringstyle classfix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade."
4070,4070,"5 0.2883164194639604, 4 0.12256049960967993, 0 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4071,4071,"2 0.2246435297282755, 5 0.13801452784503632, 6 0.13801452784503632, 4 0.13048157115953726, 1 0.12671509281678778, 0 0.12106537530266348, 3 0.12106537530266348",crlf -> lfjavadoc: fix typo but working is still awkward.checkstyle and trailing spaces.
4072,4072,"5 0.2727513227513227, 6 0.12830687830687829, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4073,4073,"6 0.2926723200695803, 2 0.19069362904979342, 5 0.1176342683191998, 3 0.10241356816699285, 1 0.10089149815177215, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
4074,4074,"3 0.2046176046176046, 2 0.14401154401154395, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4075,4075,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4076,4076,"5 0.2755659640905543, 4 0.12984647410876915, 6 0.12438199323445227, 0 0.11891751236013534, 1 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4077,4077,"0 0.18745275888133028, 4 0.17334341143864954, 3 0.13983371126228267, 6 0.1310153691106072, 2 0.12925170068027214, 5 0.12219702695893173, 1 0.11690602166792646",removes unnecessary class reference of static method calls which are declared in the same classuse final consistently. [] new type util features
4078,4078,"4 0.1642135642135642, 0 0.14805194805194805, 3 0.14805194805194805, 6 0.137950937950938, 1 0.13593073593073596, 2 0.13593073593073593, 5 0.1298701298701299",add back pairtostring(string format).
4079,4079,"3 0.2114608555286521, 6 0.1530804412160344, 0 0.13989776701641105, 2 0.13048157115953726, 1 0.12294861447403822, 4 0.12106537530266345, 5 0.12106537530266345",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
4080,4080,"6 0.2369614512471655, 4 0.21791383219954644, 2 0.13537414965986388, 1 0.1036281179138322, 0 0.10204081632653061, 3 0.10204081632653061, 5 0.10204081632653061",make sure lines in files dont have trailing white spaces and remove all trailing white spaces: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
4081,4081,"6 0.20294784580498862, 3 0.13945578231292516, 5 0.13945578231292516, 4 0.1335034013605442, 2 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
4082,4082,"4 0.26904761904761904, 6 0.13571428571428568, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
4083,4083,"5 0.29042658730158727, 2 0.12723214285714282, 6 0.12723214285714282, 0 0.11681547619047619, 1 0.11334325396825398, 4 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4084,4084,"2 0.26027077497665735, 3 0.15896358543417366, 0 0.14752567693744162, 1 0.11321195144724559, 6 0.10994397759103644, 4 0.1050420168067227, 5 0.1050420168067227",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: numericentityescaper incorrectly encodes supplementary characters. thanks to chris karcher.add final modifier to local variables.
4085,4085,"0 0.17250673854447438, 2 0.14525306978137167, 1 0.14106019766397127, 3 0.13686732554657086, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",add explict default case and 
4086,4086,"5 0.291959406713505, 4 0.12073900598490762, 6 0.11891751236013531, 0 0.11709601873536299, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4087,4087,"5 0.2701014832162373, 6 0.14259692948217537, 1 0.11891751236013534, 0 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4088,4088,"3 0.15363881401617246, 4 0.15363881401617246, 6 0.15363881401617246, 0 0.1347708894878706, 1 0.1347708894878706, 2 0.1347708894878706, 5 0.1347708894878706",use validateistrue to validate arguments
4089,4089,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4090,4090,"3 0.18689196108550946, 2 0.17076292882744493, 0 0.1474654377880184, 4 0.1474654377880184, 1 0.11699948796722992, 5 0.11520737327188942, 6 0.11520737327188942","use stringbuilderappend(charsequence, int, int) were possible to improve performance(similar to , thanks to stephane landelle for the suggestion)add final modifier to local variables."
4091,4091,"5 0.27645502645502645, 1 0.1246031746031746, 6 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4092,4092,"1 0.1868131868131868, 0 0.1509157509157509, 3 0.14749694749694747, 2 0.14407814407814404, 4 0.14236874236874233, 6 0.11843711843711846, 5 0.1098901098901099",flips the order of conditional expressions and if statements whose conditions were negateddocument some @suppresswarning annotationsjavadocwsfix cloning of array types.add methods for cloneables to objectutils ().
4093,4093,"3 0.2046176046176046, 2 0.14603174603174604, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4094,4094,"6 0.2827112827112827, 5 0.21814671814671813, 4 0.10553410553410553, 0 0.10403260403260405, 1 0.09652509652509654, 2 0.09652509652509654, 3 0.09652509652509654"," fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses . fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
4095,4095,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4096,4096,"6 0.21693121693121686, 3 0.15455304928989133, 4 0.1272626009468115, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
4097,4097,"6 0.20259740259740255, 5 0.14805194805194802, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 3 0.12987012987012989, 4 0.12987012987012989",allow subclass custom invocation handlingadd serialization support to eventlistenersupport
4098,4098,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
4099,4099,"3 0.22667780562517398, 2 0.1409078251183514, 6 0.1311612364243943, 0 0.12531328320802007, 1 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",lvar should not hide ivar.add final modifier to local variables.
4100,4100,"3 0.19451659451659448, 2 0.1541125541125541, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4101,4101,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4102,4102,"2 0.20890022675736958, 6 0.14540816326530606, 3 0.1335034013605442, 1 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327",": add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
4103,4103,"2 0.17250673854447438, 1 0.1536388140161725, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",more varargs-related updates
4104,4104,"5 0.27645502645502645, 6 0.1246031746031746, 1 0.12275132275132274, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4105,4105,"6 0.2823975361288794, 3 0.17626154939587774, 2 0.1149016820658612, 0 0.10660980810234544, 1 0.10660980810234544, 4 0.10660980810234544, 5 0.10660980810234544",make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse validateistrue to validate argumentsadd final modifier to local variables.
4106,4106,"5 0.27089947089947086, 6 0.13386243386243385, 0 0.11904761904761907, 1 0.11904761904761907, 2 0.11904761904761907, 3 0.11904761904761907, 4 0.11904761904761907",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4107,4107,"3 0.20057720057720052, 2 0.146031746031746, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
4108,4108,"6 0.17120181405895687, 0 0.16326530612244897, 5 0.1374716553287982, 1 0.13548752834467123, 4 0.13350340136054423, 2 0.13151927437641725, 3 0.1275510204081633",: durationformatutilsformatdurationhms implementation does not correspond to javadoc and vice versa. thanks to michael osipov
4109,4109,"2 0.33218311479181045, 3 0.11962272831838049, 1 0.1164021164021164, 5 0.1115711985277203, 6 0.10835058661145619, 4 0.10674028065332414, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4110,4110,"0 0.3337204800619435, 4 0.1562137049941928, 6 0.12369337979094075, 1 0.10201316298877272, 3 0.10201316298877272, 2 0.0952380952380952, 5 0.08710801393728225","[] remove checks for java versions below the minimum supportedone. .removed isjavaversionatleast(float) and (int), and added an enum variant with the new javaversion enum. updated the rest of the code, switched isjavaversionatleast over to using java.specification.version and not java.version (the vendor code) and dropped java_version_trimmed, java_version_float and java_version_int. see: 624default autoboxing depending on rt java version"
4111,4111,"2 0.27374447046578193, 4 0.1298464741087692, 1 0.12256049960967996, 3 0.12073900598490765, 0 0.11891751236013534, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
4112,4112,"4 0.25744047619047616, 0 0.14459325396825393, 3 0.12723214285714282, 6 0.12723214285714282, 2 0.12028769841269842, 1 0.11160714285714288, 5 0.11160714285714288",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)refactor range with lots of new methods
4113,4113,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4114,4114,"0 0.18905895691609972, 1 0.14739229024943307, 3 0.13945578231292516, 2 0.1335034013605442, 4 0.13151927437641722, 5 0.13151927437641722, 6 0.12755102040816327",": add archutils - an utility class for the ""os.arch"" system property ()"
4115,4115,"0 0.17136978248089355, 3 0.15079365079365076, 4 0.1425631981187537, 2 0.13844797178130513, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
4116,4116,"5 0.26715506715506715, 2 0.14065934065934063, 3 0.12869352869352865, 4 0.12014652014652015, 6 0.11843711843711843, 1 0.11330891330891332, 0 0.11159951159951162",dont mutate parametersadd final modifier to method parameters.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4117,4117,"0 0.25468975468975463, 3 0.1957671957671957, 1 0.11327561327561325, 2 0.11159211159211159, 4 0.10822510822510822, 5 0.10822510822510822, 6 0.10822510822510822", enumutils *bitvector issue with more than 32 values enumthis use final consistently. dont write parameteradd final modifier to local variables.[] permit bitvector generation for enums with > 64 values; plus some test corrections
4118,4118,"3 0.18783068783068776, 5 0.14462081128747792, 6 0.1384479717813051, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
4119,4119,"3 0.3648459383753501, 2 0.10830999066293186, 4 0.10667600373482727, 0 0.1050420168067227, 1 0.1050420168067227, 5 0.1050420168067227, 6 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4120,4120,"6 0.30989010989010984, 0 0.12014652014652015, 5 0.12014652014652014, 4 0.11672771672771674, 1 0.1115995115995116, 2 0.1115995115995116, 3 0.10989010989010989",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
4121,4121,"2 0.19451659451659448, 5 0.14401154401154398, 3 0.13593073593073596, 1 0.13593073593073593, 0 0.12987012987012989, 4 0.12987012987012989, 6 0.12987012987012989",: add noclassnametostringstyle implementation of tostringstyle. this from github. thanks to innokenty shuvalov.
4122,4122,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4123,4123,"5 0.2602280348759223, 0 0.1491169237648111, 6 0.1412921976302258, 3 0.1256427453610552, 4 0.11312318354571876, 1 0.10999329309188464, 2 0.10060362173038231",4fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone setapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4124,4124,"5 0.25689865689865693, 3 0.17313797313797313, 2 0.12185592185592187, 6 0.11672771672771677, 1 0.11159951159951163, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4125,4125,"2 0.23367161072079104, 3 0.1735623211033047, 4 0.12256049960967993, 1 0.11891751236013534, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
4126,4126,"4 0.1808924827792752, 6 0.14106019766397127, 0 0.13686732554657086, 2 0.13686732554657086, 1 0.13477088948787064, 3 0.13477088948787064, 5 0.13477088948787064",use index_not_found instead of magic number.
4127,4127,"6 0.16202455825097334, 5 0.15154237795747227, 0 0.1473495058400719, 1 0.13477088948787067, 2 0.13477088948787067, 3 0.13477088948787067, 4 0.13477088948787067",4fastdateformat apis that use a stringbuilder
4128,4128,"0 0.28174603174603174, 2 0.13591269841269837, 3 0.13417658730158727, 1 0.11334325396825398, 4 0.11160714285714288, 5 0.11160714285714288, 6 0.11160714285714288",provide read access to the registered listener instancesimproving error checking logic and adding test cases to verify.changing eol-style to native.misc. event utils.
4129,4129,"5 0.29216269841269843, 2 0.12723214285714282, 6 0.12723214285714282, 4 0.11681547619047622, 1 0.11334325396825398, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4130,4130,"3 0.204291593180482, 4 0.13433274544385657, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
4131,4131,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4132,4132,"6 0.18905895691609972, 0 0.155328798185941, 1 0.14540816326530606, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
4133,4133,"2 0.1565023670286828, 0 0.14870509607351712, 4 0.14870509607351712, 5 0.1467557783347257, 6 0.14285714285714285, 1 0.13116123642439434, 3 0.1253132832080201",: add bypass option for classes to recursive and reflective equalsbuilderpatch supplied by yathos ug
4134,4134,"3 0.2066378066378066, 2 0.13795093795093796, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
4135,4135,"0 0.20259740259740258, 1 0.14199134199134197, 2 0.13593073593073596, 3 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",: add conversion utility to convert between data types on byte level
4136,4136,"5 0.27089947089947086, 6 0.13015873015873014, 1 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4137,4137,"5 0.27645502645502645, 6 0.12830687830687829, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4138,4138,"4 0.21303258145363405, 0 0.14285714285714282, 3 0.13505987190197713, 2 0.13311055416318573, 1 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007","sort members.[] add stringutils.countmatches(charsequence, char)"
4139,4139,"5 0.27645502645502645, 1 0.12275132275132276, 6 0.12275132275132276, 2 0.12089947089947091, 0 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4140,4140,"3 0.22675736961451243, 1 0.13151927437641722, 2 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
4141,4141,"2 0.19827818132902877, 0 0.15496368038740918, 4 0.13989776701641105, 5 0.1380145278450363, 6 0.12671509281678778, 1 0.12106537530266347, 3 0.12106537530266347",multilinerecursivetostringstyle: made private field indent static: multiline recursive to string style. this fixes from github. thanks to jan matèrne.
4142,4142,"6 0.22660098522167485, 4 0.1327312534209086, 0 0.13081554460864805, 3 0.13081554460864805, 2 0.13081554460864803, 1 0.12506841817186645, 5 0.12315270935960593","added missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
4143,4143,"4 0.3337934207499425, 0 0.12123303427651251, 1 0.11640211640211638, 6 0.1115711985277203, 2 0.10996089256958824, 3 0.10351966873706006, 5 0.10351966873706006","sort members.rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
4144,4144,"0 0.22276029055690072, 4 0.13989776701641105, 6 0.1380145278450363, 3 0.13613128867366153, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
4145,4145,"3 0.32708032708032697, 1 0.125060125060125, 0 0.11327561327561327, 2 0.1099086099086099, 4 0.10822510822510822, 5 0.10822510822510822, 6 0.10822510822510822","add final modifier to local variables.promote uniformity between branches by using registry accessorunused imports + uh, why would you synchronize access to a threadlocal? :p[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
4146,4146,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4147,4147,"3 0.31315192743764175, 4 0.13061224489795917, 6 0.12267573696145122, 1 0.11315192743764173, 2 0.10997732426303858, 0 0.10839002267573696, 5 0.10204081632653063","remove redundant type arguments.add final modifier to local variables.promote uniformity between branches by using registry accessorunused imports + uh, why would you synchronize access to a threadlocal? :p[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
4148,4148,"2 0.3081807081807082, 0 0.12014652014652016, 4 0.11843711843711846, 1 0.11672771672771673, 3 0.11501831501831504, 5 0.11159951159951162, 6 0.1098901098901099","dont need internal ivar name for a boolean to carry a ""flag"" postfix.dont need internal ivar name for a boolean to carry a ""flag"" postfix.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
4149,4149,"6 0.3187473187473187, 3 0.15658515658515657, 2 0.12054912054912051, 4 0.113041613041613, 0 0.09802659802659804, 1 0.09652509652509654, 5 0.09652509652509654","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
4150,4150,"6 0.2948938611589214, 5 0.19583094281889465, 3 0.14496079556320518, 2 0.09810671256454387, 0 0.09275196022183976, 1 0.08739720787913562, 4 0.08605851979345958",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4151,4151,"5 0.2846734322144158, 4 0.12256049960967996, 0 0.12073900598490765, 1 0.11891751236013534, 6 0.11891751236013534, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4152,4152,"0 0.26857142857142857, 4 0.2019047619047619, 2 0.13227513227513224, 3 0.10412698412698414, 1 0.10264550264550265, 5 0.09523809523809525, 6 0.09523809523809525",sort members.: add null-safe stringutils.valueof(char[]) to delegate to string.valueof(char[])fix checkstyle violations[] add null-safe stringutils.valueof(char[]) to delegate tostring.valueof(char[])
4153,4153,"1 0.7111713883865782, 2 0.05645971468756279, 3 0.047317661241711884, 4 0.047317661241711884, 5 0.04661442636126182, 0 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4154,4154,"4 0.7152636726096442, 0 0.06070864364703226, 3 0.05649590009779583, 2 0.04649063416835928, 1 0.04438426239374106, 5 0.04280448356277739, 6 0.03385240352064997","sort members.[github] commons-lang pull request : intellij idea refactorings..eat own dog food: use stringutils.isempty().add final modifier to local variables.resolving - changing stringutils.isalpha, isalphanumeric and isnumeric to return false when passed an empty string. documenting this in the changes report and in the upgrade article. also fixing a javadoc c+p error in isnumericspace and isalphanumericspace. change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
4155,4155,"2 0.346485260770975, 4 0.1258503401360544, 0 0.11950113378684804, 1 0.10204081632653061, 3 0.10204081632653061, 5 0.10204081632653061, 6 0.10204081632653061",": arrayutils.removeall(object array, int... indices) should do the clone, not its callers ()crlf -> lfjavadoc: fix typo but working is still awkward.[] complement arrayutils.addall() variants with by-index and by-value removal methods"
4156,4156,"3 0.15363881401617246, 4 0.15363881401617246, 6 0.15363881401617246, 0 0.1347708894878706, 1 0.1347708894878706, 2 0.1347708894878706, 5 0.1347708894878706",use validateistrue to validate arguments
4157,4157,"3 0.19451659451659448, 2 0.14603174603174604, 1 0.13997113997114, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4158,4158,"2 0.17041030248577416, 4 0.1536388140161725, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",: fix deprecation warnings
4159,4159,"3 0.2114608555286521, 6 0.1587301587301587, 0 0.13424804950228678, 2 0.1285983319881625, 1 0.12483185364541297, 4 0.12106537530266344, 5 0.12106537530266344",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
4160,4160,"4 0.34798534798534797, 3 0.15567765567765565, 2 0.11009361009361009, 0 0.10582010582010579, 1 0.09584859584859586, 6 0.09299959299959301, 5 0.09157509157509158","sort members.add final modifier to local variables.replacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
4161,4161,"2 0.3235653235653236, 4 0.12356532356532354, 1 0.11159951159951162, 3 0.11159951159951162, 0 0.1098901098901099, 5 0.1098901098901099, 6 0.1098901098901099","crlf -> lfjavadoc: fix typo but working is still awkward.simplify isnotempty by reusing isemptyapplying chandrashekar ms patch to , adding isnotempty(array) methods to arrayutils. "
4162,4162,"6 0.3155033702978909, 0 0.14807566862361382, 4 0.12981082844096542, 3 0.10545770819743426, 2 0.10241356816699285, 1 0.09936942813655145, 5 0.09936942813655145",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
4163,4163,"0 0.2148526077097505, 6 0.14540816326530606, 4 0.12953514739229025, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327",strbuilder implements builder; provide tostringbuilder as tostringbuffer
4164,4164,"6 0.2708855472013367, 5 0.2284878863826232, 3 0.11299081035923138, 2 0.0998329156223893, 0 0.09837092731829575, 1 0.09544695071010861, 4 0.09398496240601505","make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateformats ""z"" pattern does not respect timezone of calendar instances passed to format()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
4165,4165,"6 0.16725455614344503, 0 0.15490887713109933, 5 0.1487360376249265, 1 0.13227513227513232, 2 0.13227513227513232, 3 0.13227513227513232, 4 0.13227513227513232",4fastdateformat apis that use a stringbuilderrefactor some duplicate code.
4166,4166,"5 0.25083836351441985, 0 0.16320143080706456, 6 0.1334674714956405, 3 0.12720769058797224, 1 0.11312318354571875, 4 0.11155823831880167, 2 0.10060362173038231",4fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone setapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4167,4167,"3 0.22278911564625845, 2 0.1354875283446712, 1 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
4168,4168,"3 0.3112491373360939, 4 0.12928456406717276, 2 0.1276742581090407, 6 0.11801242236024843, 1 0.10674028065332415, 0 0.10351966873706007, 5 0.10351966873706007",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerformat to 120 line length.add final modifier to local variables.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
4169,4169,"5 0.20759764579989298, 3 0.19761013019439985, 6 0.19511325129302656, 0 0.1339397182093811, 4 0.10023185304084178, 1 0.08275370073122883, 2 0.08275370073122883",add final modifier to local variables.tab police: fastdateparser could use calendar.getdisplaynames for all text fieldsshow where the parsing failed fastdateparser does not handle unterminated quotes correctlytrailing spaces fastdateparser does not handle non-gregorian calendars properlyfix bug in java 7 (locale.tostring() format has changed) fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4170,4170,"4 0.16931216931216928, 3 0.16108171663727217, 2 0.14050558495002938, 0 0.1322751322751323, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",use final consistently. [] new type util features
4171,4171,"3 0.2016967706622879, 6 0.14422550629447178, 5 0.1403940886699507, 0 0.13656267104542968, 2 0.13081554460864808, 1 0.12315270935960594, 4 0.12315270935960594",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
4172,4172,"5 0.28869047619047616, 6 0.13070436507936506, 2 0.12549603174603172, 4 0.1168154761904762, 1 0.11507936507936509, 0 0.11160714285714286, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4173,4173,"4 0.26904761904761904, 6 0.13571428571428568, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
4174,4174,"3 0.3410934744268077, 6 0.2386243386243386, 5 0.09171075837742503, 2 0.08800705467372133, 1 0.08059964726631394, 4 0.08059964726631394, 0 0.07936507936507936","lvar should not hide ivar.add final modifier to local variables.format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4175,4175,"2 0.18964076858813697, 0 0.1662489557226399, 4 0.1331105541631857, 3 0.1311612364243943, 1 0.1292119186856029, 5 0.12531328320802007, 6 0.12531328320802007",[] add methods to objectutils to get various forms of classnames in a null-safe manner
4176,4176,"6 0.28904249871991805, 5 0.13492063492063489, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
4177,4177,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4178,4178,"5 0.22570123939986952, 2 0.20439225918677972, 3 0.1541639486844966, 6 0.11002391824309633, 1 0.1100239182430963, 0 0.09784735812133073, 4 0.09784735812133073",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4179,4179,"3 0.19743803954330263, 0 0.16040100250626563, 2 0.13700918964076858, 1 0.12921191868560286, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007","use validatenotnull instead of ""throw new nullpointerexception""add final modifier to local variables."
4180,4180,"2 0.2773874577153265, 4 0.12802498048399688, 1 0.12073900598490764, 3 0.12073900598490764, 0 0.11891751236013533, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
4181,4181,"6 0.21269841269841264, 3 0.13795093795093796, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",removes redundant + signpmd: remove useless parentheses
4182,4182,"3 0.20057720057720052, 2 0.146031746031746, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
4183,4183,"6 0.15783168613357285, 0 0.1536388140161725, 5 0.14944594189877206, 1 0.1347708894878706, 2 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",4fastdateformat apis that use a stringbuilder
4184,4184,"3 0.3931289410741465, 1 0.10545770819743419, 2 0.10393563818221349, 4 0.10241356816699282, 6 0.09936942813655142, 0 0.09784735812133072, 5 0.09784735812133072","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4185,4185,"4 0.17120181405895687, 0 0.16326530612244894, 2 0.14342403628117908, 1 0.13350340136054423, 3 0.13350340136054423, 5 0.12755102040816327, 6 0.12755102040816327", add a null-safe compare() method to objectutils
4186,4186,"5 0.27387251196775003, 6 0.1574703955656336, 1 0.11514235323759134, 0 0.11337868480725624, 2 0.11337868480725624, 3 0.11337868480725624, 4 0.11337868480725624", fastdateparser and fastdateprinter support x formatapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4187,4187,"2 0.2773874577153265, 4 0.12984647410876918, 0 0.12438199323445227, 1 0.117096018735363, 3 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
4188,4188,"4 0.23448773448773455, 0 0.13684463684463685, 2 0.13011063011063012, 1 0.12674362674362677, 3 0.1250601250601251, 5 0.12337662337662338, 6 0.12337662337662338","replace tab characters with spacesapplying srihari reddys patch from , based on dave meikles original patch. this adds a truncatemiddle method to stringutils. "
4189,4189,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",changing eol-style to native.misc. event utils.
4190,4190,"5 0.27645502645502645, 6 0.12830687830687829, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4191,4191,"5 0.27275132275132274, 6 0.13015873015873017, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4192,4192,"5 0.22265709936942812, 2 0.21504674929332462, 3 0.1450315285931724, 6 0.11306805827353769, 1 0.1085018482278756, 0 0.09784735812133073, 4 0.09784735812133073",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4193,4193,"4 0.27470558115719407, 0 0.1331285202252944, 6 0.13133640552995388, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 5 0.1152073732718894",its confusing to re-use field names locallyremove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
4194,4194,"6 0.27057387057387056, 0 0.15604395604395602, 2 0.12527472527472525, 3 0.11843711843711846, 1 0.1098901098901099, 4 0.1098901098901099, 5 0.1098901098901099",make sure lines in files dont have trailing white spaces and remove all trailing white spaces - dateutilsparsedate uses default locale; add locale support
4195,4195,"4 0.2762618155876583, 3 0.18013197788478685, 6 0.15391474942036737, 2 0.11646156589976811, 1 0.09648653468878185, 0 0.0952380952380952, 5 0.08150526128054218","sort members.[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern.merge branch fix-: add replace by regular expression methods in stringutilsthis from github.: add null safe methods in stringutils to replace by regular expression : - stringutils.replaceall(string, string, string) - stringutils.replacefirst(string, string, string)"
4196,4196,"2 0.3235653235653236, 4 0.11672771672771676, 1 0.11501831501831504, 3 0.11501831501831504, 0 0.1098901098901099, 5 0.1098901098901099, 6 0.1098901098901099","crlf -> lfjavadoc: fix typo but working is still awkward.simplify isnotempty by reusing isemptyapplying chandrashekar ms patch to , adding isnotempty(array) methods to arrayutils. "
4197,4197,"3 0.2267573696145124, 2 0.13350340136054423, 1 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
4198,4198,"4 0.2168367346938775, 0 0.13747165532879818, 6 0.1354875283446712, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327",sort members.[] stringutils join apis for primitives.
4199,4199,"4 0.23234414538762363, 3 0.18081435472739815, 2 0.13733609385783296, 6 0.13250517598343683, 1 0.10835058661145619, 0 0.1051299746951921, 5 0.10351966873706005",add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)[] added support for concurrentmap.putifabsent() to concurrentutils.
4200,4200,"3 0.16931216931216925, 4 0.16931216931216925, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",use final consistently. [] new type util features
4201,4201,"3 0.17645502645502645, 6 0.16349206349206347, 0 0.15238095238095237, 4 0.1505291005291005, 1 0.11904761904761907, 2 0.11904761904761907, 5 0.11904761904761907",remove redundant type arguments.format.tab police: fastdateparser could use calendar.getdisplaynames for all text fields
4202,4202,"1 0.6975362742233906, 2 0.06154445418249097, 3 0.05677281137403835, 4 0.049274515532184246, 0 0.045866199240432365, 5 0.04518453598208199, 6 0.04382120946538124",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4203,4203,"2 0.1960611405055849, 6 0.14256319811875365, 0 0.1322751322751323, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",make sure placement of curly braces is consistent
4204,4204,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4205,4205,"3 0.18253968253968253, 0 0.15763546798029554, 2 0.14997263273125344, 4 0.1403940886699507, 1 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594",rewrite to avoid (im)possible npe warningadd final modifier to local variables.
4206,4206,"4 0.26904761904761904, 6 0.13571428571428568, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
4207,4207,"0 0.18184349763297128, 1 0.1506544138123085, 3 0.1506544138123085, 2 0.1311612364243943, 4 0.1311612364243943, 5 0.1292119186856029, 6 0.12531328320802007","use final.: add archutils - an utility class for the ""os.arch"" system property ()"
4208,4208,"3 0.22675736961451243, 1 0.13151927437641722, 2 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
4209,4209,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4210,4210,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.14525306978137167, 1 0.14315663372267146, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
4211,4211,"6 0.282010582010582, 2 0.12275132275132275, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
4212,4212,"5 0.27228327228327226, 2 0.14236874236874233, 3 0.12527472527472527, 4 0.12014652014652015, 1 0.11501831501831504, 6 0.11330891330891332, 0 0.11159951159951162",dont mutate parametersadd final modifier to method parameters.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4213,4213,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
4214,4214,"2 0.33379342074994245, 3 0.12606395215090865, 5 0.11157119852772025, 1 0.10996089256958823, 6 0.10835058661145619, 4 0.10674028065332414, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4215,4215,"5 0.2269027269027269, 6 0.21693121693121692, 3 0.14570614570614568, 0 0.1186406186406186, 2 0.10012210012210011, 1 0.09727309727309728, 4 0.09442409442409441","make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse validatenotnull instead of ""throw new nullpointerexception""add final modifier to local variables.refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. "
4216,4216,"6 0.3185475103283323, 0 0.14350945857795172, 4 0.12676668841052402, 5 0.10545770819743423, 3 0.10393563818221352, 2 0.10241356816699282, 1 0.09936942813655145",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
4217,4217,"0 0.204291593180482, 4 0.13433274544385657, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",deprecate systemutilsline_separator in favor of java.lang.systemlineseparator
4218,4218,"0 0.1878306878306878, 2 0.14050558495002938, 3 0.14050558495002938, 1 0.13433274544385657, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: add empty checks to objectutils
4219,4219,"5 0.28869047619047616, 2 0.12723214285714282, 6 0.12723214285714282, 4 0.11681547619047622, 1 0.11507936507936509, 0 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4220,4220,"3 0.2046176046176046, 2 0.14199134199134197, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4221,4221,"0 0.16931216931216928, 3 0.15079365079365076, 4 0.14462081128747795, 2 0.13844797178130513, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
4222,4222,"3 0.19855699855699852, 2 0.15007215007215008, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4223,4223,"5 0.291959406713505, 4 0.12256049960967995, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4224,4224,"3 0.22675736961451243, 1 0.13151927437641722, 2 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
4225,4225,"4 0.19548872180451127, 2 0.15845168476747423, 1 0.13116123642439434, 0 0.1311612364243943, 3 0.12921191868560292, 5 0.12921191868560292, 6 0.1253132832080201","sort by method name.[] add exceptionutils.throwableoftype(throwable, class) andfriends."
4226,4226,"3 0.19221569906501415, 2 0.18308327897368995, 4 0.16025222874537945, 0 0.13742117851706892, 1 0.11459012828875843, 6 0.11154598825831703, 5 0.10089149815177216","add final modifier to local variables.add final modifier to method parameters.removing unncessary bracketsmoving most of the methods over to varargs. a couple cant change because they are object[], class[] with both end parameters ideally wanting to be vararg. 396"
4227,4227,"0 0.2126022126022126, 2 0.1604136604136604, 4 0.14189514189514188, 3 0.13852813852813853, 6 0.1216931216931217, 5 0.11664261664261666, 1 0.10822510822510825","[] org.apache.commons.lang3.systemutils should not write tosystem.err.[] add api systemutils.string getenvironmentvariable(finalstring name, final string defaultvalue)."
4228,4228,"6 0.2318501170960187, 2 0.16809784022898772, 4 0.12984647410876918, 1 0.11891751236013534, 0 0.117096018735363, 3 0.117096018735363, 5 0.117096018735363",fix defaultexceptioncontext.addvalue that overwrites information in a recursive situation (). allow explicit replacement of a label with the new replacevalue methods.
4229,4229,"3 0.23859914336104815, 4 0.14512471655328796, 6 0.13454270597127738, 5 0.127488032249937, 2 0.12219702695893173, 1 0.11866969009826156, 0 0.11337868480725626",add final modifier to local variables.remove redundant type arguments.: fastdateformat doesnt respect summer daylight in some localized strings
4230,4230,"0 0.17136978248089355, 3 0.15079365079365076, 4 0.14462081128747797, 2 0.13639035861258086, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
4231,4231,"5 0.29042658730158727, 6 0.12723214285714282, 2 0.12028769841269842, 1 0.1185515873015873, 4 0.11681547619047619, 0 0.1150793650793651, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4232,4232,"0 0.3031976075454336, 4 0.14538762364849317, 6 0.12284334023464456, 3 0.1115711985277203, 2 0.10835058661145619, 1 0.1051299746951921, 5 0.10351966873706006","[] objectutils.identitytostring(object) and friends shouldallocate builders and buffers with a sizerefactor magic char.better exception message.use validatenotnull instead of ""throw new nullpointerexception"" add objectutils.toidentitystring methods that support stringbuilder, strbuilder, and appendable"
4233,4233,"4 0.16931216931216925, 6 0.1631393298059964, 3 0.1384479717813051, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 5 0.1322751322751323",remove redundant type arguments.
4234,4234,"5 0.25518925518925517, 3 0.17313797313797308, 2 0.12185592185592187, 6 0.11672771672771674, 1 0.11330891330891332, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4235,4235,"5 0.2492300402748164, 3 0.18289504856669034, 6 0.12485193082208006, 2 0.11987680644397063, 1 0.10992655768775174, 0 0.10660980810234544, 4 0.10660980810234544",format.add final modifier to local variables.trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4236,4236,"5 0.2901379130887327, 4 0.12256049960967993, 0 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4237,4237,"0 0.1569664902998236, 5 0.1549088771310993, 2 0.14462081128747795, 1 0.13844797178130513, 4 0.13844797178130513, 3 0.13433274544385657, 6 0.1322751322751323",[] added timedsemaphore class to concurrent package.
4238,4238,"3 0.3537076522151148, 2 0.11158493248045484, 1 0.10826818289504857, 0 0.10660980810234541, 4 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4239,4239,"5 0.2883164194639604, 1 0.12073900598490762, 4 0.12073900598490762, 6 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4240,4240,"2 0.18783068783068776, 4 0.14256319811875365, 1 0.13639035861258084, 0 0.13433274544385657, 5 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
4241,4241,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",use not bool instead of bool == false
4242,4242,"3 0.21334409470002688, 6 0.164379876244283, 0 0.1285983319881625, 2 0.12671509281678775, 1 0.12483185364541298, 4 0.12106537530266345, 5 0.12106537530266345",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
4243,4243,"1 0.6934462946732886, 3 0.07040607654104586, 2 0.05404615834063687, 5 0.04722952575713313, 4 0.046547862498782754, 0 0.04450287272373163, 6 0.043821209465381254",add final modifier to local variables.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4244,4244,"6 0.2951085195983155, 2 0.1658568189180434, 5 0.16472303206997083, 3 0.12504049238743115, 4 0.09216067379332683, 0 0.07968901846452865, 1 0.07742144476838356",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4245,4245,"2 0.19682539682539676, 3 0.19126984126984123, 0 0.13386243386243382, 1 0.12089947089947091, 4 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",fix typos in commentssuppress warning about vararg usage.add final modifier to local variables.
4246,4246,"2 0.1878306878306878, 4 0.14462081128747795, 3 0.13844797178130513, 0 0.1322751322751323, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
4247,4247,"5 0.2864949258391881, 4 0.12256049960967995, 6 0.12073900598490764, 0 0.11891751236013533, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4248,4248,"6 0.32783068783068786, 3 0.13820105820105819, 0 0.1293121693121693, 4 0.11894179894179892, 1 0.09523809523809526, 2 0.09523809523809526, 5 0.09523809523809526","replace tabs with spaces fastdateparser and fastdateprinter support x format fastdateparser does not handle excess hours as per simpledateformatdocsadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .dont mutate parameterstab police: fastdateparser could use calendar.getdisplaynames for all text fields"
4249,4249,"5 0.29378090033827736, 1 0.11891751236013531, 6 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 4 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4250,4250,"3 0.21067821067821063, 2 0.13593073593073596, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
4251,4251,"2 0.30158730158730157, 3 0.1663216011042098, 1 0.1115711985277203, 6 0.10835058661145619, 4 0.1051299746951921, 0 0.10351966873706006, 5 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
4252,4252,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
4253,4253,"3 0.18886198547215496, 6 0.14178100618778586, 2 0.13801452784503632, 4 0.13801452784503632, 5 0.13801452784503632, 0 0.1342480495022868, 1 0.12106537530266348",fixing crlfsstatement unnecessarily nested within else clause.reuse functionality from stringutils instead of duplicating code
4254,4254,"6 0.3436041083099906, 5 0.12791783380018673, 0 0.10830999066293184, 1 0.10504201680672269, 2 0.10504201680672269, 3 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
4255,4255,"2 0.26984126984126977, 1 0.12483185364541295, 0 0.12106537530266342, 3 0.12106537530266342, 4 0.12106537530266342, 5 0.12106537530266342, 6 0.12106537530266342",crlf -> lfjavadoc: fix typo but working is still awkward.swap and shift for arrays
4256,4256,"4 0.19938735728209409, 2 0.1526037315510999, 0 0.13311055416318573, 3 0.13311055416318573, 5 0.1292119186856029, 1 0.1272626009468115, 6 0.12531328320802007","sort by method name.[] add exceptionutils.throwableoftype(throwable, class) andfriends."
4257,4257,"3 0.20259740259740255, 2 0.14199134199134197, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
4258,4258,"3 0.3454157782515991, 2 0.113243307273158, 4 0.11324330727315798, 6 0.10826818289504855, 0 0.1066098081023454, 1 0.1066098081023454, 5 0.1066098081023454","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4259,4259,"2 0.31446974925235793, 3 0.1357257878997009, 5 0.11479181044398434, 1 0.10996089256958823, 4 0.10996089256958823, 6 0.10996089256958823, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4260,4260,"2 0.3305728088336784, 3 0.1196227283183805, 1 0.11801242236024843, 5 0.11318150448585228, 4 0.10835058661145619, 0 0.1051299746951921, 6 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4261,4261,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4262,4262,"3 0.21673881673881668, 2 0.1339105339105339, 0 0.12987012987012986, 1 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",reuseadd final modifier to local variables.
4263,4263,"0 0.1839254220206601, 3 0.16981607457797931, 6 0.15394305870496344, 4 0.13101536911060718, 2 0.12925170068027209, 1 0.11866969009826155, 5 0.11337868480725624",use final consistently. [] strsubstitutor now supports the declaration of default values for the variables to be replaced. thanks to woonsan ko for the patch. strsubstitutor does not support stringbuilder or charsequence
4264,4264,"5 0.2727513227513227, 6 0.12645502645502643, 1 0.12460317460317459, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4265,4265,"5 0.2864949258391881, 4 0.12256049960967992, 6 0.12073900598490764, 0 0.11891751236013533, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4266,4266,"5 0.2791635172587553, 3 0.12925170068027209, 4 0.127488032249937, 0 0.12043335852859664, 1 0.11690602166792645, 2 0.11337868480725624, 6 0.11337868480725624",change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4267,4267,"2 0.32091097308488614, 3 0.1244536461927766, 1 0.11801242236024842, 5 0.11479181044398436, 4 0.10996089256958824, 6 0.10835058661145619, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4268,4268,"0 0.28151260504201686, 4 0.13772175536881417, 1 0.12138188608776844, 6 0.11974789915966387, 2 0.11811391223155931, 3 0.11647992530345475, 5 0.10504201680672273",": update java requirement from java 6 to 7replace usage of deprecated objectutilstostring with objectstostring: fix deprecation warningseat own dog food: separator == null ? """" : separator->objectutils.tostring(separator)remove superfluous parens."
4269,4269,"6 0.21286848072562353, 3 0.1374716553287982, 5 0.13350340136054423, 4 0.13151927437641722, 2 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
4270,4270,"2 0.2979969765684051, 6 0.1987906273620559, 3 0.12471655328798181, 1 0.11148904006046859, 0 0.09429327286470139, 4 0.08767951625094482, 5 0.08503401360544217",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.new test caseexplanations about algorithmtabs replaced by spacesnew tests addedswap and shift for arrays
4271,4271,"0 0.19146825396825395, 2 0.17584325396825395, 6 0.1515376984126984, 4 0.12723214285714285, 3 0.12375992063492064, 1 0.11855158730158731, 5 0.11160714285714289",allowduplicates will always be false at that pointadded new addlistener() method that takes a boolean for if duplicates are allowed.added test method to make sure that duplicate listeners are not added.
4272,4272,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14525306978137167, 1 0.14315663372267146, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
4273,4273,"5 0.27275132275132274, 6 0.13015873015873014, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4274,4274,"4 0.21909966172261253, 0 0.15170439760603693, 2 0.14623991673172, 3 0.12620348685922456, 1 0.12256049960967996, 5 0.117096018735363, 6 0.117096018735363",: add zero copy write method to strbuilder; : add zero copy read method to strbuilder. thanks to mikhail mazursky.
4275,4275,"6 0.30014430014430016, 3 0.12337662337662336, 5 0.12337662337662336, 0 0.12169312169312169, 2 0.11495911495911497, 1 0.10822510822510825, 4 0.10822510822510825",make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse validateistrue to validate argumentsusing validate where possible in math package.
4276,4276,"2 0.2456538170823885, 3 0.1768707482993197, 1 0.11866969009826156, 6 0.11690602166792645, 4 0.11514235323759135, 0 0.11337868480725626, 5 0.11337868480725626",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.
4277,4277,"3 0.20057720057720052, 2 0.15007215007215008, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4278,4278,"2 0.3119288119288119, 0 0.12337662337662336, 4 0.12337662337662336, 1 0.1132756132756133, 6 0.11159211159211159, 3 0.10822510822510822, 5 0.10822510822510822",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
4279,4279,"2 0.3256836871294703, 3 0.19716963090457068, 0 0.10747752916427614, 4 0.1061388410786001, 6 0.09007458405048768, 1 0.08739720787913562, 5 0.08605851979345958","add final modifier to local variables.: arrayutils.removeall(object array, int... indices) should do the clone, not its callers ()crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.add some code comments[] complement arrayutils.addall() variants with by-index and by-value removal methods"
4280,4280,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4281,4281,"0 0.3049186752890457, 3 0.15814226925338035, 2 0.12659220066627472, 6 0.12110523221634331, 4 0.10601606897903193, 1 0.09504213207916912, 5 0.08818342151675487",add fixme regarding a jdk 1.3 workarounda bit of dog food and a lot of javadoc tweakage[] add fieldutils getdeclaredfields() to return all the fields defined in the given class and super classes.add final modifier to local variables.convert to java 5 enhanced loops. adding nopmd tags for various empty catch blocks
4282,4282,"2 0.3241315850011502, 3 0.12445364619277659, 1 0.11801242236024843, 5 0.11157119852772028, 4 0.10996089256958823, 6 0.10835058661145616, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4283,4283,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4284,4284,"3 0.19764464925755248, 0 0.16359447004608293, 5 0.1474654377880184, 2 0.1402969790066564, 4 0.11879160266257044, 1 0.11699948796722993, 6 0.11520737327188943",replaced private integer constants with private static enum.add final modifier to local variables.
4285,4285,"5 0.2864949258391881, 4 0.12620348685922453, 0 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4286,4286,"2 0.20691609977324257, 6 0.14540816326530606, 1 0.13151927437641722, 3 0.13151927437641722, 4 0.12953514739229025, 0 0.12755102040816327, 5 0.12755102040816327",": add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
4287,4287,"6 0.2585765488991295, 2 0.13850486431131587, 3 0.13850486431131587, 1 0.1187916026625704, 0 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894",make checkstyle happy: add missing javadocreplace tabs with spaces fastdateparser and fastdateprinter support x format
4288,4288,"6 0.282010582010582, 2 0.12275132275132275, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
4289,4289,"0 0.19897959183673466, 4 0.15929705215419498, 2 0.13151927437641722, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",": extend randomstringutils with methods that generate strings between a min and max length (, )"
4290,4290,"6 0.17548500881834211, 5 0.15079365079365076, 3 0.14462081128747797, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323", fastdateparser and fastdateprinter support x format
4291,4291,"6 0.30856180856180854, 0 0.1284271284271284, 1 0.12337662337662333, 3 0.1132756132756133, 2 0.10990860990860991, 4 0.10822510822510822, 5 0.10822510822510822","make sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces in dateutilsadd dateutils.tocalendar(date, timezone)"
4292,4292,"6 0.1642135642135642, 4 0.16219336219336217, 3 0.15007215007215005, 2 0.13391053391053392, 0 0.12987012987012989, 1 0.12987012987012989, 5 0.12987012987012989",remove redundant type arguments.format.
4293,4293,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
4294,4294,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4295,4295,"5 0.27275132275132274, 6 0.13015873015873014, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4296,4296,"6 0.2783068783068782, 2 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
4297,4297,"5 0.3022308022308023, 0 0.13406263406263405, 1 0.12355212355212353, 2 0.12054912054912052, 3 0.11003861003861001, 4 0.10853710853710855, 6 0.10102960102960105","change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
4298,4298,"2 0.2313988095238095, 3 0.19494047619047614, 6 0.1202876984126984, 1 0.11855158730158731, 0 0.11160714285714286, 4 0.11160714285714286, 5 0.11160714285714286",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.fixing crlfsstatement unnecessarily nested within else clause.add threadutils
4299,4299,"5 0.27460317460317457, 6 0.12830687830687829, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4300,4300,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4301,4301,"3 0.1608669108669108, 2 0.1459096459096459, 1 0.14163614163614163, 5 0.1394993894993895, 0 0.13736263736263735, 4 0.13736263736263735, 6 0.13736263736263735",: add truncatedequals and truncatedcompareto
4302,4302,"0 0.20997732426303858, 3 0.16077097505668933, 2 0.1512471655328798, 4 0.1401360544217687, 1 0.12902494331065759, 6 0.10521541950113382, 5 0.10362811791383222","add final modifier to local variables.use static method for brevity, avoiding type paramsapplying the copy of the hashcodebuilder code to stop cyclic references over to equalsbuilder per and oliver sauders patch"
4303,4303,"2 0.1536388140161725, 5 0.1536388140161725, 6 0.1536388140161725, 0 0.13477088948787064, 1 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
4304,4304,"3 0.19451659451659448, 2 0.1541125541125541, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4305,4305,"4 0.26534391534391527, 6 0.13571428571428565, 0 0.12275132275132275, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 5 0.11904761904761904",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
4306,4306,"6 0.31398130028267013, 0 0.1450315285931724, 4 0.1282887584257447, 2 0.10697977821265492, 3 0.10545770819743422, 5 0.10241356816699285, 1 0.09784735812133075",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
4307,4307,"3 0.3503909026297085, 2 0.11324330727315801, 1 0.10826818289504857, 4 0.10826818289504857, 0 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4308,4308,"6 0.2957164601000217, 2 0.19373776908023482, 5 0.1145901282887584, 1 0.10241356816699285, 0 0.09784735812133075, 3 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
4309,4309,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4310,4310,"5 0.27645502645502645, 1 0.12460317460317458, 6 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4311,4311,"2 0.31608005521049004, 1 0.12606395215090865, 3 0.12123303427651251, 4 0.11157119852772027, 6 0.11157119852772027, 5 0.10835058661145619, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4312,4312,"6 0.4270262677342324, 5 0.1566231212248911, 3 0.1271245961511448, 4 0.08189352437140045, 2 0.07206068268015169, 1 0.0681275460036522, 0 0.06714426183452732","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
4313,4313,"2 0.1915900863269284, 0 0.16429963798384847, 4 0.13505987190197713, 1 0.1292119186856029, 3 0.1292119186856029, 5 0.12531328320802007, 6 0.12531328320802007",[] add methods to objectutils to get various forms of classnames in a null-safe manner
4314,4314,"2 0.27912087912087913, 0 0.13040293040293038, 4 0.12527472527472525, 6 0.12527472527472525, 5 0.11501831501831503, 3 0.11330891330891332, 1 0.11159951159951162"," - add isonetrue(booleans...) to booleanutils to preserve old behavior of booleanutils.xor(booleans...). added isonetrue for primitives and wrappers, isonefalse still missing."
4315,4315,"1 0.7132810930279283, 2 0.05575647980711271, 3 0.04802089612216195, 0 0.046614426361261806, 5 0.045911191480811735, 4 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4316,4316,"5 0.29042658730158727, 6 0.12896825396825393, 2 0.12375992063492063, 0 0.1150793650793651, 1 0.1150793650793651, 4 0.1150793650793651, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4317,4317,"5 0.26719576719576715, 6 0.13201058201058202, 1 0.1246031746031746, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4318,4318,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4319,4319,"5 0.29389880952380953, 6 0.12723214285714282, 2 0.12375992063492061, 0 0.1150793650793651, 1 0.1150793650793651, 4 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4320,4320,"3 0.22862712336396543, 0 0.14285714285714282, 2 0.1272626009468115, 1 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",validationadd final modifier to local variables.[] vastly expanded typeutils
4321,4321,"3 0.3800802372230944, 6 0.2079190650619222, 2 0.08826094540380253, 5 0.08459794174079889, 0 0.079713936856794, 1 0.079713936856794, 4 0.079713936856794","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.: fastdateformat doesnt respect summer daylight in some localized stringsrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesuse final consistently. tab policeremove keyvalues map per sebbs suggestion"
4322,4322,"1 0.7002629272567923, 2 0.06290778069919173, 3 0.05472782159898724, 4 0.047229525757133115, 5 0.04586619924043238, 0 0.045184535982082004, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4323,4323,"4 0.2346764346764347, 3 0.18168498168498165, 0 0.12527472527472525, 1 0.12185592185592183, 2 0.11501831501831504, 6 0.11159951159951162, 5 0.1098901098901099","sort members.add final modifier to local variables.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classmoving equalsignorecase, indexofignorecase, lastindexofignorecase and containsignorecase to the charsequence api. 687"
4324,4324,"2 0.44474393530997314, 4 0.12713387241689125, 3 0.09988020365378852, 6 0.0956873315363881, 0 0.08415693321353696, 5 0.07681940700808623, 1 0.07157831686133574",remove redundant type arguments. simplify arrayutils removeelements by using newdecrementandget() method: improve arrayutils removeelements time complexity to o(n) ()based on patch submitted by jeffery yuancrlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables. arrayutils removeelements methods use unnecessary hashseteliminate conversion of bitset to int[] arrayutils removeelements methods use unnecessary hashsetreplace hashset with bitset (less memory; faster) arrayutils removeelements methods clone temporary index arrays unnecessarilyreduce number of created arrays[] complement arrayutils.addall() variants with by-index and by-value removal methods
4325,4325,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4326,4326,"3 0.31608005521049004, 2 0.1276742581090407, 4 0.12445364619277662, 6 0.11801242236024843, 0 0.10512997469519211, 1 0.10512997469519211, 5 0.10351966873706007",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerformat to 120 line length.add final modifier to local variables.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
4327,4327,"5 0.26719576719576715, 6 0.13015873015873017, 1 0.12645502645502646, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4328,4328,"4 0.32783068783068786, 3 0.1456084656084656, 2 0.11301587301587301, 6 0.11153439153439153, 0 0.10560846560846561, 1 0.10116402116402118, 5 0.09523809523809527","sort members.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classmoving equalsignorecase, indexofignorecase, lastindexofignorecase and containsignorecase to the charsequence api. 687"
4329,4329,"2 0.23057644110275682, 4 0.13700918964076853, 0 0.1311612364243943, 1 0.12531328320802007, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007", arrayutils removeelements methods use unnecessary hashsetreplace hashset with bitset (less memory; faster)
4330,4330,"2 0.3241315850011502, 3 0.12767425810904068, 5 0.11640211640211638, 1 0.11157119852772025, 4 0.10996089256958823, 6 0.10674028065332414, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4331,4331,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4332,4332,"6 0.16519694297472073, 0 0.15902410346854792, 5 0.14667842445620222, 1 0.13227513227513232, 2 0.13227513227513232, 3 0.13227513227513232, 4 0.13227513227513232",4fastdateformat apis that use a stringbuilderrefactor some duplicate code.
4333,4333,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4334,4334,"6 0.43292597274898176, 5 0.1507234162101419, 3 0.12220817530552043, 4 0.08287680854052534, 2 0.07894367186402583, 0 0.06616097766540247, 1 0.06616097766540247","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
4335,4335,"3 0.3924162257495591, 2 0.10537918871252207, 6 0.10229276895943565, 1 0.10074955908289243, 4 0.10074955908289243, 0 0.09920634920634923, 5 0.09920634920634923","add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4336,4336,"0 0.22098214285714282, 2 0.14806547619047616, 6 0.14285714285714282, 4 0.13417658730158727, 1 0.12202380952380952, 5 0.11681547619047622, 3 0.1150793650793651","functions.java whitspacesreplace tabs with four spaces, as per the projects checkstyle rules.adding the functions class as a helper for dealing with java 8 lambdas."
4337,4337,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527105, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
4338,4338,"0 0.1682539682539682, 4 0.14805194805194805, 6 0.14805194805194802, 1 0.146031746031746, 2 0.12987012987012989, 3 0.12987012987012989, 5 0.12987012987012989",returning notimplementedexception to lang after it was removed in lang 3.0 per the request in . 
4339,4339,"2 0.20423280423280418, 3 0.19682539682539676, 1 0.12275132275132276, 0 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",: add nul byte to charutils. thanks to beluga behr.add final modifier to local variables.
4340,4340,"5 0.2973710317460317, 6 0.1272321428571428, 2 0.1237599206349206, 1 0.11507936507936507, 4 0.11334325396825397, 0 0.11160714285714286, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4341,4341,"5 0.2783068783068782, 1 0.12275132275132275, 6 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4342,4342,"4 0.16981607457797934, 3 0.16452506928697405, 2 0.15923406399596873, 0 0.15747039556563364, 6 0.1221970269589317, 1 0.11337868480725626, 5 0.11337868480725626",deletes redundant new expression in constant array creationuse final. - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
4343,4343,"5 0.28015873015873005, 1 0.12275132275132275, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4344,4344,"2 0.22874149659863938, 4 0.13151927437641722, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
4345,4345,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4346,4346,"0 0.22767116796967546, 3 0.17128642501776828, 4 0.13314380478559582, 6 0.13148542999289267, 2 0.12319355602937691, 1 0.10660980810234544, 5 0.10660980810234544","[] objectutils.identitytostring(object) and friends shouldallocate builders and buffers with a size add objectutils.toidentitystring methods that support stringbuilder, strbuilder, and appendableadd final modifier to local variables."
4347,4347,"3 0.20057720057720052, 2 0.14805194805194805, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
4348,4348,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4349,4349,"6 0.2560090702947846, 4 0.2036281179138322, 3 0.11791383219954647, 2 0.11473922902494331, 1 0.10362811791383222, 0 0.10204081632653063, 5 0.10204081632653063",make sure lines in files dont have trailing white spaces and remove all trailing white spaces: add methods for removing all invalid characters according to xml 1.0 and xml 1.1 in an input string to stringescapeutils. thanks to adam hooper
4350,4350,"1 0.7132810930279283, 2 0.05364677516576251, 5 0.048020896122161934, 3 0.04731766124171188, 0 0.046614426361261806, 4 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4351,4351,"0 0.232967032967033, 3 0.17826617826617827, 2 0.13724053724053722, 1 0.12185592185592187, 4 0.10989010989010992, 5 0.10989010989010992, 6 0.10989010989010992",add final modifier to local variables.adding vincent ricards patch to charrange.java providing an iterator that lets you walk the chars in the range. 454
4352,4352,"5 0.2722832722832723, 2 0.13724053724053722, 3 0.13211233211233211, 4 0.12185592185592187, 6 0.11501831501831504, 1 0.11159951159951163, 0 0.10989010989010992",dont mutate parametersadd final modifier to method parameters.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4353,4353,"3 0.3437574034588959, 6 0.11158493248045484, 1 0.10992655768775171, 2 0.10992655768775171, 4 0.10992655768775171, 5 0.10826818289504857, 0 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4354,4354,"0 0.20362103174603172, 3 0.1688988095238095, 2 0.1532738095238095, 6 0.12896825396825393, 4 0.12028769841269842, 1 0.11334325396825398, 5 0.11160714285714288","add final modifier to local variables.[] introduced concurrentruntimeexception and extended the exception handling methods of concurrentutils to support runtime exceptions, too."
4355,4355,"2 0.1894179894179894, 3 0.18756613756613755, 1 0.13015873015873017, 5 0.13015873015873014, 4 0.12275132275132278, 0 0.12089947089947092, 6 0.11904761904761907","add final modifier to local variables.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
4356,4356,"6 0.22460317460317458, 3 0.13571428571428568, 4 0.13571428571428568, 0 0.13015873015873014, 2 0.13015873015873014, 1 0.12460317460317462, 5 0.11904761904761907","<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
4357,4357,"4 0.1672771672771672, 2 0.14377289377289376, 0 0.1394993894993895, 1 0.13736263736263735, 3 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",sort methods.
4358,4358,"5 0.2826908541194255, 6 0.15041572184429322, 0 0.11337868480725624, 1 0.11337868480725624, 2 0.11337868480725624, 3 0.11337868480725624, 4 0.11337868480725624", fastdateparser and fastdateprinter support x formatapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4359,4359,"0 0.1536388140161725, 4 0.1515423779574723, 6 0.15154237795747227, 5 0.13896376160527107, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064",[] prefer throwable.getcause() in exceptionutils.getcause() ()
4360,4360,"4 0.2555381126809699, 2 0.15785801500087218, 3 0.15297401011686726, 0 0.13465899180184895, 1 0.11390197104482817, 5 0.10291296005581718, 6 0.08215593929879647","sort members.add final modifier to local variables.merge branch fix-: add stringutils methods to compare a string to multiple stringsthis from github.thanks to arman sharif for providing a patch.thanks to rafal glowinski for providing an alternative implementations, see .thanks to robert parr for providing an alternative implementations, see .conflicts: src/changes/changes.xml added equalsany() and equalsanyignorecase() methods to stringutils."
4361,4361,"4 0.1715506715506715, 2 0.14163614163614166, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4362,4362,"6 0.22087705138552596, 4 0.1380145278450363, 2 0.13236481033091205, 1 0.1304815711595373, 5 0.13048157115953726, 3 0.124831853645413, 0 0.12294861447403824",[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern.
4363,4363,"5 0.2727513227513227, 6 0.12645502645502643, 1 0.12460317460317459, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4364,4364,"6 0.2845804988662131, 3 0.173469387755102, 2 0.11950113378684807, 4 0.10997732426303855, 0 0.1052154195011338, 1 0.1052154195011338, 5 0.10204081632653063",make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse validateistrue to validate argumentsadd final modifier to local variables.adding tocalendar method per 632
4365,4365,"3 0.20663780663780662, 2 0.14401154401154398, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4366,4366,"5 0.26281550871714804, 6 0.14623991673172, 1 0.12073900598490765, 3 0.11891751236013534, 0 0.11709601873536302, 2 0.11709601873536302, 4 0.11709601873536302",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4367,4367,"0 0.25870954442383015, 6 0.23273551844980414, 2 0.134611420325706, 1 0.09420737992166564, 4 0.09420737992166564, 3 0.0927643784786642, 5 0.0927643784786642",make sure lines in files dont have trailing white spaces and remove all trailing white spaces[] the char_array cache in charutils duplicates the cache in java.lang.character.[] deprecate charutils.tocharacterobject(char) in favor of java.lang.character.valueof(char).
4368,4368,"5 0.2534798534798535, 3 0.17142857142857143, 2 0.12185592185592187, 6 0.12014652014652016, 1 0.11330891330891334, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4369,4369,"6 0.21888053467000831, 3 0.15455304928989133, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
4370,4370,"2 0.34331065759637186, 4 0.13061224489795917, 0 0.11791383219954645, 1 0.10204081632653061, 3 0.10204081632653061, 5 0.10204081632653061, 6 0.10204081632653061",": arrayutils.removeall(object array, int... indices) should do the clone, not its callers ()crlf -> lfjavadoc: fix typo but working is still awkward.[] complement arrayutils.addall() variants with by-index and by-value removal methods"
4371,4371,"2 0.314469749252358, 3 0.1566597653554175, 6 0.1083505866114562, 1 0.10674028065332415, 4 0.10674028065332415, 0 0.10351966873706007, 5 0.10351966873706007",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
4372,4372,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",validation[] new type util features
4373,4373,"3 0.2046176046176046, 2 0.141991341991342, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4374,4374,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
4375,4375,"3 0.19126984126984123, 4 0.17275132275132274, 6 0.1505291005291005, 5 0.12645502645502646, 0 0.12089947089947092, 1 0.11904761904761907, 2 0.11904761904761907",7micro optimization: replace stringbuilder with string concatenation so that the compiler can better optimize the codeformat to 120 line length.
4376,4376,"4 0.28499278499278496, 2 0.15704665704665705, 3 0.11832611832611835, 1 0.1132756132756133, 0 0.10990860990860993, 5 0.10822510822510824, 6 0.10822510822510824",: fix deprecation warningsremove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo) - add hashcodemulti varargs method
4377,4377,"2 0.17027417027417024, 3 0.1662337662337662, 4 0.14199134199134197, 1 0.13189033189033192, 0 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to method parameters.
4378,4378,"3 0.38618524332810056, 6 0.19815105529391244, 5 0.08826094540380254, 2 0.08826094540380253, 0 0.07971393685679401, 1 0.07971393685679401, 4 0.07971393685679401","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.: fastdateformat doesnt respect summer daylight in some localized stringsrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesuse final consistently. tab policeremove keyvalues map per sebbs suggestion"
4379,4379,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.1515423779574723, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
4380,4380,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4381,4381,"5 0.23675385647216635, 3 0.20545495193382518, 2 0.12720769058797227, 6 0.12564274536105519, 1 0.10373351218421642, 0 0.10060362173038231, 4 0.10060362173038231",format.use final consistently. replace tabs with whitespaces and add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4382,4382,"2 0.24767378215654076, 3 0.1288998357963875, 6 0.1288998357963875, 1 0.12506841817186645, 0 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
4383,4383,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4384,4384,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4385,4385,"2 0.18151561699948798, 0 0.17972350230414744, 5 0.1313364055299539, 3 0.12954429083461344, 4 0.1295442908346134, 6 0.12775217613927292, 1 0.12058371735791094",multilinerecursivetostringstyle: made private field indent staticdeprecate systemutilsline_separator in favor of java.lang.systemlineseparator: multiline recursive to string style. this fixes from github. thanks to jan matèrne.
4386,4386,"4 0.42715700141442725, 0 0.11802608832311799, 3 0.1114254282571114, 2 0.10702498821310699, 6 0.0861228980040861, 1 0.0795222379380795, 5 0.07072135785007073","sort members.use foreach loop for arrays ()since the project no longer supports java versions older than 6, itssafe to use the enhanced for loop syntax introduced in java 5.this patch employs this syntax where possible to clean up the code.add final modifier to local variables.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classreplacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
4387,4387,"3 0.23913609159510799, 2 0.15170439760603693, 6 0.1353109549830861, 4 0.12073900598490765, 1 0.11891751236013534, 0 0.117096018735363, 5 0.117096018735363",format.use final consistently. replace tabs with whitespaces and add final modifier to local variables.
4388,4388,"3 0.42878028404344193, 2 0.10129490392648284, 0 0.09398496240601502, 1 0.09398496240601502, 4 0.09398496240601502, 5 0.09398496240601502, 6 0.09398496240601502","add final modifier to local variables.pmd: these nested if statements could be combinedformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4389,4389,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
4390,4390,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4391,4391,"5 0.26904761904761904, 6 0.13386243386243385, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4392,4392,"5 0.27089947089947086, 6 0.12830687830687829, 1 0.12460317460317462, 0 0.11904761904761907, 2 0.11904761904761907, 3 0.11904761904761907, 4 0.11904761904761907",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4393,4393,"5 0.2336239660183322, 3 0.21171473284149342, 2 0.12564274536105519, 6 0.12407780013413813, 1 0.10373351218421643, 0 0.10060362173038231, 4 0.10060362173038231",format.use final consistently. replace tabs with whitespaces and add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4394,4394,"0 0.22098214285714285, 4 0.1671626984126984, 2 0.1324404761904762, 6 0.12896825396825395, 1 0.12375992063492067, 5 0.1150793650793651, 3 0.11160714285714289",removes unnecessary class reference of static method calls which are declared in the same classapply patch contributed by bruno p. kinoshitavalidation[] new type util features
4395,4395,"2 0.31820436507936506, 3 0.11681547619047619, 4 0.11681547619047619, 0 0.11334325396825397, 1 0.11160714285714286, 5 0.11160714285714286, 6 0.11160714285714286","crlf -> lfjavadoc: fix typo but working is still awkward.swap and shift for arrays[] add arrayutils.reverse(array, from, to) methods."
4396,4396,"1 0.6982179374817412, 3 0.059499464407439855, 2 0.05677281137403836, 5 0.04791118901548349, 4 0.047229525757133115, 0 0.046547862498782754, 6 0.043821209465381254",add final modifier to method parameters.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4397,4397,"5 0.2938988095238095, 6 0.13070436507936506, 1 0.1220238095238095, 2 0.11855158730158731, 0 0.11160714285714286, 3 0.11160714285714286, 4 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4398,4398,"6 0.17960023515579068, 5 0.15079365079365076, 0 0.14050558495002943, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323", fastdateparser does not handle non-gregorian calendars properly 
4399,4399,"3 0.20663780663780662, 2 0.14401154401154398, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4400,4400,"5 0.291959406713505, 4 0.12073900598490762, 6 0.11891751236013531, 0 0.11709601873536299, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4401,4401,"5 0.28285193858964347, 4 0.12802498048399688, 1 0.11891751236013531, 6 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4402,4402,"4 0.1746031746031746, 6 0.14944594189877208, 0 0.13686732554657088, 1 0.13477088948787067, 2 0.13477088948787067, 3 0.13477088948787067, 5 0.13477088948787067",use index_not_found instead of magic number.
4403,4403,"5 0.29042658730158727, 6 0.13070436507936506, 2 0.12723214285714282, 4 0.1150793650793651, 0 0.11334325396825398, 1 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4404,4404,"2 0.3008034489515971, 4 0.1444248481285518, 0 0.14030962179110323, 3 0.1265922006662747, 1 0.09778561630413479, 5 0.09504213207916912, 6 0.09504213207916912","extract logic for checking string representation of objects into separate methodsformat source codevariable names should follow naming conventionsmodified appenddetail method for object value in jsontostringstyle classfix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.add final modifier to local variables."
4405,4405,"4 0.19211822660098518, 0 0.15380405035577446, 6 0.14422550629447178, 1 0.13081554460864805, 3 0.12889983579638753, 2 0.126984126984127, 5 0.12315270935960593",[] add null-safe stringutils apis to wrapstringgetbytes([charset|string]).</action>
4406,4406,"5 0.2864949258391881, 4 0.12256049960967993, 0 0.11891751236013531, 1 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4407,4407,"3 0.3537076522151148, 1 0.10992655768775171, 2 0.10992655768775171, 0 0.10660980810234541, 4 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4408,4408,"6 0.3321661998132587, 5 0.12138188608776841, 3 0.11974789915966384, 0 0.10994397759103644, 4 0.10667600373482727, 1 0.1050420168067227, 2 0.1050420168067227",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor some duplicate code.
4409,4409,"2 0.1960611405055849, 6 0.14256319811875368, 0 0.1322751322751323, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",make sure placement of curly braces is consistent
4410,4410,"6 0.23034330011074197, 2 0.22129937246216316, 5 0.16832779623477298, 3 0.12569213732004428, 1 0.08822443706164639, 0 0.08305647840531563, 4 0.08305647840531563",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure placement of curly braces is consistentmake sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.explicit boxingapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4411,4411,"0 0.28405591092158256, 2 0.146410803127221, 4 0.1265103056147832, 6 0.11490168206586115, 3 0.11158493248045488, 1 0.10992655768775172, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
4412,4412,"3 0.18783068783068776, 5 0.14873603762492646, 6 0.13433274544385657, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
4413,4413,"4 0.39983926059875424, 0 0.13401647578862766, 3 0.09744826200522404, 6 0.09463532248342374, 2 0.09322885272252361, 1 0.09041591320072334, 5 0.09041591320072334","replacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687checkstylemoving indexof(string, int) and indexof(string, int, int) over to charsequence. . this, plus the same happening for the string, string, int variant will open up a lot of methods. "
4414,4414,"6 0.26534391534391527, 4 0.13201058201058197, 0 0.12645502645502643, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 5 0.11904761904761904"," fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
4415,4415,"5 0.2708994708994708, 6 0.13201058201058197, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4416,4416,"2 0.17835497835497832, 1 0.14805194805194802, 4 0.13997113997113997, 5 0.13795093795093796, 3 0.13593073593073596, 0 0.12987012987012986, 6 0.12987012987012986","adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
4417,4417,"3 0.24200598113641592, 4 0.14538762364849317, 6 0.1357257878997009, 0 0.13250517598343683, 2 0.12928456406717276, 1 0.1115711985277203, 5 0.10351966873706006","refactor ""gmt"" magic string.add a default case to switch to appease findbugs: nullpointerexception in fastdateparser$timezonestrategy ()replicate the fix for 1186add final modifier to local variables.remove redundant type arguments."
4418,4418,"6 0.1775426219870664, 3 0.14667842445620222, 0 0.14256319811875368, 2 0.13639035861258086, 1 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",use final.[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .
4419,4419,"5 0.3843680932288528, 3 0.13261000602772754, 2 0.11151295961422542, 6 0.09604179224432391, 0 0.09322885272252363, 4 0.0918223829616235, 1 0.09041591320072336", simplify fastdateformat; eliminate boxingadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4420,4420,"6 0.2801587301587301, 2 0.12275132275132276, 3 0.12089947089947091, 0 0.11904761904761905, 1 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
4421,4421,"0 0.22276029055690072, 4 0.14178100618778583, 6 0.1380145278450363, 3 0.1342480495022868, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
4422,4422,"2 0.23139880952380953, 0 0.15848214285714285, 6 0.1324404761904762, 3 0.12896825396825395, 1 0.12549603174603177, 4 0.11160714285714289, 5 0.11160714285714289","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
4423,4423,"2 0.3257418909592823, 3 0.12928456406717276, 5 0.11640211640211638, 4 0.10996089256958823, 1 0.10835058661145619, 6 0.10674028065332414, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4424,4424,"6 0.23782620392789883, 3 0.1380145278450363, 4 0.1380145278450363, 5 0.12294861447403824, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
4425,4425,"3 0.21108326371484262, 6 0.14285714285714282, 2 0.1370091896407686, 1 0.13311055416318573, 0 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",pmd: useless parentheses.add final modifier to local variables.
4426,4426,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4427,4427,"2 0.2537080405932865, 4 0.1371324486078584, 0 0.1298464741087692, 1 0.12256049960967996, 5 0.12256049960967993, 3 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.[] add arrayutilsnulltoempty(class<?>[])
4428,4428,"6 0.2872503840245776, 5 0.13671274961597538, 0 0.11520737327188942, 1 0.11520737327188942, 2 0.11520737327188942, 3 0.11520737327188942, 4 0.11520737327188942",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
4429,4429,"4 0.26753712237583205, 6 0.13133640552995388, 2 0.12416794674859191, 0 0.12058371735791093, 3 0.12058371735791093, 5 0.11879160266257043, 1 0.11699948796722992",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)[] added constantinitializer class
4430,4430,"5 0.28285193858964347, 4 0.12802498048399685, 0 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4431,4431,"3 0.2086580086580086, 2 0.13997113997114, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
4432,4432,"0 0.19274376417233557, 4 0.17510707986898463, 3 0.13630637440161247, 6 0.1327790375409423, 2 0.12748803224993704, 5 0.12043335852859666, 1 0.11514235323759135",removes unnecessary class reference of static method calls which are declared in the same classuse final consistently. [] new type util features
4433,4433,"2 0.3193006671267541, 3 0.13250517598343683, 1 0.11318150448585232, 5 0.1131815044858523, 4 0.11157119852772028, 0 0.1051299746951921, 6 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4434,4434,"2 0.1850955071294054, 1 0.1587301587301587, 4 0.1530804412160344, 5 0.13048157115953724, 3 0.12671509281678775, 0 0.12483185364541298, 6 0.12106537530266345",sort methods.adding hennings github pull request with a triple implementation. 675
4435,4435,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4436,4436,"6 0.293974732750243, 5 0.1715257531584062, 2 0.1658568189180434, 3 0.1205053449951409, 4 0.08875931324910914, 0 0.08309037900874634, 1 0.07628765792031099",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4437,4437,"4 0.33380715470267713, 6 0.1265103056147832, 0 0.10992655768775174, 2 0.10992655768775174, 1 0.10660980810234542, 3 0.10660980810234542, 5 0.10660980810234542",sort members.use stringisempty() instead of stringlength() == 0remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)use index_not_found instead of magic number.
4438,4438,"3 0.19211822660098518, 6 0.15188834154351394, 0 0.13464696223316916, 2 0.13464696223316916, 5 0.1346469622331691, 1 0.12889983579638753, 4 0.12315270935960594",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
4439,4439,"2 0.1536388140161725, 5 0.1536388140161725, 6 0.1536388140161725, 0 0.13477088948787064, 1 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
4440,4440,"6 0.1651969429747207, 0 0.1549088771310993, 4 0.15079365079365076, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323", strsubstitutor does not support stringbuilder or charsequence
4441,4441,"0 0.27742241175077, 2 0.1430940535418147, 4 0.12651030561478321, 6 0.12153518123667376, 3 0.11324330727315804, 1 0.11158493248045487, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
4442,4442,"2 0.23125763125763127, 0 0.14749694749694747, 1 0.1252747252747253, 3 0.1252747252747253, 5 0.12527472527472527, 6 0.12527472527472527, 4 0.12014652014652016","add todosjavadocfix brace positionsapplying valentin rochers patch from , adding isinstanceof and isassignablefrom methods. applying valentin rochers patch to , adding new regexp and in range methods to validate"
4443,4443,"2 0.3235653235653236, 4 0.11672771672771676, 1 0.11672771672771673, 0 0.11159951159951162, 3 0.11159951159951162, 5 0.1098901098901099, 6 0.1098901098901099","crlf -> lfjavadoc: fix typo but working is still awkward.simplify isnotempty by reusing isemptyapplying chandrashekar ms patch to , adding isnotempty(array) methods to arrayutils. "
4444,4444,"3 0.3258636788048553, 2 0.18338001867413634, 1 0.11017740429505132, 4 0.10756302521008401, 6 0.10494864612511669, 0 0.08403361344537817, 5 0.08403361344537817","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsremove redundant type arguments.fixing crlfsstatement unnecessarily nested within else clause.merge branch remove_threadutils_compiler_warningsremove compiler warnings from threadutils. thanks to pascal schuhmacher.remove compiler warnings from threadutilsincorporated feedback from fabian, formatting adjusted, count >> 1 replaced with count / 2incorporated feedback from peteradd threadutils"
4445,4445,"4 0.1838624338624338, 3 0.17830687830687827, 0 0.13756613756613756, 2 0.13571428571428568, 1 0.12645502645502646, 5 0.11904761904761907, 6 0.11904761904761907","add final modifier to local variables.[] stringutils.wrapifmissing(string, char|string)"
4446,4446,"5 0.27057387057387056, 2 0.14236874236874233, 3 0.12869352869352865, 4 0.12014652014652016, 6 0.11501831501831504, 1 0.11330891330891332, 0 0.1098901098901099",dont mutate parametersadd final modifier to method parameters.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4447,4447,"2 0.17027417027417024, 4 0.1561327561327561, 0 0.14805194805194802, 3 0.13391053391053392, 1 0.1318903318903319, 5 0.12987012987012989, 6 0.12987012987012989",[] add methodutil apis to call methods without parameters.
4448,4448,"0 0.34780952380952396, 4 0.15758730158730158, 3 0.15314285714285716, 6 0.13092063492063494, 1 0.07847619047619046, 2 0.07492063492063492, 5 0.057142857142857155","remove redundant type arguments.strsubstitutor can preserve escapesstrsubstitutor can now optionally preserve the escape character for anescaped reference, which is useful when substitution takes place inmultiple phases and some references are intentionally unresolved. priorto this change, an unresolved reference `${a}` and an escaped reference`$${a}` may result in the same string `${a}`, making it impossible foran additional substitution phase to distinguish between escapedreferences and non-escaped references.statement unnecessarily nested within else clause.its confusing to re-use field names locally[] strsubstitutor now supports the declaration of default values for the variables to be replaced. thanks to woonsan ko for the patch.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)[] added support for substitution in variable names.removed my author tag, typo, trailing spaces."
4449,4449,"5 0.29216269841269843, 6 0.12723214285714282, 1 0.12028769841269843, 2 0.11855158730158732, 4 0.11855158730158732, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4450,4450,"6 0.2049319727891156, 3 0.13945578231292519, 5 0.13945578231292516, 4 0.13350340136054423, 0 0.12755102040816327, 1 0.12755102040816327, 2 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
4451,4451,"6 0.15659340659340654, 2 0.15445665445665444, 1 0.1394993894993895, 0 0.13736263736263735, 3 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735",fix brace positions
4452,4452,"2 0.2950937950937951, 3 0.13347763347763344, 6 0.13011063011063007, 0 0.11495911495911498, 1 0.10990860990860993, 4 0.10822510822510824, 5 0.10822510822510824",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure placement of curly braces is consistent: dateutilstest.testlang530 fails for some timezonesreplace tabs with whitespaces and 
4453,4453,"4 0.17794486215538843, 0 0.1584516847674742, 2 0.14285714285714282, 6 0.14285714285714282, 1 0.1272626009468115, 3 0.12531328320802007, 5 0.12531328320802007",[] stringutils equals() relies on undefined behavior; thanks to daniel trebbien
4454,4454,"0 0.15659340659340654, 5 0.15231990231990225, 1 0.14163614163614163, 2 0.13736263736263735, 3 0.13736263736263735, 4 0.13736263736263735, 6 0.13736263736263735",: implementation of a memomizer ()
4455,4455,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",validation[] new type util features
4456,4456,"6 0.17487684729064037, 0 0.15955117679255607, 3 0.15571975916803502, 4 0.1403940886699507, 1 0.12315270935960594, 2 0.12315270935960594, 5 0.12315270935960594",dont mutate parameterstab police: fastdateparser could use calendar.getdisplaynames for all text fields
4457,4457,"5 0.27089947089947086, 6 0.13015873015873017, 1 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4458,4458,"3 0.21198156682027647, 0 0.17793138760880695, 6 0.1474654377880184, 2 0.11699948796722992, 1 0.11520737327188942, 4 0.11520737327188942, 5 0.11520737327188942", fastdateparser could use calendar.getdisplaynames for all text fieldsremove unnecessary keyvalue instances: fastdateparser could use calendar.getdisplaynames for all text fields
4459,4459,"0 0.19897959183673464, 3 0.13945578231292513, 1 0.13747165532879818, 5 0.13747165532879815, 2 0.13151927437641722, 4 0.12755102040816327, 6 0.12755102040816327", - dateutilsparsedate uses default locale; add locale supportjavadoc correction
4460,4460,"2 0.21577380952380956, 0 0.14112103174603177, 5 0.1393849206349206, 4 0.1307043650793651, 3 0.12896825396825395, 6 0.12723214285714285, 1 0.11681547619047623", - jsontostringstyle does not escape string namesjsontostringstyle: improve private constant name and remove wrong comment: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4461,4461,"1 0.7139843279083785, 2 0.05224030540486236, 4 0.048020896122161955, 5 0.04802089612216194, 3 0.047317661241711884, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4462,4462,"3 0.20663780663780662, 2 0.141991341991342, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4463,4463,"2 0.26777087646652864, 3 0.15827007131354956, 6 0.13250517598343683, 1 0.12123303427651251, 4 0.11318150448585232, 0 0.10351966873706006, 5 0.10351966873706006","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.add final modifier to local variables.ws[] add booleanutils.and/or varargs methods to complement xor"
4464,4464,"3 0.20663780663780662, 2 0.13997113997113997, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4465,4465,"5 0.2719229768410096, 6 0.12984647410876918, 0 0.12802498048399688, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 4 0.11709601873536299",4fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4466,4466,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4467,4467,"2 0.3059334845049131, 6 0.1961451247165533, 3 0.11942554799697656, 1 0.10752078609221465, 0 0.09826152683295541, 4 0.08767951625094485, 5 0.0850340136054422",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.new test caseexplanations about algorithmtabs replaced by spacesnew tests addedswap and shift for arrays
4468,4468,"2 0.1578316861335729, 6 0.1536388140161725, 4 0.14525306978137167, 0 0.13896376160527107, 1 0.13477088948787064, 3 0.13477088948787064, 5 0.13477088948787064",missing method getrawmessage for contextedexception and contextedruntimeexception ().
4469,4469,"2 0.17014759120022277, 0 0.1642996379838485, 1 0.14090782511835143, 3 0.13700918964076858, 4 0.13700918964076858, 5 0.1253132832080201, 6 0.1253132832080201","use validatenotnull instead of ""throw new nullpointerexception""adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
4470,4470,"2 0.19074522464352972, 0 0.15496368038740918, 4 0.13801452784503632, 5 0.13801452784503632, 6 0.13424804950228683, 1 0.12294861447403825, 3 0.12106537530266348",multilinerecursivetostringstyle: made private field indent static: multiline recursive to string style. this fixes from github. thanks to jan matèrne.
4471,4471,"3 0.24036281179138322, 4 0.14512471655328793, 6 0.13983371126228264, 5 0.12572436381960195, 2 0.11866969009826155, 1 0.11690602166792645, 0 0.11337868480725624",add final modifier to local variables.remove redundant type arguments.: fastdateformat doesnt respect summer daylight in some localized strings
4472,4472,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4473,4473,"5 0.2883164194639604, 4 0.12438199323445222, 0 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4474,4474,"3 0.19743803954330263, 4 0.16040100250626563, 2 0.1370091896407686, 1 0.1292119186856029, 0 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",sort members.add final modifier to local variables.
4475,4475,"1 0.7069519791038779, 2 0.0536467751657625, 4 0.05013060076351217, 3 0.04942736588306208, 5 0.048724131002612026, 0 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4476,4476,"5 0.26904761904761904, 6 0.13015873015873014, 1 0.1246031746031746, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4477,4477,"4 0.15659340659340656, 3 0.1523199023199023, 2 0.14163614163614163, 0 0.13736263736263735, 1 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
4478,4478,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4479,4479,"0 0.284780578898226, 4 0.1311858076563959, 1 0.12301587301587302, 6 0.11974789915966387, 3 0.11811391223155931, 2 0.11811391223155929, 5 0.10504201680672273",": update java requirement from java 6 to 7replace usage of deprecated objectutilstostring with objectstostring: fix deprecation warningseat own dog food: separator == null ? """" : separator->objectutils.tostring(separator)remove superfluous parens."
4480,4480,"4 0.24384236453201968, 2 0.13847837985769018, 1 0.12506841817186645, 0 0.12315270935960593, 3 0.12315270935960593, 5 0.12315270935960593, 6 0.12315270935960593","moving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
4481,4481,"5 0.2838624338624338, 6 0.1208994708994709, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4482,4482,"5 0.26264880952380953, 6 0.1741071428571428, 0 0.11507936507936509, 1 0.11334325396825398, 2 0.11160714285714286, 3 0.11160714285714286, 4 0.11160714285714286", fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4483,4483,"0 0.21457257601835916, 3 0.17441193344807804, 4 0.173073245362402, 2 0.1556703002486135, 6 0.09810671256454387, 1 0.09676802447886786, 5 0.08739720787913562","pmd: remove useless parenthesesequalsexlcude notation, hashcodeexclude notation and tostringexludenotationpmd: useless parenthesesuse not string.contains instead of indexof == -1add final modifier to local variables.add final modifier to method parameters.replacing the creation of a list in the core of each builder class to test contains on the excludefields with a call to arrayutils.contains. reported by anthony whitford in 575"
4484,4484,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4485,4485,"2 0.17633477633477632, 4 0.15007215007215005, 0 0.14805194805194805, 1 0.13391053391053395, 3 0.13189033189033192, 5 0.1298701298701299, 6 0.1298701298701299",: add classutils.getabbreviatedname(). this fixes from github. thanks to fabian lange.
4486,4486,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4487,4487,"5 0.2727513227513227, 6 0.12830687830687826, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4488,4488,"3 0.18266978922716626, 4 0.17538381472807701, 0 0.15170439760603693, 6 0.12802498048399688, 2 0.12438199323445227, 5 0.12073900598490765, 1 0.117096018735363",statement unnecessarily nested within else clause. method returns number of inheritance hops between parent and subclass
4489,4489,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4490,4490,"5 0.282010582010582, 1 0.1208994708994709, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4491,4491,"6 0.2417233560090703, 4 0.2179138321995465, 2 0.13219954648526075, 0 0.10204081632653063, 1 0.10204081632653063, 3 0.10204081632653063, 5 0.10204081632653063",make sure lines in files dont have trailing white spaces and remove all trailing white spaces: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
4492,4492,"3 0.2046176046176046, 2 0.14401154401154398, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4493,4493,"1 0.7175005023106287, 2 0.050833835643962204, 5 0.04802089612216195, 3 0.046614426361261806, 4 0.046614426361261806, 0 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4494,4494,"6 0.32072829131652664, 5 0.1262838468720822, 3 0.11974789915966386, 0 0.11811391223155927, 1 0.10504201680672272, 2 0.10504201680672272, 4 0.10504201680672272",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor some duplicate code.
4495,4495,"5 0.2883164194639604, 4 0.12256049960967993, 0 0.11891751236013531, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4496,4496,"5 0.28467343221441577, 4 0.12256049960967993, 6 0.12256049960967993, 1 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4497,4497,"6 0.330532212885154, 5 0.13608776844070955, 0 0.11321195144724557, 1 0.10504201680672269, 2 0.10504201680672269, 3 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
4498,4498,"4 0.329655439411537, 3 0.13859852884243126, 2 0.12504839334107626, 0 0.11014324428958575, 1 0.10472319008904374, 6 0.10472319008904374, 5 0.08710801393728225","sort members.add final modifier to local variables.[] stringutils join with var args. add and use space string constant for "" "".rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
4499,4499,"3 0.2046176046176046, 2 0.14603174603174604, 0 0.12987012987012989, 1 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4500,4500,"3 0.19585253456221194, 0 0.1635944700460829, 4 0.1385048643113159, 2 0.1349206349206349, 1 0.12416794674859193, 5 0.12237583205325143, 6 0.12058371735791093",: enumutils.getenumignorecase and isvalidenumignorecase methods added ()add final modifier to local variables.javadoc and clarify null handling
4501,4501,"0 0.1662337662337662, 1 0.14805194805194802, 4 0.144011544011544, 2 0.141991341991342, 6 0.13593073593073596, 3 0.13391053391053392, 5 0.12987012987012989",added a new issuccessful() method to the result object of multibackgroundinitializer.
4502,4502,"4 0.23500881834215168, 3 0.22883597883597884, 6 0.12698412698412695, 2 0.10846560846560849, 0 0.10229276895943565, 1 0.09920634920634923, 5 0.09920634920634923",format to 120 line length.statement unnecessarily nested within else clause.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
4503,4503,"6 0.3370681605975724, 3 0.11974789915966384, 5 0.11811391223155926, 0 0.10994397759103644, 1 0.1050420168067227, 2 0.1050420168067227, 4 0.1050420168067227",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor some duplicate code.
4504,4504,"4 0.16326530612244894, 3 0.15334467120181403, 0 0.1454081632653061, 1 0.1454081632653061, 2 0.1374716553287982, 5 0.1275510204081633, 6 0.1275510204081633",sort members.merge branch : add stringutilsremoveignorecasepatch by gokul nanthakumar c
4505,4505,"6 0.17250673854447438, 0 0.15363881401617246, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",allow subclass custom invocation handling
4506,4506,"6 0.32634920634920633, 3 0.14560846560846558, 0 0.13079365079365077, 4 0.1115343915343915, 1 0.09523809523809525, 2 0.09523809523809525, 5 0.09523809523809525","replace tabs with spaces fastdateparser and fastdateprinter support x format fastdateparser does not handle excess hours as per simpledateformatdocsadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .dont mutate parameterstab police: fastdateparser could use calendar.getdisplaynames for all text fields"
4507,4507,"5 0.27057387057387056, 3 0.1355311355311355, 2 0.1321123321123321, 4 0.12185592185592185, 6 0.11501831501831504, 1 0.11330891330891332, 0 0.11159951159951162",dont mutate parametersadd final modifier to method parameters.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4508,4508,"0 0.29056956115779653, 3 0.14939309056956118, 6 0.13239962651727358, 2 0.12455648926237162, 5 0.11017740429505135, 1 0.10102707749766573, 4 0.09187675070028015",": dateutils.getfragmentindays(date, calendar.month) returns wrong days, reported by jay xu.add explict default case: fragments are wrong by 1 day when using fragment year or month - applying patch provided by sebastian götz, several tests now fail because of wrong assertions, will fix them in a separate commitadd final modifier to local variables."
4509,4509,"5 0.28695436507936506, 6 0.12723214285714282, 2 0.12375992063492063, 4 0.12028769841269843, 1 0.11681547619047619, 0 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4510,4510,"6 0.2365520282186949, 2 0.21494708994708994, 3 0.14704585537918868, 1 0.10383597883597885, 0 0.09920634920634923, 4 0.09920634920634923, 5 0.09920634920634923",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.
4511,4511,"3 0.31058990760483296, 4 0.1364605543710021, 1 0.12153518123667373, 6 0.11158493248045488, 0 0.10660980810234542, 2 0.10660980810234542, 5 0.10660980810234542","use validateistrue to validate argumentsremove redundant type arguments.fixing crlfsstatement unnecessarily nested within else clause.incorporated feedback from fabian, formatting adjusted, count >> 1 replaced with count / 2incorporated feedback from peteradd threadutils"
4512,4512,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4513,4513,"5 0.26492287055667335, 0 0.16476637603398164, 3 0.12877263581488932, 6 0.1225128549072211, 1 0.10999329309188463, 4 0.10842834786496758, 2 0.10060362173038231",4fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone setapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4514,4514,"0 0.26091269841269843, 2 0.13070436507936506, 4 0.12723214285714285, 6 0.12202380952380953, 1 0.1220238095238095, 5 0.12028769841269842, 3 0.1168154761904762",a bit of dog food and a lot of javadoc tweakage[] add fieldutils getdeclaredfields() to return all the fields defined in the given class and super classes.checkstyle
4515,4515,"5 0.28673178673178673, 0 0.2226292226292226, 6 0.12291412291412289, 1 0.09299959299959301, 2 0.09157509157509158, 3 0.09157509157509158, 4 0.09157509157509158",dont save short eras if they are the same as the long eras fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()getinstance() (java 1.6) supports more localesexplicit conversion to integer; save the value for use latergetinstance(locale) is java 1.6+applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4516,4516,"5 0.25689865689865693, 3 0.17142857142857143, 2 0.12014652014652016, 1 0.11672771672771674, 6 0.11501831501831504, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4517,4517,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4518,4518,"3 0.20259740259740258, 2 0.146031746031746, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4519,4519,"0 0.25006505334374185, 4 0.13166796773354147, 2 0.1298464741087692, 3 0.12802498048399685, 1 0.12620348685922456, 5 0.117096018735363, 6 0.117096018735363",: reflectiontostringbuilder.tostring does not debug 3rd party object fields within 3rd party object. suggested by philip hodges. final patch from thomas neidhart.
4520,4520,"2 0.3193006671267541, 3 0.12928456406717276, 1 0.11640211640211638, 5 0.1131815044858523, 4 0.10996089256958823, 6 0.10835058661145619, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4521,4521,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4522,4522,"2 0.1794457896152811, 1 0.1624966370729082, 4 0.15496368038740915, 5 0.13424804950228678, 3 0.12671509281678775, 0 0.12106537530266345, 6 0.12106537530266345",sort methods.adding hennings github pull request with a triple implementation. 675
4523,4523,"2 0.17960023515579068, 0 0.15079365079365076, 1 0.13639035861258086, 3 0.13639035861258086, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",": add todouble(bigdecimal), todouble(bigdecimal, double)"
4524,4524,"5 0.28869047619047616, 6 0.12896825396825393, 2 0.1220238095238095, 1 0.11855158730158731, 0 0.11507936507936509, 4 0.11507936507936509, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4525,4525,"3 0.3566760037348273, 2 0.10994397759103641, 4 0.10994397759103641, 1 0.10667600373482727, 6 0.10667600373482727, 0 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4526,4526,"2 0.18769145084934558, 1 0.16040100250626563, 5 0.1409078251183514, 4 0.13311055416318576, 3 0.12726260094681152, 0 0.1253132832080201, 6 0.1253132832080201",adding hennings github pull request with a triple implementation. 675
4527,4527,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4528,4528,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
4529,4529,"3 0.25665859564164645, 2 0.1361312886736615, 1 0.1229486144740382, 0 0.12106537530266342, 4 0.12106537530266342, 5 0.12106537530266342, 6 0.12106537530266342",statements unnecessarily nested within else clause.add final modifier to local variables.
4530,4530,"5 0.27275132275132274, 6 0.13015873015873014, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4531,4531,"5 0.31092436974789917, 6 0.13608776844070958, 0 0.12138188608776841, 3 0.11647992530345469, 1 0.1050420168067227, 2 0.1050420168067227, 4 0.1050420168067227",adjust fastdateformat for java 7 behavior regarding format of the year pattern ().refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4532,4532,"1 0.7118746232670281, 2 0.050833835643962225, 5 0.05083383564396221, 3 0.04872413100261202, 0 0.046614426361261806, 4 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4533,4533,"6 0.22645502645502644, 3 0.1431216931216931, 4 0.13941798941798939, 0 0.12460317460317462, 1 0.12460317460317462, 2 0.12275132275132278, 5 0.11904761904761907","<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
4534,4534,"5 0.28467343221441577, 4 0.12620348685922453, 0 0.12073900598490762, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4535,4535,"5 0.2727513227513227, 6 0.12830687830687829, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4536,4536,"4 0.3172234067756456, 6 0.1231935560293769, 0 0.11821843165126747, 1 0.11821843165126747, 2 0.10992655768775174, 3 0.10660980810234542, 5 0.10660980810234542","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
4537,4537,"4 0.36732403399070074, 3 0.14510181176847844, 0 0.14173480840147507, 2 0.09796376463043129, 6 0.0945967612634279, 1 0.08000641333974666, 5 0.07327240660573996","removes unnecessary class reference of static method calls which are declared in the same classadd final modifier to local variables.: stringutils should use toxxxxcase(int) rather than toxxxxcase(char) ()based on patch by sebbadd final modifier to local variables.eat own dog food: call stringutils.isempty().[] swapcase and *capitalize speedups.rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
4538,4538,"5 0.29042658730158727, 2 0.12723214285714282, 6 0.12723214285714282, 4 0.11681547619047622, 1 0.1150793650793651, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4539,4539,"0 0.16313932980599644, 2 0.15490887713109933, 4 0.15285126396237506, 1 0.13227513227513232, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",: new methods for lang3.validatethis from github.
4540,4540,"5 0.2783068783068782, 1 0.12275132275132275, 6 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4541,4541,"4 0.23367161072079107, 1 0.1334894613583138, 3 0.1334894613583138, 6 0.1334894613583138, 0 0.1280249804839969, 2 0.12073900598490764, 5 0.11709601873536303",sort members and clean up comments.merge charsetutils string[] and string method forms to string...
4542,4542,"2 0.20169677066228792, 0 0.15763546798029557, 4 0.14805692391899286, 1 0.12315270935960596, 3 0.12315270935960596, 5 0.12315270935960596, 6 0.12315270935960596",extract logic for checking string representation of objects into separate methods
4543,4543,"6 0.15659340659340654, 2 0.1544566544566544, 1 0.1394993894993895, 0 0.13736263736263735, 3 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735",fix brace positions
4544,4544,"2 0.2318501170960187, 3 0.1772053083528493, 4 0.12256049960967996, 0 0.117096018735363, 1 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
4545,4545,"0 0.30158730158730157, 4 0.1421670117322291, 6 0.1244536461927766, 2 0.11157119852772027, 3 0.11157119852772027, 1 0.1051299746951921, 5 0.10351966873706006","[] objectutils.identitytostring(object) and friends shouldallocate builders and buffers with a sizerefactor magic char.better exception message.use validatenotnull instead of ""throw new nullpointerexception"" add objectutils.toidentitystring methods that support stringbuilder, strbuilder, and appendable"
4546,4546,"4 0.26904761904761904, 6 0.13571428571428568, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
4547,4547,"0 0.19450743260267067, 3 0.16099773242630383, 5 0.14512471655328793, 6 0.13630637440161245, 1 0.12572436381960192, 4 0.12396069538926684, 2 0.11337868480725624",4fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone set
4548,4548,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",changing eol-style to native.misc. event utils.
4549,4549,"6 0.20755170755170754, 3 0.16714766714766713, 0 0.14357864357864356, 2 0.13516113516113512, 4 0.12169312169312167, 1 0.11495911495911498, 5 0.10990860990860993","add final modifier to local variables.<action issue="""" type=""fix"">stringescapeutils.escapejava() and escapeecmascript() do not output the escaped surrogate pairs that are java parsable</action>"
4550,4550,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4551,4551,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4552,4552,"0 0.20935960591133002, 6 0.15763546798029554, 2 0.13081554460864805, 1 0.12889983579638756, 3 0.12698412698412703, 4 0.12315270935960594, 5 0.12315270935960594",add missing since tags for strsubstitutor; wrap lines longer than 80 chars
4553,4553,"3 0.19786535303776678, 6 0.14997263273125339, 0 0.13656267104542966, 5 0.1346469622331691, 2 0.13081554460864805, 1 0.126984126984127, 4 0.12315270935960593",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
4554,4554,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4555,4555,"3 0.16300366300366292, 1 0.14377289377289376, 2 0.14377289377289376, 0 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",: add truncatedequals and truncatedcompareto
4556,4556,"0 0.2390750538898687, 3 0.2143836958651773, 4 0.1444248481285518, 2 0.13070742700372326, 1 0.09504213207916912, 5 0.08818342151675486, 6 0.08818342151675486",: typeutils.isassignable throws nullpointerexception when fromtype has type variables and totype generic superclass specifies type variable ()add final modifier to local variables.add final modifier to method parameters.[] [] fix related bugs dealing with type variable inheritance[] vastly expanded typeutils
4557,4557,"2 0.18845598845598843, 4 0.14199134199134197, 3 0.13997113997113997, 1 0.13795093795093794, 0 0.13189033189033192, 5 0.12987012987012989, 6 0.12987012987012989",added escape/unescapejson methods per maurizio cucchiaras patch in 797
4558,4558,"2 0.25918367346938775, 3 0.1655328798185941, 6 0.14489795918367343, 0 0.11632653061224488, 4 0.10680272108843539, 1 0.1052154195011338, 5 0.10204081632653063",add final modifier to local variables.remove trailing whitespacescrlf -> lfjavadoc: fix typo but working is still awkward.implements : add a method to arrayutils for removing all occurrences of a given element. thanks to haiyang li.
4559,4559,"5 0.25689865689865693, 3 0.16800976800976802, 2 0.1252747252747253, 1 0.11501831501831504, 6 0.11501831501831504, 0 0.10989010989010992, 4 0.10989010989010992",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4560,4560,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
4561,4561,"4 0.26904761904761904, 6 0.13571428571428568, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
4562,4562,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4563,4563,"0 0.17567931127253159, 3 0.1587301587301587, 1 0.15119720204465964, 2 0.14554748453053534, 4 0.12671509281678775, 5 0.12106537530266345, 6 0.12106537530266345",merge branch  of https://github.com/markdacek/commons-lang: added isexcludenullvalues to reflectiontostringbuilder and test
4564,4564,"2 0.23072562358276635, 1 0.12953514739229025, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
4565,4565,"5 0.2701014832162373, 6 0.1316679677335415, 0 0.12802498048399688, 1 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4566,4566,"3 0.19274376417233557, 0 0.16099773242630386, 5 0.14512471655328796, 2 0.14336104812295286, 6 0.1292517006802721, 1 0.11514235323759135, 4 0.11337868480725626",use validateistrue to validate argumentsreplaced private integer constants with private static enum.add final modifier to local variables.
4567,4567,"4 0.18756613756613752, 3 0.18201058201058198, 2 0.1357142857142857, 6 0.13201058201058197, 1 0.12460317460317462, 0 0.11904761904761907, 5 0.11904761904761907",sort members.add final modifier to local variables.use index_not_found instead of magic number.
4568,4568,"5 0.282010582010582, 6 0.12275132275132276, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4569,4569,"6 0.21269841269841264, 3 0.13795093795093796, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",removes redundant + signpmd: remove useless parentheses
4570,4570,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4571,4571,"2 0.18697874630078015, 3 0.1850955071294054, 0 0.13048157115953726, 4 0.12671509281678775, 1 0.12483185364541298, 5 0.12483185364541298, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
4572,4572,"2 0.18783068783068776, 4 0.1384479717813051, 5 0.1384479717813051, 0 0.13639035861258084, 1 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
4573,4573,"2 0.24384236453201968, 6 0.1346469622331691, 1 0.12889983579638753, 0 0.12315270935960593, 3 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
4574,4574,"6 0.3098901098901099, 5 0.12014652014652015, 0 0.11843711843711843, 4 0.11501831501831504, 1 0.11330891330891332, 2 0.11330891330891332, 3 0.1098901098901099",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
4575,4575,"5 0.27460317460317457, 6 0.13015873015873014, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4576,4576,"0 0.32292200034135515, 4 0.18911076975593105, 3 0.12578938385389996, 6 0.09592080559822494, 1 0.09472606246799793, 2 0.08755760368663593, 5 0.08397337429595496"," enumutils *bitvector issue with more than 32 values enumthis add final modifier to local variables.[] permit bitvector generation for enums with > 64 values; plus some test correctionsremove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)require values parameter when generating bit vectors from enums, throwing nullpointerexception if omitted; merge check for type eligibility; add e... generatebitvector() variant; alter generatebitvector(class<e>, enumset<e>) to (class<e>, iterable<e>) by using |= << instead of + to accumulate values; process only specified values"
4577,4577,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4578,4578,"4 0.4434398231866586, 0 0.09885473176612415, 6 0.0932288527225236, 1 0.09182238296162347, 2 0.09182238296162347, 3 0.09041591320072333, 5 0.09041591320072333","sort members.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classreplacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving indexof(string, string) and indexof(string, string, int) over to charsequence. 687"
4579,4579,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4580,4580,"4 0.34807256235827666, 0 0.11791383219954646, 2 0.1147392290249433, 3 0.10997732426303855, 1 0.10362811791383221, 6 0.10362811791383221, 5 0.10204081632653063","replacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687checkstylemoving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
4581,4581,"6 0.28904249871991805, 5 0.1349206349206349, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
4582,4582,"6 0.3201465201465202, 5 0.13040293040293038, 0 0.1098901098901099, 1 0.1098901098901099, 2 0.1098901098901099, 3 0.1098901098901099, 4 0.1098901098901099",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
4583,4583,"5 0.2883164194639604, 4 0.12256049960967993, 0 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4584,4584,"5 0.2573510278428311, 6 0.14259692948217537, 0 0.12438199323445227, 1 0.12438199323445227, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302",4fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4585,4585,"1 0.7146875627888286, 5 0.05153707052441231, 2 0.049427365883062076, 3 0.04802089612216194, 0 0.04591119148081175, 4 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4586,4586,"3 0.19211822660098518, 0 0.17487684729064035, 2 0.13656267104542966, 1 0.126984126984127, 4 0.12315270935960593, 5 0.12315270935960593, 6 0.12315270935960593",add final modifier to local variables.convert to java 5 enhanced loops. 
4587,4587,"5 0.282010582010582, 6 0.12275132275132276, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4588,4588,"5 0.28695436507936506, 6 0.12896825396825393, 2 0.12375992063492063, 1 0.11855158730158732, 4 0.11855158730158732, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4589,4589,"3 0.2066378066378066, 2 0.13997113997114, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
4590,4590,"0 0.17857142857142858, 3 0.17366946778711484, 2 0.16549953314659197, 1 0.15569561157796452, 5 0.11484593837535015, 4 0.10667600373482729, 6 0.10504201680672272",: update java requirement from java 6 to 7replace usage of deprecated objectutilsequals with objectsequalsadd final modifier to local variables.adding hennings github pull request with a triple implementation. 675
4591,4591,"6 0.15659340659340654, 3 0.1459096459096459, 2 0.14377289377289376, 1 0.14163614163614163, 0 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735",add stringmatchertostring(); useful from a debugger.
4592,4592,"2 0.16825396825396824, 3 0.16219336219336214, 4 0.14401154401154398, 1 0.13391053391053392, 0 0.13189033189033192, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to method parameters.
4593,4593,"5 0.27460317460317457, 6 0.13015873015873017, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4594,4594,"6 0.33543417366946776, 5 0.13608776844070958, 0 0.10830999066293184, 1 0.10504201680672269, 2 0.10504201680672269, 3 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
4595,4595,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
4596,4596,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14525306978137167, 1 0.14315663372267148, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
4597,4597,"3 0.19855699855699852, 2 0.14401154401154398, 1 0.13795093795093796, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4598,4598,"5 0.2883164194639604, 4 0.12438199323445225, 1 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4599,4599,"3 0.22954822954822957, 2 0.16630036630036626, 4 0.14065934065934063, 0 0.12356532356532354, 1 0.12014652014652016, 5 0.1098901098901099, 6 0.1098901098901099",: strbuilderreplaceall arrayindexoutofboundsexception ()avoid arrayindexoutofboundsexception by keeping variable buf consistent with buffer in strbuilderreplaceimpl.add final modifier to local variables.add final modifier to method parameters.
4600,4600,"0 0.17487684729064037, 2 0.16338259441707717, 4 0.14805692391899286, 6 0.14039408866995073, 1 0.12698412698412703, 3 0.12315270935960596, 5 0.12315270935960596",: new methods for lang3.validate ()fixed method names; fixed differentobject to use object.equals
4601,4601,"1 0.694809621189989, 3 0.07176940305774658, 2 0.05200116856558574, 0 0.045866199240432365, 4 0.045866199240432365, 5 0.045866199240432365, 6 0.04382120946538124",add final modifier to local variables.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4602,4602,"0 0.15363881401617246, 6 0.15154237795747225, 4 0.1473495058400719, 5 0.13896376160527107, 3 0.13896376160527105, 1 0.1347708894878706, 2 0.1347708894878706",[] prefer throwable.getcause() in exceptionutils.getcause() ()
4603,4603,"6 0.2397094430992736, 3 0.1380145278450363, 4 0.1380145278450363, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
4604,4604,"2 0.22638563622170174, 3 0.1808482956023939, 4 0.12438199323445226, 0 0.117096018735363, 1 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
4605,4605,"4 0.26719576719576715, 6 0.13571428571428568, 0 0.12089947089947091, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
4606,4606,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4607,4607,"6 0.2908346134152585, 0 0.13133640552995385, 2 0.1169994879672299, 1 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894",make sure lines in files dont have trailing white spaces and remove all trailing white spaces[] immutabletriple.nulltriple()
4608,4608,"4 0.28737266050698884, 0 0.13148542999289264, 1 0.1298270552001895, 6 0.12153518123667373, 2 0.11656005685856431, 3 0.10660980810234542, 5 0.10660980810234542",[github] commons-lang pull request : intellij idea refactorings..remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
4609,4609,"0 0.25570436507936506, 2 0.1498015873015873, 3 0.13244047619047616, 1 0.12375992063492063, 4 0.11334325396825398, 6 0.11334325396825398, 5 0.11160714285714288",code clean-up for checkstyle.simplify expressions again.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.: add conversion utility to convert between data types on byte level
4610,4610,"4 0.21377368151561701, 2 0.15104966717869941, 3 0.1420890937019969, 0 0.1295442908346134, 1 0.12775217613927292, 5 0.11879160266257044, 6 0.11699948796722993","sort members.: add stringutilsisallempty and isallblank methodsapplying alexander muthmanns patch from , adding isblank/isempty charsequence... variants"
4611,4611,"2 0.18769145084934555, 1 0.1662489557226399, 5 0.13895850737955998, 3 0.1292119186856029, 4 0.1272626009468115, 0 0.12531328320802007, 6 0.12531328320802007",adding hennings github pull request with a triple implementation. 675
4612,4612,"1 0.7132810930279285, 2 0.050833835643962225, 3 0.050130600763512154, 5 0.048020896122161955, 4 0.047317661241711884, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4613,4613,"3 0.18783068783068776, 5 0.1466784244562022, 6 0.13639035861258084, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
4614,4614,"2 0.2097883597883598, 3 0.14867724867724866, 0 0.13941798941798939, 6 0.13386243386243385, 4 0.1264550264550265, 1 0.12275132275132278, 5 0.11904761904761908",: please add number to byte[] methods. suggested by lilianne e. blaze. final patch from vincent ricard (with thanks to henri yandell).
4615,4615,"3 0.3583099906629318, 2 0.111577964519141, 4 0.10830999066293186, 6 0.10667600373482727, 0 0.1050420168067227, 1 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4616,4616,"6 0.2790807865434731, 3 0.17128642501776828, 2 0.12319355602937693, 0 0.10660980810234544, 1 0.10660980810234544, 4 0.10660980810234544, 5 0.10660980810234544",make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse validateistrue to validate argumentsadd final modifier to local variables.
4617,4617,"5 0.291959406713505, 4 0.12073900598490762, 1 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4618,4618,"2 0.20718462823725975, 4 0.15065441381230854, 3 0.13505987190197716, 1 0.1311612364243943, 0 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",: added get methods to arrayutils: added shuffle methods to arrayutils
4619,4619,"2 0.1708994708994709, 6 0.15238095238095237, 0 0.14126984126984124, 5 0.14126984126984124, 4 0.13941798941798939, 1 0.13015873015873017, 3 0.12460317460317463",: add bypass option for classes to recursive and reflective equalsbuilderpatch supplied by yathos ug: recursive and reflective equalsbuilder ()patch by yathos ug
4620,4620,"6 0.20798319327731093, 2 0.1965452847805789, 4 0.12955182072829133, 0 0.12301587301587301, 1 0.12138188608776843, 3 0.11647992530345473, 5 0.10504201680672272",use final.remove trailing white spacesadded new vararg methods to insert values into an array at an index.this implements . this commit also deprecates the add() methodsthat inserted a single value into an array at an index.
4621,4621,"2 0.2326462923477849, 6 0.15138592750533045, 0 0.14475242833451785, 1 0.12153518123667374, 3 0.12153518123667374, 4 0.12153518123667374, 5 0.10660980810234542","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws[] removed unnecessary elses and use of ternary operator with primitive boolean consequences e.g. (some boolean expression) ? true : false"
4622,4622,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
4623,4623,"2 0.2300286234712464, 0 0.1498829039812646, 4 0.1498829039812646, 1 0.11891751236013534, 3 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",: fix logic in isjsonarray method of jsontostringstyleextract logic for checking string representation of objects into separate methods
4624,4624,"5 0.2846734322144158, 0 0.12073900598490765, 1 0.12073900598490765, 4 0.12073900598490765, 6 0.11891751236013534, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4625,4625,"2 0.15659340659340656, 6 0.15659340659340656, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737",the the patrol.validation
4626,4626,"2 0.3064182194616978, 3 0.13250517598343686, 1 0.11801242236024846, 4 0.11801242236024843, 5 0.1164021164021164, 6 0.10512997469519211, 0 0.10351966873706007",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4627,4627,"6 0.2800819252432155, 5 0.14388120839733737, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
4628,4628,"0 0.1791383219954648, 4 0.15136054421768702, 2 0.14739229024943307, 1 0.13350340136054423, 3 0.13151927437641722, 6 0.12953514739229025, 5 0.12755102040816327","add hashcode and tostring methods to annotationutils, plus tests"
4629,4629,"2 0.2701014832162373, 4 0.1353109549830861, 3 0.12438199323445226, 0 0.11891751236013533, 1 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
4630,4630,"2 0.23313492063492064, 0 0.15848214285714285, 6 0.13244047619047616, 3 0.13070436507936506, 1 0.12202380952380955, 4 0.11160714285714288, 5 0.11160714285714288","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
4631,4631,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4632,4632,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4633,4633,"3 0.18445539135194305, 0 0.1538040503557745, 2 0.15188834154351394, 4 0.1403940886699507, 1 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594",rewrite to avoid (im)possible npe warningadd final modifier to local variables.
4634,4634,"0 0.17863441672965483, 3 0.17510707986898463, 4 0.16276140085663895, 6 0.1327790375409423, 2 0.11866969009826156, 5 0.11866969009826156, 1 0.11337868480725626",removes unnecessary class reference of static method calls which are declared in the same classadd final modifier to local variables.
4635,4635,"5 0.38926681783824646, 0 0.11810279667422523, 1 0.10884353741496597, 2 0.10487528344671199, 4 0.09693877551020408, 3 0.09693877551020405, 6 0.0850340136054422","applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. applying my fix to , and mikaels test case; fixing the fastdateformat to properly include the locale when formatting a date"
4636,4636,"0 0.1651969429747207, 2 0.1651969429747207, 4 0.14050558495002943, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
4637,4637,"0 0.28314659197012143, 4 0.13772175536881417, 1 0.12138188608776844, 6 0.11974789915966387, 2 0.11811391223155929, 3 0.11484593837535016, 5 0.10504201680672273",": update java requirement from java 6 to 7replace usage of deprecated objectutilstostring with objectstostring: fix deprecation warningseat own dog food: separator == null ? """" : separator->objectutils.tostring(separator)remove superfluous parens."
4638,4638,"2 0.2300286234712464, 3 0.1772053083528493, 1 0.12073900598490765, 4 0.12073900598490765, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
4639,4639,"5 0.291509196271101, 2 0.12925170068027209, 6 0.11866969009826152, 0 0.11690602166792645, 4 0.11690602166792645, 1 0.11337868480725624, 3 0.11337868480725624", and simplify fastdateformat; eliminate boxingrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4640,4640,"5 0.2883164194639604, 4 0.12256049960967993, 0 0.11891751236013531, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4641,4641,"4 0.30344258915687494, 6 0.14471243042671614, 2 0.14182642754071326, 0 0.1201814058956916, 3 0.09997938569367143, 1 0.0956503813646671, 5 0.09420737992166565",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)[] add mode and median comparable... methods to objectutilscheckstyle and trailing spaces. simplify compare() method - thanks to julien aymé add a null-safe compare() method to objectutils
4642,4642,"2 0.18783068783068776, 0 0.1384479717813051, 4 0.1384479717813051, 5 0.1384479717813051, 1 0.1322751322751323, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
4643,4643,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4644,4644,"2 0.1878306878306878, 4 0.14462081128747797, 3 0.13639035861258086, 0 0.13433274544385657, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: added shuffle methods to arrayutils
4645,4645,"0 0.1662337662337662, 2 0.15209235209235206, 4 0.14805194805194802, 3 0.13593073593073596, 5 0.13593073593073596, 1 0.1318903318903319, 6 0.12987012987012989",: add a reflection-based variant of diffbuilder
4646,4646,"5 0.2883164194639604, 0 0.12256049960967991, 4 0.12073900598490762, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4647,4647,"5 0.28673178673178673, 0 0.21978021978021978, 6 0.12718762718762716, 1 0.09157509157509158, 2 0.09157509157509158, 3 0.09157509157509158, 4 0.09157509157509158",dont save short eras if they are the same as the long eras fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()getinstance() (java 1.6) supports more localesexplicit conversion to integer; save the value for use latergetinstance(locale) is java 1.6+applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4648,4648,"3 0.38862724577010294, 6 0.20303506017791728, 2 0.08948194662480376, 5 0.08337694051979766, 0 0.07849293563579278, 1 0.07849293563579278, 4 0.07849293563579278","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.: fastdateformat doesnt respect summer daylight in some localized stringsrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesuse final consistently. tab policeremove keyvalues map per sebbs suggestion"
4649,4649,"3 0.40073929115025, 2 0.10697977821265492, 4 0.09936942813655142, 6 0.09936942813655142, 0 0.09784735812133072, 1 0.09784735812133072, 5 0.09784735812133072","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4650,4650,"4 0.1876914508493456, 2 0.14870509607351712, 0 0.14285714285714285, 1 0.13505987190197719, 6 0.13116123642439434, 5 0.12921191868560292, 3 0.1253132832080201",simplify code; javadocformattingmoving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils class
4651,4651,"6 0.2783068783068782, 2 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
4652,4652,"2 0.18769145084934558, 1 0.16624895572263992, 5 0.13700918964076855, 3 0.13116123642439434, 4 0.12726260094681152, 0 0.1253132832080201, 6 0.1253132832080201",adding hennings github pull request with a triple implementation. 675
4653,4653,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
4654,4654,"2 0.32091097308488614, 3 0.12284334023464458, 1 0.11962272831838049, 4 0.1115711985277203, 5 0.10996089256958824, 6 0.10996089256958824, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4655,4655,"5 0.29560239396304966, 4 0.11891751236013531, 0 0.11709601873536299, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4656,4656,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4657,4657,"4 0.17404622667780556, 0 0.15650236702868278, 1 0.15455304928989133, 2 0.13895850737956, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",[github] commons-lang pull request : intellij idea refactorings..
4658,4658,"0 0.17229437229437225, 5 0.14603174603174598, 3 0.13997113997114, 1 0.137950937950938, 4 0.137950937950938, 2 0.13593073593073596, 6 0.12987012987012989",[] add apis classutils.isprimitivewrapper(class<?>) and isprimitiveorwrapper(class<?>)
4659,4659,"5 0.2791635172587553, 3 0.12925170068027209, 4 0.12925170068027209, 1 0.11866969009826153, 0 0.11514235323759135, 6 0.11514235323759135, 2 0.11337868480725626",change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4660,4660,"2 0.19451170298627926, 0 0.15496368038740918, 4 0.13801452784503632, 5 0.13801452784503632, 6 0.13048157115953726, 1 0.12294861447403825, 3 0.12106537530266348",multilinerecursivetostringstyle: made private field indent static: multiline recursive to string style. this fixes from github. thanks to jan matèrne.
4661,4661,"0 0.253006253006253, 2 0.1301106301106301, 6 0.1284271284271284, 3 0.12506012506012507, 4 0.12506012506012504, 5 0.12337662337662335, 1 0.11495911495911498",format to 120 line length.code clean-up for checkstyle.use lowercase presentation for hex values as it is done in the jdk.use jdk functionality where available.: add conversion utility to convert between data types on byte level
4662,4662,"2 0.4269242288110214, 4 0.14809823300389335, 3 0.10302485774183884, 6 0.08939802336028749, 0 0.08730158730158727, 5 0.07367475292003593, 1 0.07157831686133573",remove redundant type arguments. simplify arrayutils removeelements by using newdecrementandget() method: improve arrayutils removeelements time complexity to o(n) ()based on patch submitted by jeffery yuancrlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables. arrayutils removeelements methods use unnecessary hashseteliminate conversion of bitset to int[] arrayutils removeelements methods use unnecessary hashsetreplace hashset with bitset (less memory; faster) arrayutils removeelements methods clone temporary index arrays unnecessarilyreduce number of created arrays[] complement arrayutils.addall() variants with by-index and by-value removal methods
4663,4663,"6 0.29538405400474366, 5 0.20853858784893267, 3 0.1434044882320744, 1 0.09615033752964784, 2 0.08721036307243206, 0 0.08721036307243205, 4 0.0821018062397373",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.[] fastdateformat generates date objects wastefully.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4664,4664,"2 0.18745275888133028, 3 0.15923406399596873, 4 0.14336104812295286, 0 0.13983371126228267, 6 0.12572436381960195, 1 0.12219702695893175, 5 0.12219702695893175",use validateistrue to validate argumentsremove redundant type arguments.: add option to disable the objectstriviallyequal test in diffbuilder. this fixes from github. thanks to jonathan baker.
4665,4665,"2 0.23072562358276635, 1 0.12953514739229025, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
4666,4666,"0 0.16524943310657594, 2 0.16128117913832196, 4 0.1454081632653061, 6 0.13945578231292519, 3 0.13151927437641725, 5 0.12953514739229027, 1 0.1275510204081633",extract some helper methods to make the code better readable
4667,4667,"0 0.2079365079365079, 2 0.16164021164021158, 4 0.1542328042328042, 1 0.11904761904761907, 3 0.11904761904761907, 5 0.11904761904761907, 6 0.11904761904761907",": comparetobuilder.append(object, object, comparator) method is too big to be inlinedextracted arrays processing into a separate method."
4668,4668,"6 0.2896281800391389, 2 0.19221569906501412, 5 0.1191563383344205, 3 0.10241356816699285, 1 0.10089149815177215, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
4669,4669,"5 0.29216269841269843, 2 0.12723214285714282, 6 0.12723214285714282, 1 0.1150793650793651, 0 0.11334325396825398, 4 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4670,4670,"6 0.2928409459021704, 5 0.16699060576611596, 2 0.16132167152575314, 3 0.12730806608357628, 4 0.09102688694525428, 0 0.08195659216067379, 1 0.0785552316164561",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4671,4671,"5 0.291959406713505, 6 0.12073900598490764, 4 0.11891751236013533, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4672,4672,"5 0.2901379130887327, 4 0.12256049960967993, 1 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4673,4673,"3 0.3604581072935504, 6 0.11854530841872613, 0 0.11713883865782598, 2 0.11713883865782598, 5 0.10166767128792446, 1 0.09322885272252363, 4 0.0918223829616235",": fastdateformat doesnt respect summer daylight in some localized stringsmerge branch master of https://github.com/nickmanley/commons-langthis fix nullpointerexception in fastdateparser$timezonestrategyfix nullpointerexception in fastdateparser$timezonestrategyrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4674,4674,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4675,4675,"2 0.23617952928297753, 6 0.13656267104542963, 1 0.13273125342090863, 3 0.12506841817186648, 0 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
4676,4676,"2 0.18886198547215494, 3 0.18321226795803064, 1 0.13236481033091202, 5 0.12859833198816248, 4 0.12483185364541298, 0 0.12106537530266345, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
4677,4677,"0 0.22276029055690072, 4 0.13989776701641105, 6 0.1380145278450363, 3 0.13613128867366153, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
4678,4678,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
4679,4679,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
4680,4680,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4681,4681,"4 0.17209690893901416, 0 0.16040100250626563, 1 0.1506544138123085, 2 0.1409078251183514, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",[github] commons-lang pull request : intellij idea refactorings..
4682,4682,"6 0.26945878753107666, 5 0.19716963090457063, 3 0.16504111684834574, 2 0.09676802447886781, 4 0.09141327213616371, 1 0.09007458405048767, 0 0.09007458405048765","zz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
4683,4683,"5 0.30765639589168997, 6 0.13608776844070958, 0 0.123015873015873, 3 0.11321195144724557, 4 0.10994397759103644, 1 0.1050420168067227, 2 0.1050420168067227",adjust fastdateformat for java 7 behavior regarding format of the year pattern ().refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4684,4684,"0 0.1710454296661193, 6 0.1652983032293377, 1 0.1403940886699507, 5 0.1403940886699507, 2 0.13081554460864808, 4 0.12698412698412703, 3 0.12506841817186648", make some private fields finalreturning notimplementedexception to lang after it was removed in lang 3.0 per the request in . 
4685,4685,"6 0.33537414965986395, 4 0.12108843537414964, 3 0.11791383219954646, 2 0.11473922902494331, 1 0.1052154195011338, 0 0.10362811791383222, 5 0.10204081632653063","make sure lines in files dont have trailing white spaces and remove all trailing white spaces<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
4686,4686,"2 0.2277593207825766, 6 0.2161314138058324, 5 0.17607973421926912, 3 0.12827611664820965, 1 0.08564045773348102, 0 0.08305647840531563, 4 0.08305647840531563",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure placement of curly braces is consistentmake sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.explicit boxingapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4687,4687,"2 0.1844155844155844, 0 0.14805194805194802, 4 0.14805194805194802, 1 0.12987012987012989, 3 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",: multiline recursive to string style. this fixes from github. thanks to jan matèrne.
4688,4688,"2 0.3202511773940346, 0 0.16030001744287461, 3 0.1590790162218734, 4 0.10291296005581718, 5 0.09070294784580499, 1 0.0858189429618001, 6 0.08093493807779525","statement unnecessarily nested within else clause.add final modifier to local variables.applying benedikt ritters patch to fix the checkstyle error in serializationutils - 793[] serializationutils throws classnotfoundexception when cloning primitive classesapplying sven ludwigs patch from . this modifies the serializationutils.clone method to use the threadcontextloader if it is unable to find a class using the objects current classloader. this should (hopefully) help with weblogic and tomcat situations where lang is outside the web-inf for some reason (likely user error with tomcat, by design for weblogic)"
4689,4689,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
4690,4690,"2 0.16621743036837375, 4 0.15154237795747227, 3 0.13896376160527107, 0 0.13686732554657086, 1 0.13686732554657086, 5 0.13477088948787064, 6 0.13477088948787064",: added get methods to arrayutils
4691,4691,"0 0.28595848595848594, 4 0.156043956043956, 6 0.11501831501831503, 2 0.11330891330891332, 1 0.10989010989010989, 3 0.10989010989010989, 5 0.10989010989010989","reverting r1090111 - moving the text.translate escapers back from using range to replicating parts of the range api. see the list for details (unnecessary boxing in stringescapeutils etc), the move to range was an uncomfortable fit. "
4692,4692,"2 0.31285944329422594, 3 0.12606395215090865, 5 0.11801242236024842, 4 0.11479181044398436, 1 0.11479181044398433, 6 0.10996089256958824, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4693,4693,"0 0.21303258145363405, 4 0.1370091896407686, 3 0.13505987190197716, 1 0.13311055416318573, 5 0.1292119186856029, 2 0.1272626009468115, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
4694,4694,"2 0.16412099430967353, 6 0.1536388140161725, 1 0.14315663372267148, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",: recursive and reflective equalsbuilder ()patch by yathos ug
4695,4695,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4696,4696,"0 0.28226363008971705, 2 0.14699792960662522, 3 0.12767425810904068, 4 0.11801242236024842, 6 0.1115711985277203, 1 0.10996089256958824, 5 0.10351966873706006",code clean-up for checkstyle.simplify expressions again.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
4697,4697,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4698,4698,"6 0.21693121693121686, 3 0.15455304928989133, 4 0.1272626009468115, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
4699,4699,"4 0.21018945212493598, 3 0.17972350230414744, 2 0.1331285202252944, 0 0.13133640552995388, 1 0.11520737327188942, 5 0.11520737327188942, 6 0.11520737327188942",add final modifier to local variables.eat own dog food: call stringutils.isempty().[] swapcase and *capitalize speedups.
4700,4700,"3 0.15659340659340656, 6 0.15659340659340656, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737",pmd: useless parentheses
4701,4701,"0 0.305952380952381, 3 0.15317460317460316, 2 0.12817460317460316, 6 0.11845238095238093, 4 0.10873015873015872, 1 0.09345238095238098, 5 0.09206349206349208","make the write*field impl match its in-line comment and not rely on the default behavior of writefield(field,target,value).a bit of dog food and a lot of javadoc tweakage[] add fieldutils getdeclaredfields() to return all the fields defined in the given class and super classes.add final modifier to local variables."
4702,4702,"0 0.2330827067669173, 4 0.19214703425229743, 2 0.1441938178780284, 6 0.14185463659147868, 3 0.12197159565580616, 1 0.09039264828738511, 5 0.0763575605680869","merge branch wordutils.wrap: customizable breakable characters (not just space/whitespace)changed wrap method to use regex pattern to find breakable characters rather than only spaces. added a few basic tests for ""regex wrap"": fix bug with stripping spaces on last line in wordutils.wrap(). this fixes from github. thanks to andrey khobnyaadd final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)"
4703,4703,"5 0.27460317460317457, 6 0.13015873015873014, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4704,4704,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
4705,4705,"5 0.28467343221441577, 4 0.12256049960967995, 0 0.12073900598490764, 6 0.12073900598490761, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4706,4706,"3 0.21673881673881668, 2 0.1339105339105339, 0 0.12987012987012986, 1 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",reuseadd final modifier to local variables.
4707,4707,"3 0.19764464925755246, 0 0.1635944700460829, 5 0.1474654377880184, 2 0.1420890937019969, 1 0.11699948796722992, 4 0.11699948796722992, 6 0.11520737327188942",replaced private integer constants with private static enum.add final modifier to local variables.
4708,4708,"0 0.2523809523809523, 2 0.13386243386243385, 1 0.13201058201058197, 3 0.12460317460317459, 4 0.11904761904761904, 5 0.11904761904761904, 6 0.11904761904761904",adding vincent ricards patch to charrange.java providing an iterator that lets you walk the chars in the range. 454
4709,4709,"0 0.22276029055690072, 4 0.1436642453591606, 6 0.1380145278450363, 3 0.13236481033091205, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
4710,4710,"3 0.30394468018230403, 6 0.22693697941222696, 5 0.17413169888417415, 2 0.07842212792707841, 0 0.07292157787207294, 1 0.07292157787207294, 4 0.07072135785007075","format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezonesadd final modifier to local variables.trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
4711,4711,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4712,4712,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4713,4713,"0 0.16931216931216928, 5 0.15079365079365076, 4 0.1487360376249265, 2 0.13433274544385657, 1 0.1322751322751323, 3 0.1322751322751323, 6 0.1322751322751323",javadocadd methods for cloneables to objectutils ().
4714,4714,"6 0.32783068783068786, 3 0.13968253968253969, 0 0.1307936507936508, 4 0.11449735449735447, 5 0.09671957671957675, 1 0.09523809523809526, 2 0.09523809523809526","replace tabs with spaces fastdateparser and fastdateprinter support x format fastdateparser does not handle excess hours as per simpledateformatdocsadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .dont mutate parameterstab police: fastdateparser could use calendar.getdisplaynames for all text fields"
4715,4715,"0 0.15902410346854787, 5 0.1549088771310993, 3 0.14256319811875368, 1 0.1384479717813051, 4 0.1384479717813051, 2 0.13433274544385657, 6 0.1322751322751323",[] added timedsemaphore class to concurrent package.
4716,4716,"2 0.21785139176443527, 6 0.20496894409937885, 4 0.1308948700253048, 1 0.12123303427651252, 0 0.11318150448585229, 3 0.10835058661145619, 5 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateprinter generates date objects wastefully168
4717,4717,"5 0.2783068783068783, 6 0.12460317460317458, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4718,4718,"5 0.2570981444220881, 0 0.16007154035323048, 6 0.13503241672255756, 3 0.1256427453610552, 1 0.11312318354571876, 4 0.10842834786496762, 2 0.10060362173038231",4fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone setapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4719,4719,"4 0.28348214285714285, 0 0.12723214285714282, 6 0.12723214285714282, 2 0.11855158730158732, 3 0.11681547619047619, 1 0.1150793650793651, 5 0.11160714285714288",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo) add notequal() method to objectutils
4720,4720,"3 0.42878028404344193, 2 0.09983291562238929, 1 0.09544695071010859, 0 0.09398496240601502, 4 0.09398496240601502, 5 0.09398496240601502, 6 0.09398496240601502","add final modifier to local variables.pmd: these nested if statements could be combinedformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4721,4721,"5 0.2864949258391881, 0 0.12256049960967993, 4 0.12073900598490762, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4722,4722,"0 0.19897959183673466, 3 0.14540816326530606, 4 0.13945578231292516, 2 0.13350340136054423, 1 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327","use validatenotnull instead of ""throw new nullpointerexception""refactor range with lots of new methods"
4723,4723,"2 0.22103766879886283, 0 0.15636105188343993, 6 0.15138592750533045, 1 0.12153518123667374, 3 0.12153518123667374, 4 0.12153518123667374, 5 0.10660980810234542","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws[] removed unnecessary elses and use of ternary operator with primitive boolean consequences e.g. (some boolean expression) ? true : false"
4724,4724,"3 0.16941391941391934, 1 0.14163614163614163, 2 0.1394993894993895, 0 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",: add truncatedequals and truncatedcompareto
4725,4725,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4726,4726,"6 0.33706816059757233, 5 0.1311858076563959, 0 0.111577964519141, 1 0.10504201680672269, 2 0.10504201680672269, 3 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
4727,4727,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4728,4728,"3 0.18037518037518033, 4 0.1662337662337662, 2 0.13391053391053392, 0 0.12987012987012989, 1 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",replaces size() == 0 and length() == 0 with isempty()use final consistently. 
4729,4729,"2 0.30687830687830686, 4 0.1284271284271284, 0 0.12169312169312167, 1 0.11495911495911494, 6 0.1115921115921116, 3 0.10822510822510824, 5 0.10822510822510824",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
4730,4730,"4 0.2052017594186269, 0 0.19315356664754255, 3 0.15299292407726142, 2 0.14362210747752915, 1 0.12086441002103651, 6 0.09810671256454387, 5 0.08605851979345958",sort members.[] stringutils.join() with support for list<?> withconfigurable start/end indices. extract constant.[github] commons-lang pull request : intellij idea refactorings..: update java requirement from java 6 to 7replace usage of deprecated objectutilstostring with objectstostring: fix deprecation warningsadd final modifier to local variables.
4731,4731,"2 0.21056547619047616, 0 0.14285714285714282, 5 0.13938492063492058, 3 0.13417658730158727, 4 0.12723214285714282, 6 0.12723214285714282, 1 0.11855158730158732", - jsontostringstyle does not escape string namesjsontostringstyle: improve private constant name and remove wrong comment: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4732,4732,"0 0.28737266050698884, 2 0.14806917791992416, 4 0.12485193082208003, 6 0.11490168206586118, 3 0.10992655768775172, 1 0.10826818289504858, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
4733,4733,"3 0.20259740259740255, 2 0.14401154401154398, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
4734,4734,"6 0.21498189919242547, 3 0.15650236702868278, 4 0.1272626009468115, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
4735,4735,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
4736,4736,"5 0.2901379130887327, 4 0.12073900598490762, 0 0.11891751236013531, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4737,4737,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4738,4738,"0 0.20718462823725978, 3 0.15650236702868278, 1 0.1311612364243943, 5 0.1292119186856029, 2 0.12531328320802007, 4 0.12531328320802007, 6 0.12531328320802007",allow access to parsedpattern for test purposesmake parseexception text similar to that thrown by simpledateformat
4739,4739,"0 0.16931216931216928, 4 0.1549088771310993, 2 0.14667842445620224, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
4740,4740,"3 0.19594964422550626, 6 0.1461412151067323, 5 0.1384783798576902, 0 0.13656267104542966, 2 0.13464696223316913, 1 0.12506841817186645, 4 0.12315270935960593",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
4741,4741,"5 0.25860805860805863, 3 0.1697191697191697, 2 0.12527472527472527, 6 0.11330891330891332, 1 0.1133089133089133, 0 0.1098901098901099, 4 0.1098901098901099",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4742,4742,"2 0.2300286234712464, 3 0.1772053083528493, 1 0.12073900598490765, 4 0.12073900598490765, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
4743,4743,"5 0.28695436507936506, 6 0.12896825396825393, 2 0.12375992063492061, 4 0.12028769841269843, 1 0.1150793650793651, 0 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4744,4744,"3 0.3277563277563278, 2 0.13856713856713856, 4 0.12655512655512655, 6 0.11003861003861001, 1 0.10403260403260403, 0 0.09652509652509655, 5 0.09652509652509655",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerpmd: useless parenthesesformat to 120 line length.add final modifier to local variables.add final modifier to method parameters.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
4745,4745,"2 0.268279989591465, 4 0.13166796773354147, 0 0.12802498048399688, 1 0.11891751236013533, 3 0.11891751236013533, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
4746,4746,"2 0.22477324263038542, 1 0.13350340136054423, 4 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
4747,4747,"2 0.1878306878306878, 5 0.14050558495002943, 4 0.13844797178130513, 0 0.13433274544385657, 1 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
4748,4748,"4 0.22590989257655925, 0 0.19897386564053232, 3 0.17764951098284432, 2 0.16305916305916304, 6 0.08337341670675001, 1 0.07776174442841109, 5 0.07327240660573996","use final.use foreach loop for arrays ()since the project no longer supports java versions older than 6, itssafe to use the enhanced for loop syntax introduced in java 5.this patch employs this syntax where possible to clean up the code.use final consistently. a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables.add final modifier to method parameters.adding nopmd tags for various empty catch blocksmoving most of the methods over to varargs. a couple cant change because they are object[], class[] with both end parameters ideally wanting to be vararg. 396"
4749,4749,"0 0.16623376623376623, 4 0.16623376623376623, 2 0.14805194805194805, 1 0.1298701298701299, 3 0.1298701298701299, 5 0.1298701298701299, 6 0.1298701298701299",typeutils wildcard fixes[] new type util features
4750,4750,"2 0.1620245582509733, 6 0.1536388140161725, 1 0.14525306978137167, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",: recursive and reflective equalsbuilder ()patch by yathos ug
4751,4751,"2 0.3305728088336784, 3 0.12606395215090868, 5 0.11479181044398437, 1 0.1131815044858523, 4 0.10674028065332414, 6 0.1051299746951921, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4752,4752,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4753,4753,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4754,4754,"2 0.1620245582509733, 6 0.1536388140161725, 4 0.14106019766397127, 0 0.13896376160527107, 1 0.13477088948787064, 3 0.13477088948787064, 5 0.13477088948787064",missing method getrawmessage for contextedexception and contextedruntimeexception ().
4755,4755,"3 0.22460317460317455, 2 0.1579365079365079, 4 0.132010582010582, 1 0.12830687830687829, 0 0.11904761904761907, 5 0.11904761904761907, 6 0.11904761904761907",add final modifier to local variables.add final modifier to method parameters.
4756,4756,"3 0.42898371469800045, 2 0.10286538857967426, 1 0.09565038136466708, 4 0.09420737992166563, 0 0.0927643784786642, 5 0.0927643784786642, 6 0.0927643784786642","add final modifier to local variables.format.statement unnecessarily nested within else clause.\refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4757,4757,"5 0.28187403993855603, 6 0.12596006144393243, 3 0.1241679467485919, 4 0.12058371735791092, 0 0.11699948796722992, 1 0.1152073732718894, 2 0.1152073732718894",document intentional drop-thruapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4758,4758,"6 0.2049319727891156, 5 0.14143990929705214, 3 0.13747165532879818, 0 0.12953514739229025, 2 0.12953514739229025, 4 0.12953514739229025, 1 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
4759,4759,"6 0.339581222559946, 3 0.24856467409658894, 5 0.09726443768996956, 2 0.08426207362377573, 1 0.07716987504221547, 4 0.07716987504221547, 0 0.07598784194528875","make sure lines in files dont have trailing white spaces and remove all trailing white spaces: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4760,4760,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",changing eol-style to native.misc. event utils.
4761,4761,"5 0.22121760096443638, 2 0.20012055455093428, 3 0.1494876431585292, 0 0.13823588507132809, 6 0.1002612015270243, 1 0.09744826200522401, 4 0.09322885272252361","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibilityadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
4762,4762,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4763,4763,"4 0.7208629308076823, 5 0.05419626414101552, 6 0.051126896430763825, 3 0.046829781636411466, 1 0.043760413926159786, 2 0.04191879330000878, 0 0.041304919757958435","sort members.tab police (and trailing spaces)back out a csu experiment.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
4764,4764,"4 0.1872555785599264, 0 0.17276282493673797, 3 0.13250517598343686, 1 0.1308948700253048, 2 0.12928456406717276, 5 0.12928456406717276, 6 0.11801242236024843","[github] commons-lang pull request : intellij idea refactorings..inline the pair tostring for performance, and specify the formatpair implements java.util.formattable and defers tostring() handling thereto."
4765,4765,"0 0.1642135642135642, 4 0.1520923520923521, 6 0.14805194805194805, 1 0.146031746031746, 2 0.1298701298701299, 3 0.1298701298701299, 5 0.1298701298701299",returning notimplementedexception to lang after it was removed in lang 3.0 per the request in . 
4766,4766,"5 0.28869047619047616, 6 0.13244047619047616, 2 0.12202380952380952, 1 0.11681547619047622, 0 0.1150793650793651, 4 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4767,4767,"0 0.2074438970990695, 2 0.14805692391899286, 4 0.14230979748221123, 1 0.13081554460864808, 3 0.12506841817186648, 5 0.12315270935960594, 6 0.12315270935960594",: added methods to objectutils class to check for null elements in the array ()
4768,4768,"6 0.28595848595848594, 0 0.14065934065934063, 5 0.12527472527472525, 2 0.11501831501831504, 3 0.11159951159951162, 4 0.11159951159951162, 1 0.1098901098901099",make sure lines in files dont have trailing white spaces and remove all trailing white spacesdont assign parameterrefactor range with lots of new methodscheckstyle and trailing spaces.
4769,4769,"5 0.2727513227513227, 6 0.12645502645502643, 1 0.12460317460317459, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4770,4770,"3 0.18151561699948796, 4 0.17255504352278545, 6 0.16001024065540193, 2 0.12775217613927292, 5 0.12237583205325141, 1 0.11879160266257043, 0 0.11699948796722992",sort members.add final modifier to local variables.tab police (and trailing spaces)use index_not_found instead of magic number.
4771,4771,"2 0.36277892799631933, 1 0.11801242236024842, 6 0.1051299746951921, 0 0.10351966873706006, 3 0.10351966873706006, 4 0.10351966873706006, 5 0.10351966873706006",crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodswap and shift for arrays
4772,4772,"0 0.22468527640941433, 4 0.15763546798029554, 3 0.12506841817186648, 1 0.12315270935960594, 2 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594","use more efficient integer cache: use ""integer.valueof(int)"" instead of ""new integer(int)""."
4773,4773,"6 0.33380018674136314, 5 0.13445378151260498, 0 0.11157796451914097, 1 0.10504201680672269, 2 0.10504201680672269, 3 0.10504201680672269, 4 0.10504201680672269",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
4774,4774,"2 0.17250673854447438, 1 0.1536388140161725, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",more varargs-related updates
4775,4775,"0 0.2032859927596769, 4 0.15650236702868275, 5 0.13505987190197713, 1 0.1292119186856029, 2 0.12531328320802007, 3 0.12531328320802007, 6 0.12531328320802007",moving text translation classes to the range class for its configuration
4776,4776,"4 0.1991341991341991, 2 0.18229918229918227, 0 0.15367965367965364, 6 0.13179413179413177, 1 0.1132756132756133, 3 0.11159211159211162, 5 0.10822510822510824","[] stringutils.wrapifmissing(string, char|string)make checkstyle happy: add wrap (with string or char) to stringutils. this closes pr from github. thanks to thiago andrade."
4777,4777,"6 0.18112244897959182, 0 0.16326530612244897, 1 0.1454081632653061, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
4778,4778,"3 0.23980463980463984, 2 0.1645909645909646, 4 0.13553113553113552, 0 0.12527472527472527, 1 0.11501831501831504, 5 0.10989010989010992, 6 0.10989010989010992",: strbuilderreplaceall arrayindexoutofboundsexception ()avoid arrayindexoutofboundsexception by keeping variable buf consistent with buffer in strbuilderreplaceimpl.add final modifier to local variables.add final modifier to method parameters.
4779,4779,"2 0.22874149659863938, 4 0.13350340136054423, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
4780,4780,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4781,4781,"6 0.2397094430992736, 3 0.1380145278450363, 4 0.1380145278450363, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
4782,4782,"3 0.15363881401617246, 4 0.15363881401617246, 6 0.15363881401617246, 0 0.1347708894878706, 1 0.1347708894878706, 2 0.1347708894878706, 5 0.1347708894878706",use validateistrue to validate arguments
4783,4783,"3 0.22080498866213144, 2 0.13548752834467118, 1 0.13350340136054423, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
4784,4784,"5 0.26904761904761904, 6 0.13201058201058197, 1 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4785,4785,"5 0.3060224089635854, 6 0.13772175536881415, 0 0.12138188608776841, 3 0.11647992530345469, 4 0.10830999066293186, 1 0.1050420168067227, 2 0.1050420168067227",adjust fastdateformat for java 7 behavior regarding format of the year pattern ().refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4786,4786,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4787,4787,"4 0.17669961066187476, 6 0.14315663372267146, 2 0.13896376160527107, 0 0.13686732554657086, 1 0.1347708894878706, 3 0.1347708894878706, 5 0.1347708894878706",use index_not_found instead of magic number.
4788,4788,"0 0.23246935905163757, 2 0.18042997789833234, 6 0.14386176411492865, 4 0.1424552943540285, 3 0.10307414104882459, 1 0.10166767128792446, 5 0.09604179224432391","removes unnecessary class reference of static method calls which are declared in the same class: add (t) casts to get unit tests to pass in old jdk. this fixes from github. thanks to jonathan baker.<action issue="""" type=""add"" dev=""ggregory"">add serializationutils.roundtrip(t extends serializable) to serialize then deserialize</action>"
4789,4789,"3 0.19406041986687148, 4 0.16359447004608293, 0 0.14388120839733742, 6 0.1313364055299539, 2 0.1295442908346134, 1 0.12237583205325145, 5 0.11520737327188943",sort members.add final modifier to local variables.remove unnecessary else.: add stringutils.truncate() ()
4790,4790,"5 0.29042658730158727, 6 0.13070436507936506, 2 0.12549603174603172, 1 0.1150793650793651, 4 0.1150793650793651, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4791,4791,"6 0.2658137882018479, 3 0.1613361762615494, 2 0.12651030561478324, 4 0.12153518123667376, 1 0.10992655768775171, 0 0.10826818289504858, 5 0.10660980810234544",make sure lines in files dont have trailing white spaces and remove all trailing white spacesformat to 120 line length.add final modifier to local variables.
4792,4792,"0 0.24159268227064837, 4 0.1380145278450363, 2 0.13613128867366153, 1 0.12106537530266345, 3 0.12106537530266345, 5 0.12106537530266345, 6 0.12106537530266345",": hashcodebuilder.append(object,object) is too big to be inlined, which prevents whole builder to be scalarized ()"
4793,4793,"0 0.21693121693121686, 2 0.13700918964076858, 4 0.13311055416318573, 1 0.1292119186856029, 3 0.1292119186856029, 5 0.1292119186856029, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
4794,4794,"0 0.2956645344705046, 2 0.1364605543710021, 4 0.1231935560293769, 6 0.11324330727315804, 1 0.11324330727315803, 3 0.1115849324804549, 5 0.10660980810234542",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
4795,4795,"5 0.2883164194639604, 0 0.12073900598490762, 4 0.12073900598490762, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4796,4796,"5 0.2664584959666927, 6 0.14441842310694764, 1 0.12073900598490761, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4797,4797,"3 0.20259740259740255, 2 0.14401154401154398, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
4798,4798,"0 0.28725038402457753, 4 0.1259600614439324, 6 0.1259600614439324, 1 0.11520737327188942, 2 0.11520737327188942, 3 0.11520737327188942, 5 0.11520737327188942",[] org.apache.commons.lang3.reflect.fieldutils.removefinalmodifier(field) does not clean up after itself.a bit of dog food and a lot of javadoc tweakage
4799,4799,"3 0.2114608555286521, 6 0.1587301587301587, 0 0.13424804950228678, 2 0.13048157115953724, 1 0.12294861447403821, 4 0.12106537530266344, 5 0.12106537530266344",add final modifier to local variables.: fastdateprinter memory allocation regressionfastdateformat apis that use a stringbuilder
4800,4800,"5 0.282010582010582, 6 0.12275132275132276, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4801,4801,"5 0.29042658730158727, 6 0.12723214285714282, 2 0.12549603174603174, 4 0.11855158730158732, 1 0.1150793650793651, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4802,4802,"5 0.30438842203548083, 6 0.134453781512605, 0 0.12464985994397756, 3 0.11811391223155929, 4 0.10830999066293186, 1 0.1050420168067227, 2 0.1050420168067227",adjust fastdateformat for java 7 behavior regarding format of the year pattern ().refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4803,4803,"3 0.2086580086580086, 2 0.13997113997114, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
4804,4804,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort members.
4805,4805,"5 0.29389880952380953, 6 0.12723214285714282, 2 0.12202380952380952, 1 0.11855158730158732, 0 0.11334325396825398, 4 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4806,4806,"5 0.29785247432306255, 6 0.134453781512605, 0 0.12138188608776841, 3 0.11974789915966384, 4 0.11484593837535013, 1 0.10667600373482727, 2 0.1050420168067227",adjust fastdateformat for java 7 behavior regarding format of the year pattern ().refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4807,4807,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14734950584007186, 1 0.14106019766397127, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
4808,4808,"3 0.3476190476190476, 2 0.19761904761904758, 1 0.09345238095238097, 6 0.09345238095238097, 0 0.08928571428571429, 4 0.08928571428571429, 5 0.08928571428571429","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4809,4809,"0 0.20523531049846835, 3 0.1526037315510999, 1 0.13311055416318573, 5 0.1292119186856029, 6 0.1292119186856029, 2 0.12531328320802007, 4 0.12531328320802007",allow access to parsedpattern for test purposesmake parseexception text similar to that thrown by simpledateformat
4810,4810,"0 0.20204465967177831, 2 0.18132902878665588, 1 0.124831853645413, 3 0.124831853645413, 4 0.12294861447403824, 6 0.12294861447403824, 5 0.12106537530266347",code clean-up for checkstyle.: add to conversion from byte[] to uuid and uuid to byte[]
4811,4811,"4 0.16429963798384847, 0 0.1584516847674742, 1 0.1584516847674742, 2 0.14285714285714282, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",[github] commons-lang pull request : intellij idea refactorings..
4812,4812,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4813,4813,"6 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",validation
4814,4814,"1 0.7132810930279283, 2 0.052943540285312424, 3 0.04942736588306209, 5 0.04731766124171188, 0 0.045911191480811735, 4 0.045911191480811735, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4815,4815,"4 0.7052516041877744, 3 0.061043566362715296, 5 0.05040526849037487, 0 0.04922323539344815, 1 0.04804120229652144, 2 0.04685916919959473, 6 0.03917595406957109","sort members.[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
4816,4816,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4817,4817,"3 0.15312791783380017, 6 0.1465919701213819, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",format.
4818,4818,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4819,4819,"5 0.27275132275132274, 6 0.13015873015873014, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4820,4820,"2 0.22874149659863938, 4 0.13350340136054423, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
4821,4821,"5 0.28015873015873005, 1 0.12275132275132275, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4822,4822,"6 0.21693121693121686, 3 0.15455304928989133, 4 0.1272626009468115, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
4823,4823,"0 0.17687074829931973, 3 0.15394305870496344, 2 0.15041572184429325, 4 0.14512471655328796, 6 0.14159737969261776, 1 0.11866969009826156, 5 0.11337868480725626", - fix findbugs warnings in durationformatutilsuse final consistently. use enhanced for loop failing tests with java 8 b128 durationformatutils does not handle large durations correctly
4824,4824,"0 0.2193362193362193, 3 0.19576719576719573, 6 0.12506012506012504, 4 0.1216931216931217, 5 0.11832611832611832, 2 0.11159211159211159, 1 0.10822510822510822",a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables.review and cleanup javadoc in constructorutilsmove/comment suppresswarnings(unchecked)/refactor surrounding codegenerics
4825,4825,"3 0.25665859564164645, 2 0.13048157115953724, 1 0.12859833198816248, 0 0.12106537530266342, 4 0.12106537530266342, 5 0.12106537530266342, 6 0.12106537530266342",statements unnecessarily nested within else clause.add final modifier to local variables.
4826,4826,"6 0.2887172887172887, 5 0.21364221364221364, 0 0.10253110253110254, 1 0.10102960102960104, 4 0.10102960102960104, 2 0.09652509652509654, 3 0.09652509652509654"," fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses . fastdateparser does not handle non-gregorian calendars properly applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
4827,4827,"3 0.20259740259740258, 2 0.144011544011544, 1 0.1339105339105339, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4828,4828,"2 0.1642135642135642, 4 0.16219336219336214, 3 0.146031746031746, 0 0.13391053391053392, 1 0.13391053391053392, 5 0.12987012987012989, 6 0.12987012987012989",add methods for inspecting array types
4829,4829,"5 0.282010582010582, 1 0.1208994708994709, 6 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4830,4830,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4831,4831,"3 0.19047619047619044, 0 0.1635944700460829, 5 0.1474654377880184, 2 0.14208909370199693, 1 0.12058371735791093, 4 0.12058371735791093, 6 0.11520737327188942",replaced private integer constants with private static enum.add final modifier to local variables.
4832,4832,"5 0.2773998488284202, 6 0.15217939027462835, 1 0.11690602166792645, 0 0.11337868480725626, 2 0.11337868480725626, 3 0.11337868480725626, 4 0.11337868480725626", fastdateparser and fastdateprinter support x formatapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4833,4833,"0 0.19137466307277626, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064, 6 0.13477088948787064",convert to java 5 enhanced loops. 
4834,4834,"2 0.1904761904761904, 1 0.13997113997114, 3 0.13795093795093796, 0 0.13593073593073596, 4 0.13593073593073596, 5 0.12987012987012986, 6 0.12987012987012986",added escape/unescapejson methods per maurizio cucchiaras patch in 797
4835,4835,"5 0.38436809322885274, 3 0.13261000602772752, 2 0.1115129596142254, 4 0.09604179224432388, 6 0.09463532248342375, 0 0.09041591320072334, 1 0.09041591320072334", simplify fastdateformat; eliminate boxingadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4836,4836,"6 0.3187473187473187, 3 0.16108966108966105, 4 0.113041613041613, 2 0.10553410553410554, 0 0.10253110253110254, 1 0.10253110253110254, 5 0.09652509652509654","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
4837,4837,"2 0.19327731092436976, 4 0.16386554621848737, 3 0.14915966386554622, 5 0.1311858076563959, 6 0.12464985994397758, 0 0.12138188608776843, 1 0.11647992530345473",format source codeuse final modifier where possiblecorrect indentation: add the jaro-winkler string distance algorithm to stringutils - partially applying the patch by rekha joshi as submitted for further refinement
4838,4838,"0 0.21498189919242544, 4 0.13505987190197713, 2 0.13311055416318573, 3 0.13311055416318573, 5 0.1311612364243943, 1 0.1272626009468115, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
4839,4839,"3 0.20663780663780662, 2 0.13997113997113997, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4840,4840,"5 0.28869047619047616, 6 0.12896825396825393, 2 0.12375992063492061, 1 0.1168154761904762, 0 0.11507936507936509, 4 0.11507936507936509, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4841,4841,"5 0.15312791783380017, 1 0.1465919701213819, 0 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 6 0.1400560224089636",: there should be a differencebuilder with a reflectiondifferencebuilder implementation
4842,4842,"1 0.7153907976692785, 3 0.049427365883062076, 5 0.04872413100261202, 2 0.04802089612216195, 0 0.046614426361261806, 4 0.046614426361261806, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4843,4843,"3 0.39465101108936723, 1 0.10393563818221353, 2 0.10241356816699283, 4 0.10241356816699283, 6 0.10089149815177213, 0 0.09784735812133073, 5 0.09784735812133073","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4844,4844,"6 0.2748015873015873, 2 0.1393849206349206, 4 0.12375992063492063, 0 0.11855158730158731, 1 0.11681547619047623, 3 0.1150793650793651, 5 0.11160714285714289",make sure lines in files dont have trailing white spaces and remove all trailing white spaces[][github issue ] add randomutilsnextboolean() method..
4845,4845,"0 0.2225957049486461, 4 0.19514472455648926, 3 0.17161531279178338, 2 0.12324929971988793, 6 0.11932773109243695, 1 0.08403361344537817, 5 0.08403361344537817",further optimization of :- avoid tostring of the replacement sequence by doing it once.- avoid calculating the maximum when not needed.- fixup comment for greedy algorithmthanks to fabian lange.: possible performance improvement on string escape functions. thanks to fabian lange and thomas neidhart.allow lookuptranslator to support charsequence properly; previously it was working only for charsequences that implemented hashcode and equals(object). 882add final modifier to local variables.ws
4846,4846,"4 0.7073134549770064, 3 0.05933837709538643, 6 0.05414626909954012, 0 0.05103100430203233, 2 0.045319685506601384, 5 0.04272363150867823, 1 0.04012757751075507","sort members.use final.use foreach loop for arrays ()since the project no longer supports java versions older than 6, itssafe to use the enhanced for loop syntax introduced in java 5.this patch employs this syntax where possible to clean up the code.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)tab police (and trailing spaces)use index_not_found instead of magic number.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
4847,4847,"3 0.2380952380952381, 2 0.2073260073260073, 1 0.11501831501831504, 0 0.1098901098901099, 4 0.1098901098901099, 5 0.1098901098901099, 6 0.1098901098901099",fixing crlfsstatement unnecessarily nested within else clause.statement unnecessarily nested within else clause. - add issorted() to arrayutils. patch supplied by james sawle. in github.
4848,4848,"2 0.24958949096880131, 3 0.12889983579638753, 6 0.12889983579638753, 0 0.12315270935960593, 1 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
4849,4849,"3 0.2046176046176046, 2 0.14401154401154398, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4850,4850,"0 0.1869787463007802, 4 0.15684691955878396, 5 0.13801452784503632, 1 0.1342480495022868, 2 0.1342480495022868, 3 0.1285983319881625, 6 0.12106537530266348","sort methods.applying sebbs patch from - adding isstarted, issuspended and isstopped to stopwatch"
4851,4851,"3 0.34356261022927687, 6 0.2349206349206349, 5 0.09541446208112872, 2 0.08430335097001763, 1 0.0818342151675485, 4 0.08059964726631394, 0 0.07936507936507936","lvar should not hide ivar.add final modifier to local variables.format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4852,4852,"5 0.29042658730158727, 6 0.12723214285714282, 2 0.12202380952380955, 1 0.11855158730158732, 4 0.11681547619047622, 0 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
4853,4853,"5 0.28103044496487123, 0 0.12438199323445225, 1 0.12073900598490765, 4 0.12073900598490765, 6 0.11891751236013534, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4854,4854,"5 0.2901379130887327, 4 0.12438199323445222, 0 0.11709601873536299, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4855,4855,"5 0.2737444704657819, 6 0.13166796773354147, 0 0.12256049960967993, 1 0.12073900598490762, 2 0.11709601873536299, 3 0.11709601873536299, 4 0.11709601873536299",4fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4856,4856,"3 0.22278911564625847, 2 0.13747165532879818, 1 0.12953514739229025, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
4857,4857,"2 0.23270975056689333, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
4858,4858,"6 0.33380018674136325, 5 0.13608776844070958, 0 0.10994397759103641, 1 0.1050420168067227, 2 0.1050420168067227, 3 0.1050420168067227, 4 0.1050420168067227",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)fastdateformat apis that use a stringbuilder
4859,4859,"4 0.7158899020601149, 5 0.05749746707193515, 2 0.05395136778115501, 0 0.04567713610266801, 1 0.04567713610266801, 3 0.04272205336035124, 6 0.03858493752110774",": add normalizespace to stringutilschange stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence().applying srihari reddys patch from , based on dave meikles original patch. this adds a truncatemiddle method to stringutils. "
4860,4860,"5 0.26719576719576715, 6 0.13201058201058202, 1 0.12460317460317458, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4861,4861,"3 0.2046176046176046, 2 0.14401154401154398, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4862,4862,"6 0.17548500881834211, 5 0.14873603762492646, 0 0.1425631981187537, 4 0.13639035861258086, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323",4fastdateformat apis that use a stringbuilderrefactor some duplicate code.
4863,4863,"0 0.17715419501133783, 4 0.15731292517006798, 2 0.13945578231292516, 1 0.1374716553287982, 3 0.13350340136054423, 5 0.12755102040816327, 6 0.12755102040816327","add hashcode and tostring methods to annotationutils, plus tests"
4864,4864,"2 0.31192881192881194, 4 0.12506012506012507, 0 0.12169312169312169, 6 0.11495911495911497, 1 0.10990860990860993, 3 0.10822510822510824, 5 0.10822510822510824",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
4865,4865,"5 0.2783068783068782, 1 0.12275132275132275, 6 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4866,4866,"6 0.22660098522167485, 0 0.13847837985769018, 2 0.1346469622331691, 3 0.126984126984127, 1 0.12506841817186645, 4 0.12506841817186645, 5 0.12315270935960593","added missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
4867,4867,"0 0.22874149659863938, 4 0.13151927437641722, 1 0.12953514739229025, 2 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",[] provide typeliteral class similar to javax.enterprise.util.typeliteral
4868,4868,"5 0.2901379130887327, 6 0.12073900598490764, 0 0.11891751236013533, 4 0.11891751236013533, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4869,4869,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4870,4870,"2 0.25623582766439906, 3 0.17157974300831438, 6 0.11690602166792644, 1 0.11514235323759134, 0 0.11337868480725623, 4 0.11337868480725623, 5 0.11337868480725623",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.
4871,4871,"5 0.282010582010582, 6 0.12275132275132276, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4872,4872,"3 0.19855699855699852, 2 0.14603174603174607, 1 0.13593073593073593, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4873,4873,"5 0.291959406713505, 4 0.12073900598490762, 0 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4874,4874,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
4875,4875,"6 0.3978428978428979, 2 0.10724460724460723, 4 0.1058201058201058, 3 0.10439560439560437, 0 0.10154660154660154, 1 0.0915750915750916, 5 0.0915750915750916","[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .utc and gmt are the same, so simplify.refactor ""gmt"" magic string.make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
4876,4876,"2 0.3130158730158731, 0 0.17375661375661375, 4 0.12783068783068782, 1 0.09820105820105822, 5 0.09671957671957675, 3 0.09523809523809526, 6 0.09523809523809526","[] serializationutils throws classnotfoundexception when cloning primitive classesapplying sven ludwigs patch from . this modifies the serializationutils.clone method to use the threadcontextloader if it is unable to find a class using the objects current classloader. this should (hopefully) help with weblogic and tomcat situations where lang is outside the web-inf for some reason (likely user error with tomcat, by design for weblogic)"
4877,4877,"5 0.27089947089947086, 6 0.1283068783068783, 1 0.12460317460317459, 0 0.11904761904761907, 2 0.11904761904761907, 3 0.11904761904761907, 4 0.11904761904761907",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4878,4878,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4879,4879,"6 0.3288320303245676, 3 0.12651030561478321, 4 0.11324330727315804, 0 0.11158493248045487, 1 0.10660980810234542, 2 0.10660980810234542, 5 0.10660980810234542","replace tabs with spaces fastdateparser and fastdateprinter support x format fastdateparser does not handle excess hours as per simpledateformatdocsadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
4880,4880,"3 0.22660098522167488, 6 0.1403940886699507, 1 0.13273125342090863, 0 0.13081554460864808, 2 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","tab alignment[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
4881,4881,"2 0.3209109730848861, 3 0.12606395215090868, 1 0.11640211640211638, 4 0.11318150448585232, 5 0.1131815044858523, 6 0.10674028065332414, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4882,4882,"2 0.18783068783068776, 0 0.1384479717813051, 4 0.1384479717813051, 5 0.1384479717813051, 1 0.1322751322751323, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
4883,4883,"6 0.1692176870748299, 0 0.16326530612244897, 4 0.1374716553287982, 5 0.13747165532879818, 1 0.13548752834467123, 2 0.12953514739229027, 3 0.1275510204081633",: durationformatutilsformatdurationhms implementation does not correspond to javadoc and vice versa. thanks to michael osipov
4884,4884,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4885,4885,"5 0.2586630896490052, 0 0.15537670467247933, 6 0.13503241672255756, 3 0.1256427453610552, 1 0.11625307399955286, 4 0.10842834786496759, 2 0.10060362173038231",4fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone setapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4886,4886,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",validation[] new type util features
4887,4887,"3 0.3324104835732743, 2 0.19029162052417867, 6 0.11018826135105203, 4 0.10372831303063859, 0 0.09468438538205977, 1 0.08564045773348099, 5 0.08305647840531563","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.dont need a copy of this field.add final modifier to local variables.remove redundant type arguments.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4888,4888,"5 0.2755659640905542, 6 0.13895394223263072, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4889,4889,"2 0.21924603174603172, 0 0.16716269841269837, 4 0.14285714285714282, 6 0.13244047619047616, 1 0.11334325396825398, 5 0.11334325396825398, 3 0.11160714285714288",removes unnecessary class reference of static method calls which are declared in the same classcrlf -> lfjavadoc: fix typo but working is still awkward.
4890,4890,"1 0.6746965452847806, 3 0.06554621848739495, 2 0.05966386554621848, 4 0.058356676003734814, 0 0.05508870214752567, 5 0.0446311858076564, 6 0.042016806722689086",[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4891,4891,"3 0.3570244018005211, 2 0.10992655768775171, 0 0.10660980810234541, 1 0.10660980810234541, 4 0.10660980810234541, 5 0.10660980810234541, 6 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4892,4892,"6 0.15659340659340654, 3 0.14804639804639805, 2 0.14377289377289376, 1 0.1394993894993895, 0 0.13736263736263735, 4 0.13736263736263735, 5 0.13736263736263735",add stringmatchertostring(); useful from a debugger.
4893,4893,"5 0.2883164194639604, 0 0.12438199323445226, 4 0.11891751236013533, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4894,4894,"5 0.2727513227513227, 6 0.12830687830687826, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4895,4895,"2 0.27025355596784173, 4 0.14471243042671614, 6 0.1374974232117089, 0 0.12883941455370027, 3 0.10719439290867862, 1 0.10575139146567718, 5 0.10575139146567718",": support os x versions in systemutils. this also fixes from github. thanks to timo kockert.: make logic for comparing os versions in systemutils smarter- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
4896,4896,"3 0.3142857142857143, 5 0.2240079365079365, 2 0.09484126984126984, 0 0.09345238095238097, 6 0.09206349206349207, 1 0.09067460317460319, 4 0.09067460317460319","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezonesrestore binary compartibilitytrailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
4897,4897,"1 0.7139843279083785, 2 0.051537070524412296, 5 0.048724131002612026, 4 0.048020896122161955, 3 0.047317661241711884, 0 0.04520795660036168, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4898,4898,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
4899,4899,"3 0.15873015873015867, 2 0.14804639804639805, 1 0.14163614163614163, 0 0.1394993894993895, 4 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",: add truncatedequals and truncatedcompareto
4900,4900,"2 0.18886198547215494, 3 0.1850955071294054, 0 0.12859833198816248, 1 0.12671509281678775, 4 0.12483185364541298, 5 0.12483185364541298, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
4901,4901,"3 0.15079365079365076, 4 0.15079365079365076, 6 0.15079365079365076, 1 0.14462081128747792, 5 0.1384479717813051, 0 0.1322751322751323, 2 0.1322751322751323",use validateistrue to validate arguments: there should be a differencebuilder with a reflectiondifferencebuilder implementation
4902,4902,"6 0.2928297755883963, 5 0.20853858784893267, 3 0.14085020981572705, 1 0.09615033752964784, 2 0.09104178069695314, 0 0.08848750228060574, 4 0.0821018062397373",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.[] fastdateformat generates date objects wastefully.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4903,4903,"2 0.23072562358276635, 4 0.13151927437641722, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
4904,4904,"5 0.2727513227513227, 6 0.12645502645502643, 1 0.12460317460317459, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4905,4905,"6 0.2783068783068782, 2 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
4906,4906,"0 0.17870826491516145, 3 0.14422550629447178, 1 0.14230979748221123, 4 0.14230979748221123, 2 0.1384783798576902, 5 0.13081554460864808, 6 0.12315270935960594","use final.: adds methodutilsfindannotation and extend methodutilsgetmethodswithannotation for non-public, super-class and interface methods ()"
4907,4907,"6 0.21498189919242547, 3 0.1526037315510999, 4 0.1311612364243943, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
4908,4908,"5 0.27275132275132274, 6 0.1301587301587301, 1 0.12089947089947092, 0 0.11904761904761907, 2 0.11904761904761907, 3 0.11904761904761907, 4 0.11904761904761907",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4909,4909,"1 0.7146875627888284, 2 0.05435001004621256, 5 0.048020896122161934, 3 0.046614426361261806, 4 0.045911191480811735, 0 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4910,4910,"4 0.16623376623376623, 0 0.1642135642135642, 2 0.146031746031746, 1 0.13189033189033192, 5 0.13189033189033192, 3 0.1298701298701299, 6 0.1298701298701299",typeutils wildcard fixes[] new type util features
4911,4911,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",fixing crlfsstatement unnecessarily nested within else clause.
4912,4912,"6 0.42800955190335727, 5 0.15858968956314087, 3 0.13007444865851944, 4 0.08189352437140045, 2 0.07107739851102682, 0 0.06517769349627757, 1 0.06517769349627757","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove redundant type arguments.: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y) partial: implement format u for fastdateformat, day number of weekzz format not displaying z for utc with openjdk 6replace tabs with spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
4913,4913,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4914,4914,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4915,4915,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
4916,4916,"6 0.24489795918367346, 3 0.15442176870748295, 2 0.1496598639455782, 4 0.14489795918367343, 0 0.10204081632653063, 1 0.10204081632653063, 5 0.10204081632653063",replaces size() == 0 and length() == 0 with isempty()make sure lines in files dont have trailing white spaces and remove all trailing white spacesfix various javadoc typos ()reuseadd final modifier to method parameters.
4917,4917,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4918,4918,"4 0.6976532239690135, 0 0.0836181362497152, 1 0.04906204906204905, 5 0.04480899217741322, 6 0.04374572795625426, 2 0.04268246373509531, 3 0.03842940685045948","moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classjavadoc; move @since; add documented constructorsvn ps svn:eol-style nativesrc/main/java/org/apache/commons/lang3/charsequenceutils.javasvn ps svn:eol-style nativesrc/test/java/org/apache/commons/lang3/charsequenceutilstest.javatab police (and trailing spaces)fix defaultisempty typing.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
4919,4919,"5 0.2727513227513227, 6 0.12830687830687826, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4920,4920,"6 0.326984126984127, 5 0.12356532356532358, 0 0.1098901098901099, 1 0.1098901098901099, 2 0.1098901098901099, 3 0.1098901098901099, 4 0.1098901098901099",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
4921,4921,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4922,4922,"2 0.23313492063492067, 0 0.1810515873015873, 4 0.12896825396825395, 3 0.11855158730158734, 1 0.1150793650793651, 5 0.11160714285714289, 6 0.11160714285714289",[] add methods to classutils to get various forms of classnames in a null-safe manner[] add methods to classutils to get various forms of classnames in a null-safe manner
4923,4923,"3 0.18886198547215494, 2 0.1850955071294054, 0 0.1285983319881625, 4 0.12671509281678775, 1 0.12483185364541298, 5 0.12483185364541298, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
4924,4924,"4 0.17487684729064037, 0 0.15763546798029557, 6 0.1499726327312534, 3 0.14805692391899286, 1 0.12315270935960596, 2 0.12315270935960596, 5 0.12315270935960596",remove redundant type arguments.refactor range with lots of new methods
4925,4925,"6 0.2911502500543596, 2 0.19525983909545555, 5 0.11611219830397912, 3 0.10241356816699282, 1 0.09936942813655145, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
4926,4926,"4 0.22862712336396543, 2 0.13505987190197716, 3 0.13116123642439428, 0 0.1272626009468115, 1 0.1272626009468115, 5 0.12531328320802007, 6 0.12531328320802007","sort members.: add stringutils.rotate(string, int)"
4927,4927,"0 0.4853479853479853, 4 0.1477411477411477, 2 0.07936507936507932, 5 0.07509157509157506, 6 0.074023199023199, 1 0.06974969474969474, 3 0.06868131868131867","use internal javas number caches instead creating new objects:- use more efficient integer cache: use ""integer.valueof(int)"" instead of ""new integer(int)"".- use more efficient long cache: use ""long.valueof(int)"" instead of ""new long(long)"".- use more efficient short cache: use ""short.valueof(int)"" instead of ""new short(short)"".in java version 1.6.0_24 (vendor: sun microsystems inc.), float and double do not implement caches, but ive made the same changes for consistency and future proofing.- use ""double.valueof(int)"" instead of ""new double(double)"".- use ""float.valueof(int)"" instead of ""new float(float)""."
4928,4928,"4 0.3354037267080745, 0 0.12606395215090868, 6 0.11479181044398437, 1 0.10835058661145619, 2 0.10835058661145619, 3 0.10351966873706005, 5 0.10351966873706005","sort members.rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
4929,4929,"3 0.19786535303776678, 0 0.17487684729064035, 2 0.1346469622331691, 1 0.12315270935960593, 4 0.12315270935960593, 5 0.12315270935960593, 6 0.12315270935960593",add final modifier to local variables.convert to java 5 enhanced loops. 
4930,4930,"4 0.1608669108669108, 3 0.14804639804639802, 0 0.14163614163614163, 1 0.13736263736263735, 2 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
4931,4931,"2 0.31192881192881183, 4 0.13011063011063007, 0 0.12337662337662335, 1 0.10990860990860991, 3 0.10822510822510821, 5 0.10822510822510821, 6 0.10822510822510821",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
4932,4932,"5 0.2864949258391881, 4 0.12620348685922456, 1 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4933,4933,"5 0.268279989591465, 6 0.1353109549830861, 0 0.12802498048399688, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",4fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4934,4934,"2 0.23313492063492064, 0 0.1550099206349206, 6 0.13244047619047616, 3 0.13070436507936506, 1 0.12375992063492065, 4 0.11334325396825398, 5 0.11160714285714288","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
4935,4935,"5 0.28285193858964347, 4 0.12802498048399688, 0 0.11891751236013533, 1 0.11891751236013533, 2 0.117096018735363, 3 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4936,4936,"6 0.3235653235653236, 5 0.12698412698412698, 0 0.1098901098901099, 1 0.1098901098901099, 2 0.1098901098901099, 3 0.1098901098901099, 4 0.1098901098901099",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
4937,4937,"1 0.690719641639887, 3 0.06972441328269549, 2 0.05881780114908948, 5 0.0479111890154835, 0 0.04450287272373163, 4 0.04450287272373163, 6 0.043821209465381254",add final modifier to local variables.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4938,4938,"2 0.25423280423280425, 1 0.12645502645502646, 3 0.12645502645502646, 0 0.1246031746031746, 5 0.1246031746031746, 4 0.12460317460317458, 6 0.11904761904761905","dont need internal ivar name for a boolean to carry a ""flag"" postfix.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
4939,4939,"3 0.23467643467643468, 2 0.21587301587301583, 0 0.10989010989010989, 1 0.10989010989010989, 4 0.10989010989010989, 5 0.10989010989010989, 6 0.10989010989010989",fixing crlfsstatement unnecessarily nested within else clause.statement unnecessarily nested within else clause. - add issorted() to arrayutils. patch supplied by james sawle. in github.
4940,4940,"4 0.20204081632653062, 3 0.18775510204081633, 1 0.13219954648526078, 0 0.1306122448979592, 6 0.12426303854875283, 2 0.12108843537414968, 5 0.10204081632653064",sort by method name.[] exceptionutils.getthrowablelist() is using deprecatedexceptionutils.getcause()[github] commons-lang pull request : intellij idea refactorings..remove redundant type arguments.add final modifier to local variables.
4941,4941,"5 0.23762141672589435, 6 0.2077706704572376, 0 0.11656005685856435, 2 0.11490168206586117, 1 0.10992655768775174, 3 0.10660980810234544, 4 0.10660980810234544",trailing spaces fastdateparser does not handle non-gregorian calendars properly unnecessary ;applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4942,4942,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",use stringisempty() instead of stringlength() == 0
4943,4943,"5 0.291959406713505, 0 0.11891751236013531, 4 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4944,4944,"4 0.436407474382158, 0 0.10166767128792444, 1 0.09744826200522404, 6 0.09322885272252361, 2 0.09041591320072334, 3 0.09041591320072334, 5 0.09041591320072334","sort members.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classreplacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving indexof(string, string) and indexof(string, string, int) over to charsequence. 687"
4945,4945,"5 0.291959406713505, 4 0.12256049960967992, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4946,4946,"5 0.25866308964900514, 0 0.1553767046724793, 6 0.1334674714956405, 3 0.12720769058797224, 1 0.11468812877263583, 4 0.10999329309188463, 2 0.10060362173038231",4fastdateformat apis that use a stringbuilder: dateformatutils.format does not correctly change calendar timezone in certain situations: unit test fastdateprintertimezonestest needs a timezone setapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4947,4947,"5 0.2783068783068782, 1 0.12275132275132275, 6 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4948,4948,"6 0.27965747702589805, 2 0.18755221386800336, 3 0.12322472848788636, 0 0.10421888053467, 5 0.10275689223057646, 4 0.1012949039264829, 1 0.10129490392648287",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure lines in files dont have trailing white spaces and remove all trailing white spacesuse final consistently. make use of existing timeunit class to manage time units.
4949,4949,"5 0.2901379130887327, 4 0.12073900598490762, 0 0.11891751236013531, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4950,4950,"5 0.2901379130887327, 4 0.12073900598490762, 0 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4951,4951,"2 0.2908346134152585, 6 0.12775217613927287, 1 0.1205837173579109, 0 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure placement of curly braces is consistent
4952,4952,"2 0.15659340659340656, 3 0.15659340659340656, 0 0.13736263736263737, 1 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",if statement can be simplified
4953,4953,"2 0.19047619047619047, 5 0.146031746031746, 3 0.13795093795093796, 1 0.13593073593073599, 0 0.12987012987012989, 4 0.12987012987012989, 6 0.12987012987012989",: add noclassnametostringstyle implementation of tostringstyle. this from github. thanks to innokenty shuvalov.
4954,4954,"0 0.21888053467000831, 2 0.13700918964076858, 4 0.1311612364243943, 1 0.1292119186856029, 3 0.1292119186856029, 5 0.1292119186856029, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
4955,4955,"4 0.1715506715506715, 2 0.14163614163614166, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",sort methods.
4956,4956,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4957,4957,"5 0.23316173316173314, 2 0.21214071214071212, 3 0.14757614757614754, 4 0.10403260403260405, 1 0.10403260403260402, 6 0.10102960102960104, 0 0.09802659802659804",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4958,4958,"5 0.2901379130887327, 4 0.12073900598490762, 1 0.11891751236013531, 6 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
4959,4959,"3 0.20865800865800863, 2 0.13593073593073596, 1 0.13593073593073593, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4960,4960,"4 0.41733547351524886, 2 0.13893347601212766, 1 0.09648653468878185, 0 0.09398965578740856, 3 0.09274121633672193, 5 0.08025682182985554, 6 0.08025682182985554","merge branch fix-: add compare methods in stringutilsthis from github. add null safe compare methods in stringutils : - stringutils.compare(string str1, string str2); - stringutils.compare(string str1, string str2, boolean nullisless); - stringutils.compareignorecase(string str1, string str2); - stringutils.compareignorecase(string str1, string str2, boolean nullisless);"
4961,4961,"0 0.20302099334357396, 3 0.18151561699948793, 2 0.1492575524833589, 4 0.12058371735791092, 1 0.1152073732718894, 5 0.1152073732718894, 6 0.1152073732718894",boolean comparisons in charrange ()cleaned up comparisons to false to just use the boolean negationoperator (!).add final modifier to local variables.
4962,4962,"5 0.2783068783068783, 6 0.12460317460317458, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4963,4963,"5 0.27645502645502645, 1 0.1246031746031746, 6 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4964,4964,"0 0.1832122679580307, 4 0.15119720204465967, 2 0.1493139628732849, 5 0.13801452784503632, 1 0.1304815711595373, 3 0.12671509281678775, 6 0.12106537530266348","sort methods.applying sebbs patch from - adding isstarted, issuspended and isstopped to stopwatch"
4965,4965,"4 0.2542328042328042, 2 0.15052910052910046, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 5 0.11904761904761904, 6 0.11904761904761904",: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
4966,4966,"3 0.24423963133640553, 2 0.14567332309267791, 0 0.1331285202252944, 4 0.1277521761392729, 1 0.11879160266257043, 5 0.11520737327188942, 6 0.11520737327188942",add final modifier to local variables.add final modifier to method parameters.[] vastly expanded typeutils
4967,4967,"4 0.20362103174603174, 0 0.17237103174603174, 6 0.1515376984126984, 2 0.12028769841269844, 1 0.12028769841269843, 3 0.11855158730158731, 5 0.113343253968254",remove redundant type arguments.: provide methods to retrieve all fields/methods annotated with a specific type. thanks to alexander müller.
4968,4968,"1 0.7182037371910788, 2 0.04942736588306209, 4 0.048724131002612005, 3 0.04731766124171188, 5 0.045911191480811735, 0 0.045207956600361664, 6 0.045207956600361664",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4969,4969,"4 0.20701989716074223, 0 0.20389000670690813, 6 0.13659736194947458, 1 0.13503241672255753, 2 0.1084283478649676, 3 0.1084283478649676, 5 0.10060362173038231",": adds methodutilsfindannotation and extend methodutilsgetmethodswithannotation for non-public, super-class and interface methods ()remove redundant type arguments.: provide methods to retrieve all fields/methods annotated with a specific type. thanks to alexander müller."
4970,4970,"0 0.243616287094548, 6 0.14699792960662525, 5 0.1308948700253048, 1 0.12445364619277664, 4 0.12123303427651252, 3 0.11801242236024843, 2 0.11479181044398437",: implementation of a memomizer ()changes suggested in https://github.com/apache/commons-lang/pull/80:- tabs to spaces- use @override- remove unused variables- other minimal clean-ups: implementation of a memomizer ()
4971,4971,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4972,4972,"3 0.35204927742241166, 6 0.10992655768775171, 1 0.10826818289504857, 2 0.10826818289504857, 4 0.10826818289504857, 0 0.10660980810234541, 5 0.10660980810234541","refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
4973,4973,"3 0.22477324263038545, 2 0.1335034013605442, 1 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
4974,4974,"5 0.2664584959666927, 6 0.14441842310694764, 1 0.12073900598490764, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363", and trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4975,4975,"2 0.25150519978106184, 3 0.126984126984127, 6 0.126984126984127, 1 0.12506841817186645, 0 0.12315270935960591, 4 0.12315270935960591, 5 0.12315270935960591",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.
4976,4976,"5 0.2824582824582825, 0 0.21693121693121692, 6 0.13003663003663, 1 0.09584859584859584, 2 0.09157509157509158, 3 0.09157509157509158, 4 0.09157509157509158",dont save short eras if they are the same as the long eras fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()getinstance() (java 1.6) supports more localesexplicit conversion to integer; save the value for use latergetinstance(locale) is java 1.6+applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4977,4977,"5 0.26202686202686204, 2 0.14407814407814404, 3 0.12869352869352865, 6 0.12014652014652015, 4 0.11843711843711846, 1 0.11672771672771676, 0 0.1098901098901099",dont mutate parametersadd final modifier to method parameters.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4978,4978,"2 0.21403769841269843, 5 0.14112103174603177, 0 0.1393849206349206, 3 0.1324404761904762, 4 0.1307043650793651, 6 0.12723214285714285, 1 0.11507936507936511", - jsontostringstyle does not escape string namesjsontostringstyle: improve private constant name and remove wrong comment: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
4979,4979,"4 0.178796046720575, 6 0.14106019766397127, 2 0.13896376160527107, 0 0.13686732554657086, 1 0.1347708894878706, 3 0.1347708894878706, 5 0.1347708894878706",use index_not_found instead of magic number.
4980,4980,"6 0.3201465201465202, 5 0.13040293040293038, 0 0.1098901098901099, 1 0.1098901098901099, 2 0.1098901098901099, 3 0.1098901098901099, 4 0.1098901098901099",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
4981,4981,"4 0.26719576719576715, 6 0.13571428571428568, 0 0.12089947089947091, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 5 0.11904761904761905",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
4982,4982,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4983,4983,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
4984,4984,"3 0.21498189919242544, 0 0.1428571428571428, 2 0.13700918964076858, 1 0.1292119186856029, 4 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",add final modifier to local variables.[] vastly expanded typeutils
4985,4985,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4986,4986,"2 0.20935960591133002, 6 0.15763546798029554, 1 0.1403940886699507, 0 0.12315270935960594, 3 0.12315270935960594, 4 0.12315270935960594, 5 0.12315270935960594","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws"
4987,4987,"4 0.7364914877868247, 5 0.051977958713710005, 0 0.045069495846697914, 1 0.04449379060778024, 6 0.04219096965210954, 2 0.040463853935356536, 3 0.039312443457521176","sort members.[github] commons-lang pull request : intellij idea refactorings..remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
4988,4988,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4989,4989,"0 0.16623376623376623, 4 0.16623376623376623, 2 0.144011544011544, 1 0.13391053391053395, 3 0.1298701298701299, 5 0.1298701298701299, 6 0.1298701298701299",typeutils wildcard fixes[] new type util features
4990,4990,"1 0.6773109243697479, 2 0.06293183940242762, 3 0.06162464985994397, 4 0.05639589169000933, 0 0.05443510737628384, 5 0.04528478057889824, 6 0.042016806722689086",[github] commons-lang pull request : intellij idea refactorings..add final modifier to local variables.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
4991,4991,"5 0.26031746031746034, 3 0.1697191697191697, 2 0.12356532356532356, 1 0.11501831501831504, 6 0.11159951159951162, 0 0.1098901098901099, 4 0.1098901098901099",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4992,4992,"3 0.20259740259740258, 2 0.14401154401154395, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
4993,4993,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
4994,4994,"5 0.27563618039808513, 6 0.1557067271352985, 1 0.11514235323759134, 0 0.11337868480725624, 2 0.11337868480725624, 3 0.11337868480725624, 4 0.11337868480725624", fastdateparser and fastdateprinter support x formatapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4995,4995,"2 0.18707482993197277, 0 0.1454081632653061, 3 0.1434240362811791, 4 0.13945578231292516, 6 0.12953514739229027, 1 0.1275510204081633, 5 0.1275510204081633",: strsubstitutor.replacesystemproperties does not work consistently. this fixes from github. thanks to jonathan baker.
4996,4996,"2 0.22528208070376748, 6 0.21323388793268314, 0 0.14094473130617707, 4 0.13558997896347294, 5 0.10747752916427614, 1 0.09007458405048767, 3 0.08739720787913562",make sure lines in files dont have trailing white spaces and remove all trailing white spacesavoid endless loop printing array with multilinerecursivetostringstyleprevious implementation was causing an endless loop by callingsuper.appenddetail rather than super.reflectionappendarraydetailwhen it encountered an array type.fixes: multilinerecursivetostringstyle: made private field indent static: multiline recursive to string style. this fixes from github. thanks to jan matèrne.
4997,4997,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
4998,4998,"3 0.1531279178338002, 6 0.14659197012138186, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636",format.
4999,4999,"2 0.20057720057720052, 1 0.13593073593073596, 4 0.13593073593073596, 0 0.1339105339105339, 3 0.1339105339105339, 5 0.12987012987012986, 6 0.12987012987012986",added escape/unescapejson methods per maurizio cucchiaras patch in 797
5000,5000,"4 0.33540372670807456, 0 0.12284334023464456, 6 0.11801242236024845, 1 0.10996089256958824, 2 0.10674028065332414, 3 0.10351966873706006, 5 0.10351966873706006","sort members.rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
5001,5001,"6 0.2996336996336997, 0 0.12356532356532356, 5 0.12356532356532356, 2 0.11843711843711843, 4 0.11501831501831504, 1 0.1098901098901099, 3 0.1098901098901099",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
5002,5002,"3 0.21673881673881668, 2 0.1339105339105339, 0 0.12987012987012986, 1 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",reuseadd final modifier to local variables.
5003,5003,"3 0.20259740259740255, 2 0.146031746031746, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
5004,5004,"1 0.7167972674301788, 2 0.048724131002612026, 4 0.048020896122161955, 3 0.047317661241711884, 5 0.047317661241711884, 0 0.04661442636126182, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
5005,5005,"2 0.22098214285714288, 0 0.1376488095238095, 5 0.1359126984126984, 3 0.1307043650793651, 4 0.12723214285714285, 6 0.12723214285714285, 1 0.12028769841269846", - jsontostringstyle does not escape string namesjsontostringstyle: improve private constant name and remove wrong comment: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
5006,5006,"4 0.2172781680978402, 0 0.15534738485558156, 2 0.1425969294821754, 3 0.13166796773354147, 1 0.11891751236013534, 5 0.117096018735363, 6 0.117096018735363",: add zero copy write method to strbuilder; : add zero copy read method to strbuilder. thanks to mikhail mazursky.
5007,5007,"0 0.23615520282186947, 6 0.2126984126984127, 2 0.12874779541446205, 4 0.12504409171075834, 3 0.1188712522045855, 5 0.09417989417989416, 1 0.08430335097001763","make sure lines in files dont have trailing white spaces and remove all trailing white spaces: enhance methodutils to allow invocation of private methods ()a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables.[] methodutils.invoke*(*, object... args) variants cannot handle null valuesmoving most of the methods over to varargs. a couple cant change because they are object[], class[] with both end parameters ideally wanting to be vararg. 396"
5008,5008,"4 0.4575807334428024, 0 0.12424740010946904, 1 0.08593322386425835, 2 0.08465608465608467, 6 0.08337894544791097, 3 0.08210180623973727, 5 0.08210180623973727","sort members.moving the charsequence specific methods out of stringutils and reintroducing the charsequenceutils classreplacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687moving indexof(string, int) and indexof(string, int, int) over to charsequence. . this, plus the same happening for the string, string, int variant will open up a lot of methods. "
5009,5009,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
5010,5010,"0 0.2811194653299917, 2 0.14076858813700918, 3 0.14076858813700918, 4 0.1276106934001671, 6 0.10860484544695073, 1 0.1012949039264829, 5 0.09983291562238934","a bit of dog food and a lot of javadoc tweakageadd final modifier to local variables.[] methodutils.invoke*(*, object... args) variants cannot handle null valuesmoving most of the methods over to varargs. a couple cant change because they are object[], class[] with both end parameters ideally wanting to be vararg. 396"
5011,5011,"5 0.2664584959666927, 6 0.13348946135831377, 0 0.13166796773354147, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 4 0.117096018735363",1154fastdateformat apis that use a stringbuilderapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5012,5012,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5013,5013,"2 0.18441558441558437, 0 0.148051948051948, 4 0.13997113997114, 3 0.13593073593073596, 1 0.1318903318903319, 5 0.12987012987012986, 6 0.12987012987012986",add checknotnull method in reflectiontostringbuilder.java to fix 1132
5014,5014,"2 0.2373145979703357, 3 0.16991933385376004, 1 0.12073900598490765, 4 0.12073900598490765, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
5015,5015,"2 0.22820712984647404, 3 0.1808482956023939, 1 0.12073900598490764, 4 0.11891751236013533, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363",crlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables.
5016,5016,"5 0.2764550264550264, 6 0.12460317460317459, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5017,5017,"4 0.29668822261414857, 0 0.14305310601606896, 6 0.13207916911620615, 3 0.12659220066627472, 1 0.10738781109151478, 2 0.10601606897903193, 5 0.08818342151675487","validates string.format without arguments ()while calling string.format(""some string"") without any additionalarguments is not technically wrong, its redundant, as it justreturns the same string.removing these calls and just using the string instead both cleans upthe code and offers a (very slight) performance gain.: validate: add inclusivebetween and exclusivebetween overloads for primitives types. initial patch provided by sebb."
5018,5018,"6 0.22645502645502644, 3 0.13756613756613756, 4 0.13571428571428568, 2 0.13015873015873014, 0 0.1283068783068783, 1 0.12275132275132278, 5 0.11904761904761907","<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
5019,5019,"6 0.3203174603174604, 2 0.20587301587301587, 3 0.15365079365079368, 0 0.08698412698412696, 5 0.0814285714285714, 4 0.07809523809523809, 1 0.07365079365079366",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure lines in files dont have trailing white spaces and remove all trailing white spacesusing validate where possible in time package.: durationformatutils are not able to handle negative duration/periods. document new behavior for negative inputs.: durationformatutils are not able to handle negative durations/periods. reported by michael osipov.remove useless parentheses (pmd).add final modifier to local variables.add final modifier to method parameters.fix brace positions
5020,5020,"2 0.45732255166217445, 4 0.1334231805929919, 3 0.09778376759508835, 6 0.08625336927223719, 0 0.07891584306678645, 5 0.07891584306678645, 1 0.06738544474393533",remove redundant type arguments. simplify arrayutils removeelements by using newdecrementandget() method: improve arrayutils removeelements time complexity to o(n) ()based on patch submitted by jeffery yuancrlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables. arrayutils removeelements methods use unnecessary hashseteliminate conversion of bitset to int[] arrayutils removeelements methods use unnecessary hashsetreplace hashset with bitset (less memory; faster) arrayutils removeelements methods clone temporary index arrays unnecessarilyreduce number of created arrays[] complement arrayutils.addall() variants with by-index and by-value removal methods
5021,5021,"2 0.2547753564702717, 4 0.12859833198816248, 6 0.12859833198816248, 3 0.12483185364541298, 0 0.12106537530266345, 1 0.12106537530266345, 5 0.12106537530266345",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
5022,5022,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
5023,5023,"0 0.3181310082718533, 4 0.13816230717639166, 6 0.11938296445338696, 2 0.11312318354571875, 1 0.10999329309188463, 3 0.10060362173038231, 5 0.10060362173038231","rewriting octalunescaper as a hand rolled parser (all of 4 characters), instead of trying to handle the conversion via repeated attempts to convert the numbers. this fixes bugs, see , and also changes the behaviour for illegal octals such as \999. instead of throwing numberformatexception, it will now ignore them. this seems the better behaviour. "
5024,5024,"2 0.19639494215765402, 0 0.15684691955878394, 5 0.1380145278450363, 4 0.13613128867366153, 6 0.13048157115953726, 1 0.12106537530266347, 3 0.12106537530266347",multilinerecursivetostringstyle: made private field indent static: multiline recursive to string style. this fixes from github. thanks to jan matèrne.
5025,5025,"2 0.22607022607022606, 0 0.1604136604136604, 3 0.14694564694564693, 5 0.12337662337662335, 1 0.11832611832611835, 4 0.1132756132756133, 6 0.1115921115921116","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibility"
5026,5026,"6 0.2647907647907648, 3 0.1385281385281385, 0 0.13179413179413177, 2 0.12337662337662335, 5 0.12337662337662335, 4 0.10990860990860993, 1 0.10822510822510824",make sure lines in files dont have trailing white spaces and remove all trailing white spacesfixing crlfsstatement unnecessarily nested within else clause. code refactoring in numberutils
5027,5027,"4 0.7157902655532988, 0 0.0628150154216505, 3 0.05544271421048672, 5 0.04596404122470473, 2 0.04438426239374107, 1 0.04175129767546829, 6 0.03385240352064998","sort members.[github] commons-lang pull request : intellij idea refactorings..eat own dog food: use stringutils.isempty().add final modifier to local variables.resolving - changing stringutils.isalpha, isalphanumeric and isnumeric to return false when passed an empty string. documenting this in the changes report and in the upgrade article. also fixing a javadoc c+p error in isnumericspace and isalphanumericspace. change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
5028,5028,"4 0.40687160940325506, 0 0.12979706650592723, 3 0.10026120152702431, 6 0.09182238296162348, 1 0.09041591320072334, 2 0.09041591320072334, 5 0.09041591320072334","replacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687checkstylemoving indexof(string, int) and indexof(string, int, int) over to charsequence. . this, plus the same happening for the string, string, int variant will open up a lot of methods. "
5029,5029,"4 0.20259740259740258, 3 0.14805194805194802, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",eat own dog food: stringutilsisempty(string) and replace some but not all stringlength() == 0 with stringisempty()
5030,5030,"5 0.28869047619047616, 6 0.13070436507936506, 2 0.12549603174603172, 4 0.1168154761904762, 0 0.11334325396825398, 1 0.11334325396825398, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
5031,5031,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
5032,5032,"3 0.18783068783068776, 5 0.1466784244562022, 6 0.13639035861258084, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
5033,5033,"5 0.2727513227513227, 6 0.12830687830687826, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5034,5034,"2 0.23072562358276635, 4 0.13151927437641722, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
5035,5035,"3 0.19451659451659448, 2 0.15209235209235208, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
5036,5036,"5 0.2846734322144158, 4 0.12256049960967993, 0 0.12073900598490765, 1 0.11891751236013534, 6 0.11891751236013534, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5037,5037,"3 0.18783068783068776, 5 0.15079365079365076, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 6 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
5038,5038,"2 0.19074522464352972, 0 0.15496368038740918, 4 0.13989776701641107, 5 0.13801452784503632, 6 0.1304815711595373, 1 0.12483185364541301, 3 0.12106537530266348",multilinerecursivetostringstyle: made private field indent static: multiline recursive to string style. this fixes from github. thanks to jan matèrne.
5039,5039,"2 0.2260127931769723, 0 0.15138592750533045, 6 0.15138592750533045, 1 0.12153518123667374, 3 0.12153518123667374, 4 0.12153518123667374, 5 0.10660980810234542","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.[] removed unnecessary elses and use of ternary operator with primitive boolean consequences e.g. (some boolean expression) ? true : false"
5040,5040,"5 0.28285193858964347, 0 0.12256049960967995, 4 0.12256049960967995, 6 0.12073900598490764, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5041,5041,"6 0.2397094430992736, 3 0.1380145278450363, 4 0.1380145278450363, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
5042,5042,"3 0.20259740259740255, 2 0.14401154401154398, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
5043,5043,"5 0.2864949258391881, 0 0.12073900598490764, 4 0.12073900598490764, 6 0.12073900598490764, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5044,5044,"5 0.2864949258391881, 0 0.12073900598490762, 4 0.12073900598490762, 1 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5045,5045,"3 0.20634920634920628, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",statement unnecessarily nested within else clause.
5046,5046,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
5047,5047,"6 0.2801587301587301, 2 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905, 5 0.11904761904761905",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
5048,5048,"5 0.2727513227513227, 6 0.12830687830687829, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5049,5049,"6 0.282010582010582, 2 0.12275132275132275, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
5050,5050,"0 0.17250673854447438, 6 0.1536388140161725, 1 0.13477088948787064, 2 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",its confusing to re-use field names locally
5051,5051,"6 0.19897959183673466, 5 0.1454081632653061, 3 0.14143990929705214, 4 0.13151927437641725, 0 0.1275510204081633, 1 0.1275510204081633, 2 0.1275510204081633"," partial: implement format u for fastdateformat, day number of week"
5052,5052,"6 0.32726423902894497, 5 0.12464985994397756, 3 0.11974789915966384, 0 0.11321195144724557, 1 0.1050420168067227, 2 0.1050420168067227, 4 0.1050420168067227",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor some duplicate code.
5053,5053,"2 0.1878306878306878, 4 0.14050558495002943, 5 0.13844797178130513, 0 0.13433274544385657, 1 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
5054,5054,"6 0.2527084908037289, 4 0.1592340639959687, 3 0.13101536911060718, 2 0.11514235323759134, 5 0.11514235323759134, 0 0.11337868480725624, 1 0.11337868480725624",remove redundant type arguments.refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
5055,5055,"5 0.27645502645502645, 1 0.1246031746031746, 6 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5056,5056,"5 0.2864949258391882, 1 0.12256049960967996, 0 0.11891751236013534, 4 0.11891751236013534, 6 0.11891751236013534, 2 0.11709601873536302, 3 0.11709601873536302",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5057,5057,"2 0.32413158500115025, 3 0.12928456406717273, 1 0.11801242236024842, 4 0.10996089256958824, 5 0.10996089256958824, 6 0.1051299746951921, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
5058,5058,"5 0.29150919627110106, 2 0.12925170068027209, 0 0.12043335852859663, 4 0.11866969009826156, 1 0.11337868480725626, 3 0.11337868480725626, 6 0.11337868480725626", simplify fastdateformat; eliminate boxingrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5059,5059,"3 0.3447971781305114, 6 0.23985890652557318, 5 0.08924162257495588, 2 0.08677248677248675, 4 0.08059964726631394, 0 0.07936507936507936, 1 0.07936507936507936","lvar should not hide ivar.add final modifier to local variables.format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
5060,5060,"0 0.1642135642135642, 4 0.15209235209235214, 6 0.14805194805194805, 1 0.14401154401154403, 3 0.13189033189033192, 2 0.1298701298701299, 5 0.1298701298701299",returning notimplementedexception to lang after it was removed in lang 3.0 per the request in . 
5061,5061,"5 0.29216269841269843, 6 0.12723214285714282, 2 0.12375992063492063, 4 0.11681547619047622, 1 0.1150793650793651, 0 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
5062,5062,"5 0.2864949258391881, 4 0.12256049960967993, 0 0.12073900598490762, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5063,5063,"2 0.26788163825200867, 6 0.19380756417793457, 0 0.14854007446600037, 4 0.10875955320399763, 1 0.10464432686654908, 3 0.08818342151675487, 5 0.08818342151675487",make sure lines in files dont have trailing white spaces and remove all trailing white spacesformatting fixes perhttps://patch-diff.githubusercontent.com/raw/apache/commons-lang/pull/128.diffcrlf -> lfjavadoc: fix typo but working is still awkward.implements : change nulltoempty methods to generics. thanks to james sawle. this in github too.
5064,5064,"0 0.1981187536743092, 2 0.13639035861258086, 4 0.13639035861258086, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",deprecate systemutilsline_separator in favor of java.lang.systemlineseparator
5065,5065,"6 0.2838624338624338, 2 0.1208994708994709, 0 0.11904761904761904, 1 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904, 5 0.11904761904761904",make sure lines in files dont have trailing white spaces and remove all trailing white spaces
5066,5066,"0 0.20718462823725978, 3 0.1584516847674742, 1 0.1311612364243943, 5 0.1272626009468115, 2 0.12531328320802007, 4 0.12531328320802007, 6 0.12531328320802007",allow access to parsedpattern for test purposesmake parseexception text similar to that thrown by simpledateformat
5067,5067,"3 0.2320944638017809, 4 0.20770421989934187, 0 0.13046844754161827, 6 0.13046844754161827, 2 0.12098335269066975, 1 0.09117305458768876, 5 0.08710801393728225","statement unnecessarily nested within else clause.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)fix pmd issues: ""these nested if statements could be combined""removing the option around whether or not to support the + in \u+0000. jdk 7 now supports the + sign, so unicodeunescaper will unescape \u0000 or \u+0000. "
5068,5068,"5 0.27275132275132274, 6 0.13015873015873017, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5069,5069,"3 0.18783068783068776, 5 0.15079365079365076, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323, 6 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
5070,5070,"4 0.18062397372742198, 0 0.16912972085385874, 5 0.13464696223316916, 6 0.13464696223316916, 3 0.13464696223316913, 1 0.12315270935960594, 2 0.12315270935960594","[] create strbuilder apis similar to string.format(string, object...)"
5071,5071,"3 0.19548872180451127, 2 0.14285714285714285, 4 0.14285714285714285, 6 0.14285714285714285, 0 0.1253132832080201, 1 0.1253132832080201, 5 0.1253132832080201",format to 120 line length.simplify using ternary expressions instead of nested if-elses.
5072,5072,"4 0.2017483321831148, 3 0.19208649643432252, 0 0.12928456406717276, 1 0.12445364619277662, 2 0.12445364619277662, 6 0.12445364619277662, 5 0.10351966873706007",replaces size() == 0 and length() == 0 with isempty()[github] commons-lang pull request : intellij idea refactorings..remove redundant type arguments.reuseadd final modifier to local variables.
5073,5073,"2 0.17645502645502642, 0 0.16904761904761903, 3 0.15052910052910048, 6 0.13571428571428568, 4 0.12645502645502646, 1 0.12275132275132278, 5 0.11904761904761907",add final modifier to method parameters.checkstylecompiler/generics warnings & a typochanging eol-style to native.misc. event utils.
5074,5074,"2 0.18783068783068776, 5 0.14256319811875365, 4 0.1384479717813051, 1 0.13433274544385657, 0 0.1322751322751323, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
5075,5075,"0 0.2504668534080299, 4 0.19327731092436973, 2 0.13118580765639587, 1 0.10994397759103644, 3 0.1050420168067227, 5 0.1050420168067227, 6 0.1050420168067227","lan-1114 fixes bug in typeutils.equals(wildcardtype, type) where it was incorrectly returning true when the second argument was not a wildcard type.typeutils wildcard fixes[] new type util features"
5076,5076,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5077,5077,"4 0.2765376984126984, 0 0.12896825396825393, 6 0.12723214285714282, 2 0.12549603174603174, 3 0.11681547619047622, 1 0.11334325396825398, 5 0.11160714285714288",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo) add notequal() method to objectutils
5078,5078,"6 0.2818740399385561, 5 0.1420890937019969, 0 0.11520737327188942, 1 0.11520737327188942, 2 0.11520737327188942, 3 0.11520737327188942, 4 0.11520737327188942",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
5079,5079,"0 0.2698412698412699, 4 0.18789682539682542, 2 0.1240079365079365, 3 0.11150793650793651, 6 0.1101190476190476, 1 0.10595238095238094, 5 0.0906746031746032",": defaultstring(str) reuses defaultstring(str, defaultstr): update java requirement from java 6 to 7replace usage of deprecated objectutilstostring with objectstostringadd @suppresswarnings(deprecation) in joinwith(), because it uses the deprecated objectutils.tostring(object) method (which is o.k. to use as long as we do not require java 7 or greater)use final where possible - added new joinwith method to support varargs"
5080,5080,"2 0.2528344671201814, 3 0.1623582766439909, 6 0.14489795918367343, 4 0.1163265306122449, 0 0.11632653061224488, 1 0.1052154195011338, 5 0.10204081632653063",add final modifier to local variables.remove trailing whitespacescrlf -> lfjavadoc: fix typo but working is still awkward.implements : add a method to arrayutils for removing all occurrences of a given element. thanks to haiyang li.
5081,5081,"6 0.1878306878306878, 2 0.1425631981187537, 0 0.14050558495002938, 1 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323, 5 0.1322751322751323",remove unnecessary white spaces
5082,5082,"2 0.17835497835497832, 1 0.14805194805194802, 3 0.13795093795093796, 5 0.13795093795093796, 0 0.13593073593073596, 4 0.1318903318903319, 6 0.12987012987012986","adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
5083,5083,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5084,5084,"3 0.38496424210709923, 6 0.2042560613989185, 2 0.08703994418280131, 5 0.08459794174079886, 0 0.08093493807779521, 1 0.079713936856794, 4 0.07849293563579278","make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.: fastdateformat doesnt respect summer daylight in some localized stringsrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesuse final consistently. tab policeremove keyvalues map per sebbs suggestion"
5085,5085,"0 0.17679255610290093, 5 0.15763546798029554, 4 0.15571975916803502, 6 0.1403940886699507, 1 0.12315270935960594, 2 0.12315270935960594, 3 0.12315270935960594",pair implements java.util.formattable and defers tostring() handling thereto.
5086,5086,"4 0.17368742368742363, 2 0.13949938949938953, 0 0.13736263736263737, 1 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
5087,5087,"3 0.2086580086580086, 2 0.13997113997114, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
5088,5088,"0 0.2940061596778015, 2 0.13314380478559582, 4 0.1231935560293769, 6 0.11821843165126747, 1 0.11324330727315804, 3 0.11158493248045488, 5 0.10660980810234544",code clean-up for checkstyle.document exceptions. use illegalargumentexception instead of assert. throw illegalargumentexception for empty arrays.avoid unnecessary conversions.use stringbuilder instead of stringbuffer.: add conversion utility to convert between data types on byte level
5089,5089,"0 0.15363881401617246, 6 0.15363881401617246, 4 0.14734950584007186, 5 0.13896376160527107, 3 0.13686732554657086, 1 0.1347708894878706, 2 0.1347708894878706",[] prefer throwable.getcause() in exceptionutils.getcause() ()
5090,5090,"5 0.2783068783068782, 6 0.12645502645502643, 0 0.11904761904761904, 1 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5091,5091,"5 0.22403054048623672, 2 0.20152702431183445, 3 0.1523005826803295, 0 0.1424552943540285, 6 0.09463532248342377, 1 0.09463532248342375, 4 0.09041591320072336","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibilityadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
5092,5092,"6 0.16931216931216928, 0 0.1549088771310993, 5 0.1466784244562022, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 4 0.1322751322751323",4fastdateformat apis that use a stringbuilderrefactor some duplicate code.
5093,5093,"2 0.2900432900432901, 0 0.12337662337662336, 3 0.12337662337662336, 4 0.12337662337662336, 6 0.12337662337662336, 1 0.10822510822510825, 5 0.10822510822510825",crlf -> lfjavadoc: fix typo but working is still awkward.simplify issamelenght implementations by reusing getlength. this also fixes a lot of the useless paranthesis warnings generated by pmd.
5094,5094,"2 0.20957761635727737, 0 0.1380145278450363, 6 0.1380145278450363, 4 0.1342480495022868, 3 0.13048157115953726, 1 0.12859833198816253, 5 0.12106537530266347","add todosjavadocfix brace positionsapplying valentin rochers patch to , adding new regexp and in range methods to validate"
5095,5095,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
5096,5096,"2 0.22276029055690072, 0 0.1380145278450363, 6 0.1380145278450363, 4 0.1304815711595373, 3 0.12671509281678778, 1 0.12294861447403824, 5 0.12106537530266347","add todosjavadocfix brace positionsapplying valentin rochers patch to , adding new regexp and in range methods to validate"
5097,5097,"4 0.17517006802721086, 0 0.16723356009070292, 2 0.1374716553287982, 3 0.1374716553287982, 1 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", add a null-safe compare() method to objectutils
5098,5098,"6 0.19897959183673466, 3 0.14342403628117908, 5 0.13945578231292516, 2 0.13151927437641725, 0 0.12953514739229027, 4 0.12953514739229027, 1 0.1275510204081633"," partial: implement format u for fastdateformat, day number of week"
5099,5099,"4 0.21301195375269452, 3 0.16225749559082892, 2 0.15539878502841464, 6 0.14305310601606896, 0 0.13207916911620615, 1 0.10601606897903193, 5 0.08818342151675487",make code more readable with less nesting (move block out of elseclause).pmd: remove useless parentheses: improve charsetutils.squeeze() performance ()patch by mohammed alfallajadd final modifier to local variables.[] charsetutils.squeeze() speedup.merge charsetutils string[] and string method forms to string...
5100,5100,"2 0.3688969258589512, 3 0.1466747036367289, 1 0.10870002009242512, 0 0.09885473176612417, 4 0.09604179224432388, 5 0.09041591320072334, 6 0.09041591320072334",add final modifier to local variables.crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodtabs replaced by spacesnew tests addedswap and shift for arrays
5101,5101,"5 0.2883164194639604, 0 0.12073900598490762, 4 0.12073900598490762, 1 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5102,5102,"2 0.1915900863269284, 1 0.16235032024505705, 5 0.13700918964076858, 3 0.1292119186856029, 4 0.1292119186856029, 0 0.12531328320802007, 6 0.12531328320802007",adding hennings github pull request with a triple implementation. 675
5103,5103,"5 0.2708994708994708, 6 0.13201058201058197, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5104,5104,"6 0.31854751032833223, 0 0.1480756686236138, 4 0.1252446183953033, 2 0.10545770819743422, 5 0.10241356816699285, 3 0.10089149815177215, 1 0.09936942813655145",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
5105,5105,"3 0.2042328042328042, 1 0.13756613756613756, 2 0.1357142857142857, 6 0.13386243386243388, 0 0.13386243386243382, 4 0.13386243386243382, 5 0.12089947089947092",add final modifier to local variables.rename mutablepair setters for bean compatibility
5106,5106,"6 0.25210084033613445, 3 0.20471521942110174, 5 0.11811391223155926, 2 0.10994397759103644, 0 0.1050420168067227, 1 0.1050420168067227, 4 0.1050420168067227",make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.: fastdateformat doesnt respect summer daylight in some localized strings
5107,5107,"2 0.28835978835978837, 3 0.13347763347763344, 6 0.13179413179413177, 0 0.11495911495911498, 1 0.1132756132756133, 5 0.10990860990860993, 4 0.10822510822510824",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure placement of curly braces is consistent: dateutilstest.testlang530 fails for some timezonesreplace tabs with whitespaces and 
5108,5108,"3 0.20259740259740258, 2 0.14199134199134197, 1 0.13593073593073593, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
5109,5109,"3 0.3029259896729776, 6 0.25874928284566834, 2 0.09275196022183975, 1 0.0873972078791356, 0 0.08605851979345956, 4 0.08605851979345956, 5 0.08605851979345956","make sure lines in files dont have trailing white spaces and remove all trailing white spacesrefactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display namesreplace tabs with spaces fastdateparser and fastdateprinter support x format"
5110,5110,"3 0.1965367965367965, 2 0.15209235209235208, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
5111,5111,"5 0.2883164194639604, 1 0.12073900598490762, 0 0.11891751236013531, 4 0.11891751236013531, 6 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5112,5112,"6 0.2908346134152585, 0 0.12954429083461338, 2 0.1187916026625704, 1 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894",make sure lines in files dont have trailing white spaces and remove all trailing white spaces[] immutablepair.nullpair()
5113,5113,"5 0.28521825396825395, 6 0.13070436507936506, 2 0.1237599206349206, 4 0.12202380952380953, 1 0.11507936507936509, 0 0.11160714285714286, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
5114,5114,"0 0.19353940406571982, 2 0.1467557783347257, 5 0.14285714285714282, 1 0.13505987190197716, 3 0.1292119186856029, 4 0.1272626009468115, 6 0.12531328320802007","applying sebbs patch from - adding isstarted, issuspended and isstopped to stopwatch"
5115,5115,"5 0.2568986568986569, 3 0.17826617826617824, 1 0.12014652014652014, 6 0.11330891330891332, 2 0.1115995115995116, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5116,5116,"4 0.16931216931216928, 6 0.1569664902998236, 3 0.14462081128747795, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 5 0.1322751322751323",remove redundant type arguments.
5117,5117,"2 0.1907452246435297, 3 0.18697874630078015, 5 0.12859833198816248, 0 0.12671509281678775, 4 0.12483185364541298, 1 0.12106537530266345, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
5118,5118,"3 0.2508884150675195, 4 0.15138592750533045, 2 0.14475242833451785, 0 0.11821843165126746, 6 0.11656005685856431, 5 0.11158493248045488, 1 0.10660980810234542",micro optimization: replace stringbuilder with string concatenation so that the compiler can better optimize the codeuse final consistently. : new class classpathutils with methods for turning fqn into resource path
5119,5119,"2 0.19194139194139195, 0 0.1782661782661783, 6 0.1440781440781441, 4 0.13894993894993893, 5 0.11843711843711849, 1 0.11501831501831505, 3 0.11330891330891335","removes unnecessary class reference of static method calls which are declared in the same class: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
5120,5120,"2 0.19943676395289298, 3 0.15642601126472094, 0 0.15463389656938045, 4 0.12954429083461344, 1 0.12596006144393246, 5 0.11879160266257044, 6 0.11520737327188943","use validatenotnull instead of ""throw new nullpointerexception""add final modifier to method parameters.adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
5121,5121,"2 0.2267573696145124, 1 0.13151927437641722, 4 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
5122,5122,"3 0.17794486215538843, 2 0.16819827346143132, 0 0.14285714285714282, 4 0.13505987190197713, 1 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",add final modifier to method parameters.[] vastly expanded typeutils
5123,5123,"2 0.3257418909592823, 3 0.12445364619277663, 1 0.1164021164021164, 4 0.1115711985277203, 5 0.10996089256958823, 6 0.10674028065332414, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
5124,5124,"2 0.1878306878306878, 5 0.1425631981187537, 0 0.13639035861258086, 4 0.13639035861258086, 1 0.1322751322751323, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
5125,5125,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5126,5126,"0 0.22010582010582008, 4 0.20405643738977072, 3 0.16578483245149908, 6 0.13121693121693118, 2 0.12010582010582008, 1 0.07936507936507936, 5 0.07936507936507936",remove redundant type arguments.further optimization of :- avoid tostring of the replacement sequence by doing it once.- avoid calculating the maximum when not needed.- fixup comment for greedy algorithmthanks to fabian lange.: possible performance improvement on string escape functions. thanks to fabian lange and thomas neidhart.allow lookuptranslator to support charsequence properly; previously it was working only for charsequences that implemented hashcode and equals(object). 882add final modifier to local variables.wsvarargs
5127,5127,"3 0.32708032708032697, 1 0.11832611832611829, 0 0.11495911495911496, 2 0.11495911495911496, 4 0.10822510822510822, 5 0.10822510822510822, 6 0.10822510822510822","add final modifier to local variables.promote uniformity between branches by using registry accessorunused imports + uh, why would you synchronize access to a threadlocal? :p[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
5128,5128,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
5129,5129,"0 0.21067821067821066, 1 0.13997113997113997, 2 0.12987012987012989, 3 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",[] permit bitvector generation for enums with > 64 values; plus some test corrections
5130,5130,"2 0.2267573696145124, 1 0.13151927437641722, 4 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
5131,5131,"4 0.3139066571902393, 0 0.12153518123667374, 1 0.12153518123667374, 6 0.11656005685856434, 2 0.11324330727315804, 3 0.10660980810234542, 5 0.10660980810234542","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
5132,5132,"5 0.2921626984126984, 6 0.12896825396825393, 2 0.12549603174603172, 1 0.11507936507936509, 0 0.11334325396825398, 4 0.11334325396825398, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
5133,5133,"2 0.4499850254567237, 4 0.12923030847559147, 3 0.10092842168313865, 6 0.0893980233602875, 0 0.08520515124288708, 5 0.07786762503743636, 1 0.06738544474393532",remove redundant type arguments. simplify arrayutils removeelements by using newdecrementandget() method: improve arrayutils removeelements time complexity to o(n) ()based on patch submitted by jeffery yuancrlf -> lfjavadoc: fix typo but working is still awkward.add final modifier to local variables. arrayutils removeelements methods use unnecessary hashseteliminate conversion of bitset to int[] arrayutils removeelements methods use unnecessary hashsetreplace hashset with bitset (less memory; faster) arrayutils removeelements methods clone temporary index arrays unnecessarilyreduce number of created arrays[] complement arrayutils.addall() variants with by-index and by-value removal methods
5134,5134,"2 0.31124913733609383, 3 0.13733609385783296, 5 0.11640211640211638, 1 0.1115711985277203, 4 0.10996089256958823, 6 0.10996089256958823, 0 0.10351966873706006",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
5135,5135,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
5136,5136,"0 0.15659340659340656, 3 0.15659340659340656, 1 0.13736263736263737, 2 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] vastly expanded typeutils
5137,5137,"2 0.2326462923477849, 6 0.15138592750533045, 0 0.14475242833451785, 1 0.12153518123667374, 3 0.12153518123667374, 4 0.12153518123667374, 5 0.10660980810234542","revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter.ws[] removed unnecessary elses and use of ternary operator with primitive boolean consequences e.g. (some boolean expression) ? true : false"
5138,5138,"1 0.6788328105693374, 2 0.06339701549282387, 3 0.05940499952475999, 4 0.05940499952475999, 6 0.050755631593954936, 5 0.04476760764185915, 0 0.043436935652504526",add final modifier to method parameters.remove redundant type arguments.: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
5139,5139,"5 0.28869047619047616, 6 0.13244047619047616, 1 0.12028769841269843, 2 0.12028769841269843, 4 0.1150793650793651, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
5140,5140,"5 0.2708994708994708, 6 0.13201058201058197, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5141,5141,"2 0.2092352092352092, 0 0.16378066378066378, 1 0.14357864357864353, 4 0.14357864357864353, 5 0.12000962000962002, 3 0.11159211159211162, 6 0.10822510822510824", - jsontostringstyle does not escape double quote in a stringvalue[github] commons-lang pull request : intellij idea refactorings..: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
5142,5142,"3 0.28798185941043075, 2 0.12925170068027206, 1 0.12396069538926678, 0 0.11866969009826153, 4 0.11337868480725623, 5 0.11337868480725623, 6 0.11337868480725623","[] part 2: refactor tostringstyle and tostringbuildertest to verify that we are unsetting the registry when no longer needed[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
5143,5143,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5144,5144,"6 0.3370681605975724, 3 0.11974789915966384, 5 0.11974789915966384, 0 0.10667600373482727, 4 0.10667600373482727, 1 0.1050420168067227, 2 0.1050420168067227",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor some duplicate code.
5145,5145,"5 0.29042658730158727, 6 0.12723214285714282, 2 0.12375992063492063, 4 0.11855158730158732, 1 0.1150793650793651, 0 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
5146,5146,"3 0.19047619047619044, 2 0.1541125541125541, 1 0.13593073593073596, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
5147,5147,"3 0.2046176046176046, 2 0.141991341991342, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
5148,5148,"6 0.22098214285714285, 0 0.1654265873015873, 4 0.14806547619047616, 3 0.12202380952380956, 2 0.12028769841269844, 1 0.11160714285714289, 5 0.11160714285714289",remove redundant casts ()remove redundant casts throughout the codebase to make it cleaner and easier to read.validation[] new type util features
5149,5149,"3 0.3112491373360939, 2 0.12928456406717276, 4 0.1276742581090407, 6 0.11801242236024843, 0 0.10512997469519211, 1 0.10512997469519211, 5 0.10351966873706007",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerformat to 120 line length.add final modifier to local variables.use better method names. document possible arrayindexoutofboundsexception and stringindexoutofboundsexception.
5150,5150,"5 0.282010582010582, 6 0.12275132275132276, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5151,5151,"2 0.29569160997732424, 4 0.14489795918367343, 0 0.14331065759637185, 1 0.10997732426303858, 3 0.10204081632653063, 5 0.10204081632653063, 6 0.10204081632653063",: fix typeutils.parameterize to work correctly with narrower-typed varargs array ()fix sonarqube warning: the user-supplied array typearguments is stored directly.[] new type util features
5152,5152,"0 0.18509550712940545, 4 0.15308044121603442, 2 0.1493139628732849, 5 0.13801452784503632, 1 0.13236481033091207, 3 0.12106537530266348, 6 0.12106537530266348","sort methods.applying sebbs patch from - adding isstarted, issuspended and isstopped to stopwatch"
5153,5153,"2 0.3611686220381873, 1 0.11962272831838047, 4 0.1051299746951921, 0 0.10351966873706006, 3 0.10351966873706006, 5 0.10351966873706006, 6 0.10351966873706006",crlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodswap and shift for arrays
5154,5154,"5 0.2773998488284202, 4 0.13277903754094228, 3 0.12925170068027209, 0 0.11690602166792645, 1 0.11514235323759135, 6 0.11514235323759135, 2 0.11337868480725626",change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5155,5155,"6 0.29441884280593955, 5 0.1295442908346134, 0 0.1152073732718894, 1 0.1152073732718894, 2 0.1152073732718894, 3 0.1152073732718894, 4 0.1152073732718894",: fastdateformat support of the week-year component (uppercase y): fastdateformat support of the week-year component (uppercase y)
5156,5156,"6 0.26395289298515107, 2 0.1385048643113159, 3 0.13133640552995388, 1 0.12058371735791093, 0 0.11520737327188942, 4 0.11520737327188942, 5 0.11520737327188942",make checkstyle happy: add missing javadocreplace tabs with spaces fastdateparser and fastdateprinter support x format
5157,5157,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5158,5158,"1 0.708358448864778, 2 0.05505324492666265, 5 0.05013060076351217, 4 0.04872413100261201, 3 0.04661442636126182, 0 0.04591119148081175, 6 0.04520795660036168",: add a circuit breaker implementation ()squashed commit of the following:commit 1b12db706b457408562a166c21bc6470a8064620merge: edebd97 def7832author: oliver heger <oliver.heger@oliver-heger.de>date: wed jun 10 21:27:17 2015 +0200 merge pull request from kinow/patch1 this commit:commit def78320c5efcb734572c5b48623a952e3c94c75author: bruno p. kinoshita <brunodepaulak@yahoo.com.br>date: wed jun 10 22:57:33 2015 +1200 this commit: * fixes javadocs warnings in checkstyle * adds license headers * renames the memorycircuitbreaker to thresholdcircuitbreaker * adds more tests to have a good coveragecommit edebd970582ce2984258352c8482bcb51587f7d2author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 22:11:11 2015 +0200 documentation updates for eventcountcircuitbreaker.commit 3d8a4ff85a78173dd8f5437d9b4d931069128e20author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:55:02 2015 +0200 renamed timedcircuitbreaker to eventcountcircuitbreaker. this name seems to be more appropriate as the main property of this circuit breaker implementation is that it counts specific events and changes its state when a certain threshold is reached.commit 0e4ce5a984ef699ddace61bbf430d695b011c6b5author: oheger <oliver.heger@oliver-heger.de>date: tue jun 9 21:51:22 2015 +0200 added documentation for circuitbreaker interface.commit 0e6b22190ef1868655fec9b3814a2345ad206f76author: oheger <oliver.heger@oliver-heger.de>date: mon jun 8 22:27:05 2015 +0200 initial import of circuitbreaker classes.
5159,5159,"2 0.23072562358276635, 1 0.12953514739229025, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
5160,5160,"2 0.19262846381490448, 3 0.18321226795803064, 5 0.132364810330912, 4 0.12483185364541298, 0 0.12294861447403822, 1 0.12294861447403822, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
5161,5161,"0 0.1662337662337662, 3 0.1662337662337662, 6 0.14805194805194802, 1 0.12987012987012989, 2 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989",: fastdateparser could use calendar.getdisplaynames for all text fields
5162,5162,"6 0.22460317460317455, 4 0.1412698412698412, 3 0.13941798941798936, 0 0.12645502645502646, 1 0.1246031746031746, 2 0.1246031746031746, 5 0.11904761904761905","<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
5163,5163,"4 0.24664224664224665, 3 0.17655677655677654, 6 0.12527472527472525, 2 0.11672771672771676, 1 0.11330891330891332, 0 0.11159951159951162, 5 0.1098901098901099",add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
5164,5164,"4 0.39329805996472667, 0 0.15358612580834802, 1 0.10008818342151674, 3 0.10008818342151674, 2 0.09494415049970603, 5 0.08259847148736035, 6 0.07539682539682539","sort members.add final modifier to local variables.renaming the newly public pad(int, char) method to repeat(char, int) [note the swap of param order]. ive also pulled the faster implementation out of repeat(string, int). make the pad method public. i can use this now :) ! the method used to be private and named padding. it is used internally and covered by unit tests through leftpad(), rightpad() and repeat().rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
5165,5165,"2 0.2755659640905542, 4 0.1353109549830861, 1 0.11891751236013533, 3 0.11891751236013533, 0 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363","crlf -> lfjavadoc: fix typo but working is still awkward.[] add arrayutils.reverse(array, from, to) methods."
5166,5166,"2 0.3184371184371184, 4 0.11843711843711842, 0 0.11501831501831503, 3 0.11501831501831503, 1 0.11330891330891332, 5 0.10989010989010989, 6 0.10989010989010989","crlf -> lfjavadoc: fix typo but working is still awkward.simplify isnotempty by reusing isemptyapplying chandrashekar ms patch to , adding isnotempty(array) methods to arrayutils. "
5167,5167,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
5168,5168,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
5169,5169,"5 0.2864949258391881, 4 0.12438199323445222, 0 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5170,5170,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
5171,5171,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
5172,5172,"5 0.27645502645502645, 1 0.1246031746031746, 6 0.12275132275132276, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5173,5173,"2 0.29353577179664136, 3 0.1663216011042098, 6 0.11962272831838047, 1 0.10996089256958824, 0 0.10351966873706006, 4 0.10351966873706006, 5 0.10351966873706006","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to local variables.: add support for varargs in constructorutils, memberutils, and methodutilsthis from github."
5174,5174,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
5175,5175,"5 0.28092718568909036, 6 0.15217939027462832, 0 0.11337868480725623, 1 0.11337868480725623, 2 0.11337868480725623, 3 0.11337868480725623, 4 0.11337868480725623", fastdateparser and fastdateprinter support x formatapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5176,5176,"0 0.17487684729064037, 6 0.15763546798029554, 5 0.1403940886699507, 2 0.1384783798576902, 4 0.13656267104542963, 1 0.12889983579638756, 3 0.12315270935960594",checkstyle: convert tabs to spaces: enhance methodutils to allow invocation of private methods ()
5177,5177,"0 0.20096371882086164, 4 0.16128117913832196, 1 0.12755102040816327, 2 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",": extend randomstringutils with methods that generate strings between a min and max length (, )"
5178,5178,"3 0.16621743036837375, 0 0.15363881401617252, 6 0.14106019766397127, 1 0.13477088948787064, 2 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",: dateutilstest.testlang530 fails for some timezones
5179,5179,"0 0.2945845004668534, 4 0.1491596638655462, 6 0.1295518207282913, 2 0.11157796451914101, 1 0.1050420168067227, 3 0.1050420168067227, 5 0.1050420168067227","reverting r1090111 - moving the text.translate escapers back from using range to replicating parts of the range api. see the list for details (unnecessary boxing in stringescapeutils etc), the move to range was an uncomfortable fit. removing unnecessary code"
5180,5180,"0 0.15363881401617246, 4 0.1494459418987721, 6 0.14944594189877206, 3 0.13896376160527107, 5 0.13896376160527107, 1 0.1347708894878706, 2 0.1347708894878706",[] prefer throwable.getcause() in exceptionutils.getcause() ()
5181,5181,"2 0.3257418909592823, 3 0.12767425810904068, 5 0.11640211640211638, 1 0.10996089256958824, 4 0.10835058661145619, 6 0.10674028065332414, 0 0.1051299746951921",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
5182,5182,"3 0.23660714285714288, 2 0.1706349206349206, 6 0.12723214285714282, 4 0.12549603174603172, 1 0.11681547619047622, 0 0.11160714285714288, 5 0.11160714285714288",add final modifier to local variables.add final modifier to method parameters.[] added support for concurrentmap.putifabsent() to concurrentutils.
5183,5183,"0 0.17136978248089355, 2 0.1549088771310993, 4 0.14462081128747797, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",: new methods for lang3.validatethis from github.
5184,5184,"6 0.22660098522167485, 4 0.1346469622331691, 1 0.13273125342090858, 0 0.12889983579638753, 2 0.12889983579638753, 3 0.12506841817186645, 5 0.12315270935960593","added missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
5185,5185,"5 0.26904761904761904, 6 0.13015873015873017, 1 0.1246031746031746, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5186,5186,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
5187,5187,"2 0.26419155232714553, 4 0.12483185364541297, 6 0.12483185364541297, 0 0.12294861447403821, 1 0.12106537530266344, 3 0.12106537530266344, 5 0.12106537530266344",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
5188,5188,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5189,5189,"4 0.20259740259740258, 3 0.146031746031746, 0 0.13189033189033192, 1 0.12987012987012989, 2 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",eat own dog food: stringutilsisempty(string) and replace some but not all stringlength() == 0 with stringisempty()
5190,5190,"5 0.1553065670712729, 1 0.14441332088390912, 0 0.1400560224089636, 2 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 6 0.1400560224089636",: there should be a differencebuilder with a reflectiondifferencebuilder implementation
5191,5191,"2 0.1536388140161725, 5 0.1536388140161725, 6 0.1536388140161725, 0 0.13477088948787064, 1 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
5192,5192,"6 0.23782620392789883, 3 0.1380145278450363, 4 0.1380145278450363, 0 0.12294861447403824, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
5193,5193,"4 0.34965986394557813, 0 0.11632653061224488, 2 0.1131519274376417, 3 0.10839002267573696, 1 0.10521541950113379, 6 0.10521541950113379, 5 0.10204081632653061","replacing some of the older code. when performing a mutation operation (even if its on an immutable by returning a new instance), string should go in and string should come out. when performing a non-mutation operation, charsequence should be passed in. 687checkstylemoving lastindexof, contains, containswhitespace, indexofany, containsany, indexofanybut, containsonly, containsnone and substring over to using charsequences for parameters. 687"
5194,5194,"0 0.17318594104308385, 4 0.15731292517006798, 1 0.1434240362811791, 2 0.13548752834467123, 3 0.1354875283446712, 5 0.12755102040816327, 6 0.12755102040816327","add hashcode and tostring methods to annotationutils, plus tests"
5195,5195,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
5196,5196,"5 0.282010582010582, 6 0.12275132275132276, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5197,5197,"5 0.22824994976893714, 2 0.20152702431183445, 3 0.14667470363672894, 0 0.1382358850713281, 1 0.0988547317661242, 4 0.09322885272252363, 6 0.09322885272252363","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibilityadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
5198,5198,"6 0.2069160997732426, 5 0.14342403628117908, 3 0.1374716553287982, 0 0.12953514739229027, 1 0.1275510204081633, 2 0.1275510204081633, 4 0.1275510204081633"," partial: implement format u for fastdateformat, day number of week"
5199,5199,"2 0.18253968253968253, 4 0.17487684729064037, 0 0.1461412151067323, 6 0.12698412698412703, 1 0.12315270935960594, 3 0.12315270935960594, 5 0.12315270935960594","fix the jsontostringstyle:except number types and boolean type, all other types in java should be appendasstring"
5200,5200,"6 0.4026733500417711, 5 0.16758563074352545, 0 0.09390142021720968, 2 0.0903926482873851, 3 0.08571428571428569, 4 0.08454469507101083, 1 0.07518796992481204","[] timezone.gettimezone() in fastdateparser causes resourcecontention</action>. this .utc and gmt are the same, so simplify.refactor ""gmt"" magic string.make sure lines in files dont have trailing white spaces and remove all trailing white spaces fastdateparser and fastdateprinter support x formatadded missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses .trailing spaces fastdateparser does not handle non-gregorian calendars properly unnecessary ;applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
5201,5201,"0 0.23098791755508175, 4 0.17791992418858088, 2 0.14641080312722102, 6 0.11656005685856433, 3 0.1149016820658612, 1 0.10660980810234544, 5 0.10660980810234544",[] add methods to classutils to get various forms of classnames in a null-safe manneradd two new null-safe apis: getsimplename(*). see https://issues.apache.org/jira/browse/696
5202,5202,"0 0.16931216931216928, 3 0.15079365079365076, 4 0.1425631981187537, 2 0.14050558495002938, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
5203,5203,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5204,5204,"6 0.22085385878489322, 4 0.13464696223316913, 0 0.1346469622331691, 2 0.1327312534209086, 1 0.126984126984127, 3 0.12698412698412698, 5 0.12315270935960591","added missing support for iso 8601 parsing and printing using ""zz"" pattern (code now matches javadoc). addresses ."
5205,5205,"5 0.2773874577153266, 6 0.1371324486078584, 0 0.11709601873536302, 1 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5206,5206,"2 0.1536388140161725, 5 0.1536388140161725, 6 0.1536388140161725, 0 0.13477088948787064, 1 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
5207,5207,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5208,5208,"2 0.22966269841269843, 0 0.1636904761904762, 3 0.1324404761904762, 6 0.1307043650793651, 1 0.12028769841269843, 4 0.11160714285714289, 5 0.11160714285714289","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
5209,5209,"3 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",format.
5210,5210,"6 0.22460317460317458, 3 0.14497354497354495, 4 0.14126984126984124, 0 0.12645502645502646, 2 0.12460317460317459, 1 0.11904761904761907, 5 0.11904761904761907","<action issue="""" type=""add"">strbuilder should support stringbuilder as an input parameter</action>"
5211,5211,"3 0.35994397759103636, 4 0.111577964519141, 2 0.10667600373482727, 6 0.10667600373482727, 0 0.1050420168067227, 1 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
5212,5212,"0 0.17794486215538843, 4 0.17599554441659698, 1 0.14285714285714282, 2 0.1272626009468115, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",provide simple method to wrap a given type to the typed interface
5213,5213,"5 0.2727513227513227, 6 0.12830687830687829, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5214,5214,"5 0.2764550264550264, 6 0.12460317460317456, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5215,5215,"4 0.2591922845087402, 0 0.1888687964637332, 6 0.12557765722322684, 3 0.11854530841872613, 2 0.11713883865782598, 5 0.09604179224432391, 1 0.09463532248342377","removes unnecessary class reference of static method calls which are declared in the same class add remove by regular expression methods in stringutils : - string stringutils.removeall(string text, string regex); - string stringutils.removefirst(string text, string regex);"
5216,5216,"4 0.722715451529011, 5 0.05479329208142767, 2 0.04914357456730337, 1 0.0460048426150121, 3 0.04412160344363736, 0 0.04286611066272084, 6 0.040355125100887825","fix defaultisempty typing.change stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
5217,5217,"0 0.15573525007487268, 5 0.1536388140161725, 2 0.15154237795747227, 1 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 6 0.13477088948787064",respect @javax.enterprise.util.nonbinding
5218,5218,"0 0.14285714285714285, 1 0.14285714285714285, 2 0.14285714285714285, 3 0.14285714285714285, 4 0.14285714285714285, 5 0.14285714285714285, 6 0.14285714285714285", and 
5219,5219,"6 0.28953910881621725, 5 0.1998470070759227, 3 0.14763817173455723, 2 0.09409064830751578, 0 0.09275196022183975, 1 0.09007458405048767, 4 0.08605851979345956",: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5220,5220,"0 0.1557352500748727, 6 0.14944594189877208, 4 0.14944594189877206, 2 0.1410601976639713, 1 0.13477088948787067, 3 0.13477088948787067, 5 0.13477088948787067",[] get method override hierarchy
5221,5221,"3 0.21693121693121686, 6 0.14285714285714282, 2 0.13311055416318573, 1 0.1311612364243943, 0 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",pmd: useless parentheses.add final modifier to local variables.
5222,5222,"3 0.19020251778872468, 0 0.14614121510673234, 6 0.14039408866995076, 2 0.1365626710454297, 5 0.13464696223316913, 1 0.12889983579638753, 4 0.12315270935960596",add final modifier to local variables.1154fastdateformat apis that use a stringbuilder
5223,5223,"0 0.18886198547215494, 4 0.17567931127253159, 2 0.14178100618778583, 3 0.13048157115953726, 1 0.12106537530266345, 5 0.12106537530266345, 6 0.12106537530266345", add a null-safe compare() method to objectutilsadd methods for cloneables to objectutils ().
5224,5224,"2 0.23072562358276635, 4 0.13151927437641722, 0 0.12755102040816327, 1 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
5225,5225,"5 0.30929038281979454, 6 0.13608776844070958, 0 0.11974789915966384, 3 0.11484593837535013, 4 0.10994397759103644, 1 0.1050420168067227, 2 0.1050420168067227",adjust fastdateformat for java 7 behavior regarding format of the year pattern ().refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5226,5226,"3 0.39087301587301587, 2 0.10692239858906526, 1 0.10229276895943563, 6 0.10229276895943563, 0 0.09920634920634921, 4 0.09920634920634921, 5 0.09920634920634921","add final modifier to local variables.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
5227,5227,"6 0.21693121693121686, 3 0.15650236702868278, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
5228,5228,"2 0.3056147832267235, 6 0.13646055437100207, 1 0.12816868040748633, 3 0.10992655768775171, 0 0.10660980810234541, 4 0.10660980810234541, 5 0.10660980810234541","simplify, less clutter.revert ""simplify, less clutter.""this reverts commit 18f5f54ca0e78df12586e0750e257058746a5a39.simplify, less clutter. - add issorted() to arrayutils. patch supplied by james sawle. in github."
5229,5229,"4 0.20663780663780665, 3 0.14401154401154398, 0 0.12987012987012989, 1 0.12987012987012989, 2 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",eat own dog food: stringutilsisempty(string) and replace some but not all stringlength() == 0 with stringisempty()
5230,5230,"5 0.29378090033827736, 4 0.12073900598490762, 0 0.11709601873536299, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5231,5231,"4 0.2625152625152626, 0 0.20268620268620274, 6 0.13288563288563288, 2 0.10439560439560441, 1 0.10297110297110298, 3 0.10297110297110298, 5 0.0915750915750916",format to 120 line length.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)adding first method check from maths mathutils.gcd method; and unit tests showing that this was needed. bug reported and solved by christian semrau []
5232,5232,"0 0.19906323185011707, 3 0.19359875097580015, 1 0.13348946135831377, 2 0.12073900598490765, 4 0.11891751236013534, 5 0.11709601873536302, 6 0.11709601873536302",: update java requirement from java 6 to 7replace usage of deprecated objectutilsequals with objectsequalsadd final modifier to local variables.
5233,5233,"4 0.2843425436018029, 0 0.1746031746031746, 2 0.13756613756613756, 6 0.10875955320399763, 1 0.10464432686654908, 5 0.09915735841661769, 3 0.09092690574172058","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687adding containswhitespace method per . code comes from the spring framework, so ive added such to the notice file. license is apache license 2.0. unit test is original. "
5234,5234,"3 0.2086580086580086, 2 0.13795093795093796, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
5235,5235,"0 0.22966269841269843, 6 0.17410714285714285, 3 0.14285714285714285, 1 0.11855158730158731, 2 0.11160714285714289, 4 0.11160714285714289, 5 0.11160714285714289"," - tolowercase should use locale, additional unit tests for case-insensitive matching - fastdateparser should be case insensitive: fastdateparser could use calendar.getdisplaynames for all text fields"
5236,5236,"4 0.18371546149323925, 2 0.1549088771310993, 0 0.1322751322751323, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",sort members.extract method.
5237,5237,"2 0.3116454502593117, 6 0.17193147886217192, 0 0.14552883859814553, 4 0.10592487820210592, 3 0.10372465818010371, 1 0.08942322803708941, 5 0.07182146786107184",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesformatting fixes perhttps://patch-diff.githubusercontent.com/raw/apache/commons-lang/pull/128.diffcrlf -> lfjavadoc: fix typo but working is still awkward. - add issorted() to arrayutils. patch supplied by james sawle. in github.add final modifier to local variables. arrayutils removeelements methods use unnecessary hashseteliminate conversion of bitset to int[]
5238,5238,"5 0.2727513227513227, 6 0.12645502645502643, 1 0.12460317460317459, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5239,5239,"4 0.23395445134575574, 3 0.1872555785599264, 2 0.1341154819415689, 6 0.13250517598343686, 1 0.10512997469519211, 0 0.10351966873706007, 5 0.10351966873706007",add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)[] added support for concurrentmap.putifabsent() to concurrentutils.
5240,5240,"3 0.16831386642707394, 0 0.14525306978137167, 6 0.14525306978137167, 4 0.13686732554657086, 1 0.1347708894878706, 2 0.1347708894878706, 5 0.1347708894878706",: dateutilstest.testlang530 fails for some timezones
5241,5241,"0 0.1811224489795918, 1 0.153344671201814, 2 0.13747165532879818, 4 0.1354875283446712, 3 0.13350340136054423, 5 0.13151927437641722, 6 0.12755102040816327",": add archutils - an utility class for the ""os.arch"" system property ()"
5242,5242,"6 0.29284094590217047, 2 0.16699060576611602, 5 0.16699060576611602, 3 0.1239067055393586, 4 0.08989310009718174, 1 0.07968901846452871, 0 0.07968901846452867",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5243,5243,"6 0.31159951159951155, 0 0.12356532356532357, 4 0.11501831501831503, 1 0.11330891330891332, 2 0.11330891330891332, 5 0.11330891330891332, 3 0.10989010989010989",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
5244,5244,"6 0.1831065759637188, 0 0.16128117913832196, 1 0.1454081632653061, 2 0.1275510204081633, 3 0.1275510204081633, 4 0.1275510204081633, 5 0.1275510204081633",: fastdateprinter generates date objects wastefullyfastdateformat apis that use a stringbuilder
5245,5245,"3 0.2882004207305412, 6 0.2641040351883725, 5 0.09676802447886783, 2 0.09007458405048765, 1 0.0873972078791356, 4 0.0873972078791356, 0 0.08605851979345956","format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
5246,5246,"5 0.2921626984126984, 6 0.12896825396825393, 2 0.12375992063492061, 1 0.11507936507936509, 4 0.11507936507936509, 0 0.11334325396825398, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
5247,5247,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
5248,5248,"4 0.19302721088435368, 6 0.14937641723356004, 3 0.14143990929705214, 2 0.13151927437641725, 0 0.12953514739229027, 1 0.1275510204081633, 5 0.1275510204081633",sort methods.remove redundant type arguments.
5249,5249,"0 0.35090702947845814, 3 0.12868480725623585, 6 0.12603930461073318, 2 0.108843537414966, 4 0.10752078609221466, 1 0.09297052154195012, 5 0.08503401360544222",": extend randomstringutils with methods that generate strings between a min and max length (, ): add randomstringutilsrandomgraph and randomprint which match corresponding regular expression classthese are useful over randomascii because they do not contain the del character but otherwise contain the full range of ascii printing characters, and optionally include whitespace. this is useful for testing user defined inputs where characters like spaces, angle brakets, semicolons, dashes, etc. can cause issues."
5250,5250,"6 0.2327355184498042, 2 0.1807874665017522, 0 0.1432694289837147, 3 0.14182642754071326, 4 0.11152339723768297, 1 0.09709338280766856, 5 0.09276437847866421",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmerge branch  of https://github.com/markdacek/commons-lang: added isexcludenullvalues to reflectiontostringbuilder and testadd checknotnull method in reflectiontostringbuilder.java to fix add final modifier to method parameters.
5251,5251,"4 0.2591802890310353, 0 0.1397773039564084, 6 0.1364605543710021, 1 0.12816868040748636, 3 0.11324330727315804, 2 0.1115849324804549, 5 0.1115849324804549",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo): added atomicinitializer class. introduced new concurrentinitializer interface which is now implemented by all all initializer classes.
5252,5252,"5 0.291959406713505, 4 0.12256049960967995, 0 0.117096018735363, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363, 6 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5253,5253,"3 0.19020251778872466, 0 0.17487684729064035, 2 0.1327312534209086, 1 0.13081554460864805, 4 0.12506841817186645, 5 0.12315270935960593, 6 0.12315270935960593",add final modifier to local variables.convert to java 5 enhanced loops. 
5254,5254,"5 0.28174603174603174, 6 0.13070436507936506, 2 0.12549603174603174, 4 0.1202876984126984, 0 0.11507936507936509, 1 0.11507936507936509, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
5255,5255,"2 0.3080285254198298, 3 0.13411548194156886, 1 0.12445364619277662, 4 0.10996089256958823, 5 0.10996089256958821, 6 0.10996089256958821, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
5256,5256,"3 0.2172781680978402, 0 0.17902680197762164, 6 0.1316679677335415, 1 0.12073900598490765, 2 0.117096018735363, 4 0.117096018735363, 5 0.117096018735363",statement unnecessarily nested within else clause.wsfix brace positionsimproving test coverage.changing eol-style to native.misc. event utils.
5257,5257,"5 0.25860805860805863, 3 0.168009768009768, 2 0.12527472527472527, 1 0.11501831501831504, 6 0.11330891330891332, 0 0.1098901098901099, 4 0.1098901098901099",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5258,5258,"0 0.17136978248089355, 3 0.15079365079365076, 2 0.1425631981187537, 4 0.13844797178130513, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
5259,5259,"2 0.2568986568986569, 3 0.18168498168498165, 6 0.11843711843711843, 1 0.11330891330891332, 0 0.1098901098901099, 4 0.1098901098901099, 5 0.1098901098901099",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsfixing crlfsstatement unnecessarily nested within else clause.add threadutils
5260,5260,"4 0.282137268052761, 3 0.174156047395484, 6 0.13190252626872342, 2 0.10529845741113349, 1 0.1037335121842164, 0 0.10216856695729935, 5 0.1006036217303823",sort members.remove redundant type arguments.add final modifier to local variables.remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)
5261,5261,"5 0.2801587301587301, 6 0.12275132275132276, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5262,5262,"3 0.22675736961451243, 1 0.13151927437641722, 2 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
5263,5263,"2 0.22966269841269843, 0 0.16021825396825395, 1 0.12896825396825398, 3 0.12896825396825395, 6 0.12896825396825395, 4 0.11160714285714289, 5 0.11160714285714289","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
5264,5264,"6 0.2397094430992736, 3 0.1380145278450363, 4 0.1380145278450363, 0 0.12106537530266347, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
5265,5265,"4 0.300556586270872, 6 0.14471243042671614, 2 0.13894042465471038, 0 0.1201814058956916, 3 0.10430839002267572, 1 0.09853638425066999, 5 0.09276437847866421",remove superfluous parens like:return (foo + 1);int len = (foo + 1);if ((foo + 1 > 2))((string) foo)[] add mode and median comparable... methods to objectutilscheckstyle and trailing spaces. simplify compare() method - thanks to julien aymé add a null-safe compare() method to objectutils
5266,5266,"4 0.716710758377425, 0 0.07730746619635508, 5 0.04798647854203408, 2 0.04592886537330981, 3 0.041299235743680184, 1 0.03564079952968842, 6 0.03512639623750736","sort members.consolidate the stringutils.equals and equalsignorecase methods. ()* consolidate the stringutils.equals and equalsignorecase methods. implement the same edge case logic for null. use the same parameter names. use the same javadoc wording. change the equals method to use a step-wise charat comparison. * : added jira to changes.xml. stringutilsequals fails with index oobe on non-strings withidentical leading prefix[] stringutils equals() relies on undefined behavior; thanks to daniel trebbienchange stringutils arguments from string to charsequence.details: working with (trunk) stringutils (su) i see the following emerge: - in svn already and continuing: change stringutils arguments from string to charsequence (cs).- this leads to replacing calls to string.substring(int[,int]) with calls to charsequence.subsequence(int)- this leads to creating a charsequenceutils class (in svn now, more on this new class below) and charsequenceutils.subsequence(charsequence,int) to avoid changing ""str.substring(start)"" over and over to ""str.subsequence(start, str.length())"". for examples, see new versions of capitalize and uncapitalize.- we end up using a tostring() on charsequence to return a string from stringutil when working with a charsequence.so we have stringutils using charsequence inputs as much as possible instead of string, which is nice. the charsequence method subsequence returns a charsequence; though the javadoc states ""returns a new charsequence that is a subsequence of this sequence."", this does not guaranteed the return value to be the same kind of charsequence as the receiver). since we are after all in a class called stringutil, calling tostring() is a must.i propose that we create when possible the methods that are now stringutils charsequence methods into charsequenceutils and let stringutil call charsequenceutils and then do its tostring() and other string specific logic. later we could have other charsequence type of utils (for charbuffer, stringbuiler, stringbuffer, etc) that use the primitives from charsequenceutils.this means that for methods that are based solely on methods that are now in charsequence, these can be moved to charsequenceutils without effort (all is* methods only call charsequencelength() and charat() for example and are now typed as cs, still in su). we can leave @deprecateds method in su as a nicety to avoid too much porting pain: first change the package to lang3 then you can optimize by changing call sites from su to csu.as a start, i put in svn a charsequenceutils (csu) implementation for length() and subsequence()."
5267,5267,"2 0.23313492063492064, 0 0.17757936507936506, 4 0.12549603174603174, 3 0.12202380952380955, 1 0.11855158730158732, 5 0.11160714285714288, 6 0.11160714285714288",[] add methods to classutils to get various forms of classnames in a null-safe manner[] add methods to classutils to get various forms of classnames in a null-safe manner
5268,5268,"5 0.2783068783068782, 1 0.12275132275132275, 6 0.12275132275132272, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5269,5269,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5270,5270,"6 0.2968002015621063, 2 0.12043335852859662, 4 0.12043335852859662, 5 0.11866969009826155, 0 0.11690602166792645, 1 0.11337868480725624, 3 0.11337868480725624",make sure lines in files dont have trailing white spaces and remove all trailing white spaces[] retrieve class hierarchy
5271,5271,"5 0.291959406713505, 0 0.11891751236013531, 1 0.11891751236013531, 4 0.11891751236013531, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5272,5272,"2 0.30519480519480513, 4 0.13011063011063007, 0 0.12169312169312164, 1 0.11495911495911494, 6 0.11159211159211158, 3 0.10822510822510821, 5 0.10822510822510821",crlf -> lfjavadoc: fix typo but working is still awkward.use isempty() where possible. thanks to james sawle for pointing this out.minor code simplificationadding nulltoempty methods to arrayutils per and levon karayans patch. 
5273,5273,"2 0.22585034013605443, 0 0.15600907029478456, 4 0.13378684807256233, 5 0.12902494331065756, 1 0.12585034013605445, 6 0.12108843537414964, 3 0.10839002267573697",removes unnecessary class reference of static method calls which are declared in the same class: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.: add noclassnametostringstyle implementation of tostringstyle. this from github. thanks to innokenty shuvalov.
5274,5274,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5275,5275,"5 0.26904761904761904, 6 0.13386243386243385, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5276,5276,"4 0.26732481610530395, 0 0.20092915214866436, 6 0.12911343399148276, 2 0.12640340689121177, 3 0.10065814943863723, 1 0.08846302748741776, 5 0.08710801393728225","[] add null-safe stringutils apis to wrapstringgetbytes([charset|string]).</action>sort members.make usage of default charset explicit and remove findbugs exclusion. kudos to sebb for spotting this.deprecating stringutils.tostring(byte[],string) in favour of a new charset based method, as reported by aaron digulla in 795"
5277,5277,"3 0.32042328042328044, 2 0.14857142857142858, 6 0.1219047619047619, 4 0.11153439153439153, 0 0.10412698412698414, 1 0.09820105820105823, 5 0.09523809523809527",fix non-critical typos in comments and javadocfix typos in several local variablesscope of local variabel shift can be narrowerpmd: useless parenthesesformat to 120 line length.removed unnecessary multiplication by one.add final modifier to local variables.add final modifier to method parameters.
5278,5278,"6 0.31550337029789083, 0 0.1404653185475103, 4 0.1237225483800826, 2 0.11002391824309635, 3 0.10697977821265492, 1 0.10241356816699282, 5 0.10089149815177215",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
5279,5279,"0 0.22276029055690072, 4 0.14178100618778583, 6 0.1380145278450363, 3 0.1342480495022868, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347","moving center, left, leftpad, right, rightpad, mid, uppercase, lowercase and swapcase over to charsequence input. 687"
5280,5280,"5 0.2783068783068782, 1 0.12275132275132275, 6 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5281,5281,"5 0.3060224089635854, 6 0.13935574229691874, 0 0.11974789915966384, 3 0.11484593837535012, 4 0.10830999066293186, 1 0.10667600373482727, 2 0.1050420168067227",adjust fastdateformat for java 7 behavior regarding format of the year pattern ().refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5282,5282,"6 0.20294784580498862, 3 0.13945578231292516, 5 0.13945578231292516, 4 0.13350340136054423, 0 0.12953514739229025, 1 0.12755102040816327, 2 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
5283,5283,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5284,5284,"5 0.29216269841269843, 6 0.12723214285714282, 2 0.12549603174603172, 1 0.11681547619047622, 4 0.1150793650793651, 0 0.11160714285714288, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
5285,5285,"3 0.18886198547215494, 2 0.18321226795803064, 4 0.1285983319881625, 0 0.12671509281678775, 5 0.12671509281678775, 1 0.12483185364541298, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
5286,5286,"6 0.23782620392789883, 3 0.1380145278450363, 4 0.1380145278450363, 0 0.12294861447403824, 1 0.12106537530266347, 2 0.12106537530266347, 5 0.12106537530266347",refactor exceptioncontext and derived. context contract stipulates a sequence of label-value entries with support for multiple entries for the same label.
5287,5287,"2 0.20294784580498862, 5 0.14540816326530606, 3 0.1354875283446712, 1 0.13350340136054423, 0 0.12755102040816327, 4 0.12755102040816327, 6 0.12755102040816327",: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
5288,5288,"5 0.2864949258391881, 0 0.12073900598490762, 1 0.12073900598490762, 4 0.1207390059849076, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5289,5289,"0 0.17645502645502642, 2 0.17645502645502642, 3 0.14497354497354495, 6 0.13571428571428568, 4 0.12645502645502646, 1 0.12089947089947092, 5 0.11904761904761907",add final modifier to method parameters.checkstylecompiler/generics warnings & a typochanging eol-style to native.misc. event utils.
5290,5290,"5 0.29509379509379513, 2 0.13347763347763344, 6 0.12674362674362671, 1 0.1132756132756133, 0 0.1115921115921116, 4 0.1115921115921116, 3 0.10822510822510824", simplify fastdateformat; eliminate boxingrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
5291,5291,"0 0.2765376984126984, 2 0.13417658730158727, 3 0.13070436507936506, 1 0.12375992063492065, 4 0.11160714285714288, 5 0.11160714285714288, 6 0.11160714285714288",provide read access to the registered listener instancesimproving error checking logic and adding test cases to verify.changing eol-style to native.misc. event utils.
5292,5292,"6 0.253200204813108, 2 0.14388120839733737, 3 0.14029697900665636, 1 0.1169994879672299, 0 0.1152073732718894, 4 0.1152073732718894, 5 0.1152073732718894",make checkstyle happy: add missing javadocreplace tabs with spaces fastdateparser and fastdateprinter support x format
5293,5293,"5 0.27645502645502645, 6 0.1283068783068783, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5294,5294,"0 0.18988830099941206, 4 0.14050558495002943, 5 0.13639035861258086, 6 0.13639035861258086, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323",[] constructorutils.getaccessibleconstructor() does not check the accessibility of enclosing classes
5295,5295,"4 0.1642135642135642, 6 0.15815295815295813, 3 0.15613275613275612, 2 0.13189033189033192, 0 0.12987012987012989, 1 0.12987012987012989, 5 0.12987012987012989",remove redundant type arguments.format.
5296,5296,"5 0.2783068783068783, 6 0.1246031746031746, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5297,5297,"0 0.22708994708994712, 2 0.20042328042328045, 6 0.1293121693121693, 3 0.1204232804232804, 4 0.1144973544973545, 1 0.11301587301587301, 5 0.09523809523809526",added new addlistener() method that takes a boolean for if duplicates are allowed.added test method to make sure that duplicate listeners are not added.using copyonwritearraylist for thread safety.improving error checking logic and adding test cases to verify.changing eol-style to native.misc. event utils.
5298,5298,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5299,5299,"3 0.3304473304473304, 1 0.11832611832611829, 0 0.11495911495911496, 2 0.11159211159211159, 4 0.10822510822510822, 5 0.10822510822510822, 6 0.10822510822510822","add final modifier to local variables.promote uniformity between branches by using registry accessorunused imports + uh, why would you synchronize access to a threadlocal? :p[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
5300,5300,"3 0.22862712336396537, 2 0.14285714285714282, 1 0.12726260094681147, 0 0.12531328320802004, 4 0.12531328320802004, 5 0.12531328320802004, 6 0.12531328320802004",add final modifier to local variables.: add truncatedequals and truncatedcompareto
5301,5301,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5302,5302,"6 0.2996336996336997, 0 0.12527472527472525, 5 0.11843711843711846, 2 0.11843711843711843, 4 0.11672771672771676, 1 0.11159951159951162, 3 0.1098901098901099",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
5303,5303,"2 0.2833092833092833, 6 0.1385281385281385, 3 0.1368446368446368, 1 0.1132756132756133, 0 0.11159211159211162, 4 0.10822510822510824, 5 0.10822510822510824",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure placement of curly braces is consistent: dateutilstest.testlang530 fails for some timezonesreplace tabs with whitespaces and 
5304,5304,"0 0.23507180650037796, 3 0.1803980851599899, 2 0.12219702695893174, 5 0.11866969009826156, 1 0.11690602166792645, 4 0.11337868480725626, 6 0.11337868480725626",add explict default caseadd final modifier to local variables.convert to java 5 enhanced for loops. convert to java 5 enhanced loops. 
5305,5305,"5 0.2764550264550264, 6 0.12645502645502643, 1 0.1208994708994709, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5306,5306,"3 0.2058111380145278, 0 0.1624966370729082, 2 0.13801452784503632, 6 0.12859833198816248, 1 0.12294861447403822, 4 0.12106537530266345, 5 0.12106537530266345",add final modifier to local variables.stringbuffer => stringbuilder where being used as a local-only buffer
5307,5307,"0 0.2438423645320197, 4 0.1403940886699507, 1 0.12315270935960594, 2 0.12315270935960594, 3 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594","use more efficient short cache: use ""short.valueof(int)"" instead of ""new short(short)"""
5308,5308,"3 0.18445539135194305, 0 0.1538040503557745, 2 0.15188834154351394, 4 0.1403940886699507, 1 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594",rewrite to avoid (im)possible npe warningadd final modifier to local variables.
5309,5309,"6 0.26574500768049153, 2 0.1349206349206349, 3 0.1277521761392729, 1 0.1259600614439324, 0 0.11520737327188942, 4 0.11520737327188942, 5 0.11520737327188942",make checkstyle happy: add missing javadocreplace tabs with spaces fastdateparser and fastdateprinter support x format
5310,5310,"0 0.18813427010148323, 1 0.1608118657298985, 2 0.15716887848035388, 5 0.13713244860785842, 4 0.12256049960967999, 3 0.11709601873536303, 6 0.11709601873536303","explicit boxingadding builder interface, and refactoring the builder classes and basicthreadfactory to implement this interface. patch from michael wooten in 601"
5311,5311,"2 0.260425073984396, 6 0.1285983319881625, 4 0.12671509281678775, 0 0.12106537530266344, 1 0.12106537530266344, 3 0.12106537530266344, 5 0.12106537530266344",make sure placement of curly braces is consistent[] introduce const() methods to prevent javac from inlining constants
5312,5312,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
5313,5313,"3 0.20663780663780662, 2 0.14199134199134197, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
5314,5314,"6 0.31854751032833223, 0 0.1495977386388345, 4 0.1206784083496412, 2 0.10545770819743422, 3 0.10393563818221355, 1 0.10089149815177215, 5 0.10089149815177215",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
5315,5315,"5 0.26904761904761904, 6 0.1357142857142857, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5316,5316,"3 0.20259740259740255, 2 0.14199134199134197, 1 0.13593073593073596, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
5317,5317,"5 0.26648781578359043, 0 0.1663313212608987, 6 0.13033758104180637, 3 0.12407780013413813, 1 0.11155823831880167, 2 0.10060362173038231, 4 0.10060362173038231",allow access to parsedpattern for test purposesmake parseexception text similar to that thrown by simpledateformat fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5318,5318,"0 0.17136978248089355, 5 0.15079365079365076, 2 0.1405055849500294, 4 0.1405055849500294, 1 0.1322751322751323, 3 0.1322751322751323, 6 0.1322751322751323",javadocadd methods for cloneables to objectutils ().
5319,5319,"2 0.31769036116862204, 3 0.12928456406717273, 1 0.11801242236024843, 4 0.11157119852772025, 5 0.11157119852772025, 6 0.10835058661145619, 0 0.10351966873706005",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.add final modifier to method parameters.: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
5320,5320,"2 0.1837928153717627, 1 0.16235032024505705, 5 0.1409078251183514, 3 0.13505987190197716, 4 0.1272626009468115, 0 0.12531328320802007, 6 0.12531328320802007",adding hennings github pull request with a triple implementation. 675
5321,5321,"4 0.22468527640941433, 0 0.1595511767925561, 1 0.12315270935960594, 2 0.12315270935960594, 3 0.12315270935960594, 5 0.12315270935960594, 6 0.12315270935960594", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()[] new type util features
5322,5322,"4 0.33378684807256237, 6 0.12267573696145122, 0 0.11791383219954646, 1 0.11315192743764174, 2 0.10839002267573697, 3 0.10204081632653063, 5 0.10204081632653063","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687use index_not_found instead of magic number."
5323,5323,"4 0.1715506715506715, 0 0.1394993894993895, 2 0.1394993894993895, 1 0.13736263736263735, 3 0.13736263736263735, 5 0.13736263736263735, 6 0.13736263736263735",sort by method name.
5324,5324,"0 0.17794486215538843, 4 0.1584516847674742, 6 0.1506544138123085, 3 0.13505987190197713, 2 0.1272626009468115, 1 0.12531328320802007, 5 0.12531328320802007",remove redundant type arguments.changing eol-style to native.misc. event utils.
5325,5325,"0 0.17794486215538843, 4 0.15650236702868278, 3 0.14285714285714282, 2 0.13895850737956, 1 0.1292119186856029, 5 0.1292119186856029, 6 0.12531328320802007",[] [] fix related bugs dealing with type variable inheritance
5326,5326,"6 0.21888053467000831, 3 0.15455304928989133, 0 0.12531328320802007, 1 0.12531328320802007, 2 0.12531328320802007, 4 0.12531328320802007, 5 0.12531328320802007",replace tabs with spaces fastdateparser and fastdateprinter support x format
5327,5327,"2 0.23139880952380953, 0 0.15674603174603172, 6 0.13070436507936506, 1 0.12896825396825393, 3 0.12896825396825393, 4 0.11160714285714288, 5 0.11160714285714288","- fix () systemutils.getjavaversionasfloat throws stringindexoutofboundsexception on android runtime/dalvik vm- refactor for unit testing.- remove odd test code which is copy and pasted from systemutils, which therefore does not test anything."
5328,5328,"2 0.3201465201465202, 4 0.11843711843711846, 3 0.11672771672771673, 1 0.11501831501831504, 0 0.1098901098901099, 5 0.1098901098901099, 6 0.1098901098901099","crlf -> lfjavadoc: fix typo but working is still awkward.simplify isnotempty by reusing isemptyapplying chandrashekar ms patch to , adding isnotempty(array) methods to arrayutils. "
5329,5329,"5 0.27192297684100963, 6 0.14259692948217537, 0 0.11709601873536302, 1 0.11709601873536302, 2 0.11709601873536302, 3 0.11709601873536302, 4 0.11709601873536302",trailing spacesapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5330,5330,"2 0.22874149659863938, 1 0.13151927437641722, 4 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
5331,5331,"4 0.1651969429747207, 0 0.15285126396237503, 2 0.14256319811875368, 1 0.13844797178130513, 3 0.13639035861258086, 5 0.1322751322751323, 6 0.1322751322751323",sort methods.: add stopwatchgettime(timeunit) ()
5332,5332,"5 0.2801587301587301, 6 0.1246031746031746, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5333,5333,"2 0.21230158730158732, 0 0.14459325396825398, 5 0.1376488095238095, 3 0.1307043650793651, 6 0.12723214285714285, 4 0.12549603174603174, 1 0.12202380952380955", - jsontostringstyle does not escape string namesjsontostringstyle: improve private constant name and remove wrong comment: add jsontostringstyle implementation to tostringstyle. this fixes and from github. thanks to thiago andrade.
5334,5334,"4 0.19743803954330263, 2 0.15650236702868278, 1 0.1311612364243943, 5 0.1311612364243943, 0 0.1292119186856029, 3 0.1292119186856029, 6 0.12531328320802007","sort by method name.[] add exceptionutils.throwableoftype(throwable, class) andfriends."
5335,5335,"6 0.1578316861335729, 4 0.15363881401617246, 3 0.14944594189877206, 0 0.1347708894878706, 1 0.1347708894878706, 2 0.1347708894878706, 5 0.1347708894878706",format to 120 line length.
5336,5336,"0 0.18509550712940542, 4 0.164379876244283, 6 0.14178100618778583, 2 0.1304815711595373, 5 0.13048157115953726, 1 0.12671509281678778, 3 0.12106537530266347",removes unnecessary class reference of static method calls which are declared in the same class
5337,5337,"2 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 3 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",reuse
5338,5338,"2 0.2267573696145124, 1 0.13151927437641722, 4 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
5339,5339,"3 0.21269841269841264, 2 0.13593073593073596, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
5340,5340,"6 0.31702544031311153, 0 0.1480756686236138, 4 0.1298108284409654, 2 0.10545770819743425, 3 0.10089149815177215, 5 0.10089149815177215, 1 0.09784735812133075",removes unnecessary class reference of static method calls which are declared in the same classmake sure lines in files dont have trailing white spaces and remove all trailing white spacesreplace tabs with spaces fastdateparser and fastdateprinter support x format
5341,5341,"0 0.16725455614344503, 2 0.15490887713109933, 4 0.1487360376249265, 1 0.13227513227513232, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",: new methods for lang3.validatethis from github.
5342,5342,"0 0.2523809523809524, 1 0.1357142857142857, 2 0.13386243386243385, 3 0.12089947089947091, 4 0.11904761904761905, 5 0.11904761904761905, 6 0.11904761904761905",adding vincent ricards patch to charrange.java providing an iterator that lets you walk the chars in the range. 454
5343,5343,"3 0.23072562358276638, 2 0.13151927437641722, 0 0.12755102040816327, 1 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
5344,5344,"3 0.19653679653679648, 2 0.15007215007215005, 1 0.1339105339105339, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
5345,5345,"2 0.2041847041847042, 4 0.15367965367965367, 0 0.151996151996152, 1 0.1486291486291486, 6 0.12337662337662336, 3 0.10990860990860993, 5 0.10822510822510825","[github] commons-lang pull request : intellij idea refactorings..add todosjavadocfix brace positionsapplying valentin rochers patch to , adding new regexp and in range methods to validate"
5346,5346,"3 0.3615779645191409, 2 0.111577964519141, 6 0.10667600373482727, 0 0.1050420168067227, 1 0.1050420168067227, 4 0.1050420168067227, 5 0.1050420168067227","format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
5347,5347,"5 0.291959406713505, 0 0.11891751236013531, 4 0.11891751236013531, 6 0.11891751236013531, 1 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5348,5348,"5 0.29042658730158727, 6 0.13244047619047616, 2 0.12375992063492063, 1 0.1150793650793651, 0 0.11334325396825398, 4 0.11334325396825398, 3 0.11160714285714288",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
5349,5349,"2 0.1907452246435297, 3 0.1850955071294054, 4 0.1285983319881625, 0 0.12671509281678775, 5 0.12483185364541298, 1 0.12294861447403822, 6 0.12106537530266345",add final modifier to local variables. addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
5350,5350,"5 0.27460317460317457, 6 0.12830687830687829, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5351,5351,"5 0.26904761904761904, 6 0.13386243386243382, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5352,5352,"3 0.2086580086580086, 2 0.13997113997114, 1 0.1318903318903319, 0 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",add final modifier to local variables.
5353,5353,"6 0.2417233560090703, 4 0.2195011337868481, 2 0.12902494331065756, 1 0.10362811791383221, 0 0.10204081632653063, 3 0.10204081632653063, 5 0.10204081632653063",make sure lines in files dont have trailing white spaces and remove all trailing white spaces: avoid string allocation in strbuilder.append(charsequence). this fixes from github. thanks to mikhail mazurskiy and fabian lange.
5354,5354,"3 0.328042328042328, 6 0.2041107041107041, 2 0.09727309727309727, 4 0.09442409442409443, 1 0.09299959299959301, 0 0.09157509157509158, 5 0.09157509157509158","make sure lines in files dont have trailing white spaces and remove all trailing white spacesremove unused constructor parameterformat.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
5355,5355,"6 0.21522733387140164, 4 0.14178100618778583, 2 0.1342480495022868, 5 0.1304815711595373, 0 0.12859833198816253, 1 0.12671509281678778, 3 0.12294861447403824",[] add regexutils class instead of overloadinh methods instringutils that take a regex to take precompiled pattern.
5356,5356,"0 0.1794457896152811, 3 0.1624966370729082, 2 0.1474307237019101, 1 0.14554748453053534, 4 0.12294861447403822, 5 0.12106537530266345, 6 0.12106537530266345",merge branch  of https://github.com/markdacek/commons-lang: added isexcludenullvalues to reflectiontostringbuilder and test
5357,5357,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5358,5358,"0 0.18813427010148318, 2 0.1626333593546708, 1 0.15716887848035385, 5 0.1353109549830861, 4 0.12256049960967996, 3 0.117096018735363, 6 0.117096018735363","explicit boxingadding builder interface, and refactoring the builder classes and basicthreadfactory to implement this interface. patch from michael wooten in 601"
5359,5359,"0 0.16931216931216928, 3 0.15079365079365076, 4 0.14462081128747795, 2 0.13844797178130513, 1 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",refactor range with lots of new methods
5360,5360,"5 0.15363881401617246, 6 0.15363881401617246, 2 0.14944594189877206, 1 0.13896376160527107, 0 0.1347708894878706, 3 0.1347708894878706, 4 0.1347708894878706",checkstyle and trailing spaces.
5361,5361,"0 0.21056547619047616, 2 0.16542658730158727, 3 0.13764880952380948, 4 0.13070436507936506, 6 0.12723214285714282, 1 0.11681547619047622, 5 0.11160714285714288","add final modifier to method parameters.[] introduced concurrentruntimeexception and extended the exception handling methods of concurrentutils to support runtime exceptions, too."
5362,5362,"3 0.18783068783068776, 5 0.14873603762492646, 6 0.13433274544385657, 0 0.1322751322751323, 1 0.1322751322751323, 2 0.1322751322751323, 4 0.1322751322751323",: fastdateformat doesnt respect summer daylight in some localized strings
5363,5363,"5 0.2727513227513227, 6 0.12830687830687829, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5364,5364,"2 0.3998488284202571, 3 0.13265306122448978, 1 0.10355253212396068, 4 0.09958427815570674, 0 0.09297052154195011, 6 0.08635676492819352, 5 0.0850340136054422",add final modifier to local variables.better javadoc for arrayutils.swap variantscrlf -> lfjavadoc: fix typo but working is still awkward.merge branch : inconsistent behavior of swap for malformed inputs. thanksto adrian ber.consistent treatment for negative indices for swap methodexamples added in javadoctabs replaced by spacesnew tests addedswap and shift for arrays
5365,5365,"5 0.2773998488284202, 6 0.15394305870496344, 1 0.11514235323759135, 0 0.11337868480725626, 2 0.11337868480725626, 3 0.11337868480725626, 4 0.11337868480725626", fastdateparser and fastdateprinter support x formatapplying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5366,5366,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.15154237795747227, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
5367,5367,"5 0.28521825396825395, 6 0.12896825396825393, 2 0.12375992063492061, 1 0.1168154761904762, 4 0.1168154761904762, 0 0.11681547619047618, 3 0.11160714285714286",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. checkstyle and trailing spaces.
5368,5368,"5 0.28815628815628813, 0 0.21978021978021978, 6 0.1243386243386243, 1 0.09299959299959301, 2 0.09157509157509158, 3 0.09157509157509158, 4 0.09157509157509158",dont save short eras if they are the same as the long eras fastdateparser does not handle non-gregorian calendars properlyuse calendargetdisplaynames() instead of dateformatsymbolsgeteras()getinstance() (java 1.6) supports more localesexplicit conversion to integer; save the value for use latergetinstance(locale) is java 1.6+applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5369,5369,"4 0.34013605442176875, 0 0.12267573696145122, 6 0.12108843537414966, 2 0.10839002267573697, 1 0.10362811791383221, 3 0.10204081632653063, 5 0.10204081632653063","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687use index_not_found instead of magic number."
5370,5370,"2 0.2267573696145124, 1 0.13151927437641722, 4 0.13151927437641722, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
5371,5371,"6 0.2658137882018479, 0 0.16631130063965882, 4 0.12153518123667376, 2 0.11656005685856435, 1 0.11324330727315804, 3 0.10992655768775174, 5 0.10660980810234544",make sure lines in files dont have trailing white spaces and remove all trailing white spaces: parsedatestrictly doest pass specified locale - dateutilsparsedate uses default locale; add locale support
5372,5372,"3 0.3237133237133236, 0 0.12000962000961998, 2 0.11832611832611829, 1 0.11327561327561327, 4 0.10822510822510822, 5 0.10822510822510822, 6 0.10822510822510822","add final modifier to local variables.promote uniformity between branches by using registry accessorunused imports + uh, why would you synchronize access to a threadlocal? :p[] clear threadlocal recursion registry (compatibly with existing tests, first pass)"
5373,5373,"3 0.43475572047000616, 2 0.09709338280766851, 6 0.09565038136466707, 1 0.09420737992166561, 0 0.09276437847866417, 4 0.09276437847866417, 5 0.09276437847866417","add final modifier to local variables.format.statement unnecessarily nested within else clause.\refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
5374,5374,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
5375,5375,"5 0.2746031746031745, 6 0.12645502645502643, 1 0.12275132275132275, 0 0.11904761904761904, 2 0.11904761904761904, 3 0.11904761904761904, 4 0.11904761904761904",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5376,5376,"3 0.18330773169482847, 0 0.16001024065540195, 1 0.1402969790066564, 2 0.13850486431131592, 6 0.1313364055299539, 5 0.12416794674859194, 4 0.12237583205325145",add final modifier to local variables.: added atomicinitializer class. introduced new concurrentinitializer interface which is now implemented by all all initializer classes.
5377,5377,"5 0.28285193858964347, 1 0.12256049960967995, 4 0.12256049960967995, 6 0.12073900598490764, 0 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5378,5378,"3 0.40378343118069143, 2 0.10697977821265493, 0 0.09784735812133073, 1 0.09784735812133073, 4 0.09784735812133073, 5 0.09784735812133073, 6 0.09784735812133073","add final modifier to local variables.format.refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names"
5379,5379,"6 0.2972385301152424, 2 0.19069362904979342, 5 0.11002391824309632, 1 0.10545770819743425, 3 0.10089149815177215, 0 0.09784735812133075, 4 0.09784735812133075",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)
5380,5380,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
5381,5381,"5 0.27645502645502645, 6 0.12830687830687829, 0 0.11904761904761905, 1 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5382,5382,"0 0.2296564195298373, 2 0.17621056861563192, 4 0.14526823387582882, 6 0.14526823387582882, 3 0.10448061080972475, 1 0.1030741410488246, 5 0.09604179224432392","removes unnecessary class reference of static method calls which are declared in the same class: add (t) casts to get unit tests to pass in old jdk. this fixes from github. thanks to jonathan baker.<action issue="""" type=""add"" dev=""ggregory"">add serializationutils.roundtrip(t extends serializable) to serialize then deserialize</action>"
5383,5383,"5 0.2568986568986569, 3 0.17142857142857137, 2 0.12014652014652014, 1 0.11672771672771674, 6 0.11501831501831503, 0 0.10989010989010989, 4 0.10989010989010989",add final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5384,5384,"2 0.18239538239538236, 1 0.144011544011544, 5 0.14199134199134197, 3 0.13795093795093794, 4 0.13391053391053392, 0 0.12987012987012989, 6 0.12987012987012989","adding basicthreadfactory class. same as olivers original patch in , with an @since 3.0 added"
5385,5385,"3 0.20865800865800863, 2 0.13795093795093794, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
5386,5386,"0 0.21303258145363405, 3 0.13505987190197716, 1 0.13505987190197713, 4 0.13311055416318573, 2 0.1292119186856029, 5 0.1292119186856029, 6 0.12531328320802007",[] add empty_array constants to classes inorg.apache.commons.lang3.tuple
5387,5387,"2 0.2800583835066594, 0 0.17405582922824306, 3 0.137018792191206, 6 0.10636745119503739, 4 0.10381317277869001, 5 0.10125889436234263, 1 0.09742747673782155","formatting fixes perhttps://patch-diff.githubusercontent.com/raw/apache/commons-lang/pull/128.diffcrlf -> lfjavadoc: fix typo but working is still awkward. read wrong component type of array in add in arrayutilsadd final modifier to local variables.checkstyle and trailing spaces. arrayutils.add(t[] array[, offset], t element) can create unexpected classcastexception"
5388,5388,"3 0.2046176046176046, 2 0.141991341991342, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
5389,5389,"6 0.2380952380952381, 2 0.21031746031746032, 3 0.1485890652557319, 1 0.10383597883597884, 0 0.10074955908289243, 4 0.09920634920634923, 5 0.09920634920634923",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.make sure lines in files dont have trailing white spaces and remove all trailing white spacesadd final modifier to local variables.
5390,5390,"2 0.16831386642707397, 6 0.1536388140161725, 1 0.13896376160527107, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064, 5 0.13477088948787064",: recursive and reflective equalsbuilder ()patch by yathos ug
5391,5391,"2 0.2267573696145124, 4 0.13350340136054423, 1 0.12953514739229025, 0 0.12755102040816327, 3 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",crlf -> lfjavadoc: fix typo but working is still awkward.
5392,5392,"2 0.19353940406571982, 0 0.16235032024505705, 1 0.13505987190197716, 4 0.13116123642439428, 3 0.1272626009468115, 5 0.12531328320802007, 6 0.12531328320802007",[] add methods to objectutils to get various forms of classnames in a null-safe manner
5393,5393,"0 0.16725455614344503, 2 0.15490887713109933, 4 0.1487360376249265, 1 0.13227513227513232, 3 0.13227513227513232, 5 0.13227513227513232, 6 0.13227513227513232",: new methods for lang3.validatethis from github.
5394,5394,"0 0.1878306878306878, 4 0.14256319811875368, 6 0.14050558495002943, 1 0.1322751322751323, 2 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323",a bit of dog food and a lot of javadoc tweakage
5395,5395,"3 0.3014027316352898, 6 0.2484311554078996, 5 0.10114433370247324, 0 0.09210040605389443, 2 0.08951642672572906, 4 0.08434846806939832, 1 0.08305647840531563","format.: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)refactor fastdateparseruse hashmap for performance break down regular expressions to per-format, allowingparseposition to get set add parse with calendar input, allowing client to set leniencyand/or replace display names: dateutilstest.testlang530 fails for some timezones"
5396,5396,"2 0.346485260770975, 4 0.1258503401360544, 0 0.11791383219954645, 1 0.1036281179138322, 3 0.10204081632653061, 5 0.10204081632653061, 6 0.10204081632653061",": arrayutils.removeall(object array, int... indices) should do the clone, not its callers ()crlf -> lfjavadoc: fix typo but working is still awkward.[] complement arrayutils.addall() variants with by-index and by-value removal methods"
5397,5397,"4 0.41483859461387557, 2 0.13269127875869446, 0 0.0977349741394685, 3 0.0977349741394685, 1 0.09648653468878185, 5 0.08025682182985554, 6 0.08025682182985554","merge branch fix-: add compare methods in stringutilsthis from github. add null safe compare methods in stringutils : - stringutils.compare(string str1, string str2); - stringutils.compare(string str1, string str2, boolean nullisless); - stringutils.compareignorecase(string str1, string str2); - stringutils.compareignorecase(string str1, string str2, boolean nullisless);"
5398,5398,"3 0.21471861471861464, 2 0.13593073593073596, 0 0.12987012987012986, 1 0.12987012987012986, 4 0.12987012987012986, 5 0.12987012987012986, 6 0.12987012987012986",reuseadd final modifier to local variables.
5399,5399,"5 0.27460317460317457, 6 0.1283068783068783, 1 0.12089947089947091, 0 0.11904761904761905, 2 0.11904761904761905, 3 0.11904761904761905, 4 0.11904761904761905",applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5400,5400,"2 0.2702947845804989, 3 0.15600907029478456, 6 0.14489795918367343, 0 0.11632653061224488, 4 0.10839002267573697, 1 0.10204081632653063, 5 0.10204081632653063",add final modifier to local variables.remove trailing whitespacescrlf -> lfjavadoc: fix typo but working is still awkward.implements : add a method to arrayutils for removing all occurrences of a given element. thanks to haiyang li.
5401,5401,"5 0.1536388140161725, 6 0.1536388140161725, 2 0.15154237795747227, 1 0.13686732554657086, 0 0.13477088948787064, 3 0.13477088948787064, 4 0.13477088948787064",checkstyle and trailing spaces.
5402,5402,"6 0.2049319727891156, 5 0.14143990929705214, 3 0.13747165532879818, 2 0.13151927437641722, 4 0.12953514739229025, 0 0.12755102040816327, 1 0.12755102040816327"," partial: implement format u for fastdateformat, day number of week"
5403,5403,"0 0.2442396313364055, 3 0.14746543778801838, 4 0.1438812083973374, 2 0.11879160266257041, 1 0.1152073732718894, 5 0.1152073732718894, 6 0.1152073732718894",: typeutils.isassignable throws nullpointerexception when fromtype has type variables and totype generic superclass specifies type variable ()
5404,5404,"5 0.2883164194639604, 4 0.12438199323445225, 1 0.11891751236013531, 0 0.11709601873536299, 2 0.11709601873536299, 3 0.11709601873536299, 6 0.11709601873536299",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5405,5405,"0 0.22276029055690072, 2 0.1474307237019101, 6 0.13989776701641105, 4 0.12671509281678778, 1 0.12106537530266347, 3 0.12106537530266347, 5 0.12106537530266347","[] introduced concurrentruntimeexception and extended the exception handling methods of concurrentutils to support runtime exceptions, too."
5406,5406,"3 0.19249639249639247, 2 0.15411255411255412, 1 0.13391053391053392, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
5407,5407,"4 0.19302721088435368, 0 0.16921768707482987, 1 0.1275510204081633, 2 0.1275510204081633, 3 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
5408,5408,"4 0.1844155844155844, 0 0.14805194805194802, 2 0.13997113997114, 1 0.13391053391053392, 3 0.13391053391053392, 5 0.12987012987012989, 6 0.12987012987012989",sort members.: add stringutils.truncate() ()
5409,5409,"5 0.2198111312035363, 2 0.20012055455093433, 3 0.14948764315852922, 0 0.13682941531042797, 6 0.10307414104882459, 1 0.09744826200522405, 4 0.09322885272252363","make whitespace use after tokens consistent and add a checkstyle rule to enforce it.: resurrect applyrules(java.util.calendar, java.lang.stringbuffer) for binary compatibilityadd final modifier to local variables.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . "
5410,5410,"2 0.17229437229437225, 3 0.16421356421356423, 4 0.13997113997113997, 1 0.13391053391053392, 0 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to method parameters.
5411,5411,"2 0.1878306878306878, 5 0.14050558495002943, 1 0.13639035861258086, 4 0.13639035861258086, 0 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
5412,5412,"4 0.17191283292978207, 0 0.15496368038740918, 1 0.14554748453053534, 2 0.14366424535916061, 6 0.1380145278450363, 3 0.124831853645413, 5 0.12106537530266347",: validate: add inclusivebetween and exclusivebetween overloads for primitives types. initial patch provided by sebb.
5413,5413,"5 0.2810304449648712, 4 0.12438199323445226, 0 0.12256049960967995, 6 0.12073900598490764, 1 0.117096018735363, 2 0.117096018735363, 3 0.117096018735363",refactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5414,5414,"6 0.228110599078341, 3 0.16359447004608293, 0 0.1313364055299539, 4 0.1313364055299539, 1 0.11520737327188943, 2 0.11520737327188943, 5 0.11520737327188943",pmd: useless parentheses dateutils issamelocaltime() compares the hour using 12hour calendar.hour instead of 24hour calendar.hour_of_day - thanks to christian
5415,5415,"3 0.19855699855699852, 2 0.15007215007215005, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
5416,5416,"6 0.30989010989010984, 0 0.12698412698412698, 5 0.11843711843711845, 1 0.11330891330891332, 4 0.1115995115995116, 2 0.10989010989010989, 3 0.10989010989010989",make sure lines in files dont have trailing white spaces and remove all trailing white spacesmake use of existing timeunit class to manage time units.
5417,5417,"4 0.3139066571902393, 0 0.12319355602937693, 6 0.1198768064439706, 1 0.11656005685856433, 2 0.11324330727315804, 3 0.10660980810234542, 5 0.10660980810234542","rolling stringutils and test code back to r1082046. the move to charsequence is theoretically desirable, but there are no common immutable charsequence subclasses other than string, making this a complex and useless change. instead strbuilder should be enhanced. 687"
5418,5418,"0 0.15659340659340656, 3 0.15659340659340656, 1 0.13736263736263737, 2 0.13736263736263737, 4 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] vastly expanded typeutils
5419,5419,"2 0.1878306878306878, 5 0.1425631981187537, 4 0.13639035861258086, 0 0.13433274544385657, 1 0.13433274544385657, 3 0.1322751322751323, 6 0.1322751322751323", addgetandincrement/getanddecrement/getandadd/incrementandget/decrementandget/addandgetin mutable* classes
5420,5420,"4 0.19302721088435368, 0 0.16921768707482987, 1 0.1275510204081633, 2 0.1275510204081633, 3 0.1275510204081633, 5 0.1275510204081633, 6 0.1275510204081633", - stackoverflowerror on typeutils.tostring(...) for a generic return type of enum.valueof ()
5421,5421,"2 0.25860805860805863, 3 0.18339438339438335, 6 0.11501831501831501, 1 0.11330891330891332, 0 0.10989010989010989, 4 0.10989010989010989, 5 0.10989010989010989",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.use validateistrue to validate argumentsfixing crlfsstatement unnecessarily nested within else clause.add threadutils
5422,5422,"3 0.19855699855699852, 2 0.15007215007215008, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
5423,5423,"6 0.3019112406867509, 2 0.16358924522189827, 5 0.16245545837382572, 3 0.12504049238743115, 4 0.08875931324910914, 1 0.07968901846452865, 0 0.0785552316164561",make whitespace use after tokens consistent and add a checkstyle rule to enforce it.avoid deprecation message by inlining the deprecated method code body: fastdateformat support of the week-year component (uppercase y)revert while investigating travis failures: fastdateformat support of the week-year component (uppercase y)add final modifier to local variables.refactor some duplicate code.applying chas hontons implementation of dateparser and subsequent integration into fastdateformat and the time package. see . 
5424,5424,"5 0.26858150667674474, 4 0.13277903754094228, 3 0.12925170068027209, 0 0.12396069538926684, 1 0.11690602166792645, 6 0.11514235323759135, 2 0.11337868480725626",change calendar.getinstance to new gregoriancalendarrefactoring fastdateformat per to use the formatcache class created for an upcoming dateparser functionality. ive kept formatcache package-private for now. 
5425,5425,"4 0.17582417582417575, 0 0.13736263736263737, 1 0.13736263736263737, 2 0.13736263736263737, 3 0.13736263736263737, 5 0.13736263736263737, 6 0.13736263736263737",[] new type util features
5426,5426,"3 0.22278911564625845, 2 0.1354875283446712, 1 0.13151927437641722, 0 0.12755102040816327, 4 0.12755102040816327, 5 0.12755102040816327, 6 0.12755102040816327",fixing crlfsstatement unnecessarily nested within else clause.add threadutils
5427,5427,"3 0.19451659451659448, 2 0.15411255411255412, 1 0.13189033189033192, 0 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",add final modifier to local variables.
5428,5428,"3 0.15966386554621845, 0 0.1400560224089636, 1 0.1400560224089636, 2 0.1400560224089636, 4 0.1400560224089636, 5 0.1400560224089636, 6 0.1400560224089636",format.
5429,5429,"0 0.18837535014005602, 2 0.176937441643324, 5 0.14915966386554622, 4 0.13445378151260504, 3 0.12301587301587302, 1 0.12301587301587301, 6 0.10504201680672272","﻿adding 2 patches. one includes a comprehensive review of the builder package, both style and syntax along with just syntax fixes for the other packages.the other fixes minor typos in the builder test package. "
5430,5430,"4 0.2671201814058957, 0 0.1877551020408163, 6 0.13378684807256233, 1 0.10362811791383221, 2 0.10362811791383221, 3 0.10204081632653063, 5 0.10204081632653063","hi,the javadoc examples for the stringutils.splitbywholeseparator(...) methods are not correct.- the examples of splitbywholeseperator(string,string) are illustrating the usage of the stringutils.split(string,string) method.- the 6th example of splitbywholeseperator(string,string,int) is not correct and should be removed.regards,maarten "
5431,5431,"4 0.24046706805327495, 0 0.2302499543878854, 5 0.13957307060755333, 2 0.10381317277869, 3 0.10125889436234262, 6 0.09870461594599524, 1 0.08593322386425835","the padding array in class stringutils is one entry too short.as declared, it overflows on \uffff.to test, run: stringutils.leftpad(""abcd"", 10, \ufffe) // no exception stringutils.leftpad(""abcd"", 10, \uffff) // arrayindexoutofboundsexceptioncurrent code: private static final string[] padding = new string[character.max_value];suggested fix: private static final string[] padding = new string[character.max_value + 1]; "
5432,5432,"4 0.23005291005291004, 0 0.22857142857142856, 5 0.12190476190476188, 1 0.11005291005291001, 6 0.11005291005291001, 2 0.10412698412698411, 3 0.09523809523809525","i just discovered that the method tostringbuilder.reflectiontostring() does not work in a class hierarchy.for example:class a defines inst var a.class b extends a defines inst var b.new a().tostring returns ""a=...""new b().tostring returns ""b=...""when i expected new b().tostring to return ""a=...,b=...""can i use reflectiontostring() to accomplish this?thank you for considering this request.gary "
5433,5433,"0 0.30494864612511674, 4 0.16769374416433241, 3 0.11932773109243695, 6 0.11279178338001865, 1 0.10887021475256767, 2 0.10102707749766571, 5 0.08534080298786183","stringutils.split ignores empty items (eg. delimiter at the beginning of the string, 2 delimiters directly after another)eg.string[] l = stringutils.split(""x,de,germany"", "","");results in l[0] = ""x""l[1] = ""de""l[2] = ""germany""string[] l = stringutils.split("",de,germany"", "","");results inl[0] = ""de""l[1] = ""germany""expected : l[0] = """" (or null ?)l[1] = ""de""l[2] = ""germany""the current behaviour makes it impossible to detect the ""column"" (eg. for parsing .csv files). "
5434,5434,"0 0.5816947010976863, 4 0.1770512516781174, 2 0.0681513069572771, 5 0.048803601042407004, 1 0.04217010187159441, 3 0.0421701018715944, 6 0.03995893548132353","append two arrays of any object type to an equalsbuilder using equalsbuilder.append(object[], object[]) -- well call the first lhs and the second rhs. if, for any i, lhs[i] is not null, rhs[i] is not null, and rhs[i] is not of the same type as, or a subtype of, lhs[i], then the equalsbuilder will return false.however, this behavior is incorrect. while rare, it is perfectly valid in java to define an equals() method on a class a that will return true when passed in an object of some class b, where b is not the same as a nor a subtype of a. (a conceptual example is comparing a rgbcolor to a cmykcolor, where rgbcolor is not a subclass of cmykcolor, nor vice-versa. in this example, the equalsbuilder will return false, whether the equals() method is defined on rgbcolor to explicitly check cmykcolors, or even if you define a base-class color.equals() method that does an abstract comparison.)to reproduce:public static class a { private int a; public a(int a) { this.a = a; } public boolean equals(object o) { if (o == this) return true; if (o instanceof a) return this.a = ((a) o).geta(); if (o instanceof b) return this.a = ((b) o).getb(); return false; } public int geta() { return this.a; }}public static class b { private int b; public b(int b) { this.b = b; } public boolean equals(object o) { if (o == this) return true; if (o instanceof a) return this.b = ((a) o).geta(); if (o instanceof b) return this.b = ((b) o).getb(); return false; } public int getb() { return this.b; }}object[] x = new object[] { new a(1) };object[] y = new object[] { new b(1) };system.err.println(""x[0].equals(y[0])? "" + x[0].equals(y[0]));system.err.println(""does equalsbuilder think the arrays are equal? "" + (new equalsbuilder().append(x, y).isequals()));this program will output:truefalsethe attached patch adds to an existing unit-test case some code that proves the existence of this bug, and also fixes it. (it also fixes com-1842.) "
5435,5435,"6 0.17460317460317457, 4 0.17089947089947088, 3 0.1468253968253968, 0 0.13571428571428568, 1 0.13386243386243382, 2 0.11904761904761907, 5 0.11904761904761907","the following example from the javadoc is incorrect.stringutils.replace(""aba"", ""a"", """") = ""aba""it should be:stringutils.replace(""aba"", ""a"", """") = ""b"" "
5436,5436,"0 0.5690811535881959, 1 0.09725016767270288, 5 0.07847082494969819, 6 0.0706460988151129, 4 0.06908115358819585, 3 0.06360384529398613, 2 0.051866756092108224","my program manages to generate this exceptionjavac psistatus.javapsistatus.java:59: cannot access org.apache.commons.lang.exception.nestableexceptionfile org/apache/commons/lang/exception/nestableexception.class not found connection con = torque.getconnection(""mypsi"");heres a snippet of source:package org.apache.jetspeed.portal.portlets;import org.apache.jetspeed.portal.portlets.abstractinstanceportlet;import org.apache.turbine.util.rundata;import org.apache.turbine.om.security.*;import org.apache.ecs.concreteelement;import org.apache.ecs.stringelement;import org.apache.torque.*;import javax.servlet.*;import java.sql.*;import javax.sql.*;import java.text.*;import java.util.*;public class myclass extends abstractinstanceportlet{ public concreteelement getcontent (rundata rundata) { connection con = torque.getconnection(""mypsi""); }} "
5437,5437,"0 0.2174351221970269, 4 0.20861678004535142, 1 0.11690602166792644, 2 0.11514235323759134, 6 0.11514235323759134, 3 0.11337868480725624, 5 0.11337868480725624",classutils.primitivetowrapper returns null when the specified class isvoid.type. because void.type is primitive but not present intoprimitivewrappermap. should return void.type instead. 
5438,5438,"4 0.3857473544973546, 0 0.19593253968253968, 2 0.11028439153439151, 1 0.08250661375661375, 5 0.07671957671957674, 3 0.07440476190476192, 6 0.07440476190476192","the following is directly from the javadoc page. please see inline notes.*** begin quote ***to use this class write code as follows: public class person { string name; int age; boolean issmoker; ... public string tostring() { return new tostringbuilder(this). append(name, ""name""). //!! should be - append(""name"", name). append(age, ""age""). //!! should be - append(""age"", age). append(smoker, ""smoker""). //!! should be - append(""smoker"", smoker). tostring(); } }*** end quote ***in short, the order of arguments to the append method in the example have been reversed.thank you. "
5439,5439,"0 0.5860389610389609, 4 0.14727633477633476, 2 0.07025613275613275, 3 0.05573593073593073, 1 0.05384199134199133, 6 0.04563492063492063, 5 0.04121572871572872","tostringbuilder.reflectiontostring() enters an infinite loop when used with the following example://///////////////////////////public class outer { inner inner = new inner(); class inner { public string tostring() { return tostringbuilder.reflectiontostring(this); } } public string tostring() { return tostringbuilder.reflectiontostring(this); } public static void main(string[] args) { outer outer = new outer(); system.out.println(outer); }}/////////////////////////////the reason is that the two classes refer to each other via the explicit field inner and the implicit field outer.this. the bug can be resolved by skipping the implicit fields. is there any good reason for printing those anyway?i am not sure what is the best way to detect if a field is an implicit field. but i patched the code myself in a way that seemed to work://///////////////////////////public static string reflectiontostring(object object, tostringstyle style, boolean outputtransients) { if (object == null) { throw new illegalargumentexception(""the object must not be null""); } if (style == null) { style = getdefaultstyle(); } field[] fields = object.getclass().getdeclaredfields(); field.setaccessible(fields, true); tostringbuilder builder = new tostringbuilder(object, style); for (int i = 0; i < fields.length; ++i) { field f = fields[i]; if (!f.getname().startswith(""this$"")) { if (outputtransients || !modifier.istransient(f.getmodifiers())) { if (!modifier.isstatic(f.getmodifiers())) { try { builder.append(f.getname(), f.get(object)); } catch (illegalaccessexception ex) { //this cant happen. would get a security exception instead //throw a runtime exception in case the impossible happens. throw new internalerror(""unexpected illegalaccessexception""); } } } } } return builder.tostring();}/////////////////////////////notice the extra if statement that tests for field names starting with ""this$"". i dont know if this is guaranteed to work always, though. "
5440,5440,"0 0.21904761904761905, 4 0.15608465608465608, 2 0.13386243386243388, 5 0.13386243386243388, 1 0.11904761904761907, 3 0.11904761904761907, 6 0.11904761904761907","low characters such as #18 are not escaped, and therefore are mixed together with other characteres as if there were normal characteres such as \a\, \1\ etc.possibly solved in other versions? "
5441,5441,"0 0.4283998283998285, 3 0.16293436293436298, 1 0.14671814671814679, 6 0.07344487344487347, 4 0.07104247104247106, 5 0.06563706563706564, 2 0.05182325182325183","im assuming that the goal of the truncate() method inorg.apache.commons.lang.time.dateutils is to be a shorthand for the otherwisecumbersome java.util.calendar operations of setting all lower fields to 0.in other words, the following 2 methods are (by me) expected to yield the same: private date commonstruncate(date date) { return dateutils.truncate(date, calendar.date); } private date truncate(date date) { calendar c = calendar.getinstance(); c.settime(date); c.set(calendar.hour_of_day, 0); c.set(calendar.minute, 0); c.set(calendar.second, 0); c.set(calendar.millisecond, 0); return c.gettime(); }this is generally the case, except for the very pathological case of theultimate biggest date java allows you to make: date endoftime = new date(long.max_value); // fyi: sun aug 17 07:12:55 cet 292278994 -- 807 milliscommons-result: sun aug 17 02:00:00 cest 292278994 // commonstruncate(endoftime)handmade-result: sun aug 17 00:00:00 cest 292278994 // truncate(endoftime)(mind the 2h difference)another odd observation concerning this special date is that the commons-resultwill match the other one if we allow the commons truncate to operate on theresult again:commons-double-truncate-result: sun aug 17 00:00:00 cest 292278994 // truncate(truncate(endoftime))(which is somewhat another surprise: one would expect truncation not to change adate that was already truncated)my (totally wild) guess is that this is related to timezone and dst issuesfact being that similar effects are seen on all dates pointing to a moment inthe last 2hours of the date spectrum.i understand that this is a very hypothetical issue, nevertheless.kind regards,-marc= "
5442,5442,"6 0.16040100250626563, 0 0.1584516847674742, 2 0.1506544138123085, 4 0.14480646059593424, 3 0.13505987190197716, 1 0.12531328320802007, 5 0.12531328320802007","add systemutils.awt_toolkit, which is useful to detect whether or not the jre isrunning on a headless platform. "
5443,5443,"4 0.33546552949538017, 0 0.12319355602937687, 6 0.11324330727315801, 2 0.10826818289504857, 1 0.10660980810234541, 3 0.10660980810234541, 5 0.10660980810234541","there\s an error in the javadoc for the stringutils.chomp(string, string)method. one of the examples says:stringutils.chomp(""foo "", ""foo"") = ""foo""this should be:stringutils.chomp(""foo "", ""foo"") = ""foo "" "
5444,5444,"0 0.584331198366286, 4 0.1658776571057273, 2 0.06581267984776756, 1 0.050867910517033314, 5 0.04956836535783904, 3 0.041771094402673355, 6 0.041771094402673355","equals considers self equal to any object that has an accessible public getname() method which returns a string that is the same than the internal name iname. so if you compare two objects of subclasses of enum that are not related otherwise, but incidentally have the same name iname the equals method returns true. but even worse, its also possible to compare a subclass of enum to an object of a totally unrelated class and to consider the objects equal if the totally unrelated class provides a getname method that returns a string equal to iname. if the getname method of the other object isnt accessible, an illegalaccessexception is thrown and caught in the equals method and false is returned which in this case seems to be correct.the root of the problem is the use of reflection without checking first whether the names of the classes (via other.getclass().getname().equals(this.getclass().getname())) are the same (not the classes themselves, this is tested by the equals method) before invoking the getname method on the other object via reflection. if the names of the classes arent equal, false can be returned immediately instead of using reflection. only if the classnames are equal reflection should be used to determine equality.note: the old implementation of enums.equals in the commons-lang 2.0 distribution seems to work ok in the first case with both objects being subclasses of enum. in the second case of the totally unrelated class, a classcastexception is thrown, but according to joshua bloch (effective java) and the sdk-api-documentation for object.equals this violates the contract for equals because equals is supposed to deliver true or false for any two non null references. "
5445,5445,"0 0.5485466914038343, 4 0.11781076066790354, 1 0.09688723974438261, 2 0.07524221809936095, 5 0.0600907029478458, 3 0.05215419501133786, 6 0.049268192125334995","this stems from a discussion on commons-user.the basic idea is that tostringstyle could be customized to include an optionaljava.text dataformat object. if the attched patch were in (mod some formattingand unit tests which i can do), user could write code like this:import java.lang.reflect.field;import java.text.simpledateformat;import java.util.date;import org.apache.commons.lang.builder.reflectiontostringbuilder;import org.apache.commons.lang.builder.tostringstyle;public class testrtsb { static class mytostringstyle extends tostringstyle { mytostringstyle() { this.setdateformat(new simpledateformat(""yyyy-mm-dd"")); } } public static void main(string[] arguments) { system.out.println(new testrtsb()); } private int foo = 22; private date mydate = new date(); public string tostring() { return new reflectiontostringbuilder(this, newmytostringstyle()).tostring(); }// use tostringstyle.setdateformat instead of://// public string tostring0() {// return (new reflectiontostringbuilder(this) {// protected object getvalue(field field) throwsillegalargumentexception, illegalaccessexception {// object value = super.getvalue(field);// if (""mydate"".equals(field.getname())) {// return new simpledateformat(""yyyy-mm-dd"").format(value);// } else {// return value;// }// }// }).tostring();// }}any thoughts? "
5446,5446,"0 0.2226757369614513, 6 0.15918367346938778, 5 0.14489795918367346, 4 0.12902494331065759, 2 0.12585034013605442, 3 0.11632653061224489, 1 0.10204081632653064","the first statement in validate.nonullemelents(object[], string) is validate.notnull(array). this should be validate.notnull(array, message). because of this, the message is not used when the array is null itself. this also applies to validate.nonullemelents(collection, string) "
5447,5447,"4 0.17538381472807701, 0 0.1717408274785324, 3 0.1498829039812646, 2 0.1280249804839969, 5 0.1262034868592246, 1 0.12438199323445226, 6 0.12438199323445226",according to the javadoc the various methods in the fraction class such as add()throw an illegalargumentexception when null is passed to them. this is veryunusual. they should throw a nullpointerexception instead 
5448,5448,"4 0.17548500881834211, 0 0.15079365079365076, 2 0.14462081128747795, 1 0.1322751322751323, 3 0.1322751322751323, 5 0.1322751322751323, 6 0.1322751322751323",the stringutils.chomp function doesn\t work.thanks 
5449,5449,"0 0.4686248331108145, 2 0.12075359738911137, 6 0.09583147900904906, 3 0.09375463581071054, 1 0.08752410621569498, 4 0.06675567423230976, 5 0.06675567423230976","the nestabledelegate dumps the stacktrace bottomup instead of topdown as is the custom in the jdk (especially in jdk 1.4s own chained exceptions).thus when using nestableexception you will always see the first low-level exception (e.g. an null exception) and youll have to go all the way to the bottom to see the highlevel exception (e.g. an hibernatequeryexception: error while parsing query at s.count())this is not very friendly to users because hopefully the highlevel exception will be the best explanation in 9 out of 10 causes, it is only when debugging or in misbehaved exception handling one like to see the root causes - and then one can go down and read the bottom of the stack trace.thus, i would suggest that you make it possible to have nestabledelegate print the stacktrace in reverce so the highlevel exception get printed first and then the lower-levels.and optimal one could set an nestabledelegate.printstacktracetopdown=true as an system property so one could choose which strategy should be activated in the system. am i making any sense ? :) "
5450,5450,"0 0.24824355971896955, 3 0.13348946135831377, 6 0.1316679677335415, 2 0.13166796773354147, 1 0.11891751236013534, 4 0.11891751236013534, 5 0.117096018735363",default size of enum\s hashmap needs improvement.http://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=104316379302781&w=2 
5451,5451,"0 0.31035923141186306, 4 0.13930659983291563, 2 0.12907268170426064, 6 0.11152882205513782, 3 0.10860484544695069, 1 0.10714285714285712, 5 0.09398496240601506","there is a small typo in the documentation at the url: http://jakarta.apache.org/commons/lang/api/org/apache/commons/lang/systemutils.htmlthe description for the static boolean is_java_1_5 is ""true iff this is javaversion 1.3."". i presume the version number really should be ""1.5"" rather than""1.3"" "
5452,5452,"0 0.25553319919517103, 6 0.16789626648781575, 1 0.14442208808405987, 3 0.12877263581488932, 2 0.10216856695729937, 4 0.10060362173038231, 5 0.10060362173038231","try to truncate 2004-10-31 01:00:00 mdt by hour and youll actually get 2004-10-31 01:00:00 mst, which is one hour after the input hour. // truncate 2004-10-31 01:00:00 mdt date oct31_01mdt = new date(1099206000000l); date result = dateutils.truncate(oct31_01mdt, calendar.hour_of_day); assertequals(oct31_01mdt, result); "
5453,5453,"0 0.3972877176760673, 4 0.1437817845584836, 2 0.11573431961781475, 3 0.0963168438896594, 1 0.09308059793496684, 5 0.08013561411619662, 6 0.07366312220681154","add the following to equalsbuildertest: public void testsubclassing() { testobject to2 = new testobject(5); testobject to1ter = new testsubobject(4, 10); testobject to1bis = new testsubobject(4, 10); testobject to1 = new testobject(4); testreflectionequalsequivalencerelationship(to1, to1bis, to1ter, to2,new testobject(), false); }as you can see, the whole concept behind appendsuperand such produces equals methods which are not symmetricand thus do not fulfill the equals contract.the two general solutions im aware of are: (1) make the equalsmethod final, so that subclasses are required to alluse the same equals method as each other and the superclass,or (2) use foo.getclass() == bar.getclass() insteadof instanceof, so that an instance of the superclass isnever equals to an instance of a subclass.in particular situations there might be specific solutions (look atthe way equals is defined for list and set for example). "
5454,5454,"0 0.42382309048975725, 1 0.13322479989146654, 5 0.11613078279744944, 6 0.0961877628544295, 4 0.08289241622574954, 2 0.07814407814407812, 3 0.06959706959706959","i propose the following new interface characterencodingnames. ive stored aproposal in cvs to ""record"" it. even if we nuke it, it will be in the ""attic"".in short:/** * character encoding names required of every implementation of the java platform. * * according to the java documentation <a *href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">jrecharacter encoding names</a>: * <p> * <cite>every implementation of the java platform is required to support thefollowing character encodings. consult the * release documentation for your implementation to see if any other encodingsare supported. </cite> * </p> * * @see <ahref=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">jrecharacter encoding * names </a> * @author apache software foundation * @since 2.1 */ "
5455,5455,"0 0.5058201058201058, 4 0.12896825396825395, 3 0.09100529100529099, 2 0.07433862433862432, 6 0.06970899470899469, 1 0.06878306878306877, 5 0.061375661375661375","comparetobuilder does not seem to handle nulls well at all.in the methods:public comparetobuilder append(object lhs, object rhs)public comparetobuilder append(object[] lhs, object[] rhs)if either the lhs or rhs parameters are null, the code is set up to throw a nullpointerexception instead of evaulating on the basis of null. this requires that all object be vetted before they be placed in a sorting collection, not using the comparetobuilder class, modifying the source code, or subclassing comparetobuilder. we worked around this by subclassing comparetobuilder and overriding the methods in question.the following lines of code (in both methods) are the cause of the exception: if (comparison != 0) { return this; } if (lhs == rhs) { return this; } if (lhs == null || rhs == null) { throw new nullpointerexception(); }the if statement should be replaced with (?) : if (lhs == null && rhs != null) { comparison = -1; return this; } if (lhs != null && rhs == null) { comparison = 1; return this; } "
5456,5456,"0 0.19226830517153098, 2 0.15104966717869941, 3 0.1474654377880184, 1 0.14567332309267791, 4 0.12775217613927292, 6 0.11879160266257044, 5 0.11699948796722993","summary saids it all :)it means that server side exceptions cannot be transfered/serialized to clients, which is a must have to inform users on errors and be able to do a decent bughunt :) "
5457,5457,"0 0.18973214285714288, 3 0.15153769841269843, 1 0.14459325396825398, 6 0.14285714285714288, 5 0.1324404761904762, 2 0.12723214285714285, 4 0.1116071428571429","when dateutils.parsecvs parses a time in ""h:mm z"" format, the resulting date is1/1/1970. is this appropriate, or would it be more appropriate for the resultingdate to be the current system date?i don\t know what the cvs behavior is. "
5458,5458,"0 0.4988662131519276, 4 0.1421902094171002, 5 0.07963185274109642, 3 0.07683073229291716, 1 0.07309590502867813, 6 0.0693610777644391, 2 0.06002400960384155","hashcodebuilder class failed to generate unique hashcode for objects.here are codes to reproduce the problem:import org.apache.commons.lang.builder.hashcodebuilder;public class person{ public int id; public string name; public person(int id, string name) { this.id=id; this.name = name; } public int hashcode() { return new hashcodebuilder(17,37). append(id). append(name). tohashcode(); }}package com.ball.edi.prototype;public class testhashcode{ static public void main(string args[]) { person p1=new person(214686, ""03065""); person p2=new person(214691, ""03006""); system.out.println(""the hashcode for p1 is "" + p1.hashcode()); system.out.println(""the hashcode for p2 is "" + p2.hashcode()); }}when you ran testhashcode class, you will get the hashcode for p1 is 53862859the hashcode for p2 is 53862859i found this problem when i am using ojb.thanks. "
5459,5459,"1 0.15065441381230854, 5 0.14870509607351712, 2 0.14480646059593427, 6 0.14480646059593427, 0 0.14285714285714285, 4 0.13505987190197719, 3 0.13311055416318573",added class hierachy support to hashcodebuilder.reflectionhashcode() with the following patches. 
5460,5460,"0 0.6439207985599739, 6 0.09122893143511701, 5 0.0637375225004091, 1 0.05342824414989363, 3 0.05285550646375388, 2 0.04941908034691539, 4 0.04540991654393716","the time unit tests fail when run on a sunday:test.time: [echo] running time package tests ... [java] ...f.f................ [java] time: 4.394 [java] there were 2 failures: [java] 1)testparse(org.apache.commons.lang.time.calendarutilstest)junit.framework.assertionfailederror:parse last sunday expected sun apr 27 06:39:17 mst 2003 but got sun apr 2006:39:17 mst 2003 [java] atorg.apache.commons.lang.time.calendarutilstest.assertequals(calendarutilstest.java:373) [java] atorg.apache.commons.lang.time.calendarutilstest.testparse(calendarutilstest.java:243) [java] at sun.reflect.nativemethodaccessorimpl.invoke0(native method) [java] atsun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:39) [java] atsun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:25) [java] 2)testweekiterator(org.apache.commons.lang.time.calendarutilstest)junit.framework.assertionfailederror: expected mon apr 28 00:00:00 mst 2003 but got mon apr 21 00:00:00 mst 2003 [java] atorg.apache.commons.lang.time.calendarutilstest.assertequals(calendarutilstest.java:373) [java] atorg.apache.commons.lang.time.calendarutilstest.assertweekiterator(calendarutilstest.java:346) [java] atorg.apache.commons.lang.time.calendarutilstest.assertweekiterator(calendarutilstest.java:324) [java] atorg.apache.commons.lang.time.calendarutilstest.testweekiterator(calendarutilstest.java:284) [java] at sun.reflect.nativemethodaccessorimpl.invoke0(native method) [java] atsun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:39) [java] atsun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:25)looks to me like the unit test code is checking the value of calendar.date, whenit should be looking at calendar.day_of_week (at line 237 and below) to decidewhether to make adjustments for today==sunday.when i fix this, testparse succeeds but testweekiterator hangs at the statementit = calendarutils.getcalendariterator(now, calendarutils.range_week_relative); "
5461,5461,"1 0.15763546798029557, 4 0.15763546798029557, 0 0.14614121510673234, 3 0.14230979748221126, 2 0.1384783798576902, 5 0.1346469622331691, 6 0.12315270935960596","fastdatefromat.getinstance(""dd.mm.yyyy"").format(date) returns ""01.01.01000"",when date is 1 januar 1000 (01.01.1000) "
5462,5462,"0 0.59471671880431, 1 0.10323253388946821, 4 0.083767813694821, 6 0.05862588344340169, 5 0.054570733402850215, 2 0.05294867338662961, 3 0.05213764337851931"," hello,in org.apache.commons.lang.stringutils, we can find stringutils.equals(?,?). org.apache.commons.lang.time.dateutils should have the same. like this : /** * <p>compares two dates, returning <code>true</code> if they are equal.</p> * * <p><code>null</code>s are handled without exceptions. two <code>null</code> * references are considered to be equal.</p> * * <pre> * dateutils.equals(null, null) = true * dateutils.equals(null, ""abc"") = false * dateutils.equals(""abc"", null) = false * dateutils.equals(""abc"", ""abc"") = true * dateutils.equals(""abc"", ""abc"") = false * </pre> * * @see java.util.date#equals(object) * @param dt1 the first date, may be null * @param dt2 the second date, may be null * @return <code>true</code> if the dates are equal or both <code>null</code> */ public static boolean equals(date dt1, date dt2) { return (dt1 == null ? dt2 == null : dt1.equals(dt2)); } "
5463,5463,"0 0.29135338345864664, 5 0.13784461152882205, 4 0.13345864661654136, 2 0.12176274018379281, 3 0.11445279866332497, 1 0.10714285714285714, 6 0.09398496240601507","classes that are located in org.apache.commons.lang.enum package cant be used with 1.5 jdk (aka the 5.0) because the ""enum"" is a reserved keyword. compiler error looks like this: ""as of release 1.5, enum is a keyword, and may not be used as an identifier (try -source 1.4 or lower to use enum as an identifier)""there probably should be a separate jar for 1.5+ jdk "
5464,5464,"0 0.5622458349731078, 4 0.09484454939000395, 2 0.08566181293454021, 3 0.06729634002361276, 6 0.06637806637806638, 1 0.06362324544142729, 5 0.059950150859241796","the min() method of numberutils returns the wrong result if the first value of the array happens to be float.nan. the following code snippet shows the behaviour: float a[] = new float[] {(float) 1.2, float.nan, (float) 3.7, (float) 27.0, (float) 42.0, float.nan}; float b[] = new float[] {float.nan, (float) 1.2, float.nan, (float) 3.7, (float) 27.0, (float) 42.0, float.nan}; float min = numberutils.min(a); system.out.println(""min(a): "" + min); // output: 1.2 min = numberutils.min(b); system.out.println(""min(b): "" + min); // output: nanthis problem may exist for double-arrays as well. proposal: use float.compare(float, float) or numberutils.compare(float, float) to achieve a consistent result. "
5465,5465,"4 0.2282071298464741, 0 0.16809784022898774, 2 0.1334894613583138, 6 0.11891751236013536, 1 0.11709601873536302, 3 0.11709601873536302, 5 0.11709601873536302","stringutils.isnumeric.if we put empty string as parameter we got true.stringutils.isnumeric("""") return true. "
5466,5466,"0 0.47181602299712533, 6 0.1253593300837395, 2 0.10961129858767651, 4 0.0894888138982627, 3 0.08511436070491187, 1 0.05974253218347707, 5 0.0588676415448069","the hashcode() methods of the range classes look very suspicious to me. the value is lazily initialized, but the calculation is done _on the cached value. with some unlucky timing a caller may get an incomplete hash.an unlucky sequence of code could be something liket1: if (hashcode == 0) // truet1: hashcode = 17;t2: if (hashcode == 0) // now false because hashcode was already set to 17t2: return hashcode; // return 17t1: hashcode = 37 * hashcode...........where t1 and t2 are different threads accessing the method in parallel and t2 gets the wrong hash ""17"".affected classes areorg.apache.commons.lang.math.doublerangeorg.apache.commons.lang.math.floatrangeorg.apache.commons.lang.math.intrangeorg.apache.commons.lang.math.longrangeorg.apache.commons.lang.math.numberrangeorg.apache.commons.lang.math.rangepossible fix: calculate the hash on a temporary variable and finally assign it to the member "
5467,5467,"0 0.2727427888718212, 2 0.21897934801160607, 4 0.15207373271889402, 3 0.09950503498890595, 6 0.08755760368663593, 1 0.08516811742618195, 5 0.08397337429595493","arrayutils.add(t[] array, t element) can create an unexpected classcastexception.for example, the following code compiles without a warning:{code}string[] sa = arrayutils.add(stringarray, astring);{code}and works fine, provided at least one of the parameters is non-null. however, if both parameters are null, the add() method returns an object[] array, hence the exception.if both parameters are null, its not possible to determine the correct array type to return, so it seems to me this should be disallowed.i think the method ought to be changed to throw illegalparameterexception when both parameters are null. "
5468,5468,"0 0.400952380952381, 4 0.21873015873015877, 6 0.12391534391534391, 1 0.06984126984126983, 5 0.0676190476190476, 2 0.06613756613756612, 3 0.0528042328042328","see http://svn.apache.org/viewvc/commons/proper/lang/trunk/src/java/org/apache/commons/lang3/builder/hashcodebuilder.java?view=markupplease review the implementation for *reflectionappend* (lines 174 to 202)... specifically, see line 182:{code}list<string> excludedfieldlist = excludefields != null ? arrays.aslist(excludefields) : collections.<string>emptylist();{code}note that if you are in the habit of passing in a string array for excluding fields ({{string[] excludefields}}) -- which is a best practice when using hibernate (to skip primary keys ({{@id}}) and version fields ({{@version}}) that change upon persistence) -- _every time_ the _hashcode_ is calculated, an _arraylist_ is being created -- generating fodder for the garbage collector.i thought i might get around this by passing a {{collection<string>}} instead of a {{string[]}}, but ironically the implementation of the {{reflectionhashcode(object object, collection<string> excludefields)}} (see lines 475 to 477), for example, transforms the {{collection<string>}} into a {{string[]}} only to have it transformed internally into a temporary {{arraylist<string>}}.i would expect the implementation to use and read what is submitted, whether that is a {{string[]}} or a {{collection<string>}}. i dont think it needs to create another copy just to have a convenient {{contains}} method. efficiency is important, especially in the event of rehashing. "
5469,5469,"0 0.5704998311381291, 4 0.10773387369132051, 1 0.10536980749746708, 3 0.07700101317122594, 2 0.051587301587301584, 6 0.045086119554204655, 5 0.042722053360351224","the following program show a problem with a shortcoming of the java.util.properties class. the default properties are not substituted by the strsubstitutor.{code:title=strsubsttest.java|borderstyle=solid}import org.apache.commons.lang.text.strsubstitutor;public class strsubsttest{ public static void main(string[] args) { string org = ""${doesnotwork}""; system.setproperty(""doesnotwork"", ""it works!""); // create a new poperties object with the system.getproperties as default properties props = new properties(system.getproperties()); string subst = strsubstitutor.replace(org, props); // is ${doesnotwork} substituted? system.out.println(subst); }}{code} the following method could be added to the strsubstitutor class to fix this problem in an easy way:{code:borderstyle=solid} /** * replaces all the occurrences of variables in the given source object with their matching * values from the properties. * * @param source the source text containing the variables to substitute, null returns null * @param properties the properties with values, may be null * @return the result of the replace operation */ public static string replace(object source, properties valueproperties) { if (valueproperties == null) { return source; } map valuemap = new hashmap(); enumeration propnames = valueproperties.propertynames(); while (propnames.hasmoreelements()) { string propname = (string)propnames.nextelement(); string propvalue = valueproperties.getproperty(propname); valuemap.put(propname, propvalue); } return strsubstitutor.replace(source, valuemap); }{code} "
5470,5470,"0 0.3823412698412698, 4 0.12678571428571428, 5 0.11706349206349204, 2 0.10456349206349205, 6 0.0906746031746032, 1 0.0892857142857143, 3 0.0892857142857143","equalsbuilder causes stackoverflowexception when comparing objects with cyclical object references.e,g.static class testobjectreference { @suppresswarnings(""unused"") private testobjectreference reference; @suppresswarnings(""unused"") private testobject one; public testobjectreference(int one) { this.one = new testobject(one); } public void setobjectreference( testobjectreference reference) { this.reference = reference; } @override public boolean equals(object obj) { return equalsbuilder.reflectionequals(this, obj); } } "
5471,5471,"0 0.44725274725274733, 4 0.22246642246642248, 3 0.07289377289377288, 6 0.07118437118437118, 5 0.07032967032967033, 2 0.06092796092796092, 1 0.05494505494505495","stringutils.containsany methods incorrectly matches unicode 2.0+ supplementary characters.for example, define a test fixture to be the unicode character u+20000 where u+20000 is written in java source as ""\ud840\udc00"" private static final string charu20000 = ""\ud840\udc00""; private static final string charu20001 = ""\ud840\udc01"";you can see unicode supplementary characters correctly implemented in the jre call: assertequals(-1, charu20000.indexof(charu20001));but this is broken: assertequals(false, stringutils.containsany(charu20000, charu20001)); assertequals(false, stringutils.containsany(charu20001, charu20000));this is fine: assertequals(true, stringutils.contains(charu20000 + charu20001, charu20000)); assertequals(true, stringutils.contains(charu20000 + charu20001, charu20001)); assertequals(true, stringutils.contains(charu20000, charu20000)); assertequals(false, stringutils.contains(charu20000, charu20001));because the method calls the jre to perform the match.more than you want to know:- http://java.sun.com/developer/technicalarticles/intl/supplementary/ "
5472,5472,"0 0.5383077115360579, 4 0.15335583052118484, 2 0.06849143857017874, 6 0.06236720409948758, 3 0.06149231346081741, 1 0.05974253218347706, 5 0.056242969628796415","supplementary characters in utf-16 are those whose code points are above 0xffff, that is, require more than 1 java char to be encoded, as explained here: http://java.sun.com/developer/technicalarticles/intl/supplementary/currently, stringescapeutils.escapexml() isnt aware of this coding scheme and treats each char as one character, which is not always right.a possible solution in class entities would be: public void escape(writer writer, string str) throws ioexception { int len = str.length(); for (int i = 0; i < len; i++) { int code = str.codepointat(i); string entityname = this.entityname(code); if (entityname != null) { writer.write(&); writer.write(entityname); writer.write(;); } else if (code > 0x7f) { writer.write(""&#""); writer.write(code); writer.write(;); } else { writer.write((char) code); } if (code > 0xffff) { i++; } } }besides fixing escapexml(), this will also affect html escaping functions. i guess thats a good thing, but please remember i have only tested escapexml(). "
5473,5473,"0 0.5392889938344484, 2 0.12514757969303428, 4 0.0829069919979011, 3 0.07464252918798375, 1 0.059950150859241796, 5 0.059031877213695426, 6 0.059031877213695426",can be replicated in the android emulator quite easily.stack trace:{noformat}at org.apache.commons.lang.builder.tostringbuilder.<clinit>(tostringbuilder.java:98)e/androidruntime( 1681): ... 17 moree/androidruntime( 1681): caused by: java.lang.exceptionininitializererrore/androidruntime( 1681): at org.apache.commons.lang.builder.tostringstyle$multilinetostringstyle.<init>(tostringstyle.java:2276)e/androidruntime( 1681): at org.apache.commons.lang.builder.tostringstyle.<clinit>(tostringstyle.java:94)e/androidruntime( 1681): ... 18 moree/androidruntime( 1681): caused by: java.lang.stringindexoutofboundsexceptione/androidruntime( 1681): at java.lang.string.substring(string.java:1571)e/androidruntime( 1681): at org.apache.commons.lang.systemutils.getjavaversionasfloat(systemutils.java:1153)e/androidruntime( 1681): at org.apache.commons.lang.systemutils.<clinit>(systemutils.java:818){noformat} 
5474,5474,"0 0.3591508892713711, 4 0.1529929240772614, 2 0.11550965767833235, 6 0.09944540065021988, 5 0.09676802447886781, 1 0.08873589596481161, 3 0.08739720787913559","findbugs:mutable.mutableobject defines equals(mutableobject) method and uses object.equals(object)this class defines a covariant version of the equals() method, but inherits the normal equals(object) method defined in the base java.lang.object class. the class should probably define a boolean equals(object) method. "
5475,5475,"0 0.27649769585253453, 2 0.13133640552995388, 4 0.12416794674859191, 6 0.12237583205325143, 1 0.11520737327188942, 3 0.11520737327188942, 5 0.11520737327188942","the parameter ""comparetransients"" is ignored and false is always used, as a short look in the code shows:{quote} return reflectioncompare(lhs, rhs, false, reflectuptoclass, null);{quote} "
5476,5476,"0 0.42146636432350726, 4 0.17384731670445955, 3 0.08919123204837488, 2 0.08707482993197277, 6 0.08495842781557064, 1 0.07226001511715799, 5 0.07120181405895692","findbugs:bug: org.apache.commons.lang3.text.extendedmessageformat doesnt override java.text.messageformat.equals(object)pattern id: eq_doesnt_override_equals, type: eq, category: stylethis class extends a class that defines an equals method and adds fields, but doesnt define an equals method itself. thus, equality on instances of this class will ignore the identity of the subclass and the added fields. be sure this is what is intended, and that you dont need to override the equals method. even if you dont need to override the equals method, consider overriding it anyway to document the fact that the equals method for the subclass just return the result of invoking super.equals(o). "
5477,5477,"4 0.19211822660098518, 0 0.17487684729064037, 5 0.1403940886699507, 1 0.12315270935960594, 2 0.12315270935960594, 3 0.12315270935960594, 6 0.12315270935960594","numberutils createnumber throws a stringindexoutofboundsexception instead of numberformatexception when a string containing both possible exponent indicators is passed in.one example of such a string is ""1ee"" "
5478,5478,"0 0.30488559059987635, 4 0.15337043908472478, 6 0.12595341166769736, 1 0.1201814058956916, 2 0.10863739435168006, 5 0.09420737992166565, 3 0.09276437847866421",1.1l is not a java number . but numberutils.isnumber(string) return true.perhaps change:{code:java} if (chars[i] == l || chars[i] == l) { // not allowing l with an exponent return founddigit && !hasexp; }{code}to:{code:java} if (chars[i] == l || chars[i] == l) { // not allowing l with an exponent return founddigit && !hasexp && !hasdecpoint; }{code} 
5479,5479,"3 0.1992481203007519, 0 0.18755221386800336, 6 0.15977443609022557, 2 0.12907268170426064, 4 0.12030075187969923, 5 0.10714285714285715, 1 0.0969089390142022","hi, i think i found a bug in the dateutils class in the method issamelocaltime.example: calendar a = calendar.getinstance();a.settimeinmillis(1297364400000l);calendar b = calendar.getinstance();b.settimeinmillis(1297321200000l);assert.assertfalse(dateutils.issamelocaltime(a, b));this is because the method compares cal1.get(calendar.hour) == cal2.get(calendar.hour) but i think it has to be cal1.get(calendar.hour_of_day) == cal2.get(calendar.hour_of_day) "
5480,5480,"3 0.16628873771730915, 2 0.15923406399596876, 0 0.14865205341395818, 4 0.14688838498362308, 1 0.1345427059712774, 5 0.1310153691106072, 6 0.11337868480725627","equalsbuilder synchronizes on hashcodebuilder.class for updates to its own threadlocal registry variable. while this should not lead to malfunction, it looks like a copy&paste oversight. "
5481,5481,"0 0.39269179894179895, 4 0.2040343915343915, 1 0.0952380952380952, 3 0.08366402116402115, 5 0.07556216931216932, 2 0.0744047619047619, 6 0.0744047619047619","after executing linestringutils.replaceeachrepeatedly(""aaa"", new string[]{""aa""}, new string[]{""axa""});exception is thrown:exception in thread ""main"" java.lang.illegalstateexception: timetolive of -1 is less than 0: axaxa at org.apache.commons.lang.stringutils.replaceeach(stringutils.java:3986) at org.apache.commons.lang.stringutils.replaceeach(stringutils.java:4099) at org.apache.commons.lang.stringutils.replaceeach(stringutils.java:4099) at org.apache.commons.lang.stringutils.replaceeachrepeatedly(stringutils.java:3920) "
5482,5482,"0 0.30973830973830974, 4 0.14757614757614754, 6 0.13556413556413555, 3 0.11003861003861001, 2 0.10403260403260405, 1 0.09652509652509654, 5 0.09652509652509654","method createnumber from numberutils is trying to parse a string with a floating point number always first as a float, that will cause that if we send a string with a number that will need a double or even a bigdecimal the number will be truncate to accommodate into the float without an exception to be thrown, so in fact we will no be returning ever neither a double nor a bigdecimal. "
5483,5483,"0 0.2661605705083966, 4 0.19691741430871862, 5 0.11801242236024842, 6 0.10835058661145619, 1 0.10351966873706006, 2 0.10351966873706006, 3 0.10351966873706006","try{code} stringutils.join(new object[]{ new object() { @override public string tostring() { return null; } } }, ,);{code}tostring should probably never return null, but it does in javax.mail.internet.internetaddress "
5484,5484,"0 0.5252657637978739, 4 0.13382845492937237, 1 0.07470511140235908, 2 0.06960827144313382, 3 0.06553079947575362, 5 0.06553079947575362, 6 0.06553079947575362","when calling unescapehtml4() on the string """" (or any string that contains these characters) an exception is thrown:exception in thread ""main"" java.lang.stringindexoutofboundsexception: string index out of range: 4 at java.lang.string.charat(string.java:686) at org.apache.commons.lang3.text.translate.numericentityunescaper.translate(numericentityunescaper.java:49) at org.apache.commons.lang3.text.translate.aggregatetranslator.translate(aggregatetranslator.java:53) at org.apache.commons.lang3.text.translate.charsequencetranslator.translate(charsequencetranslator.java:88) at org.apache.commons.lang3.text.translate.charsequencetranslator.translate(charsequencetranslator.java:60) at org.apache.commons.lang3.stringescapeutils.unescapehtml4(stringescapeutils.java:351) "
5485,5485,"0 0.6008741660915573, 4 0.11134115481941571, 3 0.0654474350126524, 6 0.05981136415919024, 5 0.055785599263860154, 1 0.05417529330572811, 2 0.052564987347596064","in the static initializer of org.apache.commons.lang3.stringutils, there is an attempt to load the class sun.text.normalizer.such a class is prohibited on google app engine, and the static intializer throws a java.security.accesscontrolexception.{code}caused by: java.security.accesscontrolexception: access denied (java.lang.runtimepermission accessclassinpackage.sun.text) at java.security.accesscontrolcontext.checkpermission(accesscontrolcontext.java:374) at java.security.accesscontroller.checkpermission(accesscontroller.java:546) at java.lang.securitymanager.checkpermission(securitymanager.java:532) at com.google.appengine.tools.development.devappserverfactory$customsecuritymanager.checkpermission(devappserverfactory.java:166) at java.lang.securitymanager.checkpackageaccess(securitymanager.java:1512) at java.lang.class.checkmemberaccess(class.java:2164) at java.lang.class.getmethod(class.java:1602) at org.apache.commons.lang3.stringutils.<clinit>(stringutils.java:739){code}the exception should be caught in the catch clauses around loadclass(""sun.text.normalizer"").commons lang 2 worked fine on gae. "
5486,5486,"0 0.23571428571428568, 6 0.13756613756613756, 2 0.13386243386243385, 3 0.13386243386243382, 4 0.12089947089947092, 1 0.11904761904761907, 5 0.11904761904761907",numberutils.createnumber() should work equally for 0x1234 and 0x1234; currently 0x1234 generates a numberformatexceptioninteger.decode() handles both upper and lower case hex. 
5487,5487,"0 0.4227843915343915, 2 0.13343253968253965, 4 0.11722883597883593, 6 0.10218253968253964, 1 0.0755621693121693, 3 0.07440476190476189, 5 0.07440476190476189","numberutils.createlong() does not handle hex numbers, but createinteger() handles hex and octal.this seems odd.numberutils.createnumber() assumes that hex numbers can only be integer.again, why not handle bigger hex numbers?==it is trivial to fix createlong() - just use long.decode() instead of valueof().its not clear why this was not done originally - the decode() method was added to both integer and long in java 1.2.fixing createnumber() is also fairly easy - if the hex string has more than 8 digits, use long.should we allow for leading zeros in an integer? if not, the length check is trivial. "
5488,5488,"0 0.441951987406533, 4 0.13249376885740524, 3 0.10127246490882855, 1 0.08841663387117932, 6 0.08749836022563294, 2 0.08290699199790108, 5 0.06545979273251999","similar issue as https://issues.apache.org/jira/browse/httpclient-471following line throws an parseexception on a german system:d = dateutils.parsedate(""wed, 09 apr 2008 23:55:38 gmt"", new string[] {""eee, dd mmm yyyy hh:mm:ss zzz""});reason: parsedate internally calls simpledateformat without providing a locale. this causes ""mmm"" to be interpreted using the system locale. if the system is german, the date is trying to be interpreted as german date.i see following solutions: a) always instantiate simpledateformat with locale.english b) make two instances of simpledateformat. one without providing a locale and one with locale.english. try two parsings c) make as many simpledateformat instances as locales are availble iterate over all instances at the parsing attempts. d) provide an additional (optional) parameter to parsedate for providing a localei would prefer b) as this seems the best trade-off between internationalization and local usage.what do you think? "
5489,5489,"0 0.30497592295345105, 4 0.20884608525057963, 6 0.11771000535045475, 2 0.10522561084358835, 1 0.10148029249152841, 3 0.08150526128054218, 5 0.08025682182985554",in commons-lang 2.6 line 250 :{code}ch = chars[random.nextint(gap) + start];{code}-this line of code takes a random int to fetch a char in the _chars_ array regardless of its size.--(besides _start_ is useless here)--fixed version would be :-{code}//ch = chars[random.nextint(gap)%chars.length];{code}when user pass 0 as _end_ or when the array is not null but empty this line ends up with an exception 
5490,5490,"0 0.2475716654821132, 4 0.17460317460317457, 3 0.13480217957829896, 6 0.12153518123667373, 2 0.10826818289504858, 1 0.10660980810234542, 5 0.10660980810234542","randomutils invokes random#nextint(n) where n = end - start.if end <= start, then random throws:java.lang.illegalargumentexception: n must be positivethis is confusing, and does not identify the source of the problem. "
5491,5491,"0 0.22272612748803222, 4 0.1786344167296548, 2 0.14512471655328793, 1 0.11337868480725624, 3 0.11337868480725624, 5 0.11337868480725624, 6 0.11337868480725624",this looks like a regression from .lang versions prior to 3. if the 2 given charsequences are strings (and both not null) you should check reference equality before delegating to regionmatches() 
5492,5492,"0 0.4182946682946683, 3 0.15048840048840048, 5 0.11986161986161988, 6 0.11131461131461133, 4 0.07498982498982498, 2 0.07071632071632071, 1 0.05433455433455433","the work on lang-462 has introduced a time zone formatting bug in fastdateformat in commons-lang3.the problem can be seen by this snippet:{code}// always prints timezone name of machines default timezone, ignoring tz// set on calendar, even though the printed time itself respects calendars tz.calendar mycal = calendar.getinstance(timezone.gettimezone(""us/central""));system.out.println(fastdateformat.getinstance(""h:mma z"").format(mycal));{code}if you happen to be in us/central, this will print the right thing, but just try it with us/eastern, us/pacific, etc. it will print the time in the correct timezone, but the timezone name at the end (the ""z"" pattern) will always be the system default timezone. this is a regression against commons-lang 2.x.basically, when the ""forced time zone"" code was removed, the timezonenamerule class stopped respecting the calendar instances timezone, and instead now always uses the mtimezone of the fastdateformat instance itself (which is only supposed to be used when formatting timezone-less objects such as date or long).the removal of the forced time zone stuff is surely the right thing to do (it was a mess). i think the fix is to change the timezonenamerule inner class to not take a timezone instance, but rather to use the timezone on the calendar instance passed into appendto(), just like timezonenumberrule does. presumably then for efficiency, one would use the gettimezonedisplay() package-static method to quickly retrieve the required timezones display name. "
5493,5493,"0 0.26706349206349206, 4 0.20456349206349203, 3 0.13511904761904758, 2 0.11150793650793647, 6 0.10317460317460313, 1 0.08928571428571429, 5 0.08928571428571429","numberutils#createnumber checks for a leading ""--"" in the string, and returns null if found. this is documented as a work round for a bug in bigdecimal.returning nulll is contrary to the javadoc and the behaviour for other methods which would throw numberformatexception.its not clear whether the bigdecimal problem still exists with recent versions of java. however, if it does exist, then the check needs to be done for all invocations of bigdecimal, i.e. needs to be moved to createbigdecimal. "
5494,5494,"0 0.2696377696377697, 3 0.16849816849816848, 4 0.13288563288563288, 5 0.13003663003663002, 1 0.11436711436711436, 6 0.09299959299959303, 2 0.0915750915750916",the following calendars are non-gregorian [1]:ja_jp_jp - japanese imperial)th_th (with any variant) - thai buddhistthis causes errors when testing round-trip conversions.the simplest solution is to fall back to simpledateformat for these calendars.[1] http://docs.oracle.com/javase/6/docs/technotes/guides/intl/calendar.doc.html 
5495,5495,"3 0.19146825396825395, 6 0.16195436507936506, 1 0.14285714285714282, 0 0.13591269841269837, 5 0.12896825396825393, 2 0.12028769841269843, 4 0.11855158730158732",fdp does not handled unterminated quotes the same way as simpledateformatfor example:format: \d\d\date: d3this should fail to parse the format and date but it actually works.the format is parsed as:pattern: d(\\p{isnd}++) 
5496,5496,"2 0.2873677248677249, 4 0.23528439153439154, 0 0.12648809523809523, 5 0.10565476190476189, 6 0.09639550264550263, 1 0.07440476190476192, 3 0.07440476190476192","the private method removeall(object array, int... indices) sorts the indices array, so arrays passed in by application code need to be cloned first.however, where the index array is generated locally, that is unnecessary.the removeelements() methods currently call the public removeall(<type>[] array, int... indices) methods, which clone the indices before calling the private removeall() method.the removeelements() methods should call the private method directly, avoiding the unnecessary clone call. "
5497,5497,"0 0.9079514589718671, 4 0.02551643367969899, 1 0.01888814133712093, 6 0.013131992723829457, 2 0.012085420248685556, 3 0.011213276519398973, 5 0.011213276519398973","the test below fails with the following error on jdk7, but succeeds on jdk6:testalllocales""java.lang.assertionerror: expected: <ja_jp_jp_#u-ca-japanese> but: was <ja_jp_jp_#u-ca-japanese> at org.hamcrest.matcherassert.assertthat(matcherassert.java:20) at org.hamcrest.matcherassert.assertthat(matcherassert.java:8) at com.scispike.foundation.test.unit.i18n.localestringconvertertest.teststringtolocale(localestringconvertertest.java:20) at com.scispike.foundation.test.unit.i18n.localestringconvertertest.testalllocales(localestringconvertertest.java:28) at org.apache.maven.surefire.testng.testngexecutor.run(testngexecutor.java:76) at org.apache.maven.surefire.testng.testngdirectorytestsuite.executemulti(testngdirectorytestsuite.java:161) at org.apache.maven.surefire.testng.testngdirectorytestsuite.execute(testngdirectorytestsuite.java:101) at org.apache.maven.surefire.testng.testngprovider.invoke(testngprovider.java:115) at org.apache.maven.surefire.util.reflectionutils.invokemethodwitharray(reflectionutils.java:189) at org.apache.maven.surefire.booter.providerfactory$providerproxy.invoke(providerfactory.java:165) at org.apache.maven.surefire.booter.providerfactory.invokeprovider(providerfactory.java:85) at org.apache.maven.surefire.booter.forkedbooter.runsuitesinprocess(forkedbooter.java:103) at org.apache.maven.surefire.booter.forkedbooter.main(forkedbooter.java:74)... removed 25 stack frames java.lang.assertionerror: expected: <ja_jp_jp_#u-ca-japanese> but: was <ja_jp_jp_#u-ca-japanese> at org.hamcrest.matcherassert.assertthat(matcherassert.java:20) at org.hamcrest.matcherassert.assertthat(matcherassert.java:8) at com.scispike.foundation.test.unit.i18n.localestringconvertertest.teststringtolocale(localestringconvertertest.java:20) at com.scispike.foundation.test.unit.i18n.localestringconvertertest.testalllocales(localestringconvertertest.java:28) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) at java.lang.reflect.method.invoke(method.java:601) at org.testng.internal.methodinvocationhelper.invokemethod(methodinvocationhelper.java:80) at org.testng.internal.invoker.invokemethod(invoker.java:715) at org.testng.internal.invoker.invoketestmethod(invoker.java:907) at org.testng.internal.invoker.invoketestmethods(invoker.java:1237) at org.testng.internal.testmethodworker.invoketestmethods(testmethodworker.java:127) at org.testng.internal.testmethodworker.run(testmethodworker.java:111) at org.testng.testrunner.privaterun(testrunner.java:767) at org.testng.testrunner.run(testrunner.java:617) at org.testng.suiterunner.runtest(suiterunner.java:334) at org.testng.suiterunner.runsequentially(suiterunner.java:329) at org.testng.suiterunner.privaterun(suiterunner.java:291) at org.testng.suiterunner.run(suiterunner.java:240) at org.testng.suiterunnerworker.runsuite(suiterunnerworker.java:51) at org.testng.suiterunnerworker.run(suiterunnerworker.java:85) at org.testng.testng.runsuitessequentially(testng.java:1197) at org.testng.testng.runsuiteslocally(testng.java:1122) at org.testng.testng.run(testng.java:1030) at org.apache.maven.surefire.testng.testngexecutor.run(testngexecutor.java:76) at org.apache.maven.surefire.testng.testngdirectorytestsuite.executemulti(testngdirectorytestsuite.java:161) at org.apache.maven.surefire.testng.testngdirectorytestsuite.execute(testngdirectorytestsuite.java:101) at org.apache.maven.surefire.testng.testngprovider.invoke(testngprovider.java:115) at sun.reflect.nativemethodaccessorimpl.invoke0(native method) at sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57) at sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43) at java.lang.reflect.method.invoke(method.java:601) at org.apache.maven.surefire.util.reflectionutils.invokemethodwitharray(reflectionutils.java:189) at org.apache.maven.surefire.booter.providerfactory$providerproxy.invoke(providerfactory.java:165) at org.apache.maven.surefire.booter.providerfactory.invokeprovider(providerfactory.java:85) at org.apache.maven.surefire.booter.forkedbooter.runsuitesinprocess(forkedbooter.java:103) at org.apache.maven.surefire.booter.forkedbooter.main(forkedbooter.java:74)""org.hamcrest.matcherassert.assertthat(matcherassert.java:20)org.hamcrest.matcherassert.assertthat(matcherassert.java:8)com.scispike.foundation.test.unit.i18n.localestringconvertertest.teststringtolocale(localestringconvertertest.java:20)com.scispike.foundation.test.unit.i18n.localestringconvertertest.testalllocales(localestringconvertertest.java:28)sun.reflect.nativemethodaccessorimpl.invoke0(native method)sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57)sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43)java.lang.reflect.method.invoke(method.java:601)org.testng.internal.methodinvocationhelper.invokemethod(methodinvocationhelper.java:80)org.testng.internal.invoker.invokemethod(invoker.java:715)org.testng.internal.invoker.invoketestmethod(invoker.java:907)org.testng.internal.invoker.invoketestmethods(invoker.java:1237)org.testng.internal.testmethodworker.invoketestmethods(testmethodworker.java:127)org.testng.internal.testmethodworker.run(testmethodworker.java:111)org.testng.testrunner.privaterun(testrunner.java:767)org.testng.testrunner.run(testrunner.java:617)org.testng.suiterunner.runtest(suiterunner.java:334)org.testng.suiterunner.runsequentially(suiterunner.java:329)org.testng.suiterunner.privaterun(suiterunner.java:291)org.testng.suiterunner.run(suiterunner.java:240)org.testng.suiterunnerworker.runsuite(suiterunnerworker.java:51)org.testng.suiterunnerworker.run(suiterunnerworker.java:85)org.testng.testng.runsuitessequentially(testng.java:1197)org.testng.testng.runsuiteslocally(testng.java:1122)org.testng.testng.run(testng.java:1030)org.apache.maven.surefire.testng.testngexecutor.run(testngexecutor.java:76)org.apache.maven.surefire.testng.testngdirectorytestsuite.executemulti(testngdirectorytestsuite.java:161)org.apache.maven.surefire.testng.testngdirectorytestsuite.execute(testngdirectorytestsuite.java:101)org.apache.maven.surefire.testng.testngprovider.invoke(testngprovider.java:115)sun.reflect.nativemethodaccessorimpl.invoke0(native method)sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57)sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43)java.lang.reflect.method.invoke(method.java:601)org.apache.maven.surefire.util.reflectionutils.invokemethodwitharray(reflectionutils.java:189)org.apache.maven.surefire.booter.providerfactory$providerproxy.invoke(providerfactory.java:165)org.apache.maven.surefire.booter.providerfactory.invokeprovider(providerfactory.java:85)org.apache.maven.surefire.booter.forkedbooter.runsuitesinprocess(forkedbooter.java:103)org.apache.maven.surefire.booter.forkedbooter.main(forkedbooter.java:74)========== testimport static org.hamcrest.matcherassert.assertthat;import static org.hamcrest.matchers.equalto;import java.util.locale;import org.testng.annotations.test;import com.scispike.foundation.i18n.stringtolocaleconverter;public class localestringconvertertest { stringtolocaleconverter converter = new stringtolocaleconverter(); public void teststringtolocale(locale l) { string s = l.tostring(); assertthat(converter.convert(s), equalto(l)); } @test public void testalllocales() { locale[] locales = locale.getavailablelocales(); for (locale l : locales) { teststringtolocale(l); } }}========== stringtolocaleconverterimport java.util.locale;import org.apache.commons.lang3.localeutils;import org.springframework.core.convert.converter.converter;public class stringtolocaleconverter implements converter<string, locale> { @override public locale convert(string source) { if (source == null) { return localetostringconverter.default; } return localeutils.tolocale(source); }} "
5498,5498,"0 0.21909966172261255, 4 0.15170439760603693, 1 0.1334894613583138, 3 0.1316679677335415, 6 0.12984647410876918, 2 0.11709601873536302, 5 0.11709601873536302","the javadoc for numberutils.createnumber() states:""values with leading 0\s will not be interpreted as octal.""however,assertequals(25, numberutils.createnumber(""0025""));fails, because numberutils.createnumber(""0025"") returns 21. "
5499,5499,"0 0.50696469063816, 4 0.1991415613864594, 2 0.07725947521865889, 3 0.06365403304178814, 6 0.05628441852931648, 1 0.0528830579850988, 5 0.043812763200518294","the core of {{org.apache.commons.lang3.text.translate}} is a {{hashmap<charsequence, charsequence> lookupmap}}.from the javadoc of {{charsequence}} (emphasis mine):{quote}this interface does not refine the general contracts of the equals and hashcode methods. the result of comparing two objects that implement charsequence is therefore, in general, undefined. each object may be implemented by a different class, and there is no guarantee that each class will be capable of testing its instances for equality with those of the other. *it is therefore inappropriate to use arbitrary charsequence instances as elements in a set or as keys in a map.*{quote}the current implementation causes code such as the following to not work as expected:{code}charsequence cs1 = ""1 < 2"";charsequence cs2 = charbuffer.wrap(""1 < 2"".tochararray());system.out.println(stringescapeutils.escape_html4.translate(cs1));system.out.println(stringescapeutils.escape_html4.translate(cs2));{code}... which gives the following results (but should be identical):{noformat}1 < 21 < 2{noformat}the problem, at a minimum, is that {{charbuffer.equals}} is even documented in the javadoc that:{quote}a char buffer is not equal to any other type of object.{quote}... so a lookup on a charbuffer in the map will always fail when compared against the string implementations that it contains.an obvious work-around is to instead use something along the lines of either of the following:{code}system.out.println(stringescapeutils.escape_html4.translate(cs2.tostring()));system.out.println(stringescapeutils.escapehtml4(cs2.tostring()));{code}... which forces everything back to a {{string}}. however, this is not practical when working with large sets of data, which would require significant heap allocations and garbage collection concerns. (as such, i was actually trying to use the {{translate}} method that outputs to a {{writer}} - but simplified the above examples to omit this.)another option that im considering is to use a custom {{charsequence}} wrapper around a {{char[]}} that implements {{hashcode()}} and {{equals()}} to work with those implemented on {{string}}. (however, this will be interesting due to the symmetric assumption - which is further interesting that {{string.equals}} is currently implemented using {{instanceof}} - even though {{string}} is {{final}}...) "
5500,5500,"4 0.28190476190476194, 0 0.15597883597883597, 2 0.14264550264550263, 3 0.1144973544973545, 1 0.113015873015873, 6 0.09671957671957675, 5 0.09523809523809526","endswithany was added in response to this task: lang-614documentation says that the method returns ""true if the charsequence starts with any of the the prefixes, case insensitive, or both null"" stringutils.endswithany(""mime/type"", ""type"") truestringutils.endswithany(""mime/type"", ""type"") false "
5501,5501,"0 0.22273425499231947, 3 0.1582181259600614, 4 0.14029697900665639, 2 0.1331285202252944, 1 0.11520737327188942, 5 0.11520737327188942, 6 0.11520737327188942","the static method localeutils.tolocale() fails, at least, to parse 3-char locale strings, which are completelly valid bcp47 locales. "
5502,5502,"0 0.629015873015873, 3 0.1267936507936508, 6 0.06546031746031745, 4 0.05168253968253967, 5 0.05034920634920634, 2 0.041015873015873006, 1 0.03568253968253968","in lang-538 issue, there is an unit test:{noformat} public void testformat_calendarisomszulu() { final string datetime = ""2009-10-16t16:42:16.000z""; gregoriancalendar cal = new gregoriancalendar(timezone.gettimezone(""gmt-8"")); cal.clear(); cal.set(2009, 9, 16, 8, 42, 16); cal.gettime(); fastdateformat format = fastdateformat.getinstance(""yyyy-mm-ddthh:mm:ss.sssz"", timezone.gettimezone(""gmt"")); assertequals(""datetime"", datetime, format.format(cal)); }{noformat}this test passes successfully in lang-2.6 but failed in lang3-3.1:{noformat}org.junit.comparisonfailure: datetime expected:<2009-10-16t[16]:42:16.000z> but was:<2009-10-16t[08]:42:16.000z>{noformat}reproduced whit sun java version: 1.6.0_45 and 1.7.0_21 on fedora 17 (linux 3.9.10-100.fc17.i686.pae).moreover, i wrote another unit test showing that the timezone parameter seems to be ignored :{noformat}public void test() { calendar cal = calendar.getinstance(timezone.gettimezone(""europe/paris"")); cal.set(2009, 9, 16, 8, 42, 16); // system.out.println(dateformatutils.iso_datetime_time_zone_format.format(cal)); system.out.println(""long""); system.out.println(dateformatutils.format(cal.gettimeinmillis(), dateformatutils.iso_datetime_time_zone_format.getpattern(), timezone.getdefault())); system.out.println(dateformatutils.format(cal.gettimeinmillis(), dateformatutils.iso_datetime_time_zone_format.getpattern(), timezone.gettimezone(""asia/kolkata""))); system.out.println(dateformatutils.format(cal.gettimeinmillis(), dateformatutils.iso_datetime_time_zone_format.getpattern(), timezone.gettimezone(""europe/london""))); system.out.println(""calendar""); system.out.println(dateformatutils.format(cal, dateformatutils.iso_datetime_time_zone_format.getpattern(), timezone.getdefault())); system.out.println(dateformatutils.format(cal, dateformatutils.iso_datetime_time_zone_format.getpattern(), timezone.gettimezone(""asia/kolkata""))); system.out.println(dateformatutils.format(cal, dateformatutils.iso_datetime_time_zone_format.getpattern(), timezone.gettimezone(""europe/london""))); system.out.println(""calendar fast""); system.out.println(fastdateformat.getinstance(""yyyy-mm-ddthh:mm:ss.sssz"", timezone.gettimezone(""europe/paris"")).format(cal)); system.out.println(fastdateformat.getinstance(""yyyy-mm-ddthh:mm:ss.sssz"", timezone.gettimezone(""asia/kolkata"")).format(cal)); system.out.println(fastdateformat.getinstance(""yyyy-mm-ddthh:mm:ss.sssz"", timezone.gettimezone(""europe/london"")).format(cal));}{noformat}gives the following console logs:{noformat}long2009-10-16t08:42:16+02:002009-10-16t12:12:16+05:302009-10-16t07:42:16+01:00calendar2009-10-16t08:42:16+02:002009-10-16t08:42:16+02:002009-10-16t08:42:16+02:00calendar fast2009-10-16t08:42:16.975z2009-10-16t08:42:16.975z2009-10-16t08:42:16.975z{noformat}when dateformatutils.format takes a long parameter, the time string is good.when dateformatutils.format takes a calendar parameter, the time string is wrong, the timezone parameter is ignored. "
5503,5503,"0 0.5346434870244393, 6 0.09901738473167043, 4 0.09725371630133534, 3 0.08667170571932477, 1 0.06462585034013606, 2 0.06109851347946586, 5 0.056689342403628135","when using a custom format registered and a choice format with an inner format is used in the same message format, an indexoutofboundsexception occurs in the custructor of extendedmessageformat:{code:java}new extendedmessageformat(""hi {0,test,any}, got {1,choice,0#none|1#one|1<{1,number}}"", collections.singletonmap(""test"", new testformatfactory()));{code}{noformat}java.lang.indexoutofboundsexception: index: 2, size: 2 at java.util.arraylist.rangecheck(arraylist.java:604) at java.util.arraylist.get(arraylist.java:382) at org.apache.commons.lang.text.extendedmessageformat.insertformats(extendedmessageformat.java:364) at org.apache.commons.lang.text.extendedmessageformat.applypattern(extendedmessageformat.java:192) at org.apache.commons.lang.text.extendedmessageformat.<init>(extendedmessageformat.java:127){noformat}the problem occurs at the start of {{\{1,number\}}}.as a workaround i registered the {{testformatfactory}} also for ""choice"" and then returning {{new choiceformat(arguments)}}, but that is not the idea.i also checked the change logs, but there seems no change on this problem. i have not tester, but i think the bug still is present in the current release. "
5504,5504,"0 0.29836668967103747, 2 0.14538762364849317, 1 0.12284334023464455, 5 0.11318150448585233, 4 0.11318150448585228, 3 0.10351966873706006, 6 0.10351966873706006","booleanutils.xor(true, true, false, true) returns false, although true ^ true ^ false ^ true is true. this is because the implementation only checks the count of true in the provided array. "
5505,5505,"5 0.16445485297944312, 2 0.15534738485558158, 4 0.1480614103564923, 3 0.14077543585740304, 0 0.13531095498308612, 6 0.1334894613583138, 1 0.12256049960967998",add a method which allows to remove the final modifier from a fieldsee http://goo.gl/jo1vjh for further details. 
5506,5506,"4 0.3194866599121919, 0 0.23674434312732187, 6 0.09726443768996959, 2 0.09608240459304287, 5 0.09608240459304287, 1 0.07835190813914221, 3 0.07598784194528878","stringutils.getlevenshteindistance(charsequence s, charsequence t, int threshold) specifies:{quote}{{find the levenshtein distance between two strings if its _+*less than or equal to*+_ a given threshold.}}{quote}when passing a threshold > *integer.max_value - max(s.length(), t.length())* the method always returns -1.the simplest use case is passing *integer.max_value* (a common practice if one would want to find the min/max ld of a string to several other strings in an iterative fashion.the code should be fixed to consider the threshold in relation to the source/target lengths, or alternatively the javadoc should be fixed to pronounce the current limit. "
5507,5507,"0 0.46945646945646946, 3 0.11255411255411252, 4 0.10020843354176683, 1 0.09235209235209232, 6 0.07888407888407888, 2 0.07439474106140771, 5 0.07215007215007216","exception while trying to format a string containing escaped braces{code}exception in thread ""main"" java.lang.illegalargumentexception: invalid format argument index at position 7: } at org.apache.commons.lang3.text.extendedmessageformat.readargumentindex(extendedmessageformat.java:357) at org.apache.commons.lang3.text.extendedmessageformat.applypattern(extendedmessageformat.java:167) at org.apache.commons.lang3.text.extendedmessageformat.<init>(extendedmessageformat.java:128) at org.apache.commons.lang3.text.extendedmessageformat.<init>(extendedmessageformat.java:113) at test.testextendedmessageformat.main(testextendedmessageformat.java:16){code}i will attach a source "
5508,5508,"6 0.19763022579923986, 0 0.18980549966465457, 3 0.14285714285714285, 4 0.1381623071763917, 1 0.11625307399955286, 2 0.11468812877263582, 5 0.10060362173038231",simpledateformat has a set2digityearstart(date startdate) method to determine the start of the default century. fastdateparser uses a static 80 years in the past as the default century start.the application should be able to set the default century as part of the constructor. 
5509,5509,"0 0.4023405972558516, 3 0.16222760290556898, 6 0.130212536992198, 4 0.08878127522195317, 1 0.07842345977939195, 5 0.06994888350820552, 2 0.06806564433683077","when one trys to get the fragments of a calendar object and uses the fragment year or month, the returned value is wrong by 1 day in the targeted timeunit. the bug resides in the class *dateutils* in function {code}private static long getfragment(calendar calendar, int fragment, int unit){code}there is an initial recalculation if the fragment is year or month. so if one would like to have the minutes for the fragment year for the date 2000-01-01 00:00:00 this would return 1440 which is actually wrong. the error can be found on lines 1635 - 1643.suggested fix:{code}// fragments bigger than a day require a breakdown to days switch (fragment) { case calendar.year: result += ((calendar.get(calendar.day_of_year)-1) * millis_per_day) / millisperunit; break; case calendar.month: result += ((calendar.get(calendar.day_of_month)-1) * millis_per_day) / millisperunit; break; }{code} "
5510,5510,"0 0.28571428571428575, 4 0.16796967543236202, 2 0.11987680644397061, 1 0.10660980810234545, 3 0.10660980810234545, 5 0.10660980810234545, 6 0.10660980810234545","when trying to convert ""0085"" with numberutils.createinteger(string) an numberformatexception is thrown. this is because the leading 0 causes the string to be evaluated as an octal, 8 is not a valid octal.however numberutils#isnumber(string) evaluates to true, even so it cannot be converted. "
5511,5511,"0 0.22077922077922074, 1 0.12987012987012989, 2 0.12987012987012989, 3 0.12987012987012989, 4 0.12987012987012989, 5 0.12987012987012989, 6 0.12987012987012989",isnumber() does not allow for 0xabcd whereas createnumber() allows for both 0xabcd and 0xabcd 
5512,5512,"0 0.5612558098745944, 4 0.1315443304393581, 1 0.06708760852407261, 6 0.06585986143997194, 3 0.06401824081382093, 2 0.06156274664561957, 5 0.04867140226256248","numericentityescaper will incorrectly encode supplementary unicode characters depending on the char length of the first code point in the string.to reproduce, run:{code}string escaped = numericentityescaper.between(0x7f, integer.max_value).translate(""a \ud83d\udc14 \ud83d\udca9"");{code}expected:{code}escaped == ""a 🐔 💩""{code}actual:{code}escaped == ""a 🐔� 💩�""{code}the issue lies in charsequencetranslator.translate() and the way it checks code points to figure out how many characters it needs to consume. specifically, the issue is on [line 95|https://github.com/apache/commons-lang/blob/trunk/src/main/java/org/apache/commons/lang3/text/translate/charsequencetranslator.java#l95]:{code}// contract with translators is that they have to understand codepoints // and they just took care of a surrogate pairfor (int pt = 0; pt < consumed; pt++) { pos += character.charcount(character.codepointat(input, pt));}{code}the point of this code is to check the charcount of the character that was just translated and move ahead by that many characters in the input string. the bug is that its indexing into the string using pt, which is _always_ 0 at the beginning of the loop. its effetively checking the charcount of first character in the string every time.a patch is attached that fixes the issue and includes supporting unit tests. fixing this issue in charsequencetranslator uncovered an issue in csvescaper/csvunescaper caused by the fact that it wasnt respecting the ""code point contract"" described in charsequencetranslator.translate. the fix there was to have the translate methods return the strings code point count rather than character count. "
5513,5513,"0 0.5572374645222328, 6 0.10469883317565438, 4 0.08409544833385893, 3 0.08041627246925259, 1 0.06275622831914222, 5 0.05834121728161462, 2 0.05245453589824451","gary gregory has reported failing tests during the vote for lang 3.3 rc1, when building with:{code}java version ""1.8.0""java(tm) se runtime environment (build 1.8.0-b128)java hotspot(tm) 64-bit server vm (build 25.0-b69, mixed mode)apache maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9;2014-02-14t12:37:52-05:00)maven home: c:\java\apache-maven-3.2.1\bin\..java version: 1.8.0, vendor: oracle corporationjava home: c:\program files\java\jdk1.8.0\jredefault locale: en_us, platform encoding: cp1252os name: ""windows 7"", version: ""6.1"", arch: ""amd64"", family: ""dos""{code}{code}fastdateformat_parsertest>fastdateparsertest.testparses:242->fastdateparsertest.validatesdfformatfdpparseequality:219 » parse fastdateparsertest.testparses:242->validatesdfformatfdpparseequality:219 » parserunning org.apache.commons.lang3.time.fastdateformat_parsertest /1/2/10/5/??/0/0/?/+0000 ja_jp_jp_#u-ca-japanese 1867 g/y/m/d/h/a/m/s/e/z america/new_york tests run: 29, failures: 0, errors: 1, skipped: 0, time elapsed: 2.491 sec <<< failure! - in org.apache.commons.lang3.time.fastdateformat_parsertest testparses(org.apache.commons.lang3.time.fastdateformat_parsertest) time elapsed: 1.492 sec <<< error! java.text.parseexception: (the ja_jp_jp_#u-ca-japanese locale does not support dates before 1868 ad){code}see: http://markmail.org/message/suvorq3xrqmimnui "
5514,5514,"0 0.2193792940061597, 4 0.18455342335939348, 6 0.1364605543710021, 2 0.12153518123667374, 3 0.11656005685856433, 1 0.1149016820658612, 5 0.10660980810234542","the method durationformatutils#lexx does not detect if the format string contains an unmatched single-quote character.for example ""ymd\test"" should really be rejected, as the literal string ""test"" is not properly terminated. "
5515,5515,"0 0.2285714285714286, 6 0.20931216931216934, 4 0.15894179894179894, 2 0.10708994708994708, 3 0.10412698412698412, 5 0.09671957671957675, 1 0.09523809523809526","durationformatutils assumes that the the number of days, hours, minutes, seconds and milliseconds can be expressed as an int when converted from a long duration in milliseconds.however even the number of days can exceed an int if the duration is large enough.its unlikely that such large durations will often be used, but this restriction is not documented. it should be easy enough to use long fields instead of int. "
5516,5516,"0 0.38465994670374243, 3 0.2110995249681381, 6 0.1194531340516742, 4 0.10161047387324758, 2 0.06916927354883558, 1 0.060247943459622276, 5 0.0537597033947399","commons lang3 screwed up my system after upgraded to 3.3 last night!we use dateutils.getfragmentindays(date, calendar.month) to extract days for later use. basically (in 3.2), today (mar. 13) returns 13, but, it returns 12 in 3.3!i compared the underlying method org.apache.commons.lang3.time.dateutils.getfragment(calendar, int, int) between 3.2 and 3.3:3.2{code:java} // fragments bigger than a day require a breakdown to days switch (fragment) { case calendar.year: result += (calendar.get(calendar.day_of_year) * millis_per_day) / millisperunit; break; case calendar.month: result += (calendar.get(calendar.day_of_month) * millis_per_day) / millisperunit; break; }{code}3.3{code:java} // fragments bigger than a day require a breakdown to days switch (fragment) { case calendar.year: result += ((calendar.get(calendar.day_of_year) -1) * millis_per_day) / millisperunit; break; case calendar.month: result += ((calendar.get(calendar.day_of_month) -1) * millis_per_day) / millisperunit; break; default: break; }{code}is there any any reason for adding -1 in 3.3?! plus, do you have any unit test for this method? "
5517,5517,"0 0.3847837985769021, 4 0.16767013318737456, 1 0.09359605911330046, 3 0.09359605911330046, 6 0.0923189199051268, 2 0.08593322386425835, 5 0.08210180623973727","after upgrading from 3.1 to 3.3.1, it seems that {{isnumber(string str)}} returns false for decimal numbers with leading zeros. in other words:{code:java}boolean ret = numberutils.isnumber(""0.4790"");{code}on 3.1, {{ret}} was true. in 3.3.1, {{ret}} is false.guessing that lang-972 is related... comment in the code states:{code:java}// leading 0, but not hex, must be octal{code}this is clearly a case where leading 0 means neither hex nor octal. "
5518,5518,"0 0.1954887218045112, 2 0.1584516847674742, 1 0.13895850737956003, 4 0.1311612364243943, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",via github: https://github.com/apache/commons-lang/pull/18 
5519,5519,"0 0.2658137882018479, 6 0.14143567874911156, 4 0.13480217957829896, 2 0.12153518123667374, 3 0.12153518123667374, 5 0.10826818289504858, 1 0.10660980810234542","it spits out complete garbage.{code}system.out.println(durationformatutils.formatdurationhms(-3454));system.out.println(durationformatutils.formatperiodiso(4000, 3000));{code}{noformat}0:00:-3.-454p-1y11m30dt23h59m59.000s{noformat}it should throw an {{illegalargumentexception}} if duration is < 0 or period diff is < 0. "
5520,5520,"4 0.19088847660276237, 3 0.16635745207173777, 0 0.15769944341372913, 6 0.14904143475572046, 2 0.13172541743970315, 1 0.10575139146567718, 5 0.09853638425067","this method has several flaws:1. javadoc says: ""the format used is iso8601-like: h:m:s.s."" but the method call supplies ""h:mm:ss.sss""2. iso time never omits leading zeros, so the proper pattern must be ""hh:mm:ss.sss""3. the method name says: ""hms"" but includes the second fraction.since the use of fractions is optional, the method should use ""hh:mm:ss"" and update the javadoc as well. "
5521,5521,"0 0.43580952380952387, 4 0.18336507936507937, 2 0.08825396825396824, 3 0.08647619047619046, 6 0.08647619047619046, 1 0.06247619047619046, 5 0.05714285714285715","with commons-lang 3.2.2:numberutils.createnumber(""-160952.54"");the result is ""-160952.55"".should not be based on the length of the decimal point number to judge whether the floating point number.using the method (createfloat(str)) of dealing with the valid number greater than seven numbers will cause accuracy loss.the source code is as follows:{code:java}try { if(numdecimals <= 7){// if number has 7 or fewer digits past the decimal point then make it a float final float f = createfloat(str); if (!(f.isinfinite() || (f.floatvalue() == 0.0f && !allzeros))) { return f; } } } catch (final numberformatexception nfe) { // nopmd // ignore the bad number } try { if(numdecimals <= 16){// if number has between 8 and 16 digits past the decimal point then make it a double final double d = createdouble(str); if (!(d.isinfinite() || (d.doublevalue() == 0.0d && !allzeros))) { return d; } } } catch (final numberformatexception nfe) { // nopmd // ignore the bad number } return createbigdecimal(str); }{code} "
5522,5522,"0 0.5997574955908289, 1 0.10052910052910054, 4 0.07506613756613756, 3 0.06194885361552028, 5 0.05886243386243385, 2 0.053461199294532635, 6 0.05037477954144622","strsubsitutor caches a references to systemproperties statically on first class references. this does not work properly with system.setproperties(). for example the following code:{code}package test.utilities;import java.util.properties;import org.apache.commons.lang.text.strsubstitutor;public class teststrsubstitutor { public static void main(string[] args) { system.out.println(strsubstitutor.replacesystemproperties(""os.name=${os.name}"")); properties testprops = new properties(); testprops.put(""test_key"", ""test_value""); testprops.putall(system.getproperties()); system.setproperties(testprops); system.out.println(strsubstitutor.replace(""test_key=${test_key}"", system.getproperties())); system.out.println(strsubstitutor.replacesystemproperties(""test_key=${test_key}"")); }}{code}produces the following output:{code}os.name=windows 7test_key=test_valuetest_key=${test_key}{code}the code linked here shows the static caching of the system properties reference: http://commons.apache.org/proper/commons-lang/apidocs/src-html/org/apache/commons/lang3/text/strlookup.html "
5523,5523,"0 0.19594964422550626, 4 0.17296113847837982, 2 0.13081554460864805, 6 0.13081554460864805, 1 0.12315270935960593, 3 0.12315270935960593, 5 0.12315270935960593","the isnumber method assumes, that if the string being passed in doesn\t have an \x\ at the second char it is an octal number. "
5524,5524,"6 0.8822866631085808, 0 0.046393484749649154, 5 0.018996224475676532, 3 0.01650556445076993, 2 0.01249283441064263, 4 0.012492834410642629, 1 0.01083239439403823","the following code throws an exception:dateparser dp = fastdateformat.getinstance(""z yyyy"", locale.us);dp.parse(""gmt+00:00 2010"");the format works correctly with simpledateformat.stack:java.text.parseexception: unparseable date: ""gmt+00:00 2010"" does not match (gmt[+\-]\d{0,1}\d{2}|[+\-]\d{2}:?\d{2}|\qacre time\e|\qact\e|\qadt\e|\qafghanistan time\e|\qaft\e|\qakdt\e|\qakst\e|\qalaska daylight time\e|\qalaska standard time\e|\qalma-ata time\e|\qalmt\e|\qamazon summer time\e|\qamazon time\e|\qamst\e|\qamt\e|\qanadyr time\e|\qanat\e|\qaqtau time\e|\qaqtobe time\e|\qaqtt\e|\qarabia standard time\e|\qargentine time\e|\qarmenia time\e|\qart\e|\qast\e|\qatlantic daylight time\e|\qatlantic standard time\e|\qazerbaijan summer time\e|\qazerbaijan time\e|\qazores summer time\e|\qazores time\e|\qazost\e|\qazot\e|\qazst\e|\qazt\e|\qbangladesh time\e|\qbdt\e|\qbhutan time\e|\qbnt\e|\qbolivia time\e|\qbot\e|\qbrasilia summer time\e|\qbrasilia time\e|\qbritish summer time\e|\qbrst\e|\qbrt\e|\qbrunei time\e|\qbst\e|\qbtt\e|\qcape verde time\e|\qcat\e|\qcct\e|\qcdt\e|\qcentral african time\e|\qcentral daylight time\e|\qcentral european summer time\e|\qcentral european time\e|\qcentral indonesia time\e|\qcentral standard time\e|\qcentral standard time (northern territory)\e|\qcentral standard time (south australia)\e|\qcentral standard time (south australia/new south wales)\e|\qcentral summer time (south australia)\e|\qcentral summer time (south australia/new south wales)\e|\qcentral western standard time (australia)\e|\qcest\e|\qcet\e|\qchadt\e|\qchamorro standard time\e|\qchast\e|\qchatham daylight time\e|\qchatham standard time\e|\qchile summer time\e|\qchile time\e|\qchina standard time\e|\qchoibalsan time\e|\qchot\e|\qchristmas island time\e|\qchst\e|\qchut\e|\qchuuk time\e|\qckt\e|\qclst\e|\qclt\e|\qcocos islands time\e|\qcolombia time\e|\qcook is. time\e|\qcoordinated universal time\e|\qcot\e|\qcst\e|\qcuba daylight time\e|\qcuba standard time\e|\qcvt\e|\qcwst\e|\qcxt\e|\qdavis time\e|\qdavt\e|\qddut\e|\qdumont-durville time\e|\qeasst\e|\qeast\e|\qeast indonesia time\e|\qeaster is. summer time\e|\qeaster is. time\e|\qeastern african time\e|\qeastern daylight time\e|\qeastern european summer time\e|\qeastern european time\e|\qeastern greenland summer time\e|\qeastern greenland time\e|\qeastern standard time\e|\qeastern standard time (new south wales)\e|\qeastern standard time (queensland)\e|\qeastern standard time (tasmania)\e|\qeastern standard time (victoria)\e|\qeastern summer time (new south wales)\e|\qeastern summer time (tasmania)\e|\qeastern summer time (victoria)\e|\qeat\e|\qect\e|\qecuador time\e|\qedt\e|\qeest\e|\qeet\e|\qegst\e|\qegt\e|\qest\e|\qfalkland is. time\e|\qfernando de noronha time\e|\qfet\e|\qfiji summer time\e|\qfiji time\e|\qfjst\e|\qfjt\e|\qfkt\e|\qfnt\e|\qfrench guiana time\e|\qfrench southern & antarctic lands time\e|\qfurther-eastern european time\e|\qgalapagos time\e|\qgalt\e|\qgambier time\e|\qgamt\e|\qgeorgia time\e|\qget\e|\qgft\e|\qghana mean time\e|\qgilbert is. time\e|\qgilt\e|\qgmt\e|\qgreenwich mean time\e|\qgst\e|\qgulf standard time\e|\qguyana time\e|\qgyt\e|\qhadt\e|\qhast\e|\qhawaii standard time\e|\qhawaii-aleutian daylight time\e|\qhawaii-aleutian standard time\e|\qhkt\e|\qhong kong time\e|\qhovd time\e|\qhovt\e|\qhst\e|\qict\e|\qidt\e|\qindia standard time\e|\qindian ocean territory time\e|\qindochina time\e|\qiot\e|\qiran daylight time\e|\qiran standard time\e|\qirdt\e|\qirish summer time\e|\qirkt\e|\qirkutsk time\e|\qirst\e|\qisrael daylight time\e|\qisrael standard time\e|\qist\e|\qjapan standard time\e|\qjst\e|\qkgt\e|\qkhandyga time\e|\qkirgizstan time\e|\qkorea standard time\e|\qkosrae time\e|\qkost\e|\qkrasnoyarsk time\e|\qkrat\e|\qkst\e|\qlhst\e|\qline is. time\e|\qlint\e|\qlord howe standard time\e|\qlord howe summer time\e|\qmacquarie island time\e|\qmagadan time\e|\qmagt\e|\qmalaysia time\e|\qmaldives time\e|\qmarquesas time\e|\qmarshall islands time\e|\qmart\e|\qmauritius time\e|\qmawson time\e|\qmawt\e|\qmdt\e|\qmest\e|\qmet\e|\qmetlakatla standard time\e|\qmht\e|\qmiddle europe summer time\e|\qmiddle europe time\e|\qmist\e|\qmmt\e|\qmoscow standard time\e|\qmountain daylight time\e|\qmountain standard time\e|\qmsk\e|\qmst\e|\qmut\e|\qmvt\e|\qmyanmar time\e|\qmyt\e|\qnauru time\e|\qnct\e|\qndt\e|\qnepal time\e|\qnew caledonia time\e|\qnew zealand daylight time\e|\qnew zealand standard time\e|\qnewfoundland daylight time\e|\qnewfoundland standard time\e|\qnft\e|\qniue time\e|\qnorfolk time\e|\qnovosibirsk time\e|\qnovt\e|\qnpt\e|\qnrt\e|\qnst\e|\qnut\e|\qnzdt\e|\qnzst\e|\qomsk time\e|\qomst\e|\qoral time\e|\qorat\e|\qpacific daylight time\e|\qpacific standard time\e|\qpakistan time\e|\qpalau time\e|\qpapua new guinea time\e|\qparaguay summer time\e|\qparaguay time\e|\qpdt\e|\qperu time\e|\qpet\e|\qpetropavlovsk-kamchatski time\e|\qpett\e|\qpgt\e|\qphilippines time\e|\qphoenix is. time\e|\qphot\e|\qpht\e|\qpierre & miquelon daylight time\e|\qpierre & miquelon standard time\e|\qpitcairn standard time\e|\qpkt\e|\qpmdt\e|\qpmst\e|\qpohnpei time\e|\qpont\e|\qpst\e|\qpwt\e|\qpyst\e|\qpyt\e|\qqyzt\e|\qqyzylorda time\e|\qret\e|\qreunion time\e|\qrothera time\e|\qrott\e|\qsakhalin time\e|\qsakt\e|\qsamara time\e|\qsamoa standard time\e|\qsamt\e|\qsast\e|\qsbt\e|\qsct\e|\qseychelles time\e|\qsgt\e|\qsingapore time\e|\qsolomon is. time\e|\qsouth africa standard time\e|\qsouth georgia standard time\e|\qsrt\e|\qsst\e|\qsuriname time\e|\qsyot\e|\qsyowa time\e|\qtahiti time\e|\qtaht\e|\qtajikistan time\e|\qtft\e|\qtimor-leste time\e|\qtjt\e|\qtkt\e|\qtlt\e|\qtmt\e|\qtokelau time\e|\qtonga time\e|\qtot\e|\qturkmenistan time\e|\qtuvalu time\e|\qtvt\e|\qulaanbaatar time\e|\qulat\e|\quruguay summer time\e|\quruguay time\e|\qust-nera time\e|\qutc\e|\quyst\e|\quyt\e|\quzbekistan time\e|\quzt\e|\qvanuatu time\e|\qvenezuela time\e|\qvet\e|\qvladivostok time\e|\qvlat\e|\qvolgograd time\e|\qvolt\e|\qvost\e|\qvostok time\e|\qvut\e|\qwake time\e|\qwakt\e|\qwallis & futuna time\e|\qwast\e|\qwat\e|\qwest\e|\qwest indonesia time\e|\qwest samoa daylight time\e|\qwest samoa time\e|\qwestern african summer time\e|\qwestern african time\e|\qwestern european summer time\e|\qwestern european time\e|\qwestern greenland summer time\e|\qwestern greenland time\e|\qwestern standard time (australia)\e|\qwet\e|\qwft\e|\qwgst\e|\qwgt\e|\qwib\e|\qwit\e|\qwita\e|\qwsdt\e|\qwst\e|\qyakt\e|\qyakutsk time\e|\qyekaterinburg time\e|\qyekt\e)\q \e(\p{nd}++) at org.apache.commons.lang3.time.fastdateparser.parse(fastdateparser.java:289) at org.apache.commons.lang3.time.fastdateformat.parse(fastdateformat.java:487) "
5525,5525,"0 0.43875086266390617, 4 0.1247412008281573, 2 0.1102484472049689, 6 0.09213250517598341, 3 0.07884748102139406, 1 0.07763975155279502, 5 0.07763975155279502","i think there is typo in below line:{code:title= org.apache.commons.lang3.math.numberutils.java|borderstyle=solid} if (str.startswith(""0x"", pos) || str.startswith(""0x"", pos)) { // hex radix = 16; pos += 2;}{code}the second ""0x"" should be ""0x""{code:title= org.apache.commons.lang3.math.numberutils.java|borderstyle=solid} if (str.startswith(""0x"", pos) || str.startswith(""0x"", pos)) { // hex radix = 16; pos += 2;}{code} "
5526,5526,"0 0.4447229184071291, 4 0.1377053745474798, 2 0.12308549150654412, 3 0.0967697020328599, 1 0.06752993595098858, 6 0.06558061821219717, 5 0.06460595934280146","{code:title=org.apache.commons.lang3.arrayutils.java|borderstyle=solid} public static <t> t[] add(final t[] array, final t element) { class<?> type; if (array != null){ type = array.getclass(); } else if (element != null) { type = element.getclass(); } else { throw new illegalargumentexception(""arguments cannot both be null""); } ....... }{code}i think it should be:{code:title=org.apache.commons.lang3.arrayutils.java|borderstyle=solid} public static <t> t[] add(final t[] array, final t element) { class<?> type; if (array != null){ type = array.getclass().getcomponenttype(); } else if (element != null) { type = element.getclass(); } else { throw new illegalargumentexception(""arguments cannot both be null""); } ....... }{code} "
5527,5527,"4 0.5884920634920636, 0 0.19015873015873022, 3 0.05793650793650793, 2 0.05071428571428571, 5 0.04071428571428571, 6 0.036269841269841285, 1 0.035714285714285726","{code:title= org.apache.commons.lang3.stringutils.java|borderstyle=solid} int found = 0; int index = lastindex ? str.length() : index_not_found; do { if (lastindex) { index = charsequenceutils.lastindexof(str, searchstr, index - 1); } else { index = charsequenceutils.indexof(str, searchstr, index + 1); } if (index < 0) { return index; } found++; } while (found < ordinal);{code}should it be:{code:title= org.apache.commons.lang3.stringutils.java|borderstyle=solid} private static int ordinalindexof(final charsequence str, final charsequence searchstr, final int ordinal, final boolean lastindex) { // if (str == null || searchstr == null || ordinal <= 0) { // return index_not_found; // } // if (searchstr.length() == 0) { // return lastindex ? str.length() : 0; // } // int found = 0; // int index = lastindex ? str.length() : index_not_found; // do { // if (lastindex) { // index = charsequenceutils.lastindexof(str, searchstr, index - 1); // } else { // index = charsequenceutils.indexof(str, searchstr, index + 1); // } // if (index < 0) { // return index; // } // found++; // } while (found < ordinal); // return index; if (str == null || searchstr == null || ordinal <= 0) { return index_not_found; } if (searchstr.length() == 0) { return lastindex ? str.length() : 0; } final int searchstrlen = searchstr.length(); int index = lastindex ? str.length() : 0; for (int found = 0; index >= 0;) { if (lastindex) { index = charsequenceutils.lastindexof(str, searchstr, index); } else { index = charsequenceutils.indexof(str, searchstr, index); } if (index < 0) { return index_not_found; } if (++found >= ordinal) { break; } index = lastindex ? index - searchstrlen : index + searchstrlen; } return index; }{code} "
5528,5528,"0 0.16326530612244897, 6 0.16128117913832196, 5 0.14739229024943307, 3 0.1454081632653061, 1 0.1275510204081633, 2 0.1275510204081633, 4 0.1275510204081633","this is probably just a quirk of the old jdk that was used.the casts are not necessary on other computers, but they don\t seem to hurt either. (please verify that of course!) "
5529,5529,"0 0.2192918192918193, 4 0.15604395604395602, 2 0.14065934065934063, 6 0.12527472527472525, 3 0.12356532356532356, 5 0.12014652014652016, 1 0.11501831501831504","{{numberutils.createnumber(""-0.0"")}} returns {{bigdecimal}} with 0 signum.caused by the implementation not checking for sign when extracting mantissa from the input string.expected is that negative {{float}} is returned. "
5530,5530,"0 0.20818955601564298, 6 0.17598343685300205, 1 0.13250517598343683, 3 0.1308948700253048, 4 0.12284334023464456, 2 0.12123303427651252, 5 0.1083505866114562",fastdateparser does not do any validation of dates/times.it acts similarly to simpledateformat (sdf) in lenient mode.however it does not generate the same output as sdf for input where the number of hours is greater than the normal range (e.g. > 12 for hh or > 23 for hh) 
5531,5531,"0 0.47503607503607503, 4 0.12352092352092348, 3 0.10432900432900429, 2 0.0831168831168831, 1 0.07503607503607501, 5 0.07301587301587298, 6 0.06594516594516595","there is a bug in typeutils.equals(wilcardtype, type). it returns true if the other type is not a wildcardtype, it should return false. see typeutils@1629 for v3.3.2 and typeutils@791 for v3.4bug can be seen with the following test:{code}@test public void shouldhandleequalityofparameterizedtypeswithwildcards() throws exception { // given: class sometype { collection<?> field; } final parameterizedtype wildcardcollectiontype = (parameterizedtype) sometype.class.getdeclaredfield(""field"").getgenerictype(); final wildcardtype wildcard = (wildcardtype) wildcardcollectiontype.getactualtypearguments()[0]; final parameterizedtype ptwithwildcard = typeutils.parameterize(collection.class, wildcard); final parameterizedtype otherpt = typeutils.parameterize(collection.class, string.class); // then: assertthat(otherpt, is(not(equalto(ptwithwildcard)))); // passes assertthat(ptwithwildcard, is(not(equalto(otherpt)))); // fails }{code} "
5532,5532,"0 0.5122539682539683, 6 0.11847619047619051, 3 0.08025396825396826, 2 0.07936507936507937, 5 0.07847619047619048, 4 0.06603174603174604, 1 0.06514285714285714","unit test for testlang530 fails when the isodatestr comes out with just a z instead of +00:00.{code}tests run: 38, failures: 0, errors: 1, skipped: 0, time elapsed: 0.014 sec <<< failure! - in org.apache.commons.lang3.time.dateutilstesttestlang530(org.apache.commons.lang3.time.dateutilstest) time elapsed: 0.005 sec <<< error!java.text.parseexception: unable to parse the date: 2015-04-17t18:51:52z at org.apache.commons.lang3.time.dateutils.parsedatewithleniency(dateutils.java:401) at org.apache.commons.lang3.time.dateutils.parsedate(dateutils.java:301) at org.apache.commons.lang3.time.dateutils.parsedate(dateutils.java:278) at org.apache.commons.lang3.time.dateutilstest.testlang530(dateutilstest.java:1222){code}on a linux machine where this test passes, isodatestr is 2015-04-17t19:26:03+00:00. "
5533,5533,"0 0.21950113378684807, 4 0.2163265306122449, 6 0.11791383219954646, 3 0.11632653061224486, 1 0.11473922902494331, 2 0.11315192743764174, 5 0.10204081632653063","unlike what is said in javadoc comment, when passing a negative repeat value to the *stringutils.repeat(char, int)* function, it doesnt return an empty string but throws a _negativearraysizeexception_.see pr #72 : https://github.com/apache/commons-lang/pull/72 "
5534,5534,"0 0.31854751032833223, 4 0.1450315285931724, 1 0.1389432485322896, 5 0.10241356816699285, 6 0.09936942813655145, 2 0.09784735812133075, 3 0.09784735812133075","{code}import org.apache.commons.lang3.stringutils;public class main { public static void main(string[] args) { system.out.println(stringutils.stripaccents(""ĄŁÓŚŻŹĆŃ ąłóśżźćń"")); }}{code} "
5535,5535,"2 0.31729323308270674, 4 0.18512949039264828, 0 0.15939849624060148, 6 0.09741019214703424, 1 0.09039264828738511, 3 0.07518796992481205, 5 0.07518796992481205",following the discussion at https://github.com/apache/commons-lang/pull/47 we need to decide how malformed inputs should be handled by the swap method. we have to handle several forms of malformed inputs and we should decide how to do that based on the current behavior of arrayutils. malformed inputs are:# array == null# array.length == 0# offset1 < 0# offset2 < 0# len < 0# offset1 > offset2# offset1 > array.length# offset2 > array.length# offset1 + len > array.length# offset2 + len > array.length 
5536,5536,"0 0.3088702147525677, 2 0.17422969187675072, 4 0.14547152194211016, 1 0.10102707749766571, 3 0.09841269841269838, 6 0.08795518207282915, 5 0.08403361344537817","placeholder for https://github.com/apache/commons-lang/pull/74{quote}except number, boolean, array and nested object structures, other types like char, string, date etc. in java should be appendasstring.add method {{appenddetail(stringbuffer buffer, string fieldname, char value) to jsontostringstyle}}modify {{appenddetail(stringbuffer buffer, string fieldname, object value)}}{quote} "
5537,5537,"0 0.28179756751185325, 4 0.14904143475572046, 3 0.1331684188827046, 6 0.1331684188827046, 1 0.10863739435168004, 2 0.10142238713667286, 5 0.09276437847866421",the following test will fail because the {{equals(strbuilder)}} overload in {{strbuilder}} does not check for null inputs:{code:java} @test public void testequalswithnullstrbuilder() throws exception { final strbuilder sb = new strbuilder(); final strbuilder other = null; assertfalse(sb.equals(other)); }{code} 
5538,5538,"0 0.4448135843484681, 2 0.10889627168696933, 4 0.10114433370247321, 1 0.08951642672572907, 6 0.08951642672572907, 3 0.08305647840531563, 5 0.08305647840531563","placeholder for https://github.com/apache/commons-lang/pull/85{quote}as described in its [javadoc|http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/builder/reflectiontostringbuilder.html#reflectiontostringbuilder(java.lang.object)], reflectiontostringbuilder constructor will throw illegalargumentexception if the object to build a tostringfor is null, while in fact it wont.{quote} "
5539,5539,"0 0.39261809141327214, 6 0.12755785044941667, 3 0.12354178619238855, 5 0.09275196022183974, 4 0.09007458405048765, 1 0.08739720787913559, 2 0.08605851979345955",fastdateparser_timezonestrategytest#testtimezonestrategypattern() on current master fails:{quote}java.lang.assertionerror: französisch:heure deurope de lest utc+3 at org.junit.assert.fail(assert.java:88) at org.junit.assert.asserttrue(assert.java:41) at org.apache.commons.lang3.time.fastdateparser_timezonestrategytest.testtimezonestrategypattern(fastdateparser_timezonestrategytest.java:39){quote}im unsure why. i guess it has something to do with my german locale and maybe windows too. 
5540,5540,"0 0.4771825396825397, 4 0.12301587301587297, 6 0.09986772486772483, 3 0.07671957671957672, 1 0.07440476190476189, 2 0.07440476190476189, 5 0.07440476190476189","the capitalize javadoc says the code uses character#totitlecase, however the code actually uses character#touppercase.generally these produce the same result, but some charsets may have different characters for upper and title case - see for example the javadoc [1] for character#istitlecase.the way i read this, the character that looks like ""lj"" is lower-case, ""lj"" is upper case and ""lj"" is title case - i.e. not the same.the question here is: should the code be corrected to use titlecase or should the javadoc be corrected to use uppercase?[1] http://docs.oracle.com/javase/7/docs/api/java/lang/character.html#istitlecase%28char%29 "
5541,5541,"0 0.5811829387248382, 4 0.12246164760131241, 5 0.07901037509976055, 6 0.06907865567083443, 1 0.05790547131329254, 2 0.05045668174159793, 3 0.039904229848363934","it is possible to create a construct, that allows multiple calls of lazyinitializer.initialize, when calculations (which can be very expensive) return null as result. in the javadoc is described that the initialize method will be called only on the first access{code:java} /** * creates and initializes the object managed by this {@code * lazyinitializer}. this method is called by {@link #get()} when the object * is accessed for the first time. an implementation can focus on the * creation of the object. no synchronization is needed, as this is already * handled by {@code get()}. * * @return the managed data object * @throws concurrentexception if an error occurs during object creation */ protected abstract t initialize() throws concurrentexception;{code}the junit test can be something like this:*(fix can be appplied from attached patch-file)*{code:java}package edu.test;import static org.junit.assert.assertequals;import org.apache.commons.lang3.concurrent.concurrentexception;import org.apache.commons.lang3.concurrent.lazyinitializer;import org.junit.test;public class lazyinitializertest { private int lazyinitcounter = 0; private lazyinitializer<object> lazyiinit = new lazyinitializer<object>() { @override protected object initialize() throws concurrentexception { lazyinitcounter++; return dosomeveryexpensiveoperations(); } }; private object dosomeveryexpensiveoperations() { // do db calls // do some complex math calculations // the result of them all is null return null; } @test public void testinitialization() throws exception { lazyiinit.get(); lazyiinit.get(); assertequals(""multiple call of lazyinitializer#initialize"", 1, lazyinitcounter); }}{code} "
5542,5542,"0 0.4536435786435787, 6 0.1026334776334776, 2 0.09505772005772004, 4 0.09505772005772004, 1 0.08874458874458874, 3 0.0836940836940837, 5 0.08116883116883117","in *enumutils* all _bitvector_ related methods fail in handling enums with more than 32 values.this is due to a implicit _int_ -> _long_ conversion in generating the enum value _long_ mask.*bad code :* here *1* is an _int_ value so the *<<* operation is done into an _int_ context and then, the result is converted to a _long_ value{code}long mask = 1 << 32; // -> mask = 1 and not 4294967296 (0x100000000){code}*good code :* here *1l* is a _long_ value so the *<<* operation is done into an _long_ context{code}long mask = 1l << 32; // -> mask = 4294967296 (0x100000000){code}see pr#97 : https://github.com/apache/commons-lang/pull/97 "
5543,5543,"0 0.25824175824175827, 4 0.23829873829873832, 3 0.11294261294261293, 6 0.10439560439560439, 2 0.10297110297110296, 1 0.0915750915750916, 5 0.0915750915750916","from the commons user mailing list:{quote}stringutils.equals(cs1,cs2) delegates to charsequence.regionmatches(...) in a way that causes indexoutofbounds when either of cs1/cs2 isnt a string.specifically, comparing ""foo"" and ""foobar"" for non-string charsequences bombs due to charsequenceutils.regionmatches(cs1, false, 0, cs2, 0, math.max(cs1.length(), cs2.length())) because regionmatches doesnt check for input exhaustion.{quote} "
5544,5544,"4 0.21181368722352326, 0 0.1735623211033047, 3 0.1371324486078584, 1 0.12256049960967993, 2 0.12073900598490765, 5 0.117096018735363, 6 0.117096018735363",there are no tests for charsequenceutils.regionmatches.it ought to behave the same way as the string version.this includes not failing with index oobe if the charsequences are not long enough. 
5545,5545,"2 0.24268502581755597, 4 0.21591126410403522, 0 0.13291260279212086, 5 0.10747752916427614, 6 0.10212277682157199, 1 0.09944540065021994, 3 0.09944540065021991","the method arrayutils.removeall(object array, int... indices) currently sorts the input indices array. therefore the array needs to be cloned; this is currently done by the callers.however the sort is an implementation detail of the method, so should be done by the method itself, not by the callers, which is fragile (easy to overlook when creating a new method) and unnecessary.this would also allow the method to be more easily changed to a different implementation that does not need to sort the array (e.g. using bitset) "
5546,5546,"0 0.6232426303854874, 4 0.09546485260770973, 1 0.07244897959183672, 5 0.054195011337868484, 2 0.051814058956916105, 6 0.051814058956916105, 3 0.05102040816326531","{code:java}import static org.apache.commons.lang3.reflect.typeutils.*;import java.lang.reflect.invocationtargetexception;import java.lang.reflect.type;import java.util.arraylist;public class demonstration { public static <u> iterable<u> somemethod() { return null; } public static class workingclass extends arraylist { } public static class failingclass extends arraylist<object> { } public static void main(string[] args) throws nosuchmethodexception, securityexception, illegalaccessexception, illegalargumentexception, invocationtargetexception { type fromtype = demonstration.class.getdeclaredmethod(""somemethod"").getgenericreturntype(); type workingtotype = wildcardtype().withlowerbounds(workingclass.class).build(); type failingtotype = wildcardtype().withlowerbounds(failingclass.class).build(); system.out.println(fromtype); system.out.println(workingtotype); system.out.println(failingtotype); system.out.println(isassignable(fromtype, workingtotype)); system.out.println(isassignable(fromtype, failingtotype)); }}{code} "
5547,5547,"0 0.4873015873015873, 6 0.1878863826232248, 5 0.12121971595655809, 1 0.07092731829573935, 3 0.0568922305764411, 4 0.03817878028404346, 2 0.03759398496240603","the java simpledateformat supports two year-components, y for normal year and y for week year, see http://docs.oracle.com/javase/7/docs/api/java/text/simpledateformat.htmlhowever when we try to use fastdateformat to parse a format which uses the week-year, it fails with an exception{noformat}java.lang.illegalargumentexception: illegal pattern component: yyyy at org.apache.commons.lang3.time.fastdateprinter.parsepattern(fastdateprinter.java:282) at org.apache.commons.lang3.time.fastdateprinter.init(fastdateprinter.java:149) at org.apache.commons.lang3.time.fastdateprinter.<init>(fastdateprinter.java:142) at org.apache.commons.lang3.time.fastdateformat.<init>(fastdateformat.java:384) at org.apache.commons.lang3.time.fastdateformat.<init>(fastdateformat.java:369) at org.apache.commons.lang3.time.fastdateformat$1.createinstance(fastdateformat.java:91) at org.apache.commons.lang3.time.fastdateformat$1.createinstance(fastdateformat.java:88) at org.apache.commons.lang3.time.formatcache.getinstance(formatcache.java:82) at org.apache.commons.lang3.time.fastdateformat.getinstance(fastdateformat.java:119){noformat}simple unit test to reproduce this:{code} @test public void testcommonslang() { date date = new date(); format dateformat = new simpledateformat(""yyyy""); assertnotnull(dateformat.format(date)); dateformat = fastdateformat.getinstance(""yyyy""); assertnotnull(dateformat.format(date)); }{code} "
5548,5548,"0 0.3039101819589624, 4 0.24428958575300033, 5 0.09659310878823071, 2 0.09117305458768873, 1 0.08846302748741773, 6 0.08846302748741773, 3 0.08710801393728222","in apache commons lang 3.4, stringutils.ordinalindexof(""abc"", ""ab"", 1) gives incorrect answer of -1 (correct answer should be 0)。but stringutils.ordinalindexof(""abc"", ""a"", 1) gives correct answer of 0.based on the above mentioned observation, the bug occurrs if the searchstr is of length > 1, and locates at the index 0 of the str.in apache commons lang 2.6, this bug is not observed. "
5549,5549,"0 0.41787802840434424, 5 0.11378446115288218, 4 0.10676691729323305, 3 0.1055973266499582, 6 0.08922305764411027, 1 0.08922305764411026, 2 0.07752715121136174","the current implementation of stringutils.getjarowinklerdistance() does not compute the correct result in some cases. see #lang-944 for the initial code contribution.stringutils.getjarowinklerdistance(""haus ingeborg"", ""ingeborg esser"") == 0.0this is due to the incorrect computation of common characters, which causes the algorithm to exit prematurely.in contrast, the implementation in lucene gives ~0.63, which is about right. jarowinklerdistance d = new jarowinklerdistance(); getdistance(""haus ingeborg"", ""ingeborg esser"");see https://lucene.apache.org/core/3_0_3/api/contrib-spellchecker/org/apache/lucene/search/spell/jarowinklerdistance.html "
5550,5550,"4 0.15845168476747423, 0 0.1565023670286828, 3 0.14480646059593427, 2 0.14285714285714285, 6 0.14285714285714285, 1 0.12726260094681152, 5 0.12726260094681152","lang-799 added support for specifying a locale, but parsedatestrictly() doesn\t pass it to the final parsedatewithleniency() method. "
5551,5551,"0 0.35905163753265024, 4 0.14808117339762908, 6 0.11995177817962627, 2 0.09744826200522404, 3 0.09463532248342377, 1 0.09041591320072336, 5 0.09041591320072336","the {{numberutils.createnumber()}} method fails to check for multiple trailing characters, and as a result, it returns a value even though {{numberutils.isnumber()}} indicates that it should not. for example:{code}boolean isnumber = numberutils.isnumber(""81.5514dd""); // returns falsenumber numvalue = numberutils.createnumber(""81.5514dd""); // returns a double value, 81.5514{code}i would expect the {{createnumber()}} method to throw a {{numberformatexception}} in this case. "
5552,5552,"0 0.5109997215260373, 4 0.11041492620439987, 1 0.08897243107769422, 5 0.0792258423837371, 3 0.07435254803675853, 2 0.07337788916736282, 6 0.06265664160401004","classutils.getclass(classutils.class.getclassloader(), ""void"") throws ""classnotfoundexception: [v"".root cause: classutils contains an abbreviationmap for use in dealing with abbreviated primitive types like ""[i"" and ""[j"". however, [this commit|https://git-wip-us.apache.org/repos/asf?p=commons-lang.git;a=blobdiff;f=src/main/java/org/apache/commons/lang3/classutils.java;h=c15636ed99af1913d8436a2761d2e3e45b0c8b1a;hp=2492182dd6a383bbec970be3c58799bf89929ccf;hb=1d6ab5b8c0bcc69fe5984b882374e856ec198d0e;hpb=609319df2216e00d8f158e5fc5ce7756134b7cb0] introduces a ""void -> v"" mapping for ""completeness"".this seems wholly erroneous, since the maps are used only for [primitive array abbreviations|http://docs.oracle.com/javase/6/docs/api/java/lang/class.html#getname%28%29], and ""void/v"" is not among them. "
5553,5553,"0 0.4873422873422873, 6 0.13121693121693123, 3 0.12836792836792837, 1 0.08221408221408222, 4 0.06853886853886854, 5 0.057712657712657704, 2 0.0446072446072446","fastdateformat cant properly parse dates with daylight saving in the ""z"" pattern. it always returns date without daylight saving. test case:{code:java} simpledateformat format = new simpledateformat(""dd.mm.yyyy hh:mm:ss z"", locale.germany); date d1 = format.parse(""26.10.2014 02:00:00 mesz""); date d2 = format.parse(""26.10.2014 02:00:00 mez""); system.out.println(d1); system.out.println(d2); fastdateformat formatt = fastdateformat.getinstance(""dd.mm.yyyy hh:mm:ss z"", locale.germany); date d3 = formatt.parse(""26.10.2014 02:00:00 mesz""); date d4 = formatt.parse(""26.10.2014 02:00:00 mez""); system.out.println(d3); system.out.println(d4); {code}returns:sdf: sun oct 26 02:00:00 cest 2014sdf: sun oct 26 02:00:00 cet 2014fdf: sun oct 26 02:00:00 cet 2014fdf: sun oct 26 02:00:00 cet 2014fastdateformat returns the same date, which is wrong.bug is in the fastdateparser.timezonestrategy.setcalendar:{code:java}@override void setcalendar(final fastdateparser parser, final calendar cal, final string value) { timezone tz; if(value.charat(0)==+ || value.charat(0)==-) { tz= timezone.gettimezone(""gmt""+value); } else if(value.startswith(""gmt"")) { tz= timezone.gettimezone(value); } else { tz= tznames.get(value); if(tz==null) { throw new illegalargumentexception(value + "" is not a supported timezone name""); } } cal.settimezone(tz); }{code}its not enough to just call: cal.settimezone.if zone names in standard and daylight time are different, you have to check the name in dateformatsymbols.getinstance(locale).getzonestrings(); and if its >= 3, you have to activate daylight mode.just like simpledateformat does it:{code:java}1491 // (abbreviation) for both standard and daylight time,1492 // let the time zone in the calendar decide which one.1493 if (!usesamename) {1494 calendar.set(calendar.zone_offset, tz.getrawoffset());1495 calendar.set(calendar.dst_offset,1496 j >= 3 ? tz.getdstsavings() : 0);1497 }{code} "
5554,5554,"0 0.2304940755644981, 4 0.20389000670690813, 6 0.12564274536105519, 2 0.12251285490722108, 1 0.1084283478649676, 3 0.10686340263805054, 5 0.10216856695729937","these work with 3.3.2, but fail with 3.4:{code}assertequals(""b"", stringutils.normalizespace(""\u0000b""));assertequals(""b"", stringutils.normalizespace(""b\u0000""));{code}java doc still says ""... additionally #trim(string)} removes control characters (char <= 32) from both ends of this string. "
5555,5555,"0 0.37698412698412703, 4 0.1495535714285714, 3 0.13913690476190477, 6 0.12090773809523807, 2 0.09052579365079362, 5 0.06361607142857141, 1 0.05927579365079365","we observed a severe performance regression in hashcodebuilder in 3.5 trunk compared to 3.4 release. we get about 20% of the throughput in 3.5 trunk for common cases compared to 3.4 release. previously there was no noticeable overhead of using hashcodebuilder. investigating we found the performance degradation was caused by the fix for lang-456. it causes the method to be too large to be inlined and escape analysis to fail (see lang-1218 for a related discussion).we currently do not see a way to keep the 3.4 performance and support cyclic graphs. the append methods have not supported cycles for so long we feel its de facto part of the contract by now. since neither the jdk nor the guava hashcode helper methods support cyclic graphs we dont believe this is an unreasonable assumption. in addition equalsbuilder#append(object,object) doesnt support cycles.if supporting cycles is a requirement we propose the introduction of new #appendrecursive (or named differently) methods to both hashcodebuilder and equalsbuilder that add cycle guards. if that is an acceptable compromise we would be willing to provide patches. "
5556,5556,"0 0.35542464408443797, 4 0.14122074946817215, 3 0.13320242186221568, 2 0.11831124202258221, 6 0.09998363606611028, 1 0.07821960399279985, 5 0.0736377025036819","were running into contention issues in registry lookup in equalsbuilder and hashcodebuilder. we believe the synchronization for the registry lookup is unnecessary. threadlocals are thread safe, each thread gets own value. therefore no other thread can read or change the value of the current thread. as a consequence access to threadlocals does not need to be synchronized.since idkey uses object identity and the identity hashcode it does use neither equalsbuilder nor hashcodebuilder. this means that recursive calls to register and unregister are not possible even if the registered objects use equalsbuilder or hashcodebuilder. this also makes re-reading redundant.the issue was likely introduced in 2.5 by lang-586 but 2.6 is the oldest version we can select. "
5557,5557,"0 0.26310726310726307, 4 0.16546416546416542, 2 0.1284271284271284, 1 0.1183261183261183, 3 0.10822510822510821, 5 0.10822510822510821, 6 0.10822510822510821","the other append methods throw an illegalargumentexception if fieldname is null. so, append(object) and append(object[]) should also do this.source: [https://github.com/apache/commons-lang/pull/121] "
5558,5558,"0 0.22452636968766002, 4 0.1474654377880184, 2 0.1420890937019969, 3 0.1367127496159754, 1 0.11879160266257044, 5 0.11520737327188943, 6 0.11520737327188943","add back method java.lang.stringbuffer applyrules(java.util.calendar, java.lang.stringbuffer) "
5559,5559,"0 0.2504409171075838, 2 0.17173721340388007, 3 0.12544091710758376, 4 0.12081128747795412, 6 0.1177248677248677, 5 0.11309523809523808, 1 0.10074955908289243",when the code was migrated from stringbuffer to appendable in lang-1152.weve lost the ability to modify the buffer (setcharat) the new implementation of appendfulldigits allocate a temporary char array to work around that limitation.this is a major source of memory allocation which is not present in version 3.4. 
5560,5560,"0 0.3236446093588951, 4 0.14471243042671614, 2 0.11585240156668727, 6 0.11296639868068438, 5 0.10863739435168006, 3 0.10142238713667287, 1 0.09276437847866421","in considering the issues lang-1060, lang-1040, lang-1038, and lang-992, it seems that there are times when {{numberutils.isnumber}} resolves to {{false}} while {{numberutils.createnumber}}, given the same input, does not throw an exception, returning a valid {{java.lang.number}}. this inconsistency should be resolved either by making {{isnumber}} more lenient or {{createnumber}} more stringent. "
5561,5561,"0 0.4786181139122316, 4 0.18972922502334272, 2 0.10606909430438845, 5 0.06750700280112046, 6 0.06227824463118581, 3 0.0511671335200747, 1 0.04463118580765641","arrayutils.contains(object[] array, object objecttofind) wrongly returns false.steps to reproduce=========================================================-create a superclass ""parent"" and override equals and hashcode based on some member id variable.-create a class ""child"" extending ""parent"". do not override equals nor hashcode.-let ""childrens"" be an array of type child[] containing several instances.create an instance of parent ""p"" with the same id as childrens[0], such that childrens[0].equals(p) returns true and p.equals(childrens[0]) returns true as well.because they are equals, arrayutils.contains(childrens, p) should return true. however it returns false.where the bug is located=====================================================-go to arrayutils.class, line 1917. in the ""indexof"" method implementation, before going into calling equals for each element of the input array, there is some sort of optimization check to make sure the instance to be found is an instance of the array type:} else if (array.getclass().getcomponenttype().isinstance(objecttofind)) {that line is wrong. in our case, the array contains elements of type ""child"", whereas the object to be found is of type ""parent"". they are equals according to the equals implementation of ""parent"", but obviously children.class.isinstance(p) is false.expected behavior================================================since the method signature accepts an array of object[] and an instance of object, it should ignore the classes of the arguments. it should be possible to call ""arrayutils.contains(child[] children, parent p)"", in fact it should be possible to do this with any combination of classes, not only the ones assignable from the class hierarchy. "
5562,5562,"0 0.28358497870692995, 2 0.19957413859852885, 4 0.14808362369337977, 3 0.09930313588850172, 1 0.09117305458768873, 6 0.08981804103755325, 5 0.08846302748741776","issue is the same as in lang-1218: comparetobuilder.append(object,object,comparator) is quite big, due to in-place arrays processing, and thus breaching inlining threshold (325 bytecodes):{noformat}....o.a.c.l.b.comparetobuilder::append (346 bytes) hot method too big....{noformat}this prevents comparetobuilder object itself from being scalarized.fix may be the same, as in lang-1218: extract arrays processing into separate method. "
5563,5563,"0 0.29324995991662667, 4 0.27865961199294537, 2 0.10133076799743466, 1 0.09347442680776014, 5 0.08225108225108224, 6 0.07776174442841112, 3 0.07327240660573997","the name of the method stringutils::getjarowinklerdistance is misleading.currently for equal strings {{1}} is returned, for completely different strings {{0}} is returned. that is a measure of similarity, not of a distance. a distance must be {{0}} for equal strings. i read on the issues lang-591 and lang-944, that it was decided to have a similar name to stringutils::getlevenshteindistance, but that requires also the change of the methods result.could you please (1) rename the method to stringutils::getjarowinklersimilarity or (2) change the method to return {{1 - currentresult}}?first option has the disadvantage to lose the similar naming of the similar methods, second option implies the risk to unnoticed introduce bugs in depending code. so i think it is preferable to use the first option. "
5564,5564,"0 0.19359875097580012, 2 0.17538381472807701, 4 0.1626333593546708, 1 0.117096018735363, 3 0.117096018735363, 5 0.117096018735363, 6 0.117096018735363","an empty array does not contain any empty/blank charsequences, so isanyempty/isanyblank should return false for an empty array. "
5565,5565,"0 0.4180402930402931, 4 0.19047619047619044, 1 0.09539072039072036, 3 0.08043345543345541, 2 0.07722832722832719, 5 0.06974969474969475, 6 0.06868131868131869","there is a bug in replace for strbuilder, seems the use of nonupdated buffer and character count is off.new strbuilder(""dear x, hello x."").replaceall(strmatcher.stringmatcher(""x""), ""012345678901234567"");yields{noformat}java.lang.arrayindexoutofboundsexception: 49 at org.apache.commons.lang3.text.strmatcher$stringmatcher.ismatch(strmatcher.java:372) at org.apache.commons.lang3.text.strbuilder.replaceimpl(strbuilder.java:2115) at org.apache.commons.lang3.text.strbuilder.replace(strbuilder.java:2088) at org.apache.commons.lang3.text.strbuilder.replaceall(strbuilder.java:2049){noformat} "
5566,5566,"0 0.5298563869992442, 6 0.18829260099101375, 5 0.11363063744016126, 2 0.043083900226757364, 3 0.04249601074997901, 4 0.04190812127320064, 1 0.04073234231964392","it seems that after lang-1186 was fixed, and before 3.5 went out, the bug was re-introduced.one of my customers is getting the following error (i am actually not able to reproduce it) with 3.5:{code}java.lang.nullpointerexception at org.apache.commons.lang3.time.fastdateparser$timezonestrategy.<init>(fastdateparser.java:869) at org.apache.commons.lang3.time.fastdateparser.getlocalespecificstrategy(fastdateparser.java:637) at org.apache.commons.lang3.time.fastdateparser.getstrategy(fastdateparser.java:606) at org.apache.commons.lang3.time.fastdateparser.access$100(fastdateparser.java:73) at org.apache.commons.lang3.time.fastdateparser$strategyparser.letterpattern(fastdateparser.java:234) at org.apache.commons.lang3.time.fastdateparser$strategyparser.getnextstrategy(fastdateparser.java:220) at org.apache.commons.lang3.time.fastdateparser.init(fastdateparser.java:167) at org.apache.commons.lang3.time.fastdateparser.<init>(fastdateparser.java:153) at org.apache.commons.lang3.time.fastdateformat.<init>(fastdateformat.java:394) at org.apache.commons.lang3.time.fastdateformat.<init>(fastdateformat.java:378) at org.apache.commons.lang3.time.fastdateformat$1.createinstance(fastdateformat.java:100) at org.apache.commons.lang3.time.fastdateformat$1.createinstance(fastdateformat.java:97) at org.apache.commons.lang3.time.formatcache.getinstance(formatcache.java:81) at org.apache.commons.lang3.time.fastdateformat.getinstance(fastdateformat.java:128){code} "
5567,5567,"0 0.3972582972582973, 4 0.2639249639249639, 2 0.074025974025974, 3 0.06796536796536795, 6 0.06695526695526696, 1 0.06493506493506494, 5 0.06493506493506494","{{randomstringutils.random()}} can overflow and return characters that are outside the range specified by the {{start}} and {{end}} parameters. this is because it casts a random integer in the range {{[start,end)}} to a character, without checking if this will overflow.example failing test case:{code}@testpublic void testcharoverflow() throws exception { int start = 65535; int end = integer.max_value; @suppresswarnings(""serial"") random fixedrandom = new random() { @override public int nextint(int n) { // prevents selection of start as the character return 1; } }; string result = randomstringutils.random(1, start, end, false, false, null, fixedrandom); char c = result.charat(0); asserttrue(c >= start && c < end);}{code} "
5568,5568,"0 0.26502586053147853, 4 0.18637417513822013, 1 0.1326912787586945, 6 0.1214553237025147, 2 0.1152131264490815, 3 0.09898341359015517, 5 0.08025682182985557","{quote}i faced that the random method can cause an infinite loop. it can be caused if the end parameter is too low for generating either numbers (< 48) or letters (<65). i added some exception tests to make the cases clear. basically, if we call the random function with for example numbers = true && end < 48 the validation for character.isdigit(ch) will fail and we increment count count++.{quote}ivan morozov https://github.com/apache/commons-lang/pull/211 "
5569,5569,"0 0.4877208745133274, 4 0.14285714285714285, 1 0.08520515124288706, 6 0.07786762503743633, 2 0.07157831686133574, 3 0.06738544474393532, 5 0.06738544474393532","running following line of code results in stringindexoutofboundsexception (in 3.5 release){code}wordutils.wrap(""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"",70);{code}{code}java.lang.stringindexoutofboundsexception: string index out of range: -1 at java.lang.string.substring(string.java:1967) at org.apache.commons.lang3.text.wordutils.wrap(wordutils.java:328) at org.apache.commons.lang3.text.wordutils.wrap(wordutils.java:176) at org.apache.commons.lang3.text.wordutils.wrap(wordutils.java:100) at pl.netpr.commons.string.texttoolstest.testwrap(texttoolstest.java:245) {code}it worked fine with 3.4 releae. "
5570,5570,"0 0.6489826355598167, 4 0.08895280707361244, 2 0.056887184403962926, 6 0.054650047938638535, 1 0.05315862362842229, 3 0.04943006285288166, 5 0.0479386385426654","since release 3.5 and due to the changes of lang-1115 an arraystoreexception occurs on methodutils.invokemethod if using varargs arguments and smaller types than the method defines (e.g. int vs long).{code} @test public void testmethodutilsinvokemethodvarargs () throws exception { myobject object = new myobject (); methodutils.invokemethod (object, ""dosomething"", 1); } public static class myobject { public void dosomething (long... args) { system.out.println (""dosomething""); } }{code}throws {code}java.lang.arraystoreexception at java.lang.system.arraycopy(native method) at org.apache.commons.lang3.reflect.methodutils.getvarargs(methodutils.java:497) at org.apache.commons.lang3.reflect.methodutils.tovarargs(methodutils.java:463) at org.apache.commons.lang3.reflect.methodutils.invokemethod(methodutils.java:234) at org.apache.commons.lang3.reflect.methodutils.invokemethod(methodutils.java:270) at org.apache.commons.lang3.reflect.methodutils.invokemethod(methodutils.java:147){code}in 3.4. a nosuchmethodexception had been thrown, but in 3.5 the code now finds the matching method but fails then with above exception. "
5571,5571,"0 0.3900995426419156, 4 0.19424266881893998, 2 0.09537261232176483, 3 0.08783965563626578, 1 0.0812483185364541, 5 0.08030669895076673, 6 0.07089050309389291","typeutils.tostring() doesnt handle primitive and object arrays correctly.specifically, these tests will fail:{code}assertequals(""int[]"", typeutils.tostring(int[].class));assertequals(""java.lang.integer[]"", typeutils.tostring(integer[].class));{code}if you declare a field with type {{list<string>[]}}, then you can add this test:{code}assertequals(""java.util.list<java.lang.string>[]"", typeutils.tostring(field.getgenerictype()));{code}this patch fixes the issue:{code} private static string classtostring(final class<?> c) {// begin patch if (c.isarray()) { return tostring(c.getcomponenttype()) + ""[]""; }// end patch final stringbuilder buf = new stringbuilder();{code} "
5572,5572,"0 0.42176870748299317, 2 0.1043083900226757, 3 0.09709338280766851, 6 0.09709338280766851, 4 0.09420737992166561, 1 0.09276437847866419, 5 0.09276437847866419","these all work:{code:java}system.out.println(new locale(""en"", ""001""));system.out.println(new locale(""en"", ""150""));system.out.println(new locale(""ar"", ""001""));{code}but these all fail with an illegalargumentexception:{code:java}system.out.println(localeutils.tolocale(""en_001""));system.out.println(localeutils.tolocale(""en_150""));system.out.println(localeutils.tolocale(""ar_001""));{code} "
5573,5573,"0 0.6725305833586088, 4 0.07451218279243756, 2 0.07097361237488627, 1 0.045495905368516845, 3 0.045495905368516845, 5 0.045495905368516845, 6 0.045495905368516845","multilinerecursivetostringstyle style = new multilinerecursivetostringstyle();string result = tostringbuilder.reflectiontostring(new string[] {""1"",""2""}, style);java.lang.stackoverflowerror at org.apache.commons.lang3.builder.tostringstyle.appendstart(tostringstyle.java:409) at org.apache.commons.lang3.builder.tostringbuilder.<init>(tostringbuilder.java:262) at org.apache.commons.lang3.builder.reflectiontostringbuilder.<init>(reflectiontostringbuilder.java:481) at org.apache.commons.lang3.builder.reflectiontostringbuilder.tostring(reflectiontostringbuilder.java:300) at org.apache.commons.lang3.builder.reflectiontostringbuilder.tostring(reflectiontostringbuilder.java:157) at org.apache.commons.lang3.builder.recursivetostringstyle.appenddetail(recursivetostringstyle.java:74) at org.apache.commons.lang3.builder.multilinerecursivetostringstyle.reflectionappendarraydetail(multilinerecursivetostringstyle.java:142) at org.apache.commons.lang3.builder.reflectiontostringbuilder.reflectionappendarray(reflectiontostringbuilder.java:633) at org.apache.commons.lang3.builder.reflectiontostringbuilder.appendfieldsin(reflectiontostringbuilder.java:538) at org.apache.commons.lang3.builder.reflectiontostringbuilder.tostring(reflectiontostringbuilder.java:711) at org.apache.commons.lang3.builder.reflectiontostringbuilder.tostring(reflectiontostringbuilder.java:301) at org.apache.commons.lang3.builder.reflectiontostringbuilder.tostring(reflectiontostringbuilder.java:157) at org.apache.commons.lang3.builder.recursivetostringstyle.appenddetail(recursivetostringstyle.java:74) at org.apache.commons.lang3.builder.multilinerecursivetostringstyle.reflectionappendarraydetail(multilinerecursivetostringstyle.java:142) "
5574,5574,"0 0.8127531472359059, 4 0.0468527640941434, 1 0.03344280240831964, 3 0.030377668308702786, 2 0.02616310892172961, 5 0.025779967159277505, 6 0.024630541871921187","the following code{code:java}final method method = enum.class.getmethod(""valueof"", class.class, string.class);final string typetext = typeutils.tostring(method.getgenericreturntype());{code}throws the following{code:none}exception in thread ""main"" java.lang.stackoverflowerror at sun.reflect.generics.reflectiveobjects.parameterizedtypeimpl.getrawtype(parameterizedtypeimpl.java:126) at sun.reflect.generics.reflectiveobjects.parameterizedtypeimpl.getrawtype(parameterizedtypeimpl.java:40) at org.apache.commons.lang3.reflect.typeutils.parameterizedtypetostring(typeutils.java:1790) at org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1666) at org.apache.commons.lang3.reflect.typeutils.appendallto(typeutils.java:1846) at org.apache.commons.lang3.reflect.typeutils.typevariabletostring(typeutils.java:1775) at org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1672) at org.apache.commons.lang3.reflect.typeutils.appendallto(typeutils.java:1846) at org.apache.commons.lang3.reflect.typeutils.parameterizedtypetostring(typeutils.java:1803) at org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1666) at org.apache.commons.lang3.reflect.typeutils.appendallto(typeutils.java:1846) at org.apache.commons.lang3.reflect.typeutils.typevariabletostring(typeutils.java:1775) at org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1672) at org.apache.commons.lang3.reflect.typeutils.appendallto(typeutils.java:1846) at org.apache.commons.lang3.reflect.typeutils.parameterizedtypetostring(typeutils.java:1803) at org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1666) at org.apache.commons.lang3.reflect.typeutils.appendallto(typeutils.java:1846) at org.apache.commons.lang3.reflect.typeutils.typevariabletostring(typeutils.java:1775) at org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1672) at org.apache.commons.lang3.reflect.typeutils.appendallto(typeutils.java:1846) at org.apache.commons.lang3.reflect.typeutils.parameterizedtypetostring(typeutils.java:1803) at org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1666) at org.apache.commons.lang3.reflect.typeutils.appendallto(typeutils.java:1846) at org.apache.commons.lang3.reflect.typeutils.typevariabletostring(typeutils.java:1775) at org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1672)...{code} "
5575,5575,"0 0.2591765873015873, 4 0.15327380952380948, 2 0.12723214285714282, 1 0.1237599206349206, 5 0.11334325396825398, 3 0.11160714285714286, 6 0.11160714285714286",seehttps://stackoverflow.com/questions/45603317/org-apache-commons-lang3-builder-equalsbuilderandhttps://github.com/apache/commons-lang/pull/282for details. 
5576,5576,"0 0.34461498097861737, 4 0.24268660632296993, 2 0.12055621146530236, 3 0.08566181293454019, 6 0.0783156237701692, 1 0.06913288731470549, 5 0.0590318772136954","{quote} i have found the design of three root cause related methods inconsistent when the input throwable does not wrap up another throwable. these three methods are 1. getrootcause(throwable t) 2. getrootcausemessage(throwable t) 3. getrootcausestacktrace(throwable t) when the input t has no lower level cause: - the first method returns null; - the second method returns the message of t, which means the input t is considered as the root cause in this method; - the third method returns the stack trace of t, which also means this method considers t as the root cause. therefore, i consider the design of the first method is not consistent with the second and the third. i usually write a function myself to get the root cause of an exception; and it makes much better sense to me the root cause of a throwable is itself if no more lower level cause exists. a request: change the first method to return t itself when there is no more causes. {quote} reported by zheng xie in https://mail-archives.apache.org/mod_mbox/commons-dev/201710.mbox/%3ccal-lhk7jvqgm9j1spxlb2qesxazwwq%2bykuv29xgwxeccchun0w%40mail.gmail.com%3e "
5577,5577,"0 0.23487103174603177, 1 0.1550099206349206, 2 0.1550099206349206, 4 0.11855158730158732, 3 0.11334325396825398, 5 0.11160714285714288, 6 0.11160714285714288",place holder for https://github.com/apache/commons-lang/pull/309 fixes a bug where the increment count is not correctly propagated. 
5578,5578,"0 0.21108326371484262, 2 0.14285714285714282, 1 0.13895850737956, 4 0.1311612364243943, 3 0.12531328320802007, 5 0.12531328320802007, 6 0.12531328320802007",reported in [https://github.com/apache/commons-lang/pull/307] 
5579,5579,"0 0.25965118557711153, 2 0.17597491671565746, 4 0.14854007446600037, 5 0.11699000587889476, 3 0.10738781109151478, 6 0.10190084264158336, 1 0.08955516362923772","in tostringstyle class, which checking if a string is a valid json array, the boolean check was wrong. original: {code:java} private boolean isjsonarray(final string valueasstring) { return valueasstring.startswith(getarraystart()) && valueasstring.startswith(getarrayend()); } {code} the second expression should be valueasstring.endswith(getarrayend()) "
5580,5580,"0 0.25648470770421994, 2 0.20363917924893535, 6 0.11827332559039874, 1 0.11149825783972123, 5 0.10878823073945022, 3 0.10065814943863724, 4 0.10065814943863721","the date format symbols of the french locale adds a . (dot) when short month names are really abbreviated. {code} janv. févr. mars avr. mai juin juil. août sept. oct. nov. déc. {code} but in real world examples, the dot is frequently omitted. fastdateparser should be lenient in the case where the dot isnt there, e.g. ""14 avr 2014"". "
5581,5581,"0 0.4194271911663217, 4 0.11749482401656312, 3 0.10783298826777087, 5 0.0981711525189786, 6 0.09092477570738439, 2 0.08850931677018632, 1 0.07763975155279505",from the user mailing list [1]: jsontostringstyle does not escape double quote in a string value json requires double-quote to be escaped with a back-slash. this does not happen currently. nor does the code translate control characters such as nl and ff correctly. afaict the code is only guaranateed to process alphanumeric strings correctly. [1] https://lists.apache.org/thread.html/10bb632e86c473d58656431ad2702e058c58585e1a2edf1bf4a46824@%3cuser.commons.apache.org%3e 
5582,5582,"0 0.18084829560239396, 6 0.16627634660421545, 4 0.15352589123080926, 3 0.1334894613583138, 1 0.1316679677335415, 2 0.11709601873536302, 5 0.11709601873536302","json objects consist of a string : value pair. the string part can contain \""\ and \\\\ etc provided it is properly escaped. this is not currently supported."