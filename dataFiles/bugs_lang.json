{
  "1142": [
    "the capitalize javadoc says the code uses  character#totitlecase, however the code actually uses character#touppercase.\n\ngenerally these produce the same result, but some charsets may have different characters for upper and title case - see for example the javadoc [1] for character#istitlecase.\n\nthe way i read this, the character that looks like \"lj\" is lower-case, \"lj\" is upper case and \"lj\" is title case - i.e. not the same.\n\nthe question here is: should the code be corrected to use titlecase or should the javadoc be corrected to use uppercase?\n\n[1] http://docs.oracle.com/javase/7/docs/api/java/lang/character.html#istitlecase%28char%29",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.capitalize(String)"
    ]
  ],
  "1269": [
    "the name of the method stringutils::getjarowinklerdistance is misleading.\ncurrently for equal strings {{1}} is returned, for completely different strings {{0}} is returned. that is a measure of similarity, not of a distance. a distance must be {{0}} for equal strings. i read on the issues lang-591 and lang-944, that it was decided to have a similar name to stringutils::getlevenshteindistance, but that requires also the change of the methods result.\n\ncould you please (1) rename the method to stringutils::getjarowinklersimilarity or (2) change the method to return {{1 - currentresult}}?\n\nfirst option has the disadvantage to lose the similar naming of the similar methods, second option implies the risk to unnoticed introduce bugs in depending code. so i think it is preferable to use the first option.\n",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.getJaroWinklerSimilarity(CharSequence,CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.getJaroWinklerDistance(CharSequence,CharSequence)"
    ]
  ],
  "1147": [
    "in *enumutils* all _bitvector_ related methods fail in handling enums with more than 32 values.\nthis is due to a implicit _int_ -> _long_ conversion in generating the enum value _long_ mask.\n\n\n*bad code :* here *1* is an _int_ value so the *<<* operation is done into an _int_ context and then, the result is converted to a _long_ value\n{code}\nlong mask = 1 << 32;    // -> mask = 1 and not 4294967296 (0x100000000)\n{code}\n\n*good code :* here *1l* is a _long_ value so the *<<* operation is done into an _long_ context\n{code}\nlong mask = 1l << 32;    // -> mask = 4294967296 (0x100000000)\n{code}\n\nsee pr#97 : https://github.com/apache/commons-lang/pull/97",
    [
      "src/main/java/org/apache/commons/lang3/EnumUtils.java@org.apache.commons.lang3.EnumUtils.generateBitVectors(Class,Iterable)",
      "src/main/java/org/apache/commons/lang3/EnumUtils.java@org.apache.commons.lang3.EnumUtils.generateBitVectors(Class,E)",
      "src/main/java/org/apache/commons/lang3/EnumUtils.java@org.apache.commons.lang3.EnumUtils.processBitVectors(Class,long)",
      "src/main/java/org/apache/commons/lang3/EnumUtils.java@org.apache.commons.lang3.EnumUtils.generateBitVector(Class,Iterable)"
    ]
  ],
  "1144": [
    "it is possible to create a construct, that allows multiple calls of lazyinitializer.initialize, when calculations (which can be very expensive) return null as result. \nin the javadoc is described that the initialize method will be called only on the first access\n\n{code:java}\n    /**\n     * creates and initializes the object managed by this {@code\n     * lazyinitializer}. this method is called by {@link #get()} when the object\n     * is accessed for the first time. an implementation can focus on the\n     * creation of the object. no synchronization is needed, as this is already\n     * handled by {@code get()}.\n     *\n     * @return the managed data object\n     * @throws concurrentexception if an error occurs during object creation\n     */\n    protected abstract t initialize() throws concurrentexception;\n{code}\n\nthe junit test can be something like this:\n*(fix can be appplied from attached patch-file)*\n{code:java}\npackage edu.test;\n\nimport static org.junit.assert.assertequals;\n\nimport org.apache.commons.lang3.concurrent.concurrentexception;\nimport org.apache.commons.lang3.concurrent.lazyinitializer;\nimport org.junit.test;\n\npublic class lazyinitializertest {\n\n  private int lazyinitcounter = 0;\n\n  private lazyinitializer<object> lazyiinit = new lazyinitializer<object>() {\n\n    @override\n    protected object initialize() throws concurrentexception {\n      lazyinitcounter++;\n      return dosomeveryexpensiveoperations();\n    }\n  };\n  \n  \n  private object dosomeveryexpensiveoperations() {\n    // do db calls\n    // do some complex math calculations\n    // the result of them all is null\n    return null;\n  }\n  \n  \n  @test\n  public void testinitialization() throws exception {\n    lazyiinit.get();\n    lazyiinit.get();\n    assertequals(\"multiple call of lazyinitializer#initialize\", 1, lazyinitcounter);\n  }\n\n}\n\n\n{code}",
    [
      "src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java@org.apache.commons.lang3.concurrent.LazyInitializer.get()",
      "src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java@org.apache.commons.lang3.concurrent.LazyInitializer.get()"
    ]
  ],
  "1226": [
    "these work with 3.3.2, but fail with 3.4:\n\n{code}\nassertequals(\"b\", stringutils.normalizespace(\"\\u0000b\"));\nassertequals(\"b\", stringutils.normalizespace(\"b\\u0000\"));\n{code}\n\njava doc still says \"... additionally #trim(string)} removes control characters (char &lt;= 32) from both ends of this string.\"",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.normalizeSpace(String)"
    ]
  ],
  "1262": [
    "issue is the same as in lang-1218: comparetobuilder.append(object,object,comparator) is quite big, due to in-place arrays processing, and thus breaching inlining threshold (325 bytecodes):\n{noformat}\n....\no.a.c.l.b.comparetobuilder::append (346 bytes)   hot method too big\n....\n{noformat}\n\nthis prevents comparetobuilder object itself from being scalarized.\n\nfix may be the same, as in lang-1218: extract arrays processing into separate method.",
    [
      "src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java@org.apache.commons.lang3.builder.CompareToBuilder.appendArray(Object,Object,Comparator)"
    ]
  ],
  "1261": [
    "arrayutils.contains(object[] array, object objecttofind) wrongly returns false.\n\nsteps to reproduce\n=========================================================\n-create a superclass \"parent\" and override equals and hashcode based on some member id variable.\n-create a class \"child\" extending \"parent\". do not override equals nor hashcode.\n\n-let \"childrens\" be an array of type child[] containing several instances.\ncreate an instance of parent \"p\" with the same id as childrens[0], such that childrens[0].equals(p) returns true and p.equals(childrens[0]) returns true as well.\n\nbecause they are equals, arrayutils.contains(childrens, p) should return true. however it returns false.\n\n\nwhere the bug is located\n=====================================================\n-go to arrayutils.class, line 1917. in the \"indexof\" method implementation, before going into calling equals for each element of the input array, there is some sort of optimization check to make sure the instance to be found is an instance of the array type:\n\n} else if (array.getclass().getcomponenttype().isinstance(objecttofind)) {\n\nthat line is wrong. in our case, the array contains elements of type \"child\", whereas the object to be found is of type \"parent\". they are equals according to the equals implementation of \"parent\", but obviously children.class.isinstance(p) is false.\n\n\nexpected behavior\n================================================\nsince the method signature accepts an array of object[] and an instance of object, it should ignore the classes of the arguments. it should be possible to call \"arrayutils.contains(child[] children, parent p)\", in fact it should be possible to do this with any combination of classes, not only the ones assignable from the class hierarchy.",
    [
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.indexOf(Object,Object,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.indexOf(Object,Object,int)"
    ]
  ],
  "664": [
    "\"1.1l\"  is not a java number . but numberutils.isnumber(string) return true.\n\nperhaps change:\n{code:java}\n            if (chars[i] == 'l'\n                || chars[i] == 'l') {\n                // not allowing l with an exponent\n                return founddigit && !hasexp;\n            }\n{code}\nto:\n{code:java}\n            if (chars[i] == 'l'\n                || chars[i] == 'l') {\n                // not allowing l with an exponent\n                return founddigit && !hasexp && !hasdecpoint;\n            }\n{code}",
    [
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.isNumber(String)"
    ]
  ],
  "24": [
    "i'm assuming that the goal of the truncate() method in\norg.apache.commons.lang.time.dateutils is to be a shorthand for the otherwise\ncumbersome java.util.calendar operations of setting all lower fields to 0.\n\nin other words, the following 2 methods are (by me) expected to yield the same:\n\n    private date commonstruncate(date date)\n    {\n        return dateutils.truncate(date, calendar.date);\n    }\n\n    private date truncate(date date)\n    {\n        calendar c = calendar.getinstance();\n        c.settime(date);\n        c.set(calendar.hour_of_day, 0);\n        c.set(calendar.minute, 0);\n        c.set(calendar.second, 0);\n        c.set(calendar.millisecond, 0);\n        return c.gettime();\n    }\n\nthis is generally the case, except for the very pathological case of the\nultimate biggest date java allows you to make:\n\n    date endoftime = new date(long.max_value); \n    // fyi: sun aug 17 07:12:55 cet 292278994 -- 807 millis\n\ncommons-result:  sun aug 17 02:00:00 cest 292278994 \n                 // commonstruncate(endoftime)\nhandmade-result: sun aug 17 00:00:00 cest 292278994 \n                 // truncate(endoftime)\n(mind the 2h difference)\n\nanother odd observation concerning this special date is that the commons-result\nwill match the other one if we allow the commons truncate to operate on the\nresult again:\n\ncommons-double-truncate-result: \n                 sun aug 17 00:00:00 cest 292278994   \n                 // truncate(truncate(endoftime))\n\n(which is somewhat another surprise: one would expect truncation not to change a\ndate that was already truncated)\n\nmy (totally wild) guess is that this is related to timezone and dst issues\nfact being that similar effects are seen on all date's pointing to a moment in\nthe last 2hours of the date spectrum.\n\ni understand that this is a very hypothetical issue, nevertheless.\n\nkind regards,\n-marc=",
    [
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.isTrue(boolean,String,double)",
      "src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java@org.apache.commons.lang3.mutable.MutableDouble.getValue()",
      "src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java@org.apache.commons.lang3.mutable.MutableFloat.getValue()"
    ]
  ],
  "693": [
    "method createnumber from numberutils is trying to parse a string with a floating point number always first as a float, that will cause that if we send a string with a number that will need a double or even a bigdecimal the number will be truncate to accommodate into the float without an exception to be thrown, so in fact we will no be returning ever neither a double nor a bigdecimal.",
    [
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.createNumber(String)"
    ]
  ],
  "27": [
    "add systemutils.awt_toolkit, which is useful to detect whether or not the jre is\nrunning on a headless platform.",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.normalizeSpace(String)"
    ]
  ],
  "20": [
    "tostringbuilder.reflectiontostring() enters an infinite loop when used with the \nfollowing example:\n\n/////////////////////////////\npublic class outer {\n  inner inner = new inner();\n  class inner {\n    public string tostring() {\n      return tostringbuilder.reflectiontostring(this);\n    }\n  }\n  public string tostring() {\n    return tostringbuilder.reflectiontostring(this);\n  }\n  public static void main(string[] args) {\n    outer outer = new outer();\n    system.out.println(outer);\n  }\n}\n/////////////////////////////\n\nthe reason is that the two classes refer to each other via the explicit field \ninner and the implicit field outer.this. \n\nthe bug can be resolved by skipping the implicit fields. is there any good \nreason for printing those anyway?\n\ni am not sure what is the best way to detect if a field is an implicit field. \nbut i patched the code myself in a way that seemed to work:\n\n/////////////////////////////\npublic static string reflectiontostring(object object, tostringstyle style, \n        boolean outputtransients) {\n    if (object == null) {\n        throw new illegalargumentexception(\"the object must not be null\");\n    }\n    if (style == null) {\n        style = getdefaultstyle();\n    }\n    field[] fields = object.getclass().getdeclaredfields();\n    field.setaccessible(fields, true);\n    tostringbuilder builder = new tostringbuilder(object, style);\n    for (int i = 0; i < fields.length; ++i) {\n        field f = fields[i];\n        if (!f.getname().startswith(\"this$\")) {\n          if (outputtransients || !modifier.istransient(f.getmodifiers())) {\n              if (!modifier.isstatic(f.getmodifiers())) {\n                  try {\n                      builder.append(f.getname(), f.get(object));\n                      \n                  } catch (illegalaccessexception ex) {\n                      //this can't happen. would get a security exception \ninstead\n                      //throw a runtime exception in case the impossible \nhappens.\n                      throw new internalerror(\"unexpected \nillegalaccessexception\");\n                  }\n              }\n          }\n        }\n    }\n    return builder.tostring();\n}\n/////////////////////////////\n\nnotice the extra if statement that tests for field names starting with \"this$\". \ni don't know if this is guaranteed to work always, though.",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.getFuzzyDistance(CharSequence,CharSequence,Locale)"
    ]
  ],
  "21": [
    "low characters such as #18 are not escaped, and therefore are mixed together \nwith other characteres as if there were normal characteres such as 'a', '1' etc.\n\npossibly solved in other versions?",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.replace(String,String,String,int,boolean)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.wrap(String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.strip(String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.wrap(String,char)"
    ]
  ],
  "1077": [
    "{code:title= org.apache.commons.lang3.stringutils.java|borderstyle=solid}\n        int found = 0;\n        int index = lastindex ? str.length() : index_not_found;\n        do {\n            if (lastindex) {\n                index = charsequenceutils.lastindexof(str, searchstr, index - 1);\n            } else {\n                index = charsequenceutils.indexof(str, searchstr, index + 1);\n            }\n            if (index < 0) {\n                return index;\n            }\n            found++;\n        } while (found < ordinal);\n{code}\n\nshould it be:\n\n{code:title= org.apache.commons.lang3.stringutils.java|borderstyle=solid}\n        private static int ordinalindexof(final charsequence str, final charsequence searchstr, final int ordinal, final boolean lastindex) {\n        //        if (str == null || searchstr == null || ordinal <= 0) {\n        //            return index_not_found;\n        //        }\n        //        if (searchstr.length() == 0) {\n        //            return lastindex ? str.length() : 0;\n        //        }\n        //        int found = 0;\n        //        int index = lastindex ? str.length() : index_not_found;\n        //        do {\n        //            if (lastindex) {\n        //                index = charsequenceutils.lastindexof(str, searchstr, index - 1);\n        //            } else {\n        //                index = charsequenceutils.indexof(str, searchstr, index + 1);\n        //            }\n        //            if (index < 0) {\n        //                return index;\n        //            }\n        //            found++;\n        //        } while (found < ordinal);\n        //        return index;\n\n        if (str == null || searchstr == null || ordinal <= 0) {\n            return index_not_found;\n        }\n\n        if (searchstr.length() == 0) {\n            return lastindex ? str.length() : 0;\n        }\n\n        final int searchstrlen = searchstr.length();\n        int index = lastindex ? str.length() : 0;\n\n        for (int found = 0; index >= 0;) {\n            if (lastindex) {\n                index = charsequenceutils.lastindexof(str, searchstr, index);\n            } else {\n                index = charsequenceutils.indexof(str, searchstr, index);\n            }\n\n            if (index < 0) {\n                return index_not_found;\n            }\n\n            if (++found >= ordinal) {\n                break;\n            }\n\n            index = lastindex ? index - searchstrlen : index + searchstrlen;\n        }\n\n        return index;\n    }\n{code}\n",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.ordinalIndexOf(CharSequence,CharSequence,int,boolean)"
    ]
  ],
  "1072": [
    "i think there is typo in below line:\n\n{code:title= org.apache.commons.lang3.math.numberutils.java|borderstyle=solid}\n if (str.startswith(\"0x\", pos) || str.startswith(\"0x\", pos)) { // hex\n            radix = 16;\n            pos += 2;\n}\n{code}\n\nthe second \"0x\" should be \"0x\"\n\n{code:title= org.apache.commons.lang3.math.numberutils.java|borderstyle=solid}\n if (str.startswith(\"0x\", pos) || str.startswith(\"0x\", pos)) { // hex\n            radix = 16;\n            pos += 2;\n}\n{code}\n",
    [
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.createBigInteger(String)"
    ]
  ],
  "1073": [
    "{code:title=org.apache.commons.lang3.arrayutils.java|borderstyle=solid}\n    public static <t> t[] add(final t[] array, final t element) {\n        class<?> type;\n        if (array != null){\n            type = array.getclass();\n        } else if (element != null) {\n            type = element.getclass();\n        } else {\n            throw new illegalargumentexception(\"arguments cannot both be null\");\n        }\n        .......\n    }\n{code}\n\ni think it should be:\n\n{code:title=org.apache.commons.lang3.arrayutils.java|borderstyle=solid}\n    public static <t> t[] add(final t[] array, final t element) {\n        class<?> type;\n        if (array != null){\n            type = array.getclass().getcomponenttype();\n        } else if (element != null) {\n            type = element.getclass();\n        } else {\n            throw new illegalargumentexception(\"arguments cannot both be null\");\n        }\n        .......\n    }\n{code}",
    [
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.add(T,T)"
    ]
  ],
  "1371": [
    "reported in [https://github.com/apache/commons-lang/pull/307]",
    [
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.GenericArrayTypeImpl.ParameterizedTypeImpl(Class,Type,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.TypeUtils.ParameterizedTypeImpl(Class,Type,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.ParameterizedTypeImpl.ParameterizedTypeImpl(Class,Type,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeImpl.ParameterizedTypeImpl(Class,Type,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeBuilder.ParameterizedTypeImpl(Class,Type,Type)"
    ]
  ],
  "1370": [
    "place holder for https://github.com/apache/commons-lang/pull/309\r\n\r\nfixes a bug where the increment count is not correctly propagated.",
    [
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.incrementAndCheckState(Integer)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.incrementAndCheckState(Integer)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.incrementAndCheckState(Integer)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.incrementAndCheckState(Integer)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.incrementAndCheckState(Integer)"
    ]
  ],
  "1374": [
    "in tostringstyle class, which checking if a string is a valid json array, the boolean check was wrong.\r\noriginal:\r\n\r\n{code:java}\r\n        private boolean isjsonarray(final string valueasstring) {\r\n            return valueasstring.startswith(getarraystart())\r\n                    && valueasstring.startswith(getarrayend());\r\n        }\r\n{code}\r\n\r\nthe second expression should be valueasstring.endswith(getarrayend())",
    [
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.isJsonArray(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.isJsonArray(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.isJsonArray(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.isJsonArray(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.isJsonArray(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.isJsonArray(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.isJsonArray(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.isJsonArray(String)"
    ]
  ],
  "8": [
    "my program manages to generate this exception\njavac psistatus.java\npsistatus.java:59: cannot access org.apache.commons.lang.exception.\nnestableexception\nfile org/apache/commons/lang/exception/nestableexception.class not found\n        connection con = torque.getconnection(\"mypsi\");\n\nhere's a snippet of source:\n\npackage org.apache.jetspeed.portal.portlets;\n\nimport org.apache.jetspeed.portal.portlets.abstractinstanceportlet;\nimport org.apache.turbine.util.rundata;\nimport org.apache.turbine.om.security.*;\nimport org.apache.ecs.concreteelement;\nimport org.apache.ecs.stringelement;\nimport org.apache.torque.*;\nimport javax.servlet.*;\nimport java.sql.*;\nimport javax.sql.*;\nimport java.text.*;\nimport java.util.*;\n\npublic class myclass extends abstractinstanceportlet\n{\n    public concreteelement getcontent (rundata rundata)\n    {\n        connection con = torque.getconnection(\"mypsi\");\n    }\n}",
    [
      "src/main/java/org/apache/commons/lang3/Functions.java@org.apache.commons.lang3.Functions.accept(FailableConsumer,O)",
      "src/main/java/org/apache/commons/lang3/Functions.java@org.apache.commons.lang3.Functions.call(FailableCallable)",
      "src/main/java/org/apache/commons/lang3/Functions.java@org.apache.commons.lang3.Functions.apply(FailableFunction,I)",
      "src/main/java/org/apache/commons/lang3/Functions.java@org.apache.commons.lang3.Functions.apply(FailableBiFunction,I1,I2)",
      "src/main/java/org/apache/commons/lang3/Functions.java@org.apache.commons.lang3.Functions.rethrow(Throwable)",
      "src/main/java/org/apache/commons/lang3/Functions.java@org.apache.commons.lang3.Functions.accept(FailableBiConsumer,O1,O2)",
      "src/main/java/org/apache/commons/lang3/Functions.java@org.apache.commons.lang3.Functions.test()",
      "src/main/java/org/apache/commons/lang3/Functions.java@org.apache.commons.lang3.Functions.run(FailableRunnable)",
      "src/main/java/org/apache/commons/lang3/LocaleUtils.java@org.apache.commons.lang3.SyncAvoid.toLocale(String)",
      "src/main/java/org/apache/commons/lang3/LocaleUtils.java@org.apache.commons.lang3.LocaleUtils.toLocale(String)",
      "src/main/java/org/apache/commons/lang3/LocaleUtils.java@org.apache.commons.lang3.SyncAvoid.toLocale(String)",
      "src/main/java/org/apache/commons/lang3/LocaleUtils.java@org.apache.commons.lang3.LocaleUtils.toLocale(String)"
    ]
  ],
  "992": [
    "after upgrading from 3.1 to 3.3.1, it seems that {{isnumber(string str)}} returns false for decimal numbers with leading zeros. in other words:\n\n{code:java}\nboolean ret = numberutils.isnumber(\"0.4790\");\n{code}\n\non 3.1, {{ret}} was true. in 3.3.1, {{ret}} is false.\n\nguessing that lang-972 is related... comment in the code states:\n\n{code:java}\n// leading 0, but not hex, must be octal\n{code}\n\nthis is clearly a case where leading 0 means neither hex nor octal.\n",
    [
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.isNumber(String)"
    ]
  ],
  "813": [
    "this looks like a regression from .lang versions prior to 3. if the 2 given charsequences are strings (and both not null) you should check reference equality before delegating to regionmatches()",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.equalsIgnoreCase(CharSequence,CharSequence)"
    ]
  ],
  "936": [
    "stringutils.getlevenshteindistance(charsequence s, charsequence t, int threshold) specifies:\n{quote}\n{{find the levenshtein distance between two strings if it's _+*less than or equal to*+_ a given threshold.}}\n{quote}\n\nwhen passing a threshold > *integer.max_value - max(s.length(), t.length())* the method always returns -1.\nthe simplest use case is passing *integer.max_value* (a common practice if one would want to find the min/max ld of a string to several other strings in an iterative fashion.\n\nthe code should be fixed to consider the threshold in relation to the source/target lengths, or alternatively the javadoc should be fixed to pronounce the current limit.",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.getLevenshteinDistance(CharSequence,CharSequence,int)"
    ]
  ],
  "934": [
    "add a method which allows to remove the final modifier from a field\nsee http://goo.gl/jo1vjh for further details.",
    [
      "src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java@org.apache.commons.lang3.reflect.FieldUtils.removeFinalModifier(Field)"
    ]
  ],
  "995": [
    "via github: https://github.com/apache/commons-lang/pull/18",
    [
      "src/main/java/org/apache/commons/lang3/text/WordUtils.java@org.apache.commons.lang3.text.WordUtils.wrap(String,int,String,boolean)"
    ]
  ],
  "1312": [
    "these all work:\n\n{code:java}\nsystem.out.println(new locale(\"en\", \"001\"));\nsystem.out.println(new locale(\"en\", \"150\"));\nsystem.out.println(new locale(\"ar\", \"001\"));\n{code}\n\nbut these all fail with an illegalargumentexception:\n\n{code:java}\nsystem.out.println(localeutils.tolocale(\"en_001\"));\nsystem.out.println(localeutils.tolocale(\"en_150\"));\nsystem.out.println(localeutils.tolocale(\"ar_001\"));\n{code}\n",
    [
      "src/main/java/org/apache/commons/lang3/LocaleUtils.java@org.apache.commons.lang3.LocaleUtils.parseLocale(String)",
      "src/main/java/org/apache/commons/lang3/LocaleUtils.java@org.apache.commons.lang3.SyncAvoid.parseLocale(String)",
      "src/main/java/org/apache/commons/lang3/LocaleUtils.java@org.apache.commons.lang3.SyncAvoid.toLocale(String)",
      "src/main/java/org/apache/commons/lang3/LocaleUtils.java@org.apache.commons.lang3.LocaleUtils.toLocale(String)"
    ]
  ],
  "1311": [
    "typeutils.tostring() doesn't handle primitive and object arrays correctly.\n\nspecifically, these tests will fail:\n\n{code}\nassertequals(\"int[]\", typeutils.tostring(int[].class));\nassertequals(\"java.lang.integer[]\", typeutils.tostring(integer[].class));\n{code}\n\nif you declare a field with type {{list<string>[]}}, then you can add this test:\n\n{code}\nassertequals(\"java.util.list<java.lang.string>[]\", typeutils.tostring(field.getgenerictype()));\n{code}\n\nthis patch fixes the issue:\n\n{code}\n    private static string classtostring(final class<?> c) {\n// begin patch\n        if (c.isarray()) {\n            return tostring(c.getcomponenttype()) + \"[]\";\n        }\n// end patch \n       \n        final stringbuilder buf = new stringbuilder();\n{code}",
    [
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.ParameterizedTypeImpl.classToString(Class)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.TypeUtils.classToString(Class)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeImpl.classToString(Class)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.GenericArrayTypeImpl.classToString(Class)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeBuilder.classToString(Class)"
    ]
  ],
  "1310": [
    "since release 3.5 and due to the changes of lang-1115 an arraystoreexception occurs on methodutils.invokemethod if using varargs arguments and smaller types than the method defines (e.g. int vs long).\n\n{code}\n  @test\n  public void testmethodutilsinvokemethodvarargs () throws exception {\n    myobject object = new myobject ();\n    methodutils.invokemethod (object, \"dosomething\", 1);\n  }\n\n  public static class myobject {\n    public void dosomething (long... args) {\n      system.out.println (\"dosomething\");\n    }\n  }\n{code}\n\nthrows \n\n{code}\njava.lang.arraystoreexception\n\tat java.lang.system.arraycopy(native method)\n\tat org.apache.commons.lang3.reflect.methodutils.getvarargs(methodutils.java:497)\n\tat org.apache.commons.lang3.reflect.methodutils.tovarargs(methodutils.java:463)\n\tat org.apache.commons.lang3.reflect.methodutils.invokemethod(methodutils.java:234)\n\tat org.apache.commons.lang3.reflect.methodutils.invokemethod(methodutils.java:270)\n\tat org.apache.commons.lang3.reflect.methodutils.invokemethod(methodutils.java:147)\n{code}\n\nin 3.4. a nosuchmethodexception had been thrown, but in 3.5 the code now finds the matching method but fails then with above exception.",
    [
      "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java@org.apache.commons.lang3.reflect.MethodUtils.getMatchingAccessibleMethod(Class,String,Class)"
    ]
  ],
  "677": [
    "hi, i think i found a bug in the dateutils class in the method issamelocaltime.\n\nexample: \ncalendar a = calendar.getinstance();\na.settimeinmillis(1297364400000l);\n\ncalendar b = calendar.getinstance();\nb.settimeinmillis(1297321200000l);\n\nassert.assertfalse(dateutils.issamelocaltime(a, b));\n\nthis is because the method compares \ncal1.get(calendar.hour) == cal2.get(calendar.hour) \n\nbut i think it has to be \ncal1.get(calendar.hour_of_day) == cal2.get(calendar.hour_of_day)\n\n\n\t",
    [
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateIterator.isSameLocalTime(Calendar,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateUtils.isSameLocalTime(Calendar,Calendar)"
    ]
  ],
  "1319": [
    "\nmultilinerecursivetostringstyle style = new multilinerecursivetostringstyle();\nstring result = tostringbuilder.reflectiontostring(new string[] {\"1\",\"2\"}, style);\n\njava.lang.stackoverflowerror\n\tat org.apache.commons.lang3.builder.tostringstyle.appendstart(tostringstyle.java:409)\n\tat org.apache.commons.lang3.builder.tostringbuilder.<init>(tostringbuilder.java:262)\n\tat org.apache.commons.lang3.builder.reflectiontostringbuilder.<init>(reflectiontostringbuilder.java:481)\n\tat org.apache.commons.lang3.builder.reflectiontostringbuilder.tostring(reflectiontostringbuilder.java:300)\n\tat org.apache.commons.lang3.builder.reflectiontostringbuilder.tostring(reflectiontostringbuilder.java:157)\n\tat org.apache.commons.lang3.builder.recursivetostringstyle.appenddetail(recursivetostringstyle.java:74)\n\tat org.apache.commons.lang3.builder.multilinerecursivetostringstyle.reflectionappendarraydetail(multilinerecursivetostringstyle.java:142)\n\tat org.apache.commons.lang3.builder.reflectiontostringbuilder.reflectionappendarray(reflectiontostringbuilder.java:633)\n\tat org.apache.commons.lang3.builder.reflectiontostringbuilder.appendfieldsin(reflectiontostringbuilder.java:538)\n\tat org.apache.commons.lang3.builder.reflectiontostringbuilder.tostring(reflectiontostringbuilder.java:711)\n\tat org.apache.commons.lang3.builder.reflectiontostringbuilder.tostring(reflectiontostringbuilder.java:301)\n\tat org.apache.commons.lang3.builder.reflectiontostringbuilder.tostring(reflectiontostringbuilder.java:157)\n\tat org.apache.commons.lang3.builder.recursivetostringstyle.appenddetail(recursivetostringstyle.java:74)\n\tat org.apache.commons.lang3.builder.multilinerecursivetostringstyle.reflectionappendarraydetail(multilinerecursivetostringstyle.java:142)",
    [
      "src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java@org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.reflectionAppendArrayDetail(StringBuffer,String,Object)"
    ]
  ],
  "710": [
    "when calling unescapehtml4() on the string \"&#03\" (or any string that contains these characters) an exception is thrown:\n\nexception in thread \"main\" java.lang.stringindexoutofboundsexception: string index out of range: 4\n\tat java.lang.string.charat(string.java:686)\n\tat org.apache.commons.lang3.text.translate.numericentityunescaper.translate(numericentityunescaper.java:49)\n\tat org.apache.commons.lang3.text.translate.aggregatetranslator.translate(aggregatetranslator.java:53)\n\tat org.apache.commons.lang3.text.translate.charsequencetranslator.translate(charsequencetranslator.java:88)\n\tat org.apache.commons.lang3.text.translate.charsequencetranslator.translate(charsequencetranslator.java:60)\n\tat org.apache.commons.lang3.stringescapeutils.unescapehtml4(stringescapeutils.java:351)",
    [
      "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java@org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(CharSequence,int,Writer)",
      "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java@org.apache.commons.lang3.text.translate.NumericEntityUnescaper.isSet(OPTION)",
      "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java@org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(CharSequence,int,Writer)",
      "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java@org.apache.commons.lang3.text.translate.NumericEntityUnescaper.NumericEntityUnescaper(OPTION)"
    ]
  ],
  "120": [
    "hello,\n\nin org.apache.commons.lang.stringutils, we can find stringutils.equals(?,?). \norg.apache.commons.lang.time.dateutils should have the same. like this :\n\n    /**\n     * <p>compares two dates, returning <code>true</code> if they are equal.</p>\n     *\n     * <p><code>null</code>s are handled without exceptions. two \n<code>null</code>\n     * references are considered to be equal.</p>\n     *\n     * <pre>\n     * dateutils.equals(null, null)   = true\n     * dateutils.equals(null, \"abc\")  = false\n     * dateutils.equals(\"abc\", null)  = false\n     * dateutils.equals(\"abc\", \"abc\") = true\n     * dateutils.equals(\"abc\", \"abc\") = false\n     * </pre>\n     *\n     * @see java.util.date#equals(object)\n     * @param dt1  the first date, may be null\n     * @param dt2  the second date, may be null\n     * @return <code>true</code> if the dates are equal or both \n<code>null</code>\n     */\n\t  public static boolean equals(date dt1, date dt2) {\n\t      return (dt1 == null ? dt2 == null : dt1.equals(dt2));\n\t  }",
    [
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.getFraction(int,int,int)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.getReducedFraction(int,int)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.mulPosAndCheck(int,int)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.addSub(Fraction,boolean)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.greatestCommonDivisor(int,int)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.toString()",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.compareTo(Fraction)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.getFraction(double)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.subAndCheck(int,int)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.getFraction(int,int)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.equals(Object)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.addAndCheck(int,int)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.mulAndCheck(int,int)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.multiplyBy(Fraction)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.pow(int)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.toProperString()",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.shortArrayToLong(short,int,long,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.byteArrayToLong(byte,int,long,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.longToBinary(long,int,boolean,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.longToIntArray(long,int,int,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.byteToHex(byte,int,String,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.hexToByte(String,int,byte,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.shortToBinary(short,int,boolean,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.binaryToByte(boolean,int,byte,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.hexDigitToBinary(char)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.longToShortArray(long,int,short,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.byteArrayToInt(byte,int,int,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.intToBinary(int,int,boolean,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.intToByteArray(int,int,byte,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.intToShortArray(int,int,short,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.binaryToShort(boolean,int,short,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.hexDigitMsb0ToInt(char)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.byteArrayToUuid(byte,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.intToHex(int,int,String,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.shortToHex(short,int,String,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.byteArrayToShort(byte,int,short,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.hexToLong(String,int,long,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.shortArrayToInt(short,int,int,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.intArrayToLong(int,int,long,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.byteToBinary(byte,int,boolean,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.binaryToInt(boolean,int,int,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.longToHex(long,int,String,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.binaryToLong(boolean,int,long,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.hexDigitMsb0ToBinary(char)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.longToByteArray(long,int,byte,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.shortToByteArray(short,int,byte,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.hexToInt(String,int,int,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.hexToShort(String,int,short,int,int)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.hexDigitToInt(char)",
      "src/main/java/org/apache/commons/lang3/Conversion.java@org.apache.commons.lang3.Conversion.binaryToHexDigitMsb0_4bits(boolean,int)"
    ]
  ],
  "124": [
    "classes that are located in org.apache.commons.lang.enum package can't be used \nwith 1.5 jdk (aka the 5.0) because the \"enum\" is a reserved keyword. compiler \nerror looks like this: \"as of release 1.5, 'enum' is a keyword, and may not be \nused as an identifier (try -source 1.4 or lower to use 'enum' as an \nidentifier)\"\n\nthere probably should be a separate jar for 1.5+ jdk",
    [
      "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java@org.apache.commons.lang3.text.StrSubstitutor.isPreserveEscapes()",
      "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java@org.apache.commons.lang3.text.StrSubstitutor.setPreserveEscapes(boolean)",
      "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java@org.apache.commons.lang3.text.StrSubstitutor.substitute(StrBuilder,int,int,List)",
      "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java@org.apache.commons.lang3.text.StrSubstitutor.setEnableSubstitutionInVariables(boolean)"
    ]
  ],
  "575": [
    "see http://svn.apache.org/viewvc/commons/proper/lang/trunk/src/java/org/apache/commons/lang3/builder/hashcodebuilder.java?view=markup\n\nplease review the implementation for *reflectionappend* (lines 174 to 202)...  specifically, see line 182:\n\n{code}\nlist<string> excludedfieldlist = excludefields != null ? arrays.aslist(excludefields) : collections.<string>emptylist();\n{code}\n\nnote that if you are in the habit of passing in a string array for excluding fields ({{string[] excludefields}}) -- which is a best practice when using hibernate (to skip primary keys ({{@id}}) and version fields ({{@version}}) that change upon persistence) -- _every time_ the _hashcode_ is calculated, an _arraylist_ is being created -- generating fodder for the garbage collector.\n\ni thought i might get around this by passing a {{collection<string>}} instead of a {{string[]}}, but ironically the implementation of the {{reflectionhashcode(object object, collection<string> excludefields)}} (see lines 475 to 477), for example, transforms the {{collection<string>}} into a {{string[]}} only to have it transformed internally into a temporary {{arraylist<string>}}.\n\ni would expect the implementation to use and read what is submitted, whether that is a {{string[]}} or a {{collection<string>}}.  i don't think it needs to create another copy just to have a convenient {{contains}} method.  efficiency is important, especially in the event of rehashing.\n",
    [
      "src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java@org.apache.commons.lang3.builder.CompareToBuilder.reflectionAppend(Object,Object,Class,CompareToBuilder,boolean,String)",
      "src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java@org.apache.commons.lang3.builder.EqualsBuilder.reflectionAppend(Object,Object,Class,EqualsBuilder,boolean,String)",
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.reflectionAppend(Object,Class,HashCodeBuilder,boolean,String)"
    ]
  ],
  "917": [
    "when using a custom format registered and a choice format with an inner format is used in the same message format, an indexoutofboundsexception occurs in the custructor of extendedmessageformat:\n\n{code:java}new extendedmessageformat(\"hi {0,test,any}, got {1,choice,0#none|1#one|1<{1,number}}\", collections.singletonmap(\"test\", new testformatfactory()));{code}\n\n{noformat}\njava.lang.indexoutofboundsexception: index: 2, size: 2\n\tat java.util.arraylist.rangecheck(arraylist.java:604)\n\tat java.util.arraylist.get(arraylist.java:382)\n\tat org.apache.commons.lang.text.extendedmessageformat.insertformats(extendedmessageformat.java:364)\n\tat org.apache.commons.lang.text.extendedmessageformat.applypattern(extendedmessageformat.java:192)\n\tat org.apache.commons.lang.text.extendedmessageformat.<init>(extendedmessageformat.java:127)\n{noformat}\n\nthe problem occurs at the start of {{\\{1,number\\}}}.\n\nas a workaround i registered the {{testformatfactory}} also for \"choice\" and then returning {{new choiceformat(arguments)}}, but that is not the idea.\n\ni also checked the change logs, but there seems no change on this problem. i have not tester, but i think the bug still is present in the current release.\n",
    [
      "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java@org.apache.commons.lang3.text.ExtendedMessageFormat.insertFormats(String,ArrayList)"
    ]
  ],
  "1018": [
    "with commons-lang 3.2.2:\nnumberutils.createnumber(\"-160952.54\");\nthe result is \"-160952.55\".\n\nshould not be based on the length of the decimal point number to judge whether the floating point number.\nusing the method (createfloat(str)) of dealing with the valid number greater than seven numbers will cause accuracy loss.\nthe source code is as follows:\n\n{code:java}\ntry {\n            if(numdecimals <= 7){// if number has 7 or fewer digits past the decimal point then make it a float\n                final float f = createfloat(str);\n                if (!(f.isinfinite() || (f.floatvalue() == 0.0f && !allzeros))) {\n                    return f;\n                }\n            }\n        } catch (final numberformatexception nfe) { // nopmd\n            // ignore the bad number\n        }\n        try {\n            if(numdecimals <= 16){// if number has between 8 and 16 digits past the decimal point then make it a double\n                final double d = createdouble(str);\n                if (!(d.isinfinite() || (d.doublevalue() == 0.0d && !allzeros))) {\n                    return d;\n                }\n            }\n        } catch (final numberformatexception nfe) { // nopmd\n            // ignore the bad number\n        }\n\n        return createbigdecimal(str);\n    }\n{code}",
    [
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.createNumber(String)"
    ]
  ],
  "59": [
    "try to truncate 2004-10-31 01:00:00 mdt by hour and you'll actually get 2004-10-\n31 01:00:00 mst, which is one hour after the input hour.\n\n    // truncate 2004-10-31 01:00:00 mdt\n    date oct31_01mdt = new date(1099206000000l);    \n    date result = dateutils.truncate(oct31_01mdt, calendar.hour_of_day);\n    assertequals(oct31_01mdt, result);",
    [
      "src/main/java/org/apache/commons/lang3/SystemUtils.java@org.apache.commons.lang3.SystemUtils.isOSNameMatch(String,String)"
    ]
  ],
  "1061": [
    "the following code throws an exception:\ndateparser dp = fastdateformat.getinstance(\"z yyyy\", locale.us);\ndp.parse(\"gmt+00:00 2010\");\n\n\nthe format works correctly with simpledateformat.\n\n\n\nstack:\njava.text.parseexception: unparseable date: \"gmt+00:00 2010\" does not match (gmt[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|\\qacre time\\e|\\qact\\e|\\qadt\\e|\\qafghanistan time\\e|\\qaft\\e|\\qakdt\\e|\\qakst\\e|\\qalaska daylight time\\e|\\qalaska standard time\\e|\\qalma-ata time\\e|\\qalmt\\e|\\qamazon summer time\\e|\\qamazon time\\e|\\qamst\\e|\\qamt\\e|\\qanadyr time\\e|\\qanat\\e|\\qaqtau time\\e|\\qaqtobe time\\e|\\qaqtt\\e|\\qarabia standard time\\e|\\qargentine time\\e|\\qarmenia time\\e|\\qart\\e|\\qast\\e|\\qatlantic daylight time\\e|\\qatlantic standard time\\e|\\qazerbaijan summer time\\e|\\qazerbaijan time\\e|\\qazores summer time\\e|\\qazores time\\e|\\qazost\\e|\\qazot\\e|\\qazst\\e|\\qazt\\e|\\qbangladesh time\\e|\\qbdt\\e|\\qbhutan time\\e|\\qbnt\\e|\\qbolivia time\\e|\\qbot\\e|\\qbrasilia summer time\\e|\\qbrasilia time\\e|\\qbritish summer time\\e|\\qbrst\\e|\\qbrt\\e|\\qbrunei time\\e|\\qbst\\e|\\qbtt\\e|\\qcape verde time\\e|\\qcat\\e|\\qcct\\e|\\qcdt\\e|\\qcentral african time\\e|\\qcentral daylight time\\e|\\qcentral european summer time\\e|\\qcentral european time\\e|\\qcentral indonesia time\\e|\\qcentral standard time\\e|\\qcentral standard time (northern territory)\\e|\\qcentral standard time (south australia)\\e|\\qcentral standard time (south australia/new south wales)\\e|\\qcentral summer time (south australia)\\e|\\qcentral summer time (south australia/new south wales)\\e|\\qcentral western standard time (australia)\\e|\\qcest\\e|\\qcet\\e|\\qchadt\\e|\\qchamorro standard time\\e|\\qchast\\e|\\qchatham daylight time\\e|\\qchatham standard time\\e|\\qchile summer time\\e|\\qchile time\\e|\\qchina standard time\\e|\\qchoibalsan time\\e|\\qchot\\e|\\qchristmas island time\\e|\\qchst\\e|\\qchut\\e|\\qchuuk time\\e|\\qckt\\e|\\qclst\\e|\\qclt\\e|\\qcocos islands time\\e|\\qcolombia time\\e|\\qcook is. time\\e|\\qcoordinated universal time\\e|\\qcot\\e|\\qcst\\e|\\qcuba daylight time\\e|\\qcuba standard time\\e|\\qcvt\\e|\\qcwst\\e|\\qcxt\\e|\\qdavis time\\e|\\qdavt\\e|\\qddut\\e|\\qdumont-d'urville time\\e|\\qeasst\\e|\\qeast\\e|\\qeast indonesia time\\e|\\qeaster is. summer time\\e|\\qeaster is. time\\e|\\qeastern african time\\e|\\qeastern daylight time\\e|\\qeastern european summer time\\e|\\qeastern european time\\e|\\qeastern greenland summer time\\e|\\qeastern greenland time\\e|\\qeastern standard time\\e|\\qeastern standard time (new south wales)\\e|\\qeastern standard time (queensland)\\e|\\qeastern standard time (tasmania)\\e|\\qeastern standard time (victoria)\\e|\\qeastern summer time (new south wales)\\e|\\qeastern summer time (tasmania)\\e|\\qeastern summer time (victoria)\\e|\\qeat\\e|\\qect\\e|\\qecuador time\\e|\\qedt\\e|\\qeest\\e|\\qeet\\e|\\qegst\\e|\\qegt\\e|\\qest\\e|\\qfalkland is. time\\e|\\qfernando de noronha time\\e|\\qfet\\e|\\qfiji summer time\\e|\\qfiji time\\e|\\qfjst\\e|\\qfjt\\e|\\qfkt\\e|\\qfnt\\e|\\qfrench guiana time\\e|\\qfrench southern & antarctic lands time\\e|\\qfurther-eastern european time\\e|\\qgalapagos time\\e|\\qgalt\\e|\\qgambier time\\e|\\qgamt\\e|\\qgeorgia time\\e|\\qget\\e|\\qgft\\e|\\qghana mean time\\e|\\qgilbert is. time\\e|\\qgilt\\e|\\qgmt\\e|\\qgreenwich mean time\\e|\\qgst\\e|\\qgulf standard time\\e|\\qguyana time\\e|\\qgyt\\e|\\qhadt\\e|\\qhast\\e|\\qhawaii standard time\\e|\\qhawaii-aleutian daylight time\\e|\\qhawaii-aleutian standard time\\e|\\qhkt\\e|\\qhong kong time\\e|\\qhovd time\\e|\\qhovt\\e|\\qhst\\e|\\qict\\e|\\qidt\\e|\\qindia standard time\\e|\\qindian ocean territory time\\e|\\qindochina time\\e|\\qiot\\e|\\qiran daylight time\\e|\\qiran standard time\\e|\\qirdt\\e|\\qirish summer time\\e|\\qirkt\\e|\\qirkutsk time\\e|\\qirst\\e|\\qisrael daylight time\\e|\\qisrael standard time\\e|\\qist\\e|\\qjapan standard time\\e|\\qjst\\e|\\qkgt\\e|\\qkhandyga time\\e|\\qkirgizstan time\\e|\\qkorea standard time\\e|\\qkosrae time\\e|\\qkost\\e|\\qkrasnoyarsk time\\e|\\qkrat\\e|\\qkst\\e|\\qlhst\\e|\\qline is. time\\e|\\qlint\\e|\\qlord howe standard time\\e|\\qlord howe summer time\\e|\\qmacquarie island time\\e|\\qmagadan time\\e|\\qmagt\\e|\\qmalaysia time\\e|\\qmaldives time\\e|\\qmarquesas time\\e|\\qmarshall islands time\\e|\\qmart\\e|\\qmauritius time\\e|\\qmawson time\\e|\\qmawt\\e|\\qmdt\\e|\\qmest\\e|\\qmet\\e|\\qmetlakatla standard time\\e|\\qmht\\e|\\qmiddle europe summer time\\e|\\qmiddle europe time\\e|\\qmist\\e|\\qmmt\\e|\\qmoscow standard time\\e|\\qmountain daylight time\\e|\\qmountain standard time\\e|\\qmsk\\e|\\qmst\\e|\\qmut\\e|\\qmvt\\e|\\qmyanmar time\\e|\\qmyt\\e|\\qnauru time\\e|\\qnct\\e|\\qndt\\e|\\qnepal time\\e|\\qnew caledonia time\\e|\\qnew zealand daylight time\\e|\\qnew zealand standard time\\e|\\qnewfoundland daylight time\\e|\\qnewfoundland standard time\\e|\\qnft\\e|\\qniue time\\e|\\qnorfolk time\\e|\\qnovosibirsk time\\e|\\qnovt\\e|\\qnpt\\e|\\qnrt\\e|\\qnst\\e|\\qnut\\e|\\qnzdt\\e|\\qnzst\\e|\\qomsk time\\e|\\qomst\\e|\\qoral time\\e|\\qorat\\e|\\qpacific daylight time\\e|\\qpacific standard time\\e|\\qpakistan time\\e|\\qpalau time\\e|\\qpapua new guinea time\\e|\\qparaguay summer time\\e|\\qparaguay time\\e|\\qpdt\\e|\\qperu time\\e|\\qpet\\e|\\qpetropavlovsk-kamchatski time\\e|\\qpett\\e|\\qpgt\\e|\\qphilippines time\\e|\\qphoenix is. time\\e|\\qphot\\e|\\qpht\\e|\\qpierre & miquelon daylight time\\e|\\qpierre & miquelon standard time\\e|\\qpitcairn standard time\\e|\\qpkt\\e|\\qpmdt\\e|\\qpmst\\e|\\qpohnpei time\\e|\\qpont\\e|\\qpst\\e|\\qpwt\\e|\\qpyst\\e|\\qpyt\\e|\\qqyzt\\e|\\qqyzylorda time\\e|\\qret\\e|\\qreunion time\\e|\\qrothera time\\e|\\qrott\\e|\\qsakhalin time\\e|\\qsakt\\e|\\qsamara time\\e|\\qsamoa standard time\\e|\\qsamt\\e|\\qsast\\e|\\qsbt\\e|\\qsct\\e|\\qseychelles time\\e|\\qsgt\\e|\\qsingapore time\\e|\\qsolomon is. time\\e|\\qsouth africa standard time\\e|\\qsouth georgia standard time\\e|\\qsrt\\e|\\qsst\\e|\\qsuriname time\\e|\\qsyot\\e|\\qsyowa time\\e|\\qtahiti time\\e|\\qtaht\\e|\\qtajikistan time\\e|\\qtft\\e|\\qtimor-leste time\\e|\\qtjt\\e|\\qtkt\\e|\\qtlt\\e|\\qtmt\\e|\\qtokelau time\\e|\\qtonga time\\e|\\qtot\\e|\\qturkmenistan time\\e|\\qtuvalu time\\e|\\qtvt\\e|\\qulaanbaatar time\\e|\\qulat\\e|\\quruguay summer time\\e|\\quruguay time\\e|\\qust-nera time\\e|\\qutc\\e|\\quyst\\e|\\quyt\\e|\\quzbekistan time\\e|\\quzt\\e|\\qvanuatu time\\e|\\qvenezuela time\\e|\\qvet\\e|\\qvladivostok time\\e|\\qvlat\\e|\\qvolgograd time\\e|\\qvolt\\e|\\qvost\\e|\\qvostok time\\e|\\qvut\\e|\\qwake time\\e|\\qwakt\\e|\\qwallis & futuna time\\e|\\qwast\\e|\\qwat\\e|\\qwest\\e|\\qwest indonesia time\\e|\\qwest samoa daylight time\\e|\\qwest samoa time\\e|\\qwestern african summer time\\e|\\qwestern african time\\e|\\qwestern european summer time\\e|\\qwestern european time\\e|\\qwestern greenland summer time\\e|\\qwestern greenland time\\e|\\qwestern standard time (australia)\\e|\\qwet\\e|\\qwft\\e|\\qwgst\\e|\\qwgt\\e|\\qwib\\e|\\qwit\\e|\\qwita\\e|\\qwsdt\\e|\\qwst\\e|\\qyakt\\e|\\qyakutsk time\\e|\\qyekaterinburg time\\e|\\qyekt\\e)\\q \\e(\\p{nd}++)\n\tat org.apache.commons.lang3.time.fastdateparser.parse(fastdateparser.java:289)\n\tat org.apache.commons.lang3.time.fastdateformat.parse(fastdateformat.java:487)\n\n",
    [
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.TimeZoneStrategy(Locale)"
    ]
  ],
  "1060": [
    "the isnumber method assumes, that if the string being passed in doesn't have an 'x' at the second char it is an octal number.",
    [
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.isCreatable(String)"
    ]
  ],
  "51": [
    "there is a small typo in the documentation at the url:\n \nhttp://jakarta.apache.org/commons/lang/api/org/apache/commons/lang/systemutils.html\n\nthe description for the static boolean is_java_1_5 is \"true iff this is java\nversion 1.3.\".  i presume the version number really should be \"1.5\" rather than\n\"1.3\".",
    [
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderTokenizer.append(String,Object)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderWriter.append(Object)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderWriter.append(CharSequence)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderWriter.append(CharBuffer,int,int)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilder.append(CharBuffer)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderWriter.append(CharBuffer)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilder.append(CharSequence)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilder.append(String,Object)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilder.append(CharBuffer,int,int)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderTokenizer.append(Object)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderReader.append(CharBuffer,int,int)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderReader.append(Object)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderTokenizer.append(CharBuffer)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilder.append(Object)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderWriter.append(String,Object)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderTokenizer.append(CharBuffer,int,int)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderTokenizer.append(CharSequence)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderReader.append(CharBuffer)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderReader.append(CharSequence)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderReader.append(String,Object)"
    ]
  ],
  "828": [
    "the following calendars are non-gregorian [1]:\n\nja_jp_jp - japanese imperial)\nth_th (with any variant) - thai buddhist\n\nthis causes errors when testing round-trip conversions.\n\nthe simplest solution is to fall back to simpledateformat for these calendars.\n\n[1] http://docs.oracle.com/javase/6/docs/technotes/guides/intl/calendar.doc.html",
    [
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.toArray(Map)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TextStrategy.getDisplayNames(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.parse(String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.KeyValue.toArray(Map)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.KeyValue.getDisplayNames(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.toArray(Map)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TextStrategy.parse(String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.toArray(Map)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.getDisplayNames(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TextStrategy.toArray(Map)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.getDisplayNames(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.parse(String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.KeyValue.parse(String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.toArray(Map)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.getDisplayNames(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.getDisplayNames(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.parse(String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.parse(String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TextStrategy.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.KeyValue.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.SimpleDateFormatStrategy.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.addRegex(FastDateParser,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.addRegex(FastDateParser,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TextStrategy.setCalendar(FastDateParser,Calendar,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TextStrategy.addRegex(FastDateParser,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.addRegex(FastDateParser,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.setCalendar(FastDateParser,Calendar,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.addRegex(FastDateParser,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.isNumber()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.SimpleDateFormatStrategy.isNumber()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.KeyValue.addRegex(FastDateParser,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.KeyValue.isNumber()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.SimpleDateFormatStrategy.addRegex(FastDateParser,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.setCalendar(FastDateParser,Calendar,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.KeyValue.setCalendar(FastDateParser,Calendar,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TextStrategy.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.SimpleDateFormatStrategy.setCalendar(FastDateParser,Calendar,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TextStrategy.isNumber()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.setCalendar(FastDateParser,Calendar,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.isNumber()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.isNumber()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.KeyValue.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.isNumber()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.setCalendar(FastDateParser,Calendar,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.SimpleDateFormatStrategy.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.init()"
    ]
  ],
  "921": [
    "booleanutils.xor(true, true, false, true) returns false, although \ntrue ^ true ^ false ^ true is true. this is because the implementation only checks the count of true in the provided array.",
    [
      "src/main/java/org/apache/commons/lang3/BooleanUtils.java@org.apache.commons.lang3.BooleanUtils.xor(boolean)"
    ]
  ],
  "1380": [
    "the date format symbols of the french locale adds a . (dot) when short month names are really abbreviated.\r\n\r\n{code}\r\njanv.\r\nf\u00e9vr.\r\nmars\r\navr.\r\nmai\r\njuin\r\njuil.\r\nao\u00fbt\r\nsept.\r\noct.\r\nnov.\r\nd\u00e9c.\r\n{code}\r\n\r\nbut in real world examples, the dot is frequently omitted.\r\n\r\nfastdateparser should be lenient in the case where the dot isn't there, e.g. \"14 avr 2014\".",
    [
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TzInfo.simpleQuote(StringBuilder,String)"
    ]
  ],
  "822": [
    "numberutils#createnumber checks for a leading \"--\" in the string, and returns null if found. this is documented as a work round for a bug in bigdecimal.\n\nreturning nulll is contrary to the javadoc and the behaviour for other methods which would throw numberformatexception.\n\nit's not clear whether the bigdecimal problem still exists with recent versions of java. however, if it does exist, then the check needs to be done for all invocations of bigdecimal, i.e. needs to be moved to createbigdecimal.",
    [
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.createBigDecimal(String)"
    ]
  ],
  "1087": [
    "{{numberutils.createnumber(\"-0.0\")}} returns {{bigdecimal}} with 0 signum.\ncaused by the implementation not checking for sign when extracting mantissa from the input string.\n\nexpected is that negative {{float}} is returned.",
    [
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.createNumber(String)",
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.getMantissa(String)",
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.getMantissa(String,int)"
    ]
  ],
  "1083": [
    "this is probably just a quirk of the old jdk that was used.\nthe casts are not necessary on other computers, but they don't seem to hurt either.  (please verify that of course!)",
    [
      "src/main/java/org/apache/commons/lang3/SerializationUtils.java@org.apache.commons.lang3.SerializationUtils.roundtrip(T)",
      "src/main/java/org/apache/commons/lang3/SerializationUtils.java@org.apache.commons.lang3.ClassLoaderAwareObjectInputStream.roundtrip(T)"
    ]
  ],
  "596": [
    "the following program show a problem with a shortcoming of the java.util.properties class. \nthe default properties are not substituted by the strsubstitutor.\n\n{code:title=strsubsttest.java|borderstyle=solid}\nimport org.apache.commons.lang.text.strsubstitutor;\n\npublic class strsubsttest\n{\n    public static void main(string[] args)\n    {\n        string org = \"${doesnotwork}\";\n        system.setproperty(\"doesnotwork\", \"it work's!\");\n\n        // create a new poperties object with the system.getproperties as default\n        properties props = new properties(system.getproperties());\n\n        string subst = strsubstitutor.replace(org, props);\n        // is ${doesnotwork} substituted?\n        system.out.println(subst);\n\n    }\n}\n{code} \n\n\nthe following method could be added to the strsubstitutor class to fix this problem in an easy way:\n{code:borderstyle=solid}\n    /**\n     * replaces all the occurrences of variables in the given source object with their matching\n     * values from the properties.\n     * \n     * @param source the source text containing the variables to substitute, null returns null\n     * @param properties the properties with values, may be null\n     * @return the result of the replace operation\n     */\n    public static string replace(object source, properties valueproperties)\n    {\n        if (valueproperties == null) {\n            return source;\n        }\n        map valuemap = new hashmap();\n        enumeration propnames = valueproperties.propertynames();\n        while (propnames.hasmoreelements())\n        {\n            string propname = (string)propnames.nextelement();\n            string propvalue = valueproperties.getproperty(propname);\n            valuemap.put(propname, propvalue);\n        }\n        return strsubstitutor.replace(source, valuemap);\n    }\n{code}",
    [
      "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java@org.apache.commons.lang3.text.StrSubstitutor.replace(Object,Properties)"
    ]
  ],
  "1120": [
    "{code}\nimport org.apache.commons.lang3.stringutils;\n\npublic class main {\n\n    public static void main(string[] args) {\n        system.out.println(stringutils.stripaccents(\"\u0104\u0141\u00d3\u015a\u017b\u0179\u0106\u0143 \u0105\u0142\u00f3\u015b\u017c\u017a\u0107\u0144\"));\n    }\n}\n{code}",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.convertRemainingAccentCharacters(StringBuilder)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.stripAccents(String)"
    ]
  ],
  "1122": [
    "following the discussion at https://github.com/apache/commons-lang/pull/47 we need to decide how malformed inputs should be handled by the swap method. we have to handle several forms of malformed inputs and we should decide how to do that based on the current behavior of arrayutils. malformed inputs are:\n\n# array == null\n# array.length == 0\n# offset1 < 0\n# offset2 < 0\n# len < 0\n# offset1 > offset2\n# offset1 > array.length\n# offset2 > array.length\n# offset1 + len > array.length\n# offset2 + len > array.length",
    [
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(boolean,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.shift(double,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(float,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(double,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.shift(Object,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.shift(float,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(byte,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(float,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.shift(long,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.shift(byte,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(Object,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(short,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(Object,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(long,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(char,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.shift(char,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.shift(int,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(boolean,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(int,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.shift(boolean,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(long,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(byte,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(double,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(char,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.shift(short,int,int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.swap(short,int,int)"
    ]
  ],
  "981": [
    "the method durationformatutils#lexx does not detect if the format string contains an unmatched single-quote character.\n\nfor example \"ymd'test\" should really be rejected, as the literal string \"test\" is not properly terminated.",
    [
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.Token.lexx(String)",
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.DurationFormatUtils.lexx(String)"
    ]
  ],
  "987": [
    "commons lang3 screwed up my system after upgraded to 3.3 last night!\n\nwe use dateutils.getfragmentindays(date, calendar.month) to extract days for later use. basically (in 3.2), 'today' (mar. 13) returns 13, but, it returns 12 in 3.3!\n\ni compared the underlying method org.apache.commons.lang3.time.dateutils.getfragment(calendar, int, int) between 3.2 and 3.3:\n\n3.2\n{code:java}\n        // fragments bigger than a day require a breakdown to days\n        switch (fragment) {\n            case calendar.year:\n                result += (calendar.get(calendar.day_of_year) * millis_per_day) / millisperunit;\n                break;\n            case calendar.month:\n                result += (calendar.get(calendar.day_of_month) * millis_per_day) / millisperunit;\n                break;\n        }\n{code}\n\n3.3\n{code:java}\n        // fragments bigger than a day require a breakdown to days\n        switch (fragment) {\n            case calendar.year:\n                result += ((calendar.get(calendar.day_of_year) -1) * millis_per_day) / millisperunit;\n                break;\n            case calendar.month:\n                result += ((calendar.get(calendar.day_of_month) -1) * millis_per_day) / millisperunit;\n                break;\n            default:\n                break;\n        }\n{code}\n\nis there any any reason for adding '-1' in 3.3?! plus, do you have any unit test for this method?",
    [
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateIterator.getFragment(Calendar,int,int)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateUtils.getFragment(Calendar,int,int)"
    ]
  ],
  "1089": [
    "fastdateparser does not do any validation of dates/times.\nit acts similarly to simpledateformat (sdf) in lenient mode.\n\nhowever it does not generate the same output as sdf for input where the number of hours is greater than the normal range (e.g. > 12 for hh or > 23 for hh)",
    [
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.getStrategy(String,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.getStrategy(String,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.modify(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.modify(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.getStrategy(String,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.getStrategy(String,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.getStrategy(String,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.getStrategy(String,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.modify(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.getStrategy(String,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.modify(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.modify(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.modify(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.modify(int)"
    ]
  ],
  "703": [
    "try\n{code} \nstringutils.join(new object[]{\n        new object() {\n          @override\n          public string tostring() {\n            return null;\n          }\n        }\n    }, ',');\n{code}\n\ntostring should probably never return null, but it does in javax.mail.internet.internetaddress",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.join(Object,char,int,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.join(Object,String,int,int)"
    ]
  ],
  "117": [
    "fastdatefromat.getinstance(\"dd.mm.yyyy\").format(date) returns \"01.01.01000\",\nwhen date is 1 januar 1000 (01.01.1000)",
    [
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.TimeZoneStrategy(Calendar,Locale)"
    ]
  ],
  "89": [
    "summary saids it all :)\n\nit means that server side exceptions cannot be \ntransfered/serialized to clients, which is a must have to inform users on errors and be able to do a \ndecent bughunt :)",
    [
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.toObject(float)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.toPrimitive(Object)",
      "src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java@org.apache.commons.lang3.reflect.ConstructorUtils.invokeConstructor(Class,Object,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java@org.apache.commons.lang3.reflect.ConstructorUtils.getMatchingAccessibleConstructor(Class,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.isMatchingExecutable(Executable,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.Executable.of(Constructor)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.of(Constructor)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.Executable.getObjectTransformationCost(Class,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.Executable(Constructor)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.Executable.isVarArgs()",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.getObjectTransformationCost(Class,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.compareMethodFit(Method,Method,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.Executable.Executable(Method)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.isVarArgs()",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.compareConstructorFit(Constructor,Constructor,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.Executable.compareConstructorFit(Constructor,Constructor,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.Executable.getParameterTypes()",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.Executable(Method)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.Executable.Executable(Constructor)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.Executable.isMatchingConstructor(Constructor,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.Executable.of(Method)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.isMatchingMethod(Method,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.of(Method)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.Executable.isMatchingMethod(Method,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.getTotalTransformationCost(Class,Executable)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.isMatchingConstructor(Constructor,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.Executable.isMatchingExecutable(Executable,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.Executable.getTotalTransformationCost(Class,Executable)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.Executable.compareMethodFit(Method,Method,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.getParameterTypes()",
      "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java@org.apache.commons.lang3.reflect.MethodUtils.getVarArgs(Object,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java@org.apache.commons.lang3.reflect.MethodUtils.toVarArgs(Method,Object)",
      "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java@org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(Object,String,Object,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java@org.apache.commons.lang3.reflect.MethodUtils.invokeStaticMethod(Class,String,Object,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java@org.apache.commons.lang3.reflect.MethodUtils.getMatchingAccessibleMethod(Class,String,Class)"
    ]
  ],
  "111": [
    "the time unit tests fail when run on a sunday:\n\ntest.time:\n     [echo] running time package tests ...\n     [java] ...f.f................\n     [java] time: 4.394\n     [java] there were 2 failures:\n     [java] 1)\ntestparse(org.apache.commons.lang.time.calendarutilstest)junit.framework.assertionfailederror:\nparse last sunday expected sun apr 27 06:39:17 mst 2003 but got sun apr 20\n06:39:17 mst 2003\n     [java] \tat\norg.apache.commons.lang.time.calendarutilstest.assertequals(calendarutilstest.java:373)\n     [java] \tat\norg.apache.commons.lang.time.calendarutilstest.testparse(calendarutilstest.java:243)\n     [java] \tat sun.reflect.nativemethodaccessorimpl.invoke0(native method)\n     [java] \tat\nsun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:39)\n     [java] \tat\nsun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:25)\n     [java] 2)\ntestweekiterator(org.apache.commons.lang.time.calendarutilstest)junit.framework.assertionfailederror:\n expected mon apr 28 00:00:00 mst 2003 but got mon apr 21 00:00:00 mst 2003\n     [java] \tat\norg.apache.commons.lang.time.calendarutilstest.assertequals(calendarutilstest.java:373)\n     [java] \tat\norg.apache.commons.lang.time.calendarutilstest.assertweekiterator(calendarutilstest.java:346)\n     [java] \tat\norg.apache.commons.lang.time.calendarutilstest.assertweekiterator(calendarutilstest.java:324)\n     [java] \tat\norg.apache.commons.lang.time.calendarutilstest.testweekiterator(calendarutilstest.java:284)\n     [java] \tat sun.reflect.nativemethodaccessorimpl.invoke0(native method)\n     [java] \tat\nsun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:39)\n     [java] \tat\nsun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:25)\n\nlooks to me like the unit test code is checking the value of calendar.date, when\nit should be looking at calendar.day_of_week (at line 237 and below) to decide\nwhether to make adjustments for today==sunday.\n\nwhen i fix this, testparse succeeds but testweekiterator hangs at the statement\nit = calendarutils.getcalendariterator(now, calendarutils.range_week_relative);",
    [
      "src/main/java/org/apache/commons/lang3/RandomUtils.java@org.apache.commons.lang3.RandomUtils.nextFloat()",
      "src/main/java/org/apache/commons/lang3/RandomUtils.java@org.apache.commons.lang3.RandomUtils.nextInt(int,int)",
      "src/main/java/org/apache/commons/lang3/RandomUtils.java@org.apache.commons.lang3.RandomUtils.nextInt()",
      "src/main/java/org/apache/commons/lang3/RandomUtils.java@org.apache.commons.lang3.RandomUtils.nextFloat(float,float)",
      "src/main/java/org/apache/commons/lang3/RandomUtils.java@org.apache.commons.lang3.RandomUtils.nextLong()",
      "src/main/java/org/apache/commons/lang3/RandomUtils.java@org.apache.commons.lang3.RandomUtils.nextDouble()",
      "src/main/java/org/apache/commons/lang3/RandomUtils.java@org.apache.commons.lang3.RandomUtils.nextDouble(double,double)",
      "src/main/java/org/apache/commons/lang3/RandomUtils.java@org.apache.commons.lang3.RandomUtils.nextLong(long,long)"
    ]
  ],
  "110": [
    "added class hierachy support to hashcodebuilder.reflectionhashcode() with the \nfollowing patches.",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.compareIgnoreCase(String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.compare(String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.compareIgnoreCase(String,String,boolean)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.compare(String,String,boolean)"
    ]
  ],
  "80": [
    "i propose the following new interface characterencodingnames. i've stored a\nproposal in cvs to \"record\" it. even if we nuke it, it will be in the \"attic\".\n\nin short:\n\n/**\n * character encoding names required of every implementation of the java platform.\n * \n * according to the java documentation <a\n *\nhref=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">jre\ncharacter encoding names</a>:\n * <p>\n * <cite>every implementation of the java platform is required to support the\nfollowing character encodings. consult the\n * release documentation for your implementation to see if any other encodings\nare supported. </cite>\n * </p>\n * \n * @see <a\nhref=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">jre\ncharacter encoding\n *          names </a>\n * @author apache software foundation\n * @since 2.1\n */",
    [
      "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java@org.apache.commons.lang3.text.StrSubstitutor.StrSubstitutor(Map,String,String,char)",
      "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java@org.apache.commons.lang3.text.StrSubstitutor.StrSubstitutor(StrLookup,String,String,char)",
      "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java@org.apache.commons.lang3.text.StrSubstitutor.StrSubstitutor(Map,String,String,char,String)",
      "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java@org.apache.commons.lang3.text.StrSubstitutor.StrSubstitutor(StrLookup,String,String,char,String)",
      "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java@org.apache.commons.lang3.text.StrSubstitutor.StrSubstitutor(StrLookup,StrMatcher,StrMatcher,char)",
      "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java@org.apache.commons.lang3.text.StrSubstitutor.StrSubstitutor(StrLookup,StrMatcher,StrMatcher,char,StrMatcher)"
    ]
  ],
  "87": [
    "comparetobuilder does not seem to handle nulls well at all.\n\nin the methods:\n\npublic comparetobuilder append(object lhs, object rhs)\npublic comparetobuilder append(object[] lhs, object[] rhs)\n\nif either the lhs or rhs parameters are null, the code is set up to throw a \nnullpointerexception instead of evaulating on the basis of null.  this requires \nthat all object be vetted before they be placed in a sorting collection, not \nusing the comparetobuilder class, modifying the source code, or subclassing \ncomparetobuilder.  we worked around this by subclassing comparetobuilder and \noverriding the methods in question.\n\nthe following lines of code (in both methods) are the cause of the exception:\n\n        if (comparison != 0) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            throw new nullpointerexception();\n        }\n\nthe 'if' statement should be replaced with (?) :\n\n        if (lhs == null && rhs != null) {\n            comparison = -1;\n            return this;\n        }\n        if (lhs != null && rhs == null) {\n            comparison = 1;\n            return this;\n        }",
    [
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.smaller(double,double)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.smaller(double,double,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.greaterObj(Comparable,T,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.greaterOrEqual(long,long)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.smallerOrEqual(double,double,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.smallerObj(Comparable,T,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.different(long,long)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.smallerOrEqual(long,long,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.finite(double)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.greaterOrEqualObj(Comparable,T,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.finite(double,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.differentObj(Comparable,T,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.different(long,long,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.greater(double,double,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.smallerOrEqual(long,long)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.smaller(long,long)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.greater(double,double)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.greaterOrEqual(double,double)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.greaterOrEqual(long,long,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.notNaN(double)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.different(double,double,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.smallerOrEqual(double,double)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.different(double,double)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.greater(long,long,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.greaterOrEqualObj(Comparable,T)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.greater(long,long)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.smaller(long,long,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.notNaN(double,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.smallerOrEqualObj(Comparable,T)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.greaterOrEqual(double,double,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.smallerObj(Comparable,T)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.differentObj(Comparable,T)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.smallerOrEqualObj(Comparable,T,String,Object)",
      "src/main/java/org/apache/commons/lang3/Validate.java@org.apache.commons.lang3.Validate.greaterObj(Comparable,T)"
    ]
  ],
  "832": [
    "fdp does not handled unterminated quotes the same way as simpledateformat\n\nfor example:\n\nformat: 'd'd'\ndate: d3\n\nthis should fail to parse the format and date but it actually works.\nthe format is parsed as:\n\npattern: d(\\p{isnd}++)",
    [
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TextStrategy.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.KeyValue.init()",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.init()"
    ]
  ],
  "838": [
    "the private method removeall(object array, int... indices) sorts the indices array, so arrays passed in by application code need to be cloned first.\n\nhowever, where the index array is generated locally, that is unnecessary.\n\nthe removeelements() methods currently call the public removeall(<type>[] array, int... indices) methods, which clone the indices before calling the private removeall() method.\n\nthe removeelements() methods should call the private method directly, avoiding the unnecessary clone call.",
    [
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeElements(short,short)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeElements(char,char)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeElements(byte,byte)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeElements(long,long)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeElements(T,T)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeElements(float,float)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeElements(boolean,boolean)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeElements(double,double)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeElements(int,int)"
    ]
  ],
  "799": [
    "similar issue as https://issues.apache.org/jira/browse/httpclient-471\n\nfollowing line throws an parseexception on a german system:\nd = dateutils.parsedate(\"wed, 09 apr 2008 23:55:38 gmt\", new string[] {\"eee, dd mmm yyyy hh:mm:ss zzz\"});\n\nreason: parsedate internally calls simpledateformat without providing a locale. this causes \"mmm\" to be interpreted using the system locale. if the system is german, the date is trying to be interpreted as german date.\n\ni see following solutions:\n a) always instantiate simpledateformat with locale.english\n b) make two instances of simpledateformat. one without providing a locale and one with locale.english. try two parsings\n c) make as many simpledateformat instances as locales are availble iterate over all instances at the parsing attempts.\n d) provide an additional (optional) parameter to parsedate for providing a locale\n\ni would prefer b) as this seems the best trade-off between internationalization and local usage.\n\nwhat do you think?",
    [
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateUtils.parseDate(String,Locale,String)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateUtils.parseDateStrictly(String,Locale,String)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateIterator.parseDateStrictly(String,Locale,String)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateIterator.parseDateStrictly(String,String)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateUtils.parseDateWithLeniency(String,Locale,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateUtils.parseDateStrictly(String,String)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateUtils.parseDate(String,String)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateIterator.parseDate(String,String)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateIterator.parseDateWithLeniency(String,Locale,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateIterator.parseDate(String,Locale,String)"
    ]
  ],
  "428": [
    "stringutils.isnumeric.\nif we put empty string as parameter we got true.\nstringutils.isnumeric(\"\") return true.",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.isNumeric(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.isAlpha(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.isAlphanumeric(CharSequence)"
    ]
  ],
  "3": [
    "the padding array in class stringutils is one entry too short.\nas declared, it overflows on '\\uffff'.\nto test, run:\n stringutils.leftpad(\"abcd\", 10, '\\ufffe') // no exception\n stringutils.leftpad(\"abcd\", 10, '\\uffff') // arrayindexoutofboundsexception\n\ncurrent code:\n    private static final string[] padding = new string[character.max_value];\nsuggested fix: \n    private static final string[] padding = new string[character.max_value + 1];",
    [
      "src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java@org.apache.commons.lang3.text.translate.OctalUnescaper.translate(CharSequence,int,Writer)"
    ]
  ],
  "1252": [
    "in considering the issues lang-1060, lang-1040, lang-1038, and lang-992, it seems that there are times when {{numberutils.isnumber}} resolves to {{false}} while {{numberutils.createnumber}}, given the same input, does not throw an exception, returning a valid {{java.lang.number}}. this inconsistency should be resolved either by making {{isnumber}} more lenient or {{createnumber}} more stringent.",
    [
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAllOccurences(float,float)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAllOccurences(T,T)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAllOccurences(int,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAllOccurences(short,short)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAllOccurences(boolean,boolean)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAllOccurences(char,char)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAllOccurences(double,double)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAllOccurences(byte,byte)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAllOccurences(long,long)",
      "src/main/java/org/apache/commons/lang3/ClassUtils.java@org.apache.commons.lang3.ClassUtils.getClass(ClassLoader,String,boolean)",
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(int)",
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.randomAscii(int)",
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric(int,int)",
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.randomPrint(int,int)",
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.randomGraph(int)",
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.randomPrint(int)",
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.randomAscii(int,int)",
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric(int)",
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(int,int)",
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.randomNumeric(int,int)",
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.randomNumeric(int)",
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.randomGraph(int,int)",
      "src/main/java/org/apache/commons/lang3/SerializationUtils.java@org.apache.commons.lang3.SerializationUtils.deserialize(InputStream)",
      "src/main/java/org/apache/commons/lang3/SerializationUtils.java@org.apache.commons.lang3.ClassLoaderAwareObjectInputStream.deserialize(InputStream)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.wrap(String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.normalizeSpace(String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.wrapIfMissing(String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.wrapIfMissing(String,char)",
      "src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java@org.apache.commons.lang3.builder.CompareToBuilder.appendArray(Object,Object,Comparator)",
      "src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java@org.apache.commons.lang3.builder.EqualsBuilder.register(Object,Object)",
      "src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java@org.apache.commons.lang3.builder.EqualsBuilder.unregister(Object,Object)",
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.register(Object)",
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.unregister(Object)",
      "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java@org.apache.commons.lang3.reflect.MethodUtils.getMatchingMethod(Class,String,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java@org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(Object,String,Object,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java@org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(Object,boolean,String)",
      "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java@org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(Object,boolean,String,Object,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeBuilder.isAssignable(Type,ParameterizedType,Map)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.ParameterizedTypeImpl.isAssignable(Type,ParameterizedType,Map)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.GenericArrayTypeImpl.isAssignable(Type,ParameterizedType,Map)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeImpl.isAssignable(Type,ParameterizedType,Map)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.TypeUtils.isAssignable(Type,ParameterizedType,Map)",
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.isCreatable(String)",
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.isCreatable(String)",
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.isNumber(String)",
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.isCreatable(String)"
    ]
  ],
  "7": [
    "the following example from the javadoc is incorrect.\n\nstringutils.replace(\"aba\", \"a\", \"\")    = \"aba\"\n\nit should be:\n\nstringutils.replace(\"aba\", \"a\", \"\")    = \"b\"",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.joinWith(String,Object)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.joinWith(String,Object)",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.TwoDigitNumberField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.UnpaddedNumberField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.FastDateFormat.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.TwoDigitYearField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.TwentyFourHourField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.CharacterLiteral.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.UnpaddedMonthField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.PaddedNumberField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.TimeZoneNumberRule.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.TimeZoneNameRule.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.TwoDigitMonthField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.StringLiteral.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.TextField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.TwelveHourField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/text/translate/UnicodeUnescaper.java@org.apache.commons.lang3.text.translate.UnicodeUnescaper.translate(CharSequence,int,Writer)"
    ]
  ],
  "915": [
    "the static method localeutils.tolocale() fails, at least, to parse 3-char locale strings, which are completelly valid bcp47 locales.",
    [
      "src/main/java/org/apache/commons/lang3/LocaleUtils.java@org.apache.commons.lang3.SyncAvoid.toLocale(String)",
      "src/main/java/org/apache/commons/lang3/LocaleUtils.java@org.apache.commons.lang3.LocaleUtils.toLocale(String)"
    ]
  ],
  "1396": [
    "json objects consist of a string : value pair.\r\nthe string part can contain '\"' and '\\' etc provided it is properly escaped.\r\n\r\nthis is not currently supported.",
    [
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.appendFieldStart(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.appendFieldStart(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.appendFieldStart(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.appendFieldStart(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.appendFieldStart(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.appendFieldStart(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.appendFieldStart(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.appendFieldStart(StringBuffer,String)"
    ]
  ],
  "1395": [
    "from the user mailing list [1]:\r\njsontostringstyle does not escape double quote in a string value\r\n\r\njson requires double-quote to be escaped with a back-slash.\r\n\r\nthis does not happen currently.\r\n\r\nnor does the code translate control characters such as nl and ff correctly.\r\n\r\nafaict the code is only guaranateed to process alphanumeric strings correctly.\r\n\r\n[1] https://lists.apache.org/thread.html/10bb632e86c473d58656431ad2702e058c58585e1a2edf1bf4a46824@%3cuser.commons.apache.org%3e",
    [
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.appendValueAsString(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.appendValueAsString(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.appendValueAsString(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.appendValueAsString(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.appendValueAsString(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.appendValueAsString(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.appendValueAsString(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.appendValueAsString(StringBuffer,String)"
    ]
  ],
  "916": [
    "in lang-538 issue, there is an unit test:\n\n{noformat}\n  public void testformat_calendarisomszulu() {\n    final string datetime = \"2009-10-16t16:42:16.000z\";\n    gregoriancalendar cal = new gregoriancalendar(timezone.gettimezone(\"gmt-8\"));\n    cal.clear();\n    cal.set(2009, 9, 16, 8, 42, 16);\n    cal.gettime();\n\n    fastdateformat format = fastdateformat.getinstance(\"yyyy-mm-dd't'hh:mm:ss.sss'z'\", timezone.gettimezone(\"gmt\"));\n    assertequals(\"datetime\", datetime, format.format(cal));\n  }\n{noformat}\n\nthis test passes successfully in lang-2.6 but failed in lang3-3.1:\n\n{noformat}\norg.junit.comparisonfailure: datetime expected:<2009-10-16t[16]:42:16.000z> but was:<2009-10-16t[08]:42:16.000z>\n{noformat}\n\nreproduced whit sun java version: 1.6.0_45 and 1.7.0_21 on fedora 17 (linux 3.9.10-100.fc17.i686.pae).\n\nmoreover, i wrote another unit test showing that the timezone parameter seems to be ignored :\n{noformat}\npublic void test() {\n\tcalendar cal = calendar.getinstance(timezone.gettimezone(\"europe/paris\"));\n\tcal.set(2009, 9, 16, 8, 42, 16);\n\n\t// system.out.println(dateformatutils.iso_datetime_time_zone_format.format(cal));\n\n\tsystem.out.println(\"long\");\n\tsystem.out.println(dateformatutils.format(cal.gettimeinmillis(), dateformatutils.iso_datetime_time_zone_format.getpattern(), timezone.getdefault()));\n\tsystem.out.println(dateformatutils.format(cal.gettimeinmillis(), dateformatutils.iso_datetime_time_zone_format.getpattern(),\n\t\t\ttimezone.gettimezone(\"asia/kolkata\")));\n\tsystem.out.println(dateformatutils.format(cal.gettimeinmillis(), dateformatutils.iso_datetime_time_zone_format.getpattern(),\n\t\t\ttimezone.gettimezone(\"europe/london\")));\n\n\tsystem.out.println(\"calendar\");\n\tsystem.out.println(dateformatutils.format(cal, dateformatutils.iso_datetime_time_zone_format.getpattern(), timezone.getdefault()));\n\tsystem.out.println(dateformatutils.format(cal, dateformatutils.iso_datetime_time_zone_format.getpattern(), timezone.gettimezone(\"asia/kolkata\")));\n\tsystem.out.println(dateformatutils.format(cal, dateformatutils.iso_datetime_time_zone_format.getpattern(), timezone.gettimezone(\"europe/london\")));\n\n\tsystem.out.println(\"calendar fast\");\n\tsystem.out.println(fastdateformat.getinstance(\"yyyy-mm-dd't'hh:mm:ss.sss'z'\", timezone.gettimezone(\"europe/paris\")).format(cal));\n\tsystem.out.println(fastdateformat.getinstance(\"yyyy-mm-dd't'hh:mm:ss.sss'z'\", timezone.gettimezone(\"asia/kolkata\")).format(cal));\n\tsystem.out.println(fastdateformat.getinstance(\"yyyy-mm-dd't'hh:mm:ss.sss'z'\", timezone.gettimezone(\"europe/london\")).format(cal));\n}\n{noformat}\n\ngives the following console logs:\n{noformat}\nlong\n2009-10-16t08:42:16+02:00\n2009-10-16t12:12:16+05:30\n2009-10-16t07:42:16+01:00\ncalendar\n2009-10-16t08:42:16+02:00\n2009-10-16t08:42:16+02:00\n2009-10-16t08:42:16+02:00\ncalendar fast\n2009-10-16t08:42:16.975z\n2009-10-16t08:42:16.975z\n2009-10-16t08:42:16.975z\n{noformat}\n\nwhen dateformatutils.format takes a long parameter, the time string is good.\nwhen dateformatutils.format takes a calendar parameter, the time string is wrong, the timezone parameter is ignored.\n",
    [
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(Calendar,StringBuffer)"
    ]
  ],
  "1230": [
    "we're running into contention issues in registry lookup in equalsbuilder and hashcodebuilder. we believe the synchronization for the registry lookup is unnecessary. threadlocals are thread safe, each thread gets own value. therefore no other thread can read or change the value of the current thread. as a consequence access to threadlocals does not need to be synchronized.\n\nsince idkey uses object identity and the identity hashcode it does use neither equalsbuilder nor hashcodebuilder. this means that recursive calls to register and unregister are not possible even if the registered objects use equalsbuilder or hashcodebuilder. this also makes re-reading redundant.\n\nthe issue was likely introduced in 2.5 by lang-586 but 2.6 is the oldest version we can select.",
    [
      "src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java@org.apache.commons.lang3.builder.EqualsBuilder.register(Object,Object)",
      "src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java@org.apache.commons.lang3.builder.EqualsBuilder.unregister(Object,Object)",
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.register(Object)",
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.unregister(Object)"
    ]
  ],
  "1232": [
    "the other append methods throw an illegalargumentexception if fieldname is null. so, append(object) and append(object[]) should also do this.\n\nsource: [https://github.com/apache/commons-lang/pull/121]",
    [
      "src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java@org.apache.commons.lang3.builder.DiffBuilder.append(String,Object,Object)"
    ]
  ],
  "1133": [
    "fastdateparser_timezonestrategytest#testtimezonestrategypattern() on current master fails:\n\n{quote}java.lang.assertionerror: franz\u00f6sisch:heure d'europe de l'est utc+3\n\tat org.junit.assert.fail(assert.java:88)\n\tat org.junit.assert.asserttrue(assert.java:41)\n\tat org.apache.commons.lang3.time.fastdateparser_timezonestrategytest.testtimezonestrategypattern(fastdateparser_timezonestrategytest.java:39){quote}\n\ni'm unsure why. i guess it has something to do with my german locale and maybe windows too.\n\n",
    [
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.simpleQuote(StringBuilder,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.simpleQuote(StringBuilder,String)"
    ]
  ],
  "1132": [
    "placeholder for https://github.com/apache/commons-lang/pull/85\n{quote}\nas described in it's [javadoc|http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/builder/reflectiontostringbuilder.html#reflectiontostringbuilder(java.lang.object)], reflectiontostringbuilder constructor will throw illegalargumentexception if the object to build a tostringfor is null, while in fact it won't.\n{quote}",
    [
      "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java@org.apache.commons.lang3.builder.ReflectionToStringBuilder.checkNotNull(Object)",
      "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java@org.apache.commons.lang3.builder.ReflectionToStringBuilder.ReflectionToStringBuilder(T,ToStringStyle,StringBuffer,Class,boolean,boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java@org.apache.commons.lang3.builder.ReflectionToStringBuilder.ReflectionToStringBuilder(Object,ToStringStyle)",
      "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java@org.apache.commons.lang3.builder.ReflectionToStringBuilder.ReflectionToStringBuilder(Object)",
      "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java@org.apache.commons.lang3.builder.ReflectionToStringBuilder.ReflectionToStringBuilder(Object,ToStringStyle,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java@org.apache.commons.lang3.builder.ReflectionToStringBuilder.toStringExclude(Object,String)",
      "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java@org.apache.commons.lang3.builder.ReflectionToStringBuilder.checkNotNull(Object)",
      "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java@org.apache.commons.lang3.builder.ReflectionToStringBuilder.ReflectionToStringBuilder(T,ToStringStyle,StringBuffer,Class,boolean,boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java@org.apache.commons.lang3.builder.ReflectionToStringBuilder.ReflectionToStringBuilder(Object,ToStringStyle)",
      "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java@org.apache.commons.lang3.builder.ReflectionToStringBuilder.ReflectionToStringBuilder(Object)",
      "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java@org.apache.commons.lang3.builder.ReflectionToStringBuilder.ReflectionToStringBuilder(Object,ToStringStyle,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java@org.apache.commons.lang3.builder.ReflectionToStringBuilder.toStringExclude(Object,String)"
    ]
  ],
  "1131": [
    "the following test will fail because the {{equals(strbuilder)}} overload in {{strbuilder}} does not check for null inputs:\n\n{code:java}\n    @test\n    public void testequalswithnullstrbuilder() throws exception {\n        final strbuilder sb = new strbuilder();\n        final strbuilder other = null;\n        assertfalse(sb.equals(other));\n    }\n{code}",
    [
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderWriter.equals(StrBuilder)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilder.equals(StrBuilder)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderTokenizer.equals(StrBuilder)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderReader.equals(StrBuilder)"
    ]
  ],
  "381": [
    "the min() method of numberutils returns the wrong result if  the first value of the array happens to be float.nan. the following code snippet shows the behaviour:\n\n        float a[] = new float[] {(float) 1.2, float.nan, (float) 3.7, (float) 27.0, (float) 42.0, float.nan};\n        float b[] = new float[] {float.nan, (float) 1.2, float.nan, (float) 3.7, (float) 27.0, (float) 42.0, float.nan};\n        \n        float min = numberutils.min(a);\n        system.out.println(\"min(a): \" + min); // output: 1.2\n        min = numberutils.min(b);\n        system.out.println(\"min(b): \" + min); // output: nan\n\nthis problem may exist for double-arrays as well. \n\nproposal: use float.compare(float, float) or numberutils.compare(float, float) to achieve a consistent result.\n",
    [
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.getObjectTransformationCost(Class,Class)"
    ]
  ],
  "109": [
    "hashcodebuilder class failed to generate unique hashcode for objects.\n\nhere are codes to reproduce the problem:\n\nimport org.apache.commons.lang.builder.hashcodebuilder;\n\npublic class person\n{\n    public int id;\n    public string name;\n\n    public person(int id, string name)\n    {\n        this.id=id;\n        this.name = name;\n    }\n\n    public int hashcode()\n    {\n        return new hashcodebuilder(17,37).\n                append(id).\n                append(name).\n                tohashcode();\n    }\n}\n\npackage com.ball.edi.prototype;\n\npublic class testhashcode\n{\n    static public void main(string args[])\n    {\n        person p1=new person(214686, \"03065\");\n        person p2=new person(214691, \"03006\");\n\n        system.out.println(\"the hashcode for p1 is \" + p1.hashcode());\n        system.out.println(\"the hashcode for p2 is \" + p2.hashcode());\n    }\n}\n\nwhen you ran testhashcode class, you will get \n\nthe hashcode for p1 is 53862859\nthe hashcode for p2 is 53862859\n\ni found this problem when i am using ojb.\n\nthanks.",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.equalsAnyIgnoreCase(CharSequence,CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.equalsAny(CharSequence,CharSequence)"
    ]
  ],
  "901": [
    "endswithany was added in response to this task: lang-614\n\ndocumentation says that the method returns \"true if the charsequence starts with any of the the prefixes, case insensitive, or both null\" \n\nstringutils.endswithany(\"mime/type\", \"type\") true\nstringutils.endswithany(\"mime/type\", \"type\") false",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.endsWithAny(CharSequence,CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.startsWithAny(CharSequence,CharSequence)"
    ]
  ],
  "33": [
    "equals considers self equal to any object that has an accessible public getname\n() method which returns a string that is the same than the internal name iname. \nso if you compare two objects of subclasses of enum that are not related \notherwise, but incidentally have the same name iname the equals method returns \ntrue. \n\nbut even worse, it's also possible to compare a subclass of enum to an object \nof a totally unrelated class and to consider the objects equal if the totally \nunrelated class provides a getname method that returns a string equal to iname. \nif the getname method of the other object isn't accessible, an \nillegalaccessexception is thrown and caught in the equals method and false is \nreturned which in this case seems to be correct.\n\nthe root of the problem is the use of reflection without checking first whether \nthe names of the classes (via other.getclass().getname().equals(this.getclass\n().getname())) are the same (not the classes themselves, this is tested by the \nequals method) before invoking the getname method on the other object via \nreflection. if the names of the classes aren't equal, false can be returned \nimmediately instead of using reflection. only if the classnames are equal \nreflection should be used to determine equality.\n\nnote: the old implementation of enums.equals in the commons-lang 2.0 \ndistribution seems to work ok in the first case with both objects being \nsubclasses of enum. in the second case of the totally unrelated class, a \nclasscastexception is thrown, but according to joshua bloch (effective java) \nand the sdk-api-documentation for object.equals this violates the contract for \nequals because equals is supposed to deliver true or false for any two non null \nreferences.",
    [
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.nullToEmpty(T,Class)"
    ]
  ],
  "32": [
    "there's an error in the javadoc for the stringutils.chomp(string, string)\nmethod. one of the examples says:\n\nstringutils.chomp(\"foo \", \"foo\") = \"foo\"\n\nthis should be:\n\nstringutils.chomp(\"foo \", \"foo\")   = \"foo \"",
    [
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.isSorted(boolean)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.isSorted(double)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.isSorted(long)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.isSorted(int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAll(Object,BitSet)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.isSorted(short)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.isSorted(T)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeElements(byte,byte)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.compare(T,T)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.isSorted(float)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.isSorted(char)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.isSorted(byte)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.isSorted(T,Comparator)",
      "src/main/java/org/apache/commons/lang3/BooleanUtils.java@org.apache.commons.lang3.BooleanUtils.compare(boolean,boolean)",
      "src/main/java/org/apache/commons/lang3/CharUtils.java@org.apache.commons.lang3.CharUtils.isAsciiAlphanumeric(char)",
      "src/main/java/org/apache/commons/lang3/CharUtils.java@org.apache.commons.lang3.CharUtils.compare(char,char)",
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.compare(long,long)",
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.compare(short,short)",
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.compare(byte,byte)",
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.compare(int,int)"
    ]
  ],
  "746": [
    "numberutils.createnumber() should work equally for 0x1234 and 0x1234; currently 0x1234 generates a numberformatexception\n\ninteger.decode() handles both upper and lower case hex.",
    [
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.createNumber(String)"
    ]
  ],
  "34": [
    "this stems from a discussion on commons-user.\n\nthe basic idea is that tostringstyle could be customized to include an optional\njava.text dataformat object. if the attched patch were in (mod some formatting\nand unit tests which i can do), user could write code like this:\n\nimport java.lang.reflect.field;\nimport java.text.simpledateformat;\nimport java.util.date;\n\nimport org.apache.commons.lang.builder.reflectiontostringbuilder;\nimport org.apache.commons.lang.builder.tostringstyle;\n\npublic class testrtsb {\n\n    static class mytostringstyle extends tostringstyle {\n        mytostringstyle() {\n            this.setdateformat(new simpledateformat(\"yyyy-mm-dd\"));\n        }\n    }\n\n    public static void main(string[] arguments) {\n        system.out.println(new testrtsb());\n    }\n    \n    private int foo = 22;\n\n    private date mydate = new date();\n\n    public string tostring() {\n        return new reflectiontostringbuilder(this, new\nmytostringstyle()).tostring();\n    }\n\n// use tostringstyle.setdateformat instead of:\n//\n//    public string tostring0() {\n//        return (new reflectiontostringbuilder(this) {\n//            protected object getvalue(field field) throws\nillegalargumentexception, illegalaccessexception {\n//                object value = super.getvalue(field);\n//                if (\"mydate\".equals(field.getname())) {\n//                    return new simpledateformat(\"yyyy-mm-dd\").format(value);\n//                } else {\n//                    return value;\n//                }\n//            }\n//        }).tostring();\n//    }\n}\n\nany thoughts?",
    [
      "src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java@org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.resetIndent()",
      "src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java@org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.appendDetail(StringBuffer,String,int)",
      "src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java@org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java@org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.spacer(int)",
      "src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java@org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.MultilineRecursiveToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java@org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.appendDetail(StringBuffer,String,double)",
      "src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java@org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.appendDetail(StringBuffer,String,float)",
      "src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java@org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.appendDetail(StringBuffer,String,short)",
      "src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java@org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.appendDetail(StringBuffer,String,byte)",
      "src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java@org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.reflectionAppendArrayDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java@org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.appendDetail(StringBuffer,String,boolean)",
      "src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java@org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.appendDetail(StringBuffer,String,long)",
      "src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java@org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.appendDetail(StringBuffer,String,char)"
    ]
  ],
  "1245": [
    "add back method\n java.lang.stringbuffer applyrules(java.util.calendar, java.lang.stringbuffer)",
    [
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.applyRules(Calendar,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.applyRules(Calendar,StringBuffer)"
    ]
  ],
  "1248": [
    "when the code was migrated from stringbuffer to appendable in lang-1152.\nwe've lost the ability to modify the buffer (setcharat) \nthe new implementation of appendfulldigits allocate a temporary char array to work around that limitation.\nthis is a major source of memory allocation which is not present in version 3.4.",
    [
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.appendFullDigits(Appendable,int,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.appendFullDigits(Appendable,int,int)"
    ]
  ],
  "1004": [
    "this method has several flaws:\n\n1. javadoc says: \"the format used is iso8601-like: h:m:s.s.\" but the method call supplies \"h:mm:ss.sss\"\n2. iso time never omits leading zeros, so the proper pattern must be \"hh:mm:ss.sss\"\n3. the method name says: \"hms\" but includes the second fraction.\n\nsince the use of fractions is optional, the method should use \"hh:mm:ss\" and update the javadoc as well.",
    [
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.Token.formatDurationHMS(long)",
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.DurationFormatUtils.formatDurationHMS(long)"
    ]
  ],
  "1003": [
    "it spits out complete garbage.\n\n{code}\nsystem.out.println(durationformatutils.formatdurationhms(-3454));\nsystem.out.println(durationformatutils.formatperiodiso(4000, 3000));\n{code}\n\n{noformat}\n0:00:-3.-454\np-1y11m30dt23h59m59.000s\n{noformat}\n\nit should throw an {{illegalargumentexception}} if duration is < 0 or period diff is < 0.",
    [
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.Token.formatPeriod(long,long,String,boolean,TimeZone)",
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.DurationFormatUtils.formatDuration(long,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.Token.formatDuration(long,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.DurationFormatUtils.formatPeriod(long,long,String,boolean,TimeZone)",
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.Token.formatPeriod(long,long,String,boolean,TimeZone)",
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.DurationFormatUtils.formatDuration(long,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.Token.formatDuration(long,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.DurationFormatUtils.formatPeriod(long,long,String,boolean,TimeZone)"
    ]
  ],
  "1348": [
    "the following code\n{code:java}\nfinal method method = enum.class.getmethod(\"valueof\", class.class, string.class);\nfinal string typetext = typeutils.tostring(method.getgenericreturntype());\n{code}\n\nthrows the following\n\n{code:none}\nexception in thread \"main\" java.lang.stackoverflowerror\n\tat sun.reflect.generics.reflectiveobjects.parameterizedtypeimpl.getrawtype(parameterizedtypeimpl.java:126)\n\tat sun.reflect.generics.reflectiveobjects.parameterizedtypeimpl.getrawtype(parameterizedtypeimpl.java:40)\n\tat org.apache.commons.lang3.reflect.typeutils.parameterizedtypetostring(typeutils.java:1790)\n\tat org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1666)\n\tat org.apache.commons.lang3.reflect.typeutils.appendallto(typeutils.java:1846)\n\tat org.apache.commons.lang3.reflect.typeutils.typevariabletostring(typeutils.java:1775)\n\tat org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1672)\n\tat org.apache.commons.lang3.reflect.typeutils.appendallto(typeutils.java:1846)\n\tat org.apache.commons.lang3.reflect.typeutils.parameterizedtypetostring(typeutils.java:1803)\n\tat org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1666)\n\tat org.apache.commons.lang3.reflect.typeutils.appendallto(typeutils.java:1846)\n\tat org.apache.commons.lang3.reflect.typeutils.typevariabletostring(typeutils.java:1775)\n\tat org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1672)\n\tat org.apache.commons.lang3.reflect.typeutils.appendallto(typeutils.java:1846)\n\tat org.apache.commons.lang3.reflect.typeutils.parameterizedtypetostring(typeutils.java:1803)\n\tat org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1666)\n\tat org.apache.commons.lang3.reflect.typeutils.appendallto(typeutils.java:1846)\n\tat org.apache.commons.lang3.reflect.typeutils.typevariabletostring(typeutils.java:1775)\n\tat org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1672)\n\tat org.apache.commons.lang3.reflect.typeutils.appendallto(typeutils.java:1846)\n\tat org.apache.commons.lang3.reflect.typeutils.parameterizedtypetostring(typeutils.java:1803)\n\tat org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1666)\n\tat org.apache.commons.lang3.reflect.typeutils.appendallto(typeutils.java:1846)\n\tat org.apache.commons.lang3.reflect.typeutils.typevariabletostring(typeutils.java:1775)\n\tat org.apache.commons.lang3.reflect.typeutils.tostring(typeutils.java:1672)\n...\n{code}",
    [
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.GenericArrayTypeImpl.appendRecursiveTypes(StringBuilder,int,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeBuilder.parameterizedTypeToString(ParameterizedType)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.GenericArrayTypeImpl.findRecursiveTypes(ParameterizedType)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeBuilder.toString(T)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeImpl.parameterizedTypeToString(ParameterizedType)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.TypeUtils.containsVariableTypeSameParametrizedTypeBound(TypeVariable,ParameterizedType)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.GenericArrayTypeImpl.parameterizedTypeToString(ParameterizedType)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.ParameterizedTypeImpl.containsVariableTypeSameParametrizedTypeBound(TypeVariable,ParameterizedType)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeImpl.findRecursiveTypes(ParameterizedType)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.ParameterizedTypeImpl.appendRecursiveTypes(StringBuilder,int,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeImpl.toString(T)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.TypeUtils.findRecursiveTypes(ParameterizedType)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeBuilder.containsVariableTypeSameParametrizedTypeBound(TypeVariable,ParameterizedType)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeImpl.appendRecursiveTypes(StringBuilder,int,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.ParameterizedTypeImpl.findRecursiveTypes(ParameterizedType)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.GenericArrayTypeImpl.toString(T)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.TypeUtils.toString(T)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.ParameterizedTypeImpl.parameterizedTypeToString(ParameterizedType)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeBuilder.appendRecursiveTypes(StringBuilder,int,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.TypeUtils.parameterizedTypeToString(ParameterizedType)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.GenericArrayTypeImpl.containsVariableTypeSameParametrizedTypeBound(TypeVariable,ParameterizedType)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeImpl.containsVariableTypeSameParametrizedTypeBound(TypeVariable,ParameterizedType)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.ParameterizedTypeImpl.toString(T)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeBuilder.findRecursiveTypes(ParameterizedType)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.TypeUtils.appendRecursiveTypes(StringBuilder,int,Type)"
    ]
  ],
  "1349": [
    "see\n\nhttps://stackoverflow.com/questions/45603317/org-apache-commons-lang3-builder-equalsbuilder\n\nand\n\nhttps://github.com/apache/commons-lang/pull/282\n\nfor details.",
    [
      "src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java@org.apache.commons.lang3.builder.EqualsBuilder.isRegistered(Object,Object)"
    ]
  ],
  "624": [
    "can be replicated in the android emulator quite easily.\n\nstack trace:\n\n{noformat}\n\nat org.apache.commons.lang.builder.tostringbuilder.<clinit>(tostringbuilder.java:98)\ne/androidruntime( 1681): \t... 17 more\ne/androidruntime( 1681): caused by: java.lang.exceptionininitializererror\ne/androidruntime( 1681): \tat org.apache.commons.lang.builder.tostringstyle$multilinetostringstyle.<init>(tostringstyle.java:2276)\ne/androidruntime( 1681): \tat org.apache.commons.lang.builder.tostringstyle.<clinit>(tostringstyle.java:94)\ne/androidruntime( 1681): \t... 18 more\ne/androidruntime( 1681): caused by: java.lang.stringindexoutofboundsexception\ne/androidruntime( 1681): \tat java.lang.string.substring(string.java:1571)\ne/androidruntime( 1681): \tat org.apache.commons.lang.systemutils.getjavaversionasfloat(systemutils.java:1153)\ne/androidruntime( 1681): \tat org.apache.commons.lang.systemutils.<clinit>(systemutils.java:818)\n{noformat}",
    [
      "src/main/java/org/apache/commons/lang3/ClassUtils.java@org.apache.commons.lang3.ClassUtils.isAssignable(Class,Class)",
      "src/main/java/org/apache/commons/lang3/SystemUtils.java@org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(String)",
      "src/main/java/org/apache/commons/lang3/SystemUtils.java@org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(JavaVersion)"
    ]
  ],
  "571": [
    "arrayutils.add(t[] array, t element) can create an unexpected classcastexception.\n\nfor example, the following code compiles without a warning:\n\n{code}\nstring[] sa = arrayutils.add(stringarray, astring);\n{code}\n\nand works fine, provided at least one of the parameters is non-null. however, if both parameters are null, the add() method returns an object[] array, hence the exception.\n\nif both parameters are null, it's not possible to determine the correct array type to return, so it seems to me this should be disallowed.\n\ni think the method ought to be changed to throw illegalparameterexception when both parameters are null.\n",
    [
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.add(T,T)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.add(T,int,T)"
    ]
  ],
  "607": [
    "stringutils.containsany methods incorrectly matches unicode 2.0+ supplementary characters.\n\nfor example, define a test fixture to be the unicode character u+20000 where u+20000 is written in java source as \"\\ud840\\udc00\"\n\n\tprivate static final string charu20000 = \"\\ud840\\udc00\";\n\tprivate static final string charu20001 = \"\\ud840\\udc01\";\n\nyou can see unicode supplementary characters correctly implemented in the jre call:\n\n\tassertequals(-1, charu20000.indexof(charu20001));\n\nbut this is broken:\n\n\tassertequals(false, stringutils.containsany(charu20000, charu20001));\n\tassertequals(false, stringutils.containsany(charu20001, charu20000));\n\nthis is fine:\n\n\tassertequals(true, stringutils.contains(charu20000 + charu20001, charu20000));\n\tassertequals(true, stringutils.contains(charu20000 + charu20001, charu20001));\n\tassertequals(true, stringutils.contains(charu20000, charu20000));\n\tassertequals(false, stringutils.contains(charu20000, charu20001));\n\nbecause the method calls the jre to perform the match.\n\nmore than you want to know:\n- http://java.sun.com/developer/technicalarticles/intl/supplementary/",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.containsAny(String,char)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.indexOfAnyBut(CharSequence,char)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.indexOfAny(CharSequence,char)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.containsNone(CharSequence,char)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.indexOfAnyBut(String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.containsAny(CharSequence,char)"
    ]
  ],
  "1229": [
    "we observed a severe performance regression in hashcodebuilder in 3.5 trunk compared to 3.4 release. we get about 20% of the throughput in 3.5 trunk for common cases compared to 3.4 release. previously there was no noticeable overhead of using hashcodebuilder. investigating we found the performance degradation was caused by the fix for lang-456. it causes the method to be too large to be inlined and escape analysis to fail (see lang-1218 for a related discussion).\n\nwe currently do not see a way to keep the 3.4 performance and support cyclic graphs. the append methods have not supported cycles for so long we feel it's de facto part of the contract by now. since neither the jdk nor the guava hashcode helper methods support cyclic graphs we don't believe this is an unreasonable assumption. in addition equalsbuilder#append(object,object) doesn't support cycles.\n\nif supporting cycles is a requirement we propose the introduction of new #appendrecursive (or named differently) methods to both hashcodebuilder and equalsbuilder that add cycle guards. if that is an acceptable compromise we would be willing to provide patches.",
    [
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.appendArray(Object)"
    ]
  ],
  "64": [
    "add the following to equalsbuildertest:\n\n    public void testsubclassing()\n    {\n        testobject to2 = new testobject(5);\n        testobject to1ter = new testsubobject(4, 10);\n        testobject to1bis = new testsubobject(4, 10);\n        testobject to1 = new testobject(4);\n        testreflectionequalsequivalencerelationship(to1, to1bis, to1ter, to2,\nnew testobject(), false);\n    }\n\nas you can see, the whole concept behind appendsuper\nand such produces equals methods which are not symmetric\nand thus do not fulfill the equals contract.\n\nthe two general solutions i'm aware of are: (1) make the equals\nmethod final, so that subclasses are required to all\nuse the same equals method as each other and the superclass,\nor (2) use foo.getclass() == bar.getclass() instead\nof instanceof, so that an instance of the superclass is\nnever equals to an instance of a subclass.\n\nin particular situations there might be specific solutions (look at\nthe way equals is defined for list and set for example).",
    [
      "src/main/java/org/apache/commons/lang3/EnumUtils.java@org.apache.commons.lang3.EnumUtils.generateBitVectors(Class,Iterable)",
      "src/main/java/org/apache/commons/lang3/EnumUtils.java@org.apache.commons.lang3.EnumUtils.generateBitVectors(Class,E)",
      "src/main/java/org/apache/commons/lang3/EnumUtils.java@org.apache.commons.lang3.EnumUtils.processBitVectors(Class,long)",
      "src/main/java/org/apache/commons/lang3/EnumUtils.java@org.apache.commons.lang3.EnumUtils.generateBitVector(Class,Iterable)",
      "src/main/java/org/apache/commons/lang3/EnumUtils.java@org.apache.commons.lang3.EnumUtils.checkBitVectorable(Class)",
      "src/main/java/org/apache/commons/lang3/EnumUtils.java@org.apache.commons.lang3.EnumUtils.generateBitVector(Class,E)",
      "src/main/java/org/apache/commons/lang3/EnumUtils.java@org.apache.commons.lang3.EnumUtils.processBitVector(Class,long)",
      "src/main/java/org/apache/commons/lang3/EnumUtils.java@org.apache.commons.lang3.EnumUtils.asEnum(Class)"
    ]
  ],
  "977": [
    "numericentityescaper will incorrectly encode supplementary unicode characters depending on the char length of the first code point in the string.\n\nto reproduce, run:\n{code}\nstring escaped = numericentityescaper.between(0x7f, integer.max_value).translate(\"a \\ud83d\\udc14 \\ud83d\\udca9\");\n{code}\n\nexpected:\n{code}\nescaped == \"a &#128020; &#128169;\"\n{code}\n\nactual:\n{code}\nescaped == \"a &#128020;&#56340; &#128169;&#56489;\"\n{code}\n\nthe issue lies in charsequencetranslator.translate() and the way it checks code points to figure out how many characters it needs to consume.  specifically, the issue is on [line 95|https://github.com/apache/commons-lang/blob/trunk/src/main/java/org/apache/commons/lang3/text/translate/charsequencetranslator.java#l95]:\n\n{code}\n// contract with translators is that they have to understand codepoints \n// and they just took care of a surrogate pair\nfor (int pt = 0; pt < consumed; pt++) {\n    pos += character.charcount(character.codepointat(input, pt));\n}\n{code}\n\nthe point of this code is to check the charcount of the character that was just translated and move ahead by that many characters in the input string.  the bug is that it's indexing into the string using 'pt', which is _always_ 0 at the beginning of the loop.  it's effetively checking the charcount of first character in the string every time.\n\na patch is attached that fixes the issue and includes supporting unit tests.  fixing this issue in charsequencetranslator uncovered an issue in csvescaper/csvunescaper caused by the fact that it wasn't respecting the \"code point contract\" described in charsequencetranslator.translate.  the fix there was to have the translate methods return the string's code point count rather than character count.",
    [
      "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java@org.apache.commons.lang3.CsvUnescaper.translate(CharSequence,int,Writer)",
      "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java@org.apache.commons.lang3.StringEscapeUtils.translate(CharSequence,int,Writer)",
      "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java@org.apache.commons.lang3.CsvEscaper.translate(CharSequence,int,Writer)",
      "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java@org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequence,Writer)"
    ]
  ],
  "818": [
    "the work on lang-462 has introduced a time zone formatting bug in fastdateformat in commons-lang3.\n\nthe problem can be seen by this snippet:\n{code}\n// always prints timezone name of machine's default timezone, ignoring tz\n// set on calendar, even though the printed time itself respects calendar's tz.\ncalendar mycal = calendar.getinstance(timezone.gettimezone(\"us/central\"));\nsystem.out.println(fastdateformat.getinstance(\"h:mma z\").format(mycal));\n{code}\n\nif you happen to be in us/central, this will print the right thing, but just try it with us/eastern, us/pacific, etc.  it will print the time in the correct timezone, but the timezone name at the end (the \"z\" pattern) will always be the system default timezone.  this is a regression against commons-lang 2.x.\n\nbasically, when the \"forced time zone\" code was removed, the timezonenamerule class stopped respecting the calendar instance's timezone, and instead now always uses the mtimezone of the fastdateformat instance itself (which is only supposed to be used when formatting timezone-less objects such as date or long).\n\nthe removal of the forced time zone stuff is surely the right thing to do (it was a mess).  i think the fix is to change the timezonenamerule inner class to not take a timezone instance, but rather to use the timezone on the calendar instance passed into appendto(), just like timezonenumberrule does.  presumably then for efficiency, one would use the gettimezonedisplay() package-static method to quickly retrieve the required timezone's display name.",
    [
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.TimeZoneNameRule(TimeZone,Locale,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.TimeZoneNameRule(TimeZone,Locale,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.TimeZoneNameRule(TimeZone,Locale,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.TimeZoneNameRule(TimeZone,Locale,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.TimeZoneNameRule(TimeZone,Locale,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.TimeZoneNameRule(TimeZone,Locale,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.TimeZoneNameRule(TimeZone,Locale,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.TimeZoneNameRule(TimeZone,Locale,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.TimeZoneNameRule(TimeZone,Locale,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.TimeZoneNameRule(TimeZone,Locale,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.TimeZoneNameRule(TimeZone,Locale,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.TimeZoneNameRule(TimeZone,Locale,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.TimeZoneNameRule(TimeZone,Locale,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.TimeZoneNameRule(TimeZone,Locale,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.TimeZoneNameRule(TimeZone,Locale,int)"
    ]
  ],
  "972": [
    "isnumber() does not allow for 0xabcd whereas createnumber() allows for both 0xabcd and 0xabcd",
    [
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.isNumber(String)"
    ]
  ],
  "971": [
    "when trying to convert \"0085\" with numberutils.createinteger(string) an numberformatexception is thrown. \n\nthis is because the leading 0 causes the string to be evaluated as an octal, 8 is not a valid octal.\n\nhowever numberutils#isnumber(string) evaluates to true, even so it cannot be converted.  \n\n",
    [
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.isNumber(String)"
    ]
  ],
  "747": [
    "numberutils.createlong() does not handle hex numbers, but createinteger() handles hex and octal.\nthis seems odd.\n\nnumberutils.createnumber() assumes that hex numbers can only be integer.\nagain, why not handle bigger hex numbers?\n\n==\n\nit is trivial to fix createlong() - just use long.decode() instead of valueof().\nit's not clear why this was not done originally - the decode() method was added to both integer and long in java 1.2.\n\nfixing createnumber() is also fairly easy - if the hex string has more than 8 digits, use long.\n\nshould we allow for leading zeros in an integer? \nif not, the length check is trivial.",
    [
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.createNumber(String)",
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.createNumber(String)"
    ]
  ],
  "978": [
    "gary gregory has reported failing tests during the vote for lang 3.3 rc1, when building with:\n\n{code}\njava version \"1.8.0\"\njava(tm) se runtime environment (build 1.8.0-b128)\njava hotspot(tm) 64-bit server vm (build 25.0-b69, mixed mode)\n\napache maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9;\n2014-02-14t12:37:52-05:00)\nmaven home: c:\\java\\apache-maven-3.2.1\\bin\\..\njava version: 1.8.0, vendor: oracle corporation\njava home: c:\\program files\\java\\jdk1.8.0\\jre\ndefault locale: en_us, platform encoding: cp1252\nos name: \"windows 7\", version: \"6.1\", arch: \"amd64\", family: \"dos\"\n{code}\n\n{code}\nfastdateformat_parsertest>fastdateparsertest.testparses:242->fastdateparsertest.validatesdfformatfdpparseequality:219 \u00bb parse fastdateparsertest.testparses:242->validatesdfformatfdpparseequality:219 \u00bb parse\n\nrunning org.apache.commons.lang3.time.fastdateformat_parsertest /1/2/10/5/??/0/0/?/+0000 ja_jp_jp_#u-ca-japanese 1867 g/y/m/d/h/a/m/s/e/z america/new_york tests run: 29, failures: 0, errors: 1, skipped: 0, time elapsed: 2.491 sec <<< failure! - in org.apache.commons.lang3.time.fastdateformat_parsertest testparses(org.apache.commons.lang3.time.fastdateformat_parsertest) time elapsed: 1.492 sec <<< error! java.text.parseexception: (the ja_jp_jp_#u-ca-japanese locale does not support dates before 1868 ad)\n{code}\n\nsee: http://markmail.org/message/suvorq3xrqmimnui",
    [
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.DurationFormatUtils.format(Token,long,long,long,long,long,long,long,boolean)",
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.Token.format(Token,long,long,long,long,long,long,long,boolean)"
    ]
  ],
  "2": [
    "hi,\n\nthe javadoc examples for the stringutils.splitbywholeseparator(...) methods \nare not correct.\n\n- the examples of splitbywholeseperator(string,string) are illustrating the \nusage of the stringutils.split(string,string) method.\n- the 6th example of splitbywholeseperator(string,string,int) is not correct \nand should be removed.\n\nregards,\nmaarten",
    [
      "src/main/java/org/apache/commons/lang3/text/translate/CodePointTranslator.java@org.apache.commons.lang3.text.translate.CodePointTranslator.translate(CharSequence,int,Writer)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.getRegistry()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.isRegistered(Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.getRegistry()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.getRegistry()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.isRegistered(Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.isRegistered(Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.isRegistered(Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.isRegistered(Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.getRegistry()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.getRegistry()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.getRegistry()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.isRegistered(Object)"
    ]
  ],
  "6": [
    "append two arrays of any object type to an equalsbuilder using equalsbuilder.append(object[], \nobject[]) -- we'll call the first 'lhs' and the second 'rhs'. if, for any i, lhs[i] is not null, rhs[i] is not null, \nand rhs[i] is not of the same type as, or a subtype of, lhs[i], then the equalsbuilder will return false.\n\nhowever, this behavior is incorrect. while rare, it is perfectly valid in java to define an equals() method \non a class a that will return true when passed in an object of some class b, where b is not the same as a \nnor a subtype of a. (a conceptual example is comparing a rgbcolor to a cmykcolor, where rgbcolor is \nnot a subclass of cmykcolor, nor vice-versa. in this example, the equalsbuilder will return false, \nwhether the equals() method is defined on rgbcolor to explicitly check cmykcolors, or even if you \ndefine a base-class color.equals() method that does an abstract comparison.)\n\nto reproduce:\n\npublic static class a {\n  private int a;\n  public a(int a) { this.a = a; }\n  public boolean equals(object o) {\n    if (o == this) return true;\n    if (o instanceof a) return this.a = ((a) o).geta();\n    if (o instanceof b) return this.a = ((b) o).getb();\n    return false;\n  }\n  public int geta() { return this.a; }\n}\n\npublic static class b {\n  private int b;\n  public b(int b) { this.b = b; }\n  public boolean equals(object o) {\n    if (o == this) return true;\n    if (o instanceof a) return this.b = ((a) o).geta();\n    if (o instanceof b) return this.b = ((b) o).getb();\n    return false;\n  }\n  public int getb() { return this.b; }\n}\n\nobject[] x = new object[] { new a(1) };\nobject[] y = new object[] { new b(1) };\n\nsystem.err.println(\"x[0].equals(y[0])? \" + x[0].equals(y[0]));\nsystem.err.println(\"does equalsbuilder think the arrays are equal? \" + (new equalsbuilder().append(x, \ny).isequals()));\n\nthis program will output:\n\ntrue\nfalse\n\nthe attached patch adds to an existing unit-test case some code that proves the existence of this bug, \nand also fixes it. (it also fixes com-1842.)",
    [
      "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java@org.apache.commons.lang3.text.ExtendedMessageFormat.hashCode()",
      "src/main/java/org/apache/commons/lang3/concurrent/ConstantInitializer.java@org.apache.commons.lang3.concurrent.ConstantInitializer.equals(Object)",
      "src/main/java/org/apache/commons/lang3/tuple/Pair.java@org.apache.commons.lang3.tuple.Pair.equals(Object)",
      "src/main/java/org/apache/commons/lang3/tuple/Triple.java@org.apache.commons.lang3.tuple.Triple.equals(Object)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.join(Iterator,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.joinWith(String,Object)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.join(Iterator,char)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(Iterator,String)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(Iterable,String)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderWriter.appendWithSeparators(Object,String)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(Object,String)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderReader.appendWithSeparators(Iterator,String)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderTokenizer.appendWithSeparators(Iterable,String)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderWriter.appendWithSeparators(Iterator,String)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderReader.appendWithSeparators(Object,String)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderTokenizer.appendWithSeparators(Object,String)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderReader.appendWithSeparators(Iterable,String)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderTokenizer.appendWithSeparators(Iterator,String)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderWriter.appendWithSeparators(Iterable,String)",
      "src/main/java/org/apache/commons/lang3/AnnotationUtils.java@org.apache.commons.lang3.AnnotationUtils.equals(Annotation,Annotation)",
      "src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java@org.apache.commons.lang3.exception.ExceptionUtils.getCauseUsingMethodName(Throwable,String)",
      "src/main/java/org/apache/commons/lang3/SerializationUtils.java@org.apache.commons.lang3.SerializationUtils.deserialize(InputStream)",
      "src/main/java/org/apache/commons/lang3/SerializationUtils.java@org.apache.commons.lang3.ClassLoaderAwareObjectInputStream.deserialize(InputStream)",
      "src/main/java/org/apache/commons/lang3/SerializationUtils.java@org.apache.commons.lang3.SerializationUtils.serialize(Serializable,OutputStream)",
      "src/main/java/org/apache/commons/lang3/SerializationUtils.java@org.apache.commons.lang3.ClassLoaderAwareObjectInputStream.serialize(Serializable,OutputStream)",
      "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java@org.apache.commons.lang3.reflect.MethodUtils.getMatchingMethod(Class,String,Class)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.appendTo(StringBuffer,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.parsePattern()"
    ]
  ],
  "4": [
    "i just discovered that the method tostringbuilder.reflectiontostring() does not \nwork in a class hierarchy.\n\nfor example:\n\nclass a defines inst var a.\nclass b extends a defines inst var b.\n\nnew a().tostring returns \"a=...\"\nnew b().tostring returns \"b=...\"\n\nwhen i expected new b().tostring to return \"a=...,b=...\"\n\ncan i use reflectiontostring() to accomplish this?\n\nthank you for considering this request.\n\ngary",
    [
      "src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java@org.apache.commons.lang3.text.translate.OctalUnescaper.isZeroToThree(char)",
      "src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java@org.apache.commons.lang3.text.translate.OctalUnescaper.isOctalDigit(char)",
      "src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java@org.apache.commons.lang3.text.translate.OctalUnescaper.translate(CharSequence,int,Writer)"
    ]
  ],
  "630": [
    "findbugs:\n\nmutable.mutableobject defines equals(mutableobject) method and uses object.equals(object)\n\nthis class defines a covariant version of the equals() method, but inherits the normal equals(object) method defined in the base java.lang.object class.  the class should probably define a boolean equals(object) method. \n",
    [
      "src/main/java/org/apache/commons/lang3/mutable/MutableObject.java@org.apache.commons.lang3.mutable.MutableObject.equals(Object)"
    ]
  ],
  "635": [
    "the parameter \"comparetransients\" is ignored and false is always used, as a short look in the code shows:\n\n{quote}\n    return reflectioncompare(lhs, rhs, false, reflectuptoclass, null);\n{quote}",
    [
      "src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java@org.apache.commons.lang3.builder.CompareToBuilder.reflectionCompare(Object,Object,boolean,Class)"
    ]
  ],
  "1214": [
    "classutils.getclass(classutils.class.getclassloader(), \"void\") throws \"classnotfoundexception: [v\".\n\nroot cause: classutils contains an abbreviationmap for use in dealing with abbreviated primitive types like \"[i\" and \"[j\". however, [this commit|https://git-wip-us.apache.org/repos/asf?p=commons-lang.git;a=blobdiff;f=src/main/java/org/apache/commons/lang3/classutils.java;h=c15636ed99af1913d8436a2761d2e3e45b0c8b1a;hp=2492182dd6a383bbec970be3c58799bf89929ccf;hb=1d6ab5b8c0bcc69fe5984b882374e856ec198d0e;hpb=609319df2216e00d8f158e5fc5ce7756134b7cb0] introduces a \"void -> v\" mapping for \"completeness\".\n\nthis seems wholly erroneous, since the maps are used only for [primitive array abbreviations|http://docs.oracle.com/javase/6/docs/api/java/lang/class.html#getname%28%29], and \"void/v\" is not among them.",
    [
      "src/main/java/org/apache/commons/lang3/ClassUtils.java@org.apache.commons.lang3.ClassUtils.getClass(ClassLoader,String,boolean)"
    ]
  ],
  "638": [
    "numberutils createnumber throws a stringindexoutofboundsexception instead of numberformatexception when a string containing both possible exponent indicators is passed in.\none example of such a string is \"1ee\".\n",
    [
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.createNumber(String)"
    ]
  ],
  "1128": [
    "placeholder for https://github.com/apache/commons-lang/pull/74\n\n{quote}\nexcept number, boolean, array and nested object structures, other types like char, string, date etc. in java should be appendasstring.\n\nadd method {{appenddetail(stringbuffer buffer, string fieldname, char value) to jsontostringstyle}}\nmodify {{appenddetail(stringbuffer buffer, string fieldname, object value)}}\n{quote}",
    [
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.isJsonArray(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.isJsonArray(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.appendDetail(StringBuffer,String,char)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.appendDetail(StringBuffer,String,char)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.isJsonArray(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.isJsonObject(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.appendDetail(StringBuffer,String,char)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.isJsonArray(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.isJsonObject(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.appendDetail(StringBuffer,String,char)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.isJsonObject(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.appendDetail(StringBuffer,String,char)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.isJsonArray(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.isJsonObject(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.isJsonArray(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.isJsonObject(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.isJsonObject(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.isJsonArray(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.appendDetail(StringBuffer,String,char)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.isJsonObject(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.appendDetail(StringBuffer,String,char)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.isJsonObject(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.isJsonArray(String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.appendDetail(StringBuffer,String,char)"
    ]
  ],
  "1219": [
    "fastdateformat can't properly parse dates with daylight saving in the \"z\" pattern. it always returns date without daylight saving. test case:\n\n{code:java}\n\t\tsimpledateformat format = new simpledateformat(\"dd.mm.yyyy hh:mm:ss z\", locale.germany);\n\t\tdate d1 = format.parse(\"26.10.2014 02:00:00 mesz\");\n\t\tdate d2 = format.parse(\"26.10.2014 02:00:00 mez\");\n\t\tsystem.out.println(d1);\n\t\tsystem.out.println(d2);\n\t\tfastdateformat formatt = fastdateformat.getinstance(\"dd.mm.yyyy hh:mm:ss z\", locale.germany);\n\t\tdate d3 = formatt.parse(\"26.10.2014 02:00:00 mesz\");\n\t\tdate d4 = formatt.parse(\"26.10.2014 02:00:00 mez\");\n\t\tsystem.out.println(d3);\n\t\tsystem.out.println(d4);\t\n{code}\n\nreturns:\nsdf: sun oct 26 02:00:00 cest 2014\nsdf: sun oct 26 02:00:00 cet 2014\nfdf: sun oct 26 02:00:00 cet 2014\nfdf:  sun oct 26 02:00:00 cet 2014\n\nfastdateformat returns the same date, which is wrong.\n\nbug is in the fastdateparser.timezonestrategy.setcalendar:\n{code:java}\n@override\n        void setcalendar(final fastdateparser parser, final calendar cal, final string value) {\n            timezone tz;\n            if(value.charat(0)=='+' || value.charat(0)=='-') {\n                tz= timezone.gettimezone(\"gmt\"+value);\n            }\n            else if(value.startswith(\"gmt\")) {\n                tz= timezone.gettimezone(value);\n            }\n            else {\n                tz= tznames.get(value);\n                if(tz==null) {\n                    throw new illegalargumentexception(value + \" is not a supported timezone name\");\n                }\n            }\n            cal.settimezone(tz);\n        }\n{code}\n\nit's not enough to just call: cal.settimezone.\nif zone names in standard and daylight time are different, you have to check the name in dateformatsymbols.getinstance(locale).getzonestrings(); and if it's >= 3, you have to activate daylight mode.just like simpledateformat does it:\n{code:java}\n1491            // (abbreviation) for both standard and daylight time,\n1492            // let the time zone in the calendar decide which one.\n1493            if (!usesamename) {\n1494                calendar.set(calendar.zone_offset, tz.getrawoffset());\n1495                calendar.set(calendar.dst_offset,\n1496                             j >= 3 ? tz.getdstsavings() : 0);\n1497            }\n{code}\n",
    [
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.compare(String,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TzInfo.TzInfo(TimeZone,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.compare(String,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.appendDisplayNames(Calendar,Locale,int,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TzInfo.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.appendDisplayNames(Calendar,Locale,int,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.CaseInsensitiveTextStrategy(int,Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TzInfo.appendDisplayNames(Calendar,Locale,int,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.appendDisplayNames(Calendar,Locale,int,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.appendDisplayNames(Calendar,Locale,int,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.CaseInsensitiveTextStrategy(int,Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.CaseInsensitiveTextStrategy(int,Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TzInfo.CaseInsensitiveTextStrategy(int,Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.compare(String,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.appendDisplayNames(Calendar,Locale,int,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.CaseInsensitiveTextStrategy(int,Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.CaseInsensitiveTextStrategy(int,Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.appendDisplayNames(Calendar,Locale,int,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.compare(String,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.TzInfo(TimeZone,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.TzInfo(TimeZone,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.TzInfo(TimeZone,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.compare(String,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.TzInfo(TimeZone,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.appendDisplayNames(Calendar,Locale,int,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TzInfo.compare(String,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.appendDisplayNames(Calendar,Locale,int,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.TzInfo(TimeZone,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.appendDisplayNames(Calendar,Locale,int,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.compare(String,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.CaseInsensitiveTextStrategy(int,Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.CaseInsensitiveTextStrategy(int,Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.CaseInsensitiveTextStrategy(int,Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.compare(String,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.compare(String,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.TzInfo(TimeZone,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.TzInfo(TimeZone,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.compare(String,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.TzInfo(TimeZone,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.TzInfo(TimeZone,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.appendDisplayNames(Calendar,Locale,int,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.compare(String,String)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.TimeZoneStrategy(Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.CaseInsensitiveTextStrategy(int,Calendar,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.TzInfo(TimeZone,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.CaseInsensitiveTextStrategy(int,Calendar,Locale)"
    ]
  ],
  "984": [
    "durationformatutils assumes that the the number of days, hours, minutes, seconds and milliseconds can be expressed as an int when converted from a long duration in milliseconds.\n\nhowever even the number of days can exceed an int if the duration is large enough.\n\nit's unlikely that such large durations will often be used, but this restriction is not documented. it should be easy enough to use long fields instead of int.",
    [
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.DurationFormatUtils.paddedValue(long,boolean,int)",
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.Token.paddedValue(long,boolean,int)",
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.DurationFormatUtils.format(Token,long,long,long,long,long,long,long,boolean)",
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.Token.format(Token,long,long,long,long,long,long,long,boolean)",
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.DurationFormatUtils.formatDuration(long,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java@org.apache.commons.lang3.time.Token.formatDuration(long,String,boolean)"
    ]
  ],
  "92": [
    "when dateutils.parsecvs parses a time in \"h:mm z\" format, the resulting date is\n1/1/1970. is this appropriate, or would it be more appropriate for the resulting\ndate to be the current system date?\n\ni don't know what the cvs behavior is.",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.replaceFirst(String,String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.replaceAll(String,String,String)"
    ]
  ],
  "10": [
    "classutils.primitivetowrapper returns null when the specified class is\nvoid.type. because void.type is primitive but not present into\nprimitivewrappermap. should return void.type instead.",
    [
      "src/main/java/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.java@org.apache.commons.lang3.concurrent.AbstractCircuitBreaker.oppositeState()",
      "src/main/java/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.java@org.apache.commons.lang3.concurrent.AbstractCircuitBreaker.AbstractCircuitBreaker()",
      "src/main/java/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.java@org.apache.commons.lang3.concurrent.AbstractCircuitBreaker.changeState(State)",
      "src/main/java/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.java@org.apache.commons.lang3.concurrent.AbstractCircuitBreaker.isClosed()",
      "src/main/java/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.java@org.apache.commons.lang3.concurrent.AbstractCircuitBreaker.isOpen(State)",
      "src/main/java/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.java@org.apache.commons.lang3.concurrent.AbstractCircuitBreaker.removeChangeListener(PropertyChangeListener)",
      "src/main/java/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.java@org.apache.commons.lang3.concurrent.AbstractCircuitBreaker.isOpen()",
      "src/main/java/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.java@org.apache.commons.lang3.concurrent.AbstractCircuitBreaker.close()",
      "src/main/java/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.java@org.apache.commons.lang3.concurrent.AbstractCircuitBreaker.addChangeListener(PropertyChangeListener)",
      "src/main/java/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.java@org.apache.commons.lang3.concurrent.AbstractCircuitBreaker.open()",
      "src/main/java/org/apache/commons/lang3/concurrent/CircuitBreakingException.java@org.apache.commons.lang3.concurrent.CircuitBreakingException.CircuitBreakingException(Throwable)",
      "src/main/java/org/apache/commons/lang3/concurrent/CircuitBreakingException.java@org.apache.commons.lang3.concurrent.CircuitBreakingException.CircuitBreakingException(String)",
      "src/main/java/org/apache/commons/lang3/concurrent/CircuitBreakingException.java@org.apache.commons.lang3.concurrent.CircuitBreakingException.CircuitBreakingException()",
      "src/main/java/org/apache/commons/lang3/concurrent/CircuitBreakingException.java@org.apache.commons.lang3.concurrent.CircuitBreakingException.CircuitBreakingException(String,Throwable)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.EventCountCircuitBreaker(int,long,TimeUnit,int,long,TimeUnit)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.updateCheckIntervalData(CheckIntervalData,CheckIntervalData)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.fetchCheckInterval(EventCountCircuitBreaker)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.open()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.increment(int)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.getClosingInterval()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.increment(int)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.nextCheckIntervalData(int,CheckIntervalData,State,long)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.createStrategyMap()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.getClosingInterval()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.now()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.getCheckIntervalStart()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.EventCountCircuitBreaker(int,long,TimeUnit,int)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.now()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.getCheckIntervalStart()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.fetchCheckInterval(EventCountCircuitBreaker)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.EventCountCircuitBreaker(int,long,TimeUnit,int,long,TimeUnit)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.getOpeningInterval()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.increment(int)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.isStateTransition(EventCountCircuitBreaker,CheckIntervalData,CheckIntervalData)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.EventCountCircuitBreaker(int,long,TimeUnit)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.getEventCount()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.EventCountCircuitBreaker(int,long,TimeUnit,int)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.updateCheckIntervalData(CheckIntervalData,CheckIntervalData)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.EventCountCircuitBreaker(int,long,TimeUnit,int,long,TimeUnit)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.performStateCheck(int)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.incrementAndCheckState(Integer)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.checkState()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.incrementAndCheckState()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.isCheckIntervalFinished(EventCountCircuitBreaker,CheckIntervalData,long)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.nextCheckIntervalData(int,CheckIntervalData,State,long)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.EventCountCircuitBreaker(int,long,TimeUnit,int,long,TimeUnit)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.stateStrategy(State)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.createStrategyMap()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.isStateTransition(EventCountCircuitBreaker,CheckIntervalData,CheckIntervalData)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.changeStateAndStartNewCheckInterval(State)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.incrementAndCheckState()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.increment(int)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.getClosingInterval()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.getClosingInterval()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.getEventCount()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.open()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.CheckIntervalData(int,long)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.getOpeningThreshold()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.EventCountCircuitBreaker(int,long,TimeUnit)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.getOpeningThreshold()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.incrementAndCheckState()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.getClosingThreshold()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.increment(int)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.CheckIntervalData(int,long)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.fetchCheckInterval(EventCountCircuitBreaker)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.updateCheckIntervalData(CheckIntervalData,CheckIntervalData)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.EventCountCircuitBreaker(int,long,TimeUnit)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.nextCheckIntervalData(int,CheckIntervalData,State,long)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.incrementAndCheckState(Integer)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.isStateTransition(EventCountCircuitBreaker,CheckIntervalData,CheckIntervalData)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.CheckIntervalData(int,long)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.EventCountCircuitBreaker(int,long,TimeUnit,int,long,TimeUnit)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.getOpeningThreshold()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.isCheckIntervalFinished(EventCountCircuitBreaker,CheckIntervalData,long)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.checkState()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.incrementAndCheckState(Integer)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.getOpeningInterval()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.EventCountCircuitBreaker(int,long,TimeUnit,int)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.getClosingThreshold()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.createStrategyMap()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.incrementAndCheckState(Integer)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.getOpeningThreshold()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.stateStrategy(State)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.close()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.open()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.incrementAndCheckState()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.isCheckIntervalFinished(EventCountCircuitBreaker,CheckIntervalData,long)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.getEventCount()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.getCheckIntervalStart()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.getClosingThreshold()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.incrementAndCheckState(Integer)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.getClosingThreshold()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.getCheckIntervalStart()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.performStateCheck(int)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.updateCheckIntervalData(CheckIntervalData,CheckIntervalData)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.checkState()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.EventCountCircuitBreaker(int,long,TimeUnit)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.close()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.getClosingInterval()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.getEventCount()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.getOpeningThreshold()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.isCheckIntervalFinished(EventCountCircuitBreaker,CheckIntervalData,long)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.getOpeningInterval()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.performStateCheck(int)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.fetchCheckInterval(EventCountCircuitBreaker)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.checkState()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.changeStateAndStartNewCheckInterval(State)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.changeStateAndStartNewCheckInterval(State)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.now()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.open()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.CheckIntervalData(int,long)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.isCheckIntervalFinished(EventCountCircuitBreaker,CheckIntervalData,long)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.now()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.createStrategyMap()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.getClosingThreshold()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.performStateCheck(int)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.changeStateAndStartNewCheckInterval(State)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.close()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.open()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.getOpeningInterval()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.getCheckIntervalStart()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.getEventCount()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.getOpeningInterval()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.stateStrategy(State)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.updateCheckIntervalData(CheckIntervalData,CheckIntervalData)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.isStateTransition(EventCountCircuitBreaker,CheckIntervalData,CheckIntervalData)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.stateStrategy(State)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.EventCountCircuitBreaker(int,long,TimeUnit,int)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.nextCheckIntervalData(int,CheckIntervalData,State,long)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.EventCountCircuitBreaker(int,long,TimeUnit)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.EventCountCircuitBreaker(int,long,TimeUnit,int)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.createStrategyMap()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.stateStrategy(State)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.CheckIntervalData.changeStateAndStartNewCheckInterval(State)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.CheckIntervalData(int,long)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.nextCheckIntervalData(int,CheckIntervalData,State,long)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.fetchCheckInterval(EventCountCircuitBreaker)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.checkState()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.close()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyClosed.isStateTransition(EventCountCircuitBreaker,CheckIntervalData,CheckIntervalData)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategyOpen.now()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.close()",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.performStateCheck(int)",
      "src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java@org.apache.commons.lang3.concurrent.StateStrategy.incrementAndCheckState()",
      "src/main/java/org/apache/commons/lang3/concurrent/ThresholdCircuitBreaker.java@org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker.checkState()",
      "src/main/java/org/apache/commons/lang3/concurrent/ThresholdCircuitBreaker.java@org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker.close()",
      "src/main/java/org/apache/commons/lang3/concurrent/ThresholdCircuitBreaker.java@org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker.ThresholdCircuitBreaker(long)",
      "src/main/java/org/apache/commons/lang3/concurrent/ThresholdCircuitBreaker.java@org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker.getThreshold()",
      "src/main/java/org/apache/commons/lang3/concurrent/ThresholdCircuitBreaker.java@org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker.incrementAndCheckState(Long)"
    ]
  ],
  "12": [
    "the following is directly from the javadoc page. please see inline notes.\n\n*** begin quote ***\nto use this class write code as follows: \n\n public class person {\n   string name;\n   int age;\n   boolean issmoker;\n \n   ...\n \n   public string tostring() {\n     return new tostringbuilder(this).\n       append(name, \"name\").     //!! should be - append(\"name\", name).\n       append(age, \"age\").       //!! should be - append(\"age\", age).\n       append(smoker, \"smoker\"). //!! should be - append(\"smoker\", smoker).\n       tostring();\n   }\n }\n*** end quote ***\n\nin short, the order of arguments to the append method in the example have been \nreversed.\n\nthank you.",
    [
      "src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java@org.apache.commons.lang3.reflect.FieldUtils.removeFinalModifier(Field,boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.appendFieldStart(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.append(StringBuffer,String,short,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.append(StringBuffer,String,short,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.JsonToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.append(StringBuffer,String,byte,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.append(StringBuffer,String,long,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.append(StringBuffer,String,float,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.JsonToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.append(StringBuffer,String,int,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.append(StringBuffer,String,Object,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.append(StringBuffer,String,boolean,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.append(StringBuffer,String,float,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.append(StringBuffer,String,float,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.append(StringBuffer,String,char,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.JsonToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.append(StringBuffer,String,double,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.append(StringBuffer,String,boolean,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.append(StringBuffer,String,boolean,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.append(StringBuffer,String,int,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.appendValueAsString(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.readResolve()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.append(StringBuffer,String,int,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.appendFieldStart(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.append(StringBuffer,String,int,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.append(StringBuffer,String,byte,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.appendValueAsString(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.readResolve()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.appendFieldStart(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.append(StringBuffer,String,short,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.append(StringBuffer,String,double,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.readResolve()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.append(StringBuffer,String,double,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.JsonToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.append(StringBuffer,String,Object,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.append(StringBuffer,String,byte,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.append(StringBuffer,String,Object,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.append(StringBuffer,String,Object,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.append(StringBuffer,String,float,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.append(StringBuffer,String,short,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.append(StringBuffer,String,char,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.append(StringBuffer,String,byte,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.appendFieldStart(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.append(StringBuffer,String,char,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.append(StringBuffer,String,boolean,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.append(StringBuffer,String,long,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.appendFieldStart(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.append(StringBuffer,String,char,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.append(StringBuffer,String,byte,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.append(StringBuffer,String,int,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.append(StringBuffer,String,short,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.append(StringBuffer,String,Object,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.append(StringBuffer,String,boolean,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.readResolve()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.append(StringBuffer,String,char,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.append(StringBuffer,String,int,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.append(StringBuffer,String,long,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.append(StringBuffer,String,boolean,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.append(StringBuffer,String,boolean,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.append(StringBuffer,String,byte,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.append(StringBuffer,String,double,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.append(StringBuffer,String,char,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.append(StringBuffer,String,double,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.appendValueAsString(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.append(StringBuffer,String,boolean,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.append(StringBuffer,String,Object,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.JsonToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.append(StringBuffer,String,long,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.JsonToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.appendFieldStart(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.append(StringBuffer,String,long,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.append(StringBuffer,String,byte,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.append(StringBuffer,String,float,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.readResolve()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.appendValueAsString(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.appendValueAsString(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.append(StringBuffer,String,double,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.appendValueAsString(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.append(StringBuffer,String,char,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.append(StringBuffer,String,char,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.append(StringBuffer,String,float,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.append(StringBuffer,String,double,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.appendValueAsString(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.append(StringBuffer,String,float,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.append(StringBuffer,String,long,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.JsonToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.append(StringBuffer,String,short,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.readResolve()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.append(StringBuffer,String,short,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.append(StringBuffer,String,int,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.readResolve()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.JsonToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.appendDetail(StringBuffer,String,Object)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.appendFieldStart(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.appendValueAsString(StringBuffer,String)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.JsonToStringStyle.append(StringBuffer,String,double,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.readResolve()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.append(StringBuffer,String,int,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.append(StringBuffer,String,float,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.append(StringBuffer,String,long,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.append(StringBuffer,String,Object,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.append(StringBuffer,String,byte,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.append(StringBuffer,String,long,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.append(StringBuffer,String,Object,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.append(StringBuffer,String,short,Boolean)",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.appendFieldStart(StringBuffer,String)"
    ]
  ],
  "882": [
    "the core of {{org.apache.commons.lang3.text.translate}} is a {{hashmap<charsequence, charsequence> lookupmap}}.\n\nfrom the javadoc of {{charsequence}} (emphasis mine):\n{quote}\nthis interface does not refine the general contracts of the equals and hashcode methods. the result of comparing two objects that implement charsequence is therefore, in general, undefined. each object may be implemented by a different class, and there is no guarantee that each class will be capable of testing its instances for equality with those of the other. *it is therefore inappropriate to use arbitrary charsequence instances as elements in a set or as keys in a map.*\n{quote}\n\nthe current implementation causes code such as the following to not work as expected:\n\n{code}\ncharsequence cs1 = \"1 < 2\";\ncharsequence cs2 = charbuffer.wrap(\"1 < 2\".tochararray());\n\nsystem.out.println(stringescapeutils.escape_html4.translate(cs1));\nsystem.out.println(stringescapeutils.escape_html4.translate(cs2));\n{code}\n\n... which gives the following results (but should be identical):\n{noformat}\n1 &lt; 2\n1 < 2\n{noformat}\n\nthe problem, at a minimum, is that {{charbuffer.equals}} is even documented in the javadoc that:\n{quote}\na char buffer is not equal to any other type of object.\n{quote}\n\n... so a lookup on a charbuffer in the map will always fail when compared against the string implementations that it contains.\n\nan obvious work-around is to instead use something along the lines of either of the following:\n{code}\nsystem.out.println(stringescapeutils.escape_html4.translate(cs2.tostring()));\nsystem.out.println(stringescapeutils.escapehtml4(cs2.tostring()));\n{code}\n\n... which forces everything back to a {{string}}.  however, this is not practical when working with large sets of data, which would require significant heap allocations and garbage collection concerns.  (as such, i was actually trying to use the {{translate}} method that outputs to a {{writer}} - but simplified the above examples to omit this.)\n\nanother option that i'm considering is to use a custom {{charsequence}} wrapper around a {{char[]}} that implements {{hashcode()}} and {{equals()}} to work with those implemented on {{string}}.  (however, this will be interesting due to the symmetric assumption - which is further interesting that {{string.equals}} is currently implemented using {{instanceof}} - even though {{string}} is {{final}}...)",
    [
      "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java@org.apache.commons.lang3.text.translate.LookupTranslator.translate(CharSequence,int,Writer)",
      "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java@org.apache.commons.lang3.text.translate.LookupTranslator.LookupTranslator(CharSequence)"
    ]
  ],
  "881": [
    "the javadoc for numberutils.createnumber() states:\n\n\"values with leading 0's will not be interpreted as octal.\"\n\nhowever,\n\nassertequals(25, numberutils.createnumber(\"0025\"));\n\nfails, because numberutils.createnumber(\"0025\") returns 21.\n",
    [
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.createNumber(String)"
    ]
  ],
  "606": [
    "equalsbuilder causes stackoverflowexception when comparing objects with cyclical object references.\n\ne,g.\nstatic class testobjectreference {\n\t\t@suppresswarnings(\"unused\")\n\t\tprivate testobjectreference reference;\n    \t@suppresswarnings(\"unused\")\n\t\tprivate testobject one;\n    \t\n    \tpublic testobjectreference(int one) {\n\t\t\tthis.one = new testobject(one);\n\t\t}\n    \t\n    \tpublic void setobjectreference(\n    \t\t\ttestobjectreference reference) {\n\t\t\tthis.reference = reference;\n\t\t}\n\n\t\t@override\n\t\tpublic boolean equals(object obj) {\n\t\t\treturn equalsbuilder.reflectionequals(this, obj);\n\t\t}\n    }",
    [
      "src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java@org.apache.commons.lang3.builder.EqualsBuilder.reflectionAppend(Object,Object,Class,EqualsBuilder,boolean,String)",
      "src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java@org.apache.commons.lang3.builder.EqualsBuilder.getRegistry()",
      "src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java@org.apache.commons.lang3.builder.EqualsBuilder.isRegistered(Object,Object)",
      "src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java@org.apache.commons.lang3.builder.EqualsBuilder.getRegisterPair(Object,Object)",
      "src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java@org.apache.commons.lang3.builder.EqualsBuilder.register(Object,Object)",
      "src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java@org.apache.commons.lang3.builder.EqualsBuilder.unregister(Object,Object)"
    ]
  ],
  "744": [
    "in the static initializer of org.apache.commons.lang3.stringutils, there is an attempt to load the class sun.text.normalizer.\nsuch a class is prohibited on google app engine, and the static intializer throws a java.security.accesscontrolexception.\n\n{code}\ncaused by: java.security.accesscontrolexception: access denied (java.lang.runtimepermission accessclassinpackage.sun.text)\n\tat java.security.accesscontrolcontext.checkpermission(accesscontrolcontext.java:374)\n\tat java.security.accesscontroller.checkpermission(accesscontroller.java:546)\n\tat java.lang.securitymanager.checkpermission(securitymanager.java:532)\n\tat com.google.appengine.tools.development.devappserverfactory$customsecuritymanager.checkpermission(devappserverfactory.java:166)\n\tat java.lang.securitymanager.checkpackageaccess(securitymanager.java:1512)\n\tat java.lang.class.checkmemberaccess(class.java:2164)\n\tat java.lang.class.getmethod(class.java:1602)\n\tat org.apache.commons.lang3.stringutils.<clinit>(stringutils.java:739)\n{code}\n\nthe exception should be caught in the catch clauses around loadclass(\"sun.text.normalizer\").\n\ncommons lang 2 worked fine on gae.\n",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.removeAccentsJava6(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.removeAccentsSUN(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.removeAccentsJava6(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.stripAccents(String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.stripAccents(String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.removeAccentsSUN(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.stripAccents(String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.removeAccentsJava6(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.stripAccents(String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.removeAccentsSUN(CharSequence)"
    ]
  ],
  "1162": [
    "from the commons user mailing list:\n\n{quote}\nstringutils.equals(cs1,cs2) delegates to charsequence.regionmatches(...) in a way that causes indexoutofbounds when either of cs1/cs2 isn't a string.\n\nspecifically, comparing \"foo\" and \"foobar\" for non-string charsequences bombs due to charsequenceutils.regionmatches(cs1, false, 0, cs2, 0, math.max(cs1.length(), cs2.length())) because regionmatches doesn't check for input exhaustion.\n{quote}\n",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.equals(CharSequence,CharSequence)"
    ]
  ],
  "1163": [
    "there are no tests for charsequenceutils.regionmatches.\n\nit ought to behave the same way as the string version.\n\nthis includes not failing with index oobe if the charsequences are not long enough.",
    [
      "src/main/java/org/apache/commons/lang3/CharSequenceUtils.java@org.apache.commons.lang3.CharSequenceUtils.regionMatches(CharSequence,boolean,int,CharSequence,int,int)"
    ]
  ],
  "1205": [
    "the {{numberutils.createnumber()}} method fails to check for multiple trailing characters, and as a result, it returns a value even though {{numberutils.isnumber()}} indicates that it should not.  for example:\n\n{code}\nboolean isnumber = numberutils.isnumber(\"81.5514dd\");   // returns false\n\nnumber numvalue = numberutils.createnumber(\"81.5514dd\");  // returns a double value, 81.5514\n{code}\n\ni would expect the {{createnumber()}} method to throw a {{numberformatexception}} in this case.\n",
    [
      "src/main/java/org/apache/commons/lang3/math/NumberUtils.java@org.apache.commons.lang3.math.NumberUtils.createNumber(String)"
    ]
  ],
  "1202": [
    "lang-799 added support for specifying a locale, but parsedatestrictly() doesn't pass it to the final parsedatewithleniency() method.",
    [
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateUtils.parseDateStrictly(String,Locale,String)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateIterator.parseDateStrictly(String,Locale,String)"
    ]
  ],
  "1199": [
    "the current implementation of stringutils.getjarowinklerdistance() does not compute the correct result in some cases. see #lang-944 for the initial code contribution.\n\nstringutils.getjarowinklerdistance(\"haus ingeborg\", \"ingeborg esser\") == 0.0\n\nthis is due to the incorrect computation of common characters, which causes the algorithm to exit prematurely.\n\nin contrast, the implementation in lucene gives ~0.63, which is about right.\n\n    jarowinklerdistance d = new jarowinklerdistance();\n    getdistance(\"haus ingeborg\", \"ingeborg esser\");\n\nsee https://lucene.apache.org/core/3_0_3/api/contrib-spellchecker/org/apache/lucene/search/spell/jarowinklerdistance.html",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.matches(CharSequence,CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.getJaroWinklerDistance(CharSequence,CharSequence)"
    ]
  ],
  "636": [
    "findbugs:\n\nbug: org.apache.commons.lang3.text.extendedmessageformat doesn't override java.text.messageformat.equals(object)\npattern id: eq_doesnt_override_equals, type: eq, category: style\n\nthis class extends a class that defines an equals method and adds fields, but doesn't define an equals method itself. thus, equality on instances of this class will ignore the identity of the subclass and the added fields. be sure this is what is intended, and that you don't need to override the equals method. even if you don't need to override the equals method, consider overriding it anyway to document the fact that the equals method for the subclass just return the result of invoking super.equals(o). \n",
    [
      "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java@org.apache.commons.lang3.text.ExtendedMessageFormat.hashCode()",
      "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java@org.apache.commons.lang3.text.ExtendedMessageFormat.equals(Object)"
    ]
  ],
  "1055": [
    "strsubsitutor caches a references to systemproperties statically on first class references.  this does not work properly with system.setproperties().  for example the following code:\n{code}\npackage test.utilities;\n\nimport java.util.properties;\n\nimport org.apache.commons.lang.text.strsubstitutor;\n\npublic class teststrsubstitutor {\n\n    public static void main(string[] args) {\n        system.out.println(strsubstitutor.replacesystemproperties(\"os.name=${os.name}\"));\n        properties testprops = new properties();\n        testprops.put(\"test_key\",  \"test_value\");\n        testprops.putall(system.getproperties());\n        system.setproperties(testprops);\n        system.out.println(strsubstitutor.replace(\"test_key=${test_key}\", system.getproperties()));\n        system.out.println(strsubstitutor.replacesystemproperties(\"test_key=${test_key}\"));\n    }\n\n}\n{code}\nproduces the following output:\n{code}\nos.name=windows 7\ntest_key=test_value\ntest_key=${test_key}\n{code}\n\nthe code linked here shows the static caching of the system properties reference: http://commons.apache.org/proper/commons-lang/apidocs/src-html/org/apache/commons/lang3/text/strlookup.html\n",
    [
      "src/main/java/org/apache/commons/lang3/text/StrLookup.java@org.apache.commons.lang3.text.MapStrLookup.systemPropertiesLookup()",
      "src/main/java/org/apache/commons/lang3/text/StrLookup.java@org.apache.commons.lang3.text.StrLookup.copyProperties(Properties)",
      "src/main/java/org/apache/commons/lang3/text/StrLookup.java@org.apache.commons.lang3.text.MapStrLookup.copyProperties(Properties)",
      "src/main/java/org/apache/commons/lang3/text/StrLookup.java@org.apache.commons.lang3.text.StrLookup.systemPropertiesLookup()"
    ]
  ],
  "48": [
    "the nestabledelegate dumps the stacktrace bottomup instead of topdown as is the custom in the jdk \n(especially in jdk 1.4's own chained exceptions).\n\nthus when using nestableexception you \nwill always see the first low-level exception (e.g. an null exception) and you'll have to go all the \nway to the bottom to see the highlevel exception (e.g. an hibernatequeryexception: error while \nparsing query at 's.count()')\n\nthis is not very friendly to users because hopefully the \nhighlevel exception will be the best explanation in 9 out of 10 causes, it is only when debugging or \nin misbehaved exception handling one like to see the root causes - and then one can go down and read \nthe bottom of the stack trace.\n\nthus, i would suggest that you make it possible to have \nnestabledelegate print the stacktrace in reverce so the highlevel exception get printed first \nand then the lower-levels.\n\nand optimal one could set an \nnestabledelegate.printstacktracetopdown=true as an system property so one could choose \nwhich strategy should be activated in the system. \n\nam i making any sense ? :)",
    [
      "src/main/java/org/apache/commons/lang3/ClassUtils.java@org.apache.commons.lang3.ClassUtils.getPackageName(String)",
      "src/main/java/org/apache/commons/lang3/ClassUtils.java@org.apache.commons.lang3.ClassUtils.getAbbreviatedName(String,int)",
      "src/main/java/org/apache/commons/lang3/ClassUtils.java@org.apache.commons.lang3.ClassUtils.getAbbreviatedName(Class,int)"
    ]
  ],
  "49": [
    "default size of enum's hashmap needs improvement.\n\nhttp://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=104316379302781&w=2",
    [
      "src/main/java/org/apache/commons/lang3/CharUtils.java@org.apache.commons.lang3.CharUtils.unicodeEscaped(char)",
      "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java@org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequence,Writer)",
      "src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java@org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int,Writer)"
    ]
  ],
  "46": [
    "the stringutils.chomp function doesn't work.\n\nthanks",
    [
      "src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java@org.apache.commons.lang3.concurrent.AtomicSafeInitializer.get()"
    ]
  ],
  "1190": [
    "{code:java}\nimport static org.apache.commons.lang3.reflect.typeutils.*;\n\nimport java.lang.reflect.invocationtargetexception;\nimport java.lang.reflect.type;\nimport java.util.arraylist;\n\npublic class demonstration {\n\n    public static <u> iterable<u> somemethod() { return null; }\n    \n    public static class workingclass extends arraylist { }\n    public static class failingclass extends arraylist<object> { }\n    \n    \n    public static void main(string[] args) throws nosuchmethodexception, securityexception, illegalaccessexception, illegalargumentexception, invocationtargetexception {\n        type fromtype = demonstration.class.getdeclaredmethod(\"somemethod\").getgenericreturntype();\n        type workingtotype = wildcardtype().withlowerbounds(workingclass.class).build();\n        type failingtotype = wildcardtype().withlowerbounds(failingclass.class).build();\n        \n        system.out.println(fromtype);\n        system.out.println(workingtotype);\n        system.out.println(failingtotype);\n        \n        system.out.println(isassignable(fromtype, workingtotype));\n        system.out.println(isassignable(fromtype, failingtotype));\n    }\n}\n{code}",
    [
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeBuilder.isAssignable(Type,ParameterizedType,Map)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.ParameterizedTypeImpl.isAssignable(Type,ParameterizedType,Map)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.GenericArrayTypeImpl.isAssignable(Type,ParameterizedType,Map)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeImpl.isAssignable(Type,ParameterizedType,Map)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.TypeUtils.isAssignable(Type,ParameterizedType,Map)"
    ]
  ],
  "1193": [
    "in apache commons lang 3.4, stringutils.ordinalindexof(\"abc\", \"ab\", 1) gives incorrect answer of -1 (correct answer should be 0)\u3002but stringutils.ordinalindexof(\"abc\", \"a\", 1) gives correct answer of 0.\n\nbased on the above mentioned observation, the bug occurrs if the searchstr is of length > 1, and locates at the index 0 of the str.\n\nin apache commons lang 2.6, this bug is not observed.",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.ordinalIndexOf(CharSequence,CharSequence,int,boolean)"
    ]
  ],
  "1192": [
    "the java simpledateformat supports two year-components, 'y' for normal year and 'y' for 'week year', see http://docs.oracle.com/javase/7/docs/api/java/text/simpledateformat.html\n\nhowever when we try to use fastdateformat to parse a format which uses the week-year, it fails with an exception\n\n{noformat}\njava.lang.illegalargumentexception: illegal pattern component: yyyy\n\tat org.apache.commons.lang3.time.fastdateprinter.parsepattern(fastdateprinter.java:282)\n\tat org.apache.commons.lang3.time.fastdateprinter.init(fastdateprinter.java:149)\n\tat org.apache.commons.lang3.time.fastdateprinter.<init>(fastdateprinter.java:142)\n\tat org.apache.commons.lang3.time.fastdateformat.<init>(fastdateformat.java:384)\n\tat org.apache.commons.lang3.time.fastdateformat.<init>(fastdateformat.java:369)\n\tat org.apache.commons.lang3.time.fastdateformat$1.createinstance(fastdateformat.java:91)\n\tat org.apache.commons.lang3.time.fastdateformat$1.createinstance(fastdateformat.java:88)\n\tat org.apache.commons.lang3.time.formatcache.getinstance(formatcache.java:82)\n\tat org.apache.commons.lang3.time.fastdateformat.getinstance(fastdateformat.java:119)\n{noformat}\n\nsimple unit test to reproduce this:\n\n{code}\n    @test\n    public void testcommonslang() {\n    \tdate date = new date();\n\n    \tformat dateformat = new simpledateformat(\"yyyy\");\n\t\tassertnotnull(dateformat.format(date));\n\n        dateformat = fastdateformat.getinstance(\"yyyy\");\n\t\tassertnotnull(dateformat.format(date));\n    }\n{code}\n",
    [
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.FastDateFormat.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.FastDateFormat.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.FastDateFormat.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.FastDateFormat.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.FastDateFormat.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.parse(String,ParsePosition,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.WeekYear.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.WeekYear(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.newCalendar()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.format(Date,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.format(Calendar,B)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.format(long)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.format(Date,StringBuffer)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.getStrategy(char,int,Calendar)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.FastDatePrinter.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedMonthField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneDisplayKey.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.PaddedNumberField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.UnpaddedNumberField.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.DayInWeekField.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.StringLiteral.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNumberRule.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwentyFourHourField.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TextField.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwelveHourField.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.Iso8601_Rule.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TimeZoneNameRule.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitNumberField.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.parsePattern()",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.appendTo(Appendable,int)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitMonthField.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.CharacterLiteral.DayInWeekField(NumberRule)",
      "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java@org.apache.commons.lang3.time.TwoDigitYearField.DayInWeekField(NumberRule)"
    ]
  ],
  "40": [
    "the first statement in validate.nonullemelents(object[], string) is \nvalidate.notnull(array). this should be validate.notnull(array, message). \nbecause of this, the message is not used when the array is null itself. this \nalso applies to validate.nonullemelents(collection, string).",
    [
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.NoClassNameToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.NoClassNameToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoFieldNameToStringStyle.readResolve()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.readResolve()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.readResolve()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.readResolve()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ShortPrefixToStringStyle.NoClassNameToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.NoClassNameToStringStyle.NoClassNameToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.NoClassNameToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.MultiLineToStringStyle.readResolve()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.NoClassNameToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.ToStringStyle.readResolve()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.SimpleToStringStyle.NoClassNameToStringStyle()",
      "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java@org.apache.commons.lang3.builder.DefaultToStringStyle.readResolve()"
    ]
  ],
  "1": [
    "adding 2 patches. \n\none includes a comprehensive review of the builder package, both style and \nsyntax along with just syntax fixes for the other packages.\n\nthe other fixes minor typos in the builder test package.",
    [
      "src/main/java/org/apache/commons/lang3/ThreadUtils.java@org.apache.commons.lang3.ThreadUtils.findThreadsByName(String,String)",
      "src/main/java/org/apache/commons/lang3/ThreadUtils.java@org.apache.commons.lang3.NamePredicate.findThreadsByName(String,String)",
      "src/main/java/org/apache/commons/lang3/ThreadUtils.java@org.apache.commons.lang3.ThreadIdPredicate.findThreads(ThreadGroup,boolean,ThreadPredicate)",
      "src/main/java/org/apache/commons/lang3/ThreadUtils.java@org.apache.commons.lang3.NamePredicate.findThreads(ThreadGroup,boolean,ThreadPredicate)",
      "src/main/java/org/apache/commons/lang3/ThreadUtils.java@org.apache.commons.lang3.ThreadIdPredicate.findThreadsByName(String,String)",
      "src/main/java/org/apache/commons/lang3/ThreadUtils.java@org.apache.commons.lang3.AlwaysTruePredicate.findThreadsByName(String,String)",
      "src/main/java/org/apache/commons/lang3/ThreadUtils.java@org.apache.commons.lang3.ThreadIdPredicate.findThreadGroups(ThreadGroup,boolean,ThreadGroupPredicate)",
      "src/main/java/org/apache/commons/lang3/ThreadUtils.java@org.apache.commons.lang3.AlwaysTruePredicate.findThreads(ThreadGroup,boolean,ThreadPredicate)",
      "src/main/java/org/apache/commons/lang3/ThreadUtils.java@org.apache.commons.lang3.ThreadUtils.findThreadGroups(ThreadGroup,boolean,ThreadGroupPredicate)",
      "src/main/java/org/apache/commons/lang3/ThreadUtils.java@org.apache.commons.lang3.NamePredicate.findThreadGroups(ThreadGroup,boolean,ThreadGroupPredicate)",
      "src/main/java/org/apache/commons/lang3/ThreadUtils.java@org.apache.commons.lang3.AlwaysTruePredicate.findThreadGroups(ThreadGroup,boolean,ThreadGroupPredicate)",
      "src/main/java/org/apache/commons/lang3/ThreadUtils.java@org.apache.commons.lang3.ThreadUtils.findThreads(ThreadGroup,boolean,ThreadPredicate)",
      "src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java@org.apache.commons.lang3.builder.CompareToBuilder.reflectionAppend(Object,Object,Class,CompareToBuilder,boolean,String)",
      "src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java@org.apache.commons.lang3.builder.EqualsBuilder.reflectionAppend(Object,Object,Class,EqualsBuilder,boolean,String)",
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.reflectionAppend(Object,Class,HashCodeBuilder,boolean,String)",
      "src/main/java/org/apache/commons/lang3/BooleanUtils.java@org.apache.commons.lang3.BooleanUtils.toBooleanObject(String)",
      "src/main/java/org/apache/commons/lang3/CharSequenceUtils.java@org.apache.commons.lang3.CharSequenceUtils.regionMatches(CharSequence,boolean,int,CharSequence,int,int)",
      "src/main/java/org/apache/commons/lang3/CharSet.java@org.apache.commons.lang3.CharSet.add(String)",
      "src/main/java/org/apache/commons/lang3/ClassUtils.java@org.apache.commons.lang3.ClassUtils.isAssignable(Class,Class,boolean)",
      "src/main/java/org/apache/commons/lang3/EnumUtils.java@org.apache.commons.lang3.EnumUtils.generateBitVector(Class,Iterable)",
      "src/main/java/org/apache/commons/lang3/EnumUtils.java@org.apache.commons.lang3.EnumUtils.processBitVector(Class,long)",
      "src/main/java/org/apache/commons/lang3/ObjectUtils.java@org.apache.commons.lang3.Null.equals(Object,Object)",
      "src/main/java/org/apache/commons/lang3/ObjectUtils.java@org.apache.commons.lang3.ObjectUtils.equals(Object,Object)",
      "src/main/java/org/apache/commons/lang3/ObjectUtils.java@org.apache.commons.lang3.Null.hashCode(Object)",
      "src/main/java/org/apache/commons/lang3/ObjectUtils.java@org.apache.commons.lang3.Null.compare(T,T,boolean)",
      "src/main/java/org/apache/commons/lang3/ObjectUtils.java@org.apache.commons.lang3.ObjectUtils.compare(T,T,boolean)",
      "src/main/java/org/apache/commons/lang3/ObjectUtils.java@org.apache.commons.lang3.ObjectUtils.hashCode(Object)",
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.random(int,int,int,boolean,boolean,char,Random)",
      "src/main/java/org/apache/commons/lang3/Range.java@org.apache.commons.lang3.Range.contains(T)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.isAlphaSpace(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.indexOfAny(CharSequence,CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.startsWith(CharSequence,CharSequence,boolean)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.isNumericSpace(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.substringAfterLast(String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.lastIndexOfIgnoreCase(CharSequence,CharSequence,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.isAlphaSpace(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(CharSequence,CharSequence,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.mid(String,int,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.stripEnd(String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.isBlank(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.join(Object,char,int,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.stripStart(String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.splitByWholeSeparatorWorker(String,String,int,boolean)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.startsWith(CharSequence,CharSequence,boolean)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.isNumericSpace(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.isWhitespace(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.abbreviate(String,int,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.abbreviate(String,int,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(String,String,int,boolean)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.indexOfDifference(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.join(Object,String,int,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.indexOfIgnoreCase(CharSequence,CharSequence,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.substringAfterLast(String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.replace(String,String,String,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.splitWorker(String,String,int,boolean)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.isAlphanumericSpace(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.abbreviateMiddle(String,String,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.splitWorker(String,char,boolean)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.isWhitespace(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.join(Object,String,int,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.splitWorker(String,char,boolean)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.substringsBetween(String,String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.isAlphanumericSpace(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.splitWorker(String,String,int,boolean)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.mid(String,int,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.stripStart(String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.indexOfAny(CharSequence,CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.substringsBetween(String,String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.isBlank(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.stripEnd(String,String)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.join(Object,char,int,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.indexOfDifference(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.replace(String,String,String,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.InitStripAccents.abbreviateMiddle(String,String,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.indexOfIgnoreCase(CharSequence,CharSequence,int)",
      "src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java@org.apache.commons.lang3.concurrent.ConcurrentUtils.putIfAbsent(ConcurrentMap,K,V)",
      "src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java@org.apache.commons.lang3.concurrent.ConstantFuture.putIfAbsent(ConcurrentMap,K,V)",
      "src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java@org.apache.commons.lang3.concurrent.ConstantFuture.initialize(ConcurrentInitializer)",
      "src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java@org.apache.commons.lang3.concurrent.ConcurrentUtils.initialize(ConcurrentInitializer)",
      "src/main/java/org/apache/commons/lang3/concurrent/ConstantInitializer.java@org.apache.commons.lang3.concurrent.ConstantInitializer.hashCode()",
      "src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java@org.apache.commons.lang3.concurrent.TimedSemaphore.getAverageCallsPerPeriod()",
      "src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java@org.apache.commons.lang3.exception.ExceptionUtils.getRootCauseMessage(Throwable)",
      "src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java@org.apache.commons.lang3.exception.ExceptionUtils.getRootCause(Throwable)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.mulPosAndCheck(int,int)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.addSub(Fraction,boolean)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.greatestCommonDivisor(int,int)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.floatValue()",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.doubleValue()",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.getFraction(double)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.equals(Object)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.mulAndCheck(int,int)",
      "src/main/java/org/apache/commons/lang3/math/Fraction.java@org.apache.commons.lang3.math.Fraction.pow(int)",
      "src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java@org.apache.commons.lang3.mutable.MutableDouble.hashCode()",
      "src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java@org.apache.commons.lang3.mutable.MutableDouble.equals(Object)",
      "src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java@org.apache.commons.lang3.mutable.MutableFloat.equals(Object)",
      "src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java@org.apache.commons.lang3.text.StrSubstitutor.substitute(StrBuilder,int,int,List)",
      "src/main/java/org/apache/commons/lang3/text/StrTokenizer.java@org.apache.commons.lang3.text.StrTokenizer.readWithQuotes(char,int,int,StrBuilder,List,int,int)",
      "src/main/java/org/apache/commons/lang3/text/StrTokenizer.java@org.apache.commons.lang3.text.StrTokenizer.isQuote(char,int,int,int,int)",
      "src/main/java/org/apache/commons/lang3/text/WordUtils.java@org.apache.commons.lang3.text.WordUtils.capitalizeFully(String,char)",
      "src/main/java/org/apache/commons/lang3/text/WordUtils.java@org.apache.commons.lang3.text.WordUtils.uncapitalize(String,char)",
      "src/main/java/org/apache/commons/lang3/text/WordUtils.java@org.apache.commons.lang3.text.WordUtils.wrap(String,int,String,boolean)",
      "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java@org.apache.commons.lang3.text.translate.NumericEntityUnescaper.isSet(OPTION)",
      "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java@org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(CharSequence,int,Writer)",
      "src/main/java/org/apache/commons/lang3/text/translate/UnicodeUnescaper.java@org.apache.commons.lang3.text.translate.UnicodeUnescaper.translate(CharSequence,int,Writer)",
      "src/main/java/org/apache/commons/lang3/time/StopWatch.java@org.apache.commons.lang3.time.StopWatch.resume()",
      "src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java@org.apache.commons.lang3.CharUtilsPerfRun.run_inlined_CharUtils_isAsciiNumeric(int)",
      "src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java@org.apache.commons.lang3.text.translate.OctalUnescaper.translate(CharSequence,int,Writer)"
    ]
  ],
  "5": [
    "stringutils.split ignores empty items (eg. delimiter at the beginning of the \nstring, 2 delimiters directly after another)\n\neg.\n\nstring[] l = stringutils.split(\"x,de,germany\", \",\");\nresults in \nl[0] = \"x\"\nl[1] = \"de\"\nl[2] = \"germany\"\n\nstring[] l = stringutils.split(\",de,germany\", \",\");\nresults in\nl[0] = \"de\"\nl[1] = \"germany\"\nexpected : \nl[0] = \"\" (or null ?)\nl[1] = \"de\"\nl[2] = \"germany\"\n\nthe current behaviour makes it impossible to detect the \"column\" (eg. for \nparsing .csv files).",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.stripAccents(String)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateUtils.modify(Calendar,int,int)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateIterator.modify(Calendar,int,int)",
      "src/main/java/org/apache/commons/lang3/ObjectUtils.java@org.apache.commons.lang3.Null.hashCodeMulti(Object)",
      "src/main/java/org/apache/commons/lang3/ObjectUtils.java@org.apache.commons.lang3.ObjectUtils.hashCodeMulti(Object)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.endsWithAny(CharSequence,CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.startsWithAny(CharSequence,CharSequence)",
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.append(double)",
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.append(int)",
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.append(short)",
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.append(Object)",
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.append(boolean)",
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.append(char)",
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.append(float)",
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.append(byte)",
      "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java@org.apache.commons.lang3.builder.HashCodeBuilder.append(long)",
      "src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java@org.apache.commons.lang3.exception.ExceptionUtils.printRootCauseStackTrace(Throwable,PrintWriter)",
      "src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java@org.apache.commons.lang3.exception.ExceptionUtils.getCause(Throwable,String)",
      "src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java@org.apache.commons.lang3.exception.ExceptionUtils.printRootCauseStackTrace(Throwable,PrintStream)",
      "src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java@org.apache.commons.lang3.reflect.FieldUtils.getField(Class,String,boolean)",
      "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java@org.apache.commons.lang3.reflect.MethodUtils.getMatchingAccessibleMethod(Class,String,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.TypeUtils.getClosestParentType(Class,Class)",
      "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java@org.apache.commons.lang3.text.ExtendedMessageFormat.containsElements(Collection)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderWriter.appendAll(Object)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilder.appendAll(Object)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderReader.appendAll(Object)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderTokenizer.appendAll(Object)",
      "src/main/java/org/apache/commons/lang3/text/WordUtils.java@org.apache.commons.lang3.text.WordUtils.isDelimiter(char,char)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateIterator.parseDateWithLeniency(String,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateUtils.parseDateWithLeniency(String,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateUtils.modify(Calendar,int,int)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateIterator.modify(Calendar,int,int)",
      "src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java@org.apache.commons.lang3.CharUtilsPerfRun.run_CharUtils_isAsciiNumeric(int)",
      "src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java@org.apache.commons.lang3.CharUtilsPerfRun.run_CharSet(int)",
      "src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java@org.apache.commons.lang3.CharUtilsPerfRun.run_inlined_CharUtils_isAsciiNumeric(int)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.getObjectTransformationCost(Class,Class)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.isAccessible(Member)",
      "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java@org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(AccessibleObject)"
    ]
  ],
  "1114": [
    "there is a bug in typeutils.equals(wilcardtype, type).  it returns true if the other type is not a wildcardtype, it should return false.  see typeutils@1629 for v3.3.2 and typeutils@791 for v3.4\n\nbug can be seen with the following test:\n\n{code}\n@test\n    public void shouldhandleequalityofparameterizedtypeswithwildcards() throws exception {\n        // given:\n        class sometype {\n            collection<?> field;\n        }\n\n        final parameterizedtype wildcardcollectiontype = (parameterizedtype) sometype.class.getdeclaredfield(\"field\").getgenerictype();\n        final wildcardtype wildcard = (wildcardtype) wildcardcollectiontype.getactualtypearguments()[0];\n        final parameterizedtype ptwithwildcard = typeutils.parameterize(collection.class, wildcard);\n        final parameterizedtype otherpt = typeutils.parameterize(collection.class, string.class);\n\n        // then:\n        assertthat(otherpt, is(not(equalto(ptwithwildcard))));  // passes\n        assertthat(ptwithwildcard, is(not(equalto(otherpt))));  // fails\n    }\n{code}\n\n",
    [
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.ParameterizedTypeImpl.equals(WildcardType,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.GenericArrayTypeImpl.equals(WildcardType,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.TypeUtils.equals(WildcardType,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeBuilder.equals(WildcardType,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeImpl.equals(WildcardType,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.ParameterizedTypeImpl.equals(WildcardType,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.GenericArrayTypeImpl.equals(WildcardType,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.TypeUtils.equals(WildcardType,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeBuilder.equals(WildcardType,Type)",
      "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java@org.apache.commons.lang3.reflect.WildcardTypeImpl.equals(WildcardType,Type)"
    ]
  ],
  "1116": [
    "unit test for testlang530 fails when the isodatestr comes out with just a z instead of +00:00.\n\n{code}\ntests run: 38, failures: 0, errors: 1, skipped: 0, time elapsed: 0.014 sec <<< failure! - in org.apache.commons.lang3.time.dateutilstest\ntestlang530(org.apache.commons.lang3.time.dateutilstest)  time elapsed: 0.005 sec  <<< error!\njava.text.parseexception: unable to parse the date: 2015-04-17t18:51:52z\n        at org.apache.commons.lang3.time.dateutils.parsedatewithleniency(dateutils.java:401)\n        at org.apache.commons.lang3.time.dateutils.parsedate(dateutils.java:301)\n        at org.apache.commons.lang3.time.dateutils.parsedate(dateutils.java:278)\n        at org.apache.commons.lang3.time.dateutilstest.testlang530(dateutilstest.java:1222)\n{code}\n\non a linux machine where this test passes, isodatestr is 2015-04-17t19:26:03+00:00.",
    [
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateUtils.parseDateWithLeniency(String,Locale,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateIterator.parseDateWithLeniency(String,Locale,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.FastDateParser(String,TimeZone,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.FastDateParser(String,TimeZone,Locale,Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.FastDateParser(String,TimeZone,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.FastDateParser(String,TimeZone,Locale,Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.FastDateParser(String,TimeZone,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.FastDateParser(String,TimeZone,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.FastDateParser(String,TimeZone,Locale,Date,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.FastDateParser(String,TimeZone,Locale,Date,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.FastDateParser(String,TimeZone,Locale,Date,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.FastDateParser(String,TimeZone,Locale,Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.FastDateParser(String,TimeZone,Locale,Date,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.FastDateParser(String,TimeZone,Locale,Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.FastDateParser(String,TimeZone,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.FastDateParser(String,TimeZone,Locale,Date,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.FastDateParser(String,TimeZone,Locale,Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.FastDateParser(String,TimeZone,Locale,Date,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.FastDateParser(String,TimeZone,Locale,Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.FastDateParser(String,TimeZone,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.FastDateParser(String,TimeZone,Locale,Date,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.FastDateParser(String,TimeZone,Locale,Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.parse(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.FastDateParser(String,TimeZone,Locale)"
    ]
  ],
  "1292": [
    "\nrunning following line of code results in stringindexoutofboundsexception (in 3.5 release)\n{code}\nwordutils.wrap(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",70);\n{code}\n\n{code}\njava.lang.stringindexoutofboundsexception: string index out of range: -1\n\n\tat java.lang.string.substring(string.java:1967)\n\tat org.apache.commons.lang3.text.wordutils.wrap(wordutils.java:328)\n\tat org.apache.commons.lang3.text.wordutils.wrap(wordutils.java:176)\n\tat org.apache.commons.lang3.text.wordutils.wrap(wordutils.java:100)\n\tat pl.netpr.commons.string.texttoolstest.testwrap(texttoolstest.java:245)\n\t\n{code}\n\nit worked fine with 3.4 releae. \n\n\n\n\n\n",
    [
      "src/main/java/org/apache/commons/lang3/text/WordUtils.java@org.apache.commons.lang3.text.WordUtils.wrap(String,int,String,boolean,String)"
    ]
  ],
  "1118": [
    "unlike what is said in javadoc comment, when passing a negative repeat value to the *stringutils.repeat(char, int)* function, it doesn't return an empty string but throws a _negativearraysizeexception_.\n\nsee pr #72 : https://github.com/apache/commons-lang/pull/72",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.repeat(char,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.repeat(char,int)"
    ]
  ],
  "1271": [
    "an empty array does not contain any empty/blank charsequences, so isanyempty/isanyblank should return false for an empty array.",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.isAnyBlank(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.isAnyNotBlank(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.isAnyNotEmpty(CharSequence)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.isAnyEmpty(CharSequence)"
    ]
  ],
  "617": [
    "supplementary characters in utf-16 are those whose code points are above 0xffff, that is, require more than 1 java char to be encoded, as explained here: http://java.sun.com/developer/technicalarticles/intl/supplementary/\n\ncurrently, stringescapeutils.escapexml() isn't aware of this coding scheme and treats each char as one character, which is not always right.\n\na possible solution in class entities would be:\n\n    public void escape(writer writer, string str) throws ioexception {\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            int code = str.codepointat(i);\n            string entityname = this.entityname(code);\n            if (entityname != null) {\n                writer.write('&');\n                writer.write(entityname);\n                writer.write(';');\n            } else if (code > 0x7f) {\n                    writer.write(\"&#\");\n                    writer.write(code);\n                    writer.write(';');\n            } else {\n                    writer.write((char) code);\n            }\n\n            if (code > 0xffff) {\n                    i++;\n            }\n        }\n    }\n\nbesides fixing escapexml(), this will also affect html escaping functions. i guess that's a good thing, but please remember i have only tested escapexml().\n",
    [
      "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java@org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(CharSequence,int,Writer)"
    ]
  ],
  "1276": [
    "there is a bug in replace for strbuilder, seems the use of nonupdated buffer and character count is off.\n\nnew strbuilder(\"dear x, hello x.\").replaceall(strmatcher.stringmatcher(\"x\"), \"012345678901234567\");\n\nyields\n\n{noformat}\njava.lang.arrayindexoutofboundsexception: 49\n\tat org.apache.commons.lang3.text.strmatcher$stringmatcher.ismatch(strmatcher.java:372)\n\tat org.apache.commons.lang3.text.strbuilder.replaceimpl(strbuilder.java:2115)\n\tat org.apache.commons.lang3.text.strbuilder.replace(strbuilder.java:2088)\n\tat org.apache.commons.lang3.text.strbuilder.replaceall(strbuilder.java:2049)\n{noformat}",
    [
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderTokenizer.replaceImpl(StrMatcher,String,int,int,int)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderWriter.replaceImpl(StrMatcher,String,int,int,int)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilder.replaceImpl(StrMatcher,String,int,int,int)",
      "src/main/java/org/apache/commons/lang3/text/StrBuilder.java@org.apache.commons.lang3.text.StrBuilderReader.replaceImpl(StrMatcher,String,int,int,int)"
    ]
  ],
  "1178": [
    "the method arrayutils.removeall(object array, int... indices) currently sorts the input indices array. therefore the array needs to be cloned; this is currently done by the callers.\n\nhowever the sort is an implementation detail of the method, so should be done by the method itself, not by the callers, which is fragile (easy to overlook when creating a new method) and unnecessary.\n\nthis would also allow the method to be more easily changed to a different implementation that does not need to sort the array (e.g. using bitset)",
    [
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAll(long,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAll(float,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAll(byte,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAll(Object,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAll(boolean,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAll(char,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAll(double,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAll(short,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAll(T,int)",
      "src/main/java/org/apache/commons/lang3/ArrayUtils.java@org.apache.commons.lang3.ArrayUtils.removeAll(int,int)"
    ]
  ],
  "481": [
    "the hashcode() methods of the range classes look very suspicious to me. the value is lazily initialized, but the calculation is done _on the cached value. with some unlucky timing a caller may get an incomplete hash.\n\nan unlucky sequence of code could be something like\nt1:        if (hashcode == 0) // true\nt1:            hashcode = 17;\nt2:         if (hashcode == 0) // now false because hashcode was already set to 17\nt2:         return hashcode; // return 17\nt1:            hashcode = 37 * hashcode...........\n\nwhere t1 and t2 are different threads accessing the method in parallel and t2 gets the wrong hash \"17\".\n\naffected classes are\n\norg.apache.commons.lang.math.doublerange\norg.apache.commons.lang.math.floatrange\norg.apache.commons.lang.math.intrange\norg.apache.commons.lang.math.longrange\norg.apache.commons.lang.math.numberrange\norg.apache.commons.lang.math.range\n\npossible fix: calculate the hash on a temporary variable and finally assign it to the member",
    [
      "src/main/java/org/apache/commons/lang3/Range.java@org.apache.commons.lang3.Range.toString()",
      "src/main/java/org/apache/commons/lang3/Range.java@org.apache.commons.lang3.ComparableComparator.toString()"
    ]
  ],
  "1285": [
    "it seems that after lang-1186 was fixed, and before 3.5 went out, the bug was re-introduced.\n\none of my customers is getting the following error (i am actually not able to reproduce it) with 3.5:\n\n{code}\njava.lang.nullpointerexception\n        at org.apache.commons.lang3.time.fastdateparser$timezonestrategy.<init>(fastdateparser.java:869)\n        at org.apache.commons.lang3.time.fastdateparser.getlocalespecificstrategy(fastdateparser.java:637)\n        at org.apache.commons.lang3.time.fastdateparser.getstrategy(fastdateparser.java:606)\n        at org.apache.commons.lang3.time.fastdateparser.access$100(fastdateparser.java:73)\n        at org.apache.commons.lang3.time.fastdateparser$strategyparser.letterpattern(fastdateparser.java:234)\n        at org.apache.commons.lang3.time.fastdateparser$strategyparser.getnextstrategy(fastdateparser.java:220)\n        at org.apache.commons.lang3.time.fastdateparser.init(fastdateparser.java:167)\n        at org.apache.commons.lang3.time.fastdateparser.<init>(fastdateparser.java:153)\n        at org.apache.commons.lang3.time.fastdateformat.<init>(fastdateformat.java:394)\n        at org.apache.commons.lang3.time.fastdateformat.<init>(fastdateformat.java:378)\n        at org.apache.commons.lang3.time.fastdateformat$1.createinstance(fastdateformat.java:100)\n        at org.apache.commons.lang3.time.fastdateformat$1.createinstance(fastdateformat.java:97)\n        at org.apache.commons.lang3.time.formatcache.getinstance(formatcache.java:81)\n        at org.apache.commons.lang3.time.fastdateformat.getinstance(fastdateformat.java:128)\n{code}",
    [
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CaseInsensitiveTextStrategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TzInfo.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.PatternStrategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.ISO8601TimeZoneStrategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyParser.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.StrategyAndWidth.TimeZoneStrategy(Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.TimeZoneStrategy(Locale)"
    ]
  ],
  "1287": [
    "{quote}i faced that the random method can cause an infinite loop. it can be caused if the end parameter is too low for generating either numbers (< 48) or letters (<65). i added some exception tests to make the cases clear. basically, if we call the random function with for example numbers = true && end < 48 the validation for character.isdigit(ch) will fail and we increment count count++.{quote}\n\nivan morozov https://github.com/apache/commons-lang/pull/211",
    [
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.random(int,int,int,boolean,boolean,char,Random)"
    ]
  ],
  "1286": [
    "{{randomstringutils.random()}} can overflow and return characters that are outside the range specified by the {{start}} and {{end}} parameters. this is because it casts a random integer in the range {{[start,end)}} to a character, without checking if this will overflow.\n\nexample failing test case:\n\n{code}\n@test\npublic void testcharoverflow() throws exception {\n    int start = 65535;\n    int end = integer.max_value;\n    \n    @suppresswarnings(\"serial\")\n    random fixedrandom = new random() {\n        @override\n        public int nextint(int n) {\n            // prevents selection of 'start' as the character\n            return 1;\n        }\n    };\n    \n    string result = randomstringutils.random(1, start, end, false, false, null, fixedrandom);\n    char c = result.charat(0);\n    asserttrue(c >= start && c < end);\n}\n{code}",
    [
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.random(int,int,int,boolean,boolean,char,Random)"
    ]
  ],
  "948": [
    "exception while trying to format a string containing escaped braces\n\n{code}\nexception in thread \"main\" java.lang.illegalargumentexception: invalid format argument index at position 7: }\n\tat org.apache.commons.lang3.text.extendedmessageformat.readargumentindex(extendedmessageformat.java:357)\n\tat org.apache.commons.lang3.text.extendedmessageformat.applypattern(extendedmessageformat.java:167)\n\tat org.apache.commons.lang3.text.extendedmessageformat.<init>(extendedmessageformat.java:128)\n\tat org.apache.commons.lang3.text.extendedmessageformat.<init>(extendedmessageformat.java:113)\n\tat test.testextendedmessageformat.main(testextendedmessageformat.java:16)\n{code}\n\ni will attach a source",
    [
      "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java@org.apache.commons.lang3.text.ExtendedMessageFormat.parseFormatDescription(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java@org.apache.commons.lang3.text.ExtendedMessageFormat.insertFormats(String,ArrayList)",
      "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java@org.apache.commons.lang3.text.ExtendedMessageFormat.getQuotedString(String,ParsePosition)",
      "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java@org.apache.commons.lang3.text.ExtendedMessageFormat.appendQuotedString(String,ParsePosition,StringBuilder)",
      "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java@org.apache.commons.lang3.text.ExtendedMessageFormat.applyPattern(String)"
    ]
  ],
  "879": [
    "the test below fails with the following error on jdk7, but succeeds on jdk6:\n\ntestalllocales\n\"java.lang.assertionerror: \nexpected: <ja_jp_jp_#u-ca-japanese>\n     but: was <ja_jp_jp_#u-ca-japanese>\n\tat org.hamcrest.matcherassert.assertthat(matcherassert.java:20)\n\tat org.hamcrest.matcherassert.assertthat(matcherassert.java:8)\n\tat com.scispike.foundation.test.unit.i18n.localestringconvertertest.teststringtolocale(localestringconvertertest.java:20)\n\tat com.scispike.foundation.test.unit.i18n.localestringconvertertest.testalllocales(localestringconvertertest.java:28)\n\tat org.apache.maven.surefire.testng.testngexecutor.run(testngexecutor.java:76)\n\tat org.apache.maven.surefire.testng.testngdirectorytestsuite.executemulti(testngdirectorytestsuite.java:161)\n\tat org.apache.maven.surefire.testng.testngdirectorytestsuite.execute(testngdirectorytestsuite.java:101)\n\tat org.apache.maven.surefire.testng.testngprovider.invoke(testngprovider.java:115)\n\tat org.apache.maven.surefire.util.reflectionutils.invokemethodwitharray(reflectionutils.java:189)\n\tat org.apache.maven.surefire.booter.providerfactory$providerproxy.invoke(providerfactory.java:165)\n\tat org.apache.maven.surefire.booter.providerfactory.invokeprovider(providerfactory.java:85)\n\tat org.apache.maven.surefire.booter.forkedbooter.runsuitesinprocess(forkedbooter.java:103)\n\tat org.apache.maven.surefire.booter.forkedbooter.main(forkedbooter.java:74)\n... removed 25 stack frames\n java.lang.assertionerror: \nexpected: <ja_jp_jp_#u-ca-japanese>\n     but: was <ja_jp_jp_#u-ca-japanese>\n\tat org.hamcrest.matcherassert.assertthat(matcherassert.java:20)\n\tat org.hamcrest.matcherassert.assertthat(matcherassert.java:8)\n\tat com.scispike.foundation.test.unit.i18n.localestringconvertertest.teststringtolocale(localestringconvertertest.java:20)\n\tat com.scispike.foundation.test.unit.i18n.localestringconvertertest.testalllocales(localestringconvertertest.java:28)\n\tat sun.reflect.nativemethodaccessorimpl.invoke0(native method)\n\tat sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57)\n\tat sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43)\n\tat java.lang.reflect.method.invoke(method.java:601)\n\tat org.testng.internal.methodinvocationhelper.invokemethod(methodinvocationhelper.java:80)\n\tat org.testng.internal.invoker.invokemethod(invoker.java:715)\n\tat org.testng.internal.invoker.invoketestmethod(invoker.java:907)\n\tat org.testng.internal.invoker.invoketestmethods(invoker.java:1237)\n\tat org.testng.internal.testmethodworker.invoketestmethods(testmethodworker.java:127)\n\tat org.testng.internal.testmethodworker.run(testmethodworker.java:111)\n\tat org.testng.testrunner.privaterun(testrunner.java:767)\n\tat org.testng.testrunner.run(testrunner.java:617)\n\tat org.testng.suiterunner.runtest(suiterunner.java:334)\n\tat org.testng.suiterunner.runsequentially(suiterunner.java:329)\n\tat org.testng.suiterunner.privaterun(suiterunner.java:291)\n\tat org.testng.suiterunner.run(suiterunner.java:240)\n\tat org.testng.suiterunnerworker.runsuite(suiterunnerworker.java:51)\n\tat org.testng.suiterunnerworker.run(suiterunnerworker.java:85)\n\tat org.testng.testng.runsuitessequentially(testng.java:1197)\n\tat org.testng.testng.runsuiteslocally(testng.java:1122)\n\tat org.testng.testng.run(testng.java:1030)\n\tat org.apache.maven.surefire.testng.testngexecutor.run(testngexecutor.java:76)\n\tat org.apache.maven.surefire.testng.testngdirectorytestsuite.executemulti(testngdirectorytestsuite.java:161)\n\tat org.apache.maven.surefire.testng.testngdirectorytestsuite.execute(testngdirectorytestsuite.java:101)\n\tat org.apache.maven.surefire.testng.testngprovider.invoke(testngprovider.java:115)\n\tat sun.reflect.nativemethodaccessorimpl.invoke0(native method)\n\tat sun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57)\n\tat sun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43)\n\tat java.lang.reflect.method.invoke(method.java:601)\n\tat org.apache.maven.surefire.util.reflectionutils.invokemethodwitharray(reflectionutils.java:189)\n\tat org.apache.maven.surefire.booter.providerfactory$providerproxy.invoke(providerfactory.java:165)\n\tat org.apache.maven.surefire.booter.providerfactory.invokeprovider(providerfactory.java:85)\n\tat org.apache.maven.surefire.booter.forkedbooter.runsuitesinprocess(forkedbooter.java:103)\n\tat org.apache.maven.surefire.booter.forkedbooter.main(forkedbooter.java:74)\n\"\norg.hamcrest.matcherassert.assertthat(matcherassert.java:20)\norg.hamcrest.matcherassert.assertthat(matcherassert.java:8)\ncom.scispike.foundation.test.unit.i18n.localestringconvertertest.teststringtolocale(localestringconvertertest.java:20)\ncom.scispike.foundation.test.unit.i18n.localestringconvertertest.testalllocales(localestringconvertertest.java:28)\nsun.reflect.nativemethodaccessorimpl.invoke0(native method)\nsun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57)\nsun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43)\njava.lang.reflect.method.invoke(method.java:601)\norg.testng.internal.methodinvocationhelper.invokemethod(methodinvocationhelper.java:80)\norg.testng.internal.invoker.invokemethod(invoker.java:715)\norg.testng.internal.invoker.invoketestmethod(invoker.java:907)\norg.testng.internal.invoker.invoketestmethods(invoker.java:1237)\norg.testng.internal.testmethodworker.invoketestmethods(testmethodworker.java:127)\norg.testng.internal.testmethodworker.run(testmethodworker.java:111)\norg.testng.testrunner.privaterun(testrunner.java:767)\norg.testng.testrunner.run(testrunner.java:617)\norg.testng.suiterunner.runtest(suiterunner.java:334)\norg.testng.suiterunner.runsequentially(suiterunner.java:329)\norg.testng.suiterunner.privaterun(suiterunner.java:291)\norg.testng.suiterunner.run(suiterunner.java:240)\norg.testng.suiterunnerworker.runsuite(suiterunnerworker.java:51)\norg.testng.suiterunnerworker.run(suiterunnerworker.java:85)\norg.testng.testng.runsuitessequentially(testng.java:1197)\norg.testng.testng.runsuiteslocally(testng.java:1122)\norg.testng.testng.run(testng.java:1030)\norg.apache.maven.surefire.testng.testngexecutor.run(testngexecutor.java:76)\norg.apache.maven.surefire.testng.testngdirectorytestsuite.executemulti(testngdirectorytestsuite.java:161)\norg.apache.maven.surefire.testng.testngdirectorytestsuite.execute(testngdirectorytestsuite.java:101)\norg.apache.maven.surefire.testng.testngprovider.invoke(testngprovider.java:115)\nsun.reflect.nativemethodaccessorimpl.invoke0(native method)\nsun.reflect.nativemethodaccessorimpl.invoke(nativemethodaccessorimpl.java:57)\nsun.reflect.delegatingmethodaccessorimpl.invoke(delegatingmethodaccessorimpl.java:43)\njava.lang.reflect.method.invoke(method.java:601)\norg.apache.maven.surefire.util.reflectionutils.invokemethodwitharray(reflectionutils.java:189)\norg.apache.maven.surefire.booter.providerfactory$providerproxy.invoke(providerfactory.java:165)\norg.apache.maven.surefire.booter.providerfactory.invokeprovider(providerfactory.java:85)\norg.apache.maven.surefire.booter.forkedbooter.runsuitesinprocess(forkedbooter.java:103)\norg.apache.maven.surefire.booter.forkedbooter.main(forkedbooter.java:74)\n\n\n========== test\nimport static org.hamcrest.matcherassert.assertthat;\nimport static org.hamcrest.matchers.equalto;\n\nimport java.util.locale;\n\nimport org.testng.annotations.test;\n\nimport com.scispike.foundation.i18n.stringtolocaleconverter;\n\npublic class localestringconvertertest {\n\n\tstringtolocaleconverter converter = new stringtolocaleconverter();\n\n\tpublic void teststringtolocale(locale l) {\n\t\tstring s = l.tostring();\n\n\t\tassertthat(converter.convert(s), equalto(l));\n\t}\n\n\t@test\n\tpublic void testalllocales() {\n\n\t\tlocale[] locales = locale.getavailablelocales();\n\t\tfor (locale l : locales) {\n\t\t\tteststringtolocale(l);\n\t\t}\n\t}\n}\n\n\n========== stringtolocaleconverter\n\nimport java.util.locale;\n\nimport org.apache.commons.lang3.localeutils;\nimport org.springframework.core.convert.converter.converter;\n\npublic class stringtolocaleconverter implements converter<string, locale> {\n\n\t@override\n\tpublic locale convert(string source) {\n\t\tif (source == null) {\n\t\t\treturn localetostringconverter.default;\n\t\t}\n\t\treturn localeutils.tolocale(source);\n\t}\n}\n",
    [
      "src/main/java/org/apache/commons/lang3/LocaleUtils.java@org.apache.commons.lang3.SyncAvoid.toLocale(String)",
      "src/main/java/org/apache/commons/lang3/LocaleUtils.java@org.apache.commons.lang3.LocaleUtils.toLocale(String)"
    ]
  ],
  "951": [
    "when one trys to get the fragments of a calendar object and uses the fragment year or month, the returned value is wrong by 1 day in the targeted timeunit. the bug resides in the class *dateutils* in function \n{code}\nprivate static long getfragment(calendar calendar, int fragment, int unit)\n{code}\n\nthere is an initial recalculation if the fragment is year or month. so if one would like to have the minutes for the fragment year for the date 2000-01-01 00:00:00 this would return 1440 which is actually wrong. the error can be found on lines 1635 - 1643.\n\nsuggested fix:\n{code}\n// fragments bigger than a day require a breakdown to days\n        switch (fragment) {\n            case calendar.year:\n                result += ((calendar.get(calendar.day_of_year)-1) * millis_per_day) / millisperunit;\n                break;\n            case calendar.month:\n                result += ((calendar.get(calendar.day_of_month)-1) * millis_per_day) / millisperunit;\n                break;\n        }\n{code}",
    [
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateIterator.getFragment(Calendar,int,int)",
      "src/main/java/org/apache/commons/lang3/time/DateUtils.java@org.apache.commons.lang3.time.DateUtils.getFragment(Calendar,int,int)"
    ]
  ],
  "1364": [
    "{quote}\r\ni have found the design of three root cause related methods inconsistent\r\nwhen the input throwable does not wrap up another throwable.\r\n\r\nthese three methods are\r\n\r\n   1. getrootcause(throwable t)\r\n   2. getrootcausemessage(throwable t)\r\n   3. getrootcausestacktrace(throwable t)\r\n\r\n\r\nwhen the input t has no lower level cause:\r\n\r\n   - the first method returns null;\r\n   - the second method returns the message of t, which means the input t is\r\n   considered as the root cause in this method;\r\n   - the third method returns the stack trace of t, which also means this\r\n   method considers t as the root cause.\r\n\r\ntherefore, i consider the design of the first method is not consistent with\r\nthe second and the third.\r\n\r\ni usually write a function myself to get the root cause of an exception;\r\nand it makes much better sense to me the root cause of a throwable is\r\nitself if no more lower level cause exists.\r\n\r\na request: change the first method to return t itself when there is no more\r\n'causes'.\r\n{quote}\r\n\r\nreported by zheng xie in https://mail-archives.apache.org/mod_mbox/commons-dev/201710.mbox/%3ccal-lhk7jvqgm9j1spxlb2qesxazwwq%2bykuv29xgwxeccchun0w%40mail.gmail.com%3e\r\n",
    [
      "src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java@org.apache.commons.lang3.exception.ExceptionUtils.getRootCause(Throwable)"
    ]
  ],
  "950": [
    "simpledateformat has a set2digityearstart(date startdate)  method to determine the start of the default century.  fastdateparser uses a static 80 years in the past as the default century start.\n\nthe application should be able to set the default century as part of the constructor.",
    [
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.FastDateFormat.FastDateFormat(String,TimeZone,Locale,Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.FastDateFormat.getDateInstance(int,TimeZone)",
      "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java@org.apache.commons.lang3.time.FastDateFormat.FastDateFormat(String,TimeZone,Locale)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.escapeRegex(StringBuilder,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.escapeRegex(StringBuilder,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.FastDateParser(String,TimeZone,Locale,Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.FastDateParser(String,TimeZone,Locale,Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.adjustYear(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.adjustYear(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.adjustYear(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.escapeRegex(StringBuilder,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.readObject(ObjectInputStream)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.FastDateParser(String,TimeZone,Locale,Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.readObject(ObjectInputStream)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TextStrategy.escapeRegex(StringBuilder,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.readObject(ObjectInputStream)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TextStrategy.readObject(ObjectInputStream)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.Strategy.FastDateParser(String,TimeZone,Locale,Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TextStrategy.FastDateParser(String,TimeZone,Locale,Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TextStrategy.adjustYear(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.readObject(ObjectInputStream)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.adjustYear(int)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.FastDateParser(String,TimeZone,Locale,Date)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.CopyQuotedStrategy.escapeRegex(StringBuilder,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.TimeZoneStrategy.readObject(ObjectInputStream)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.FastDateParser.escapeRegex(StringBuilder,String,boolean)",
      "src/main/java/org/apache/commons/lang3/time/FastDateParser.java@org.apache.commons.lang3.time.NumberStrategy.adjustYear(int)"
    ]
  ],
  "685": [
    "equalsbuilder synchronizes on hashcodebuilder.class for updates to its own threadlocal registry variable. while this should not lead to malfunction, it looks like a copy&paste oversight.",
    [
      "src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java@org.apache.commons.lang3.builder.EqualsBuilder.register(Object,Object)",
      "src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java@org.apache.commons.lang3.builder.EqualsBuilder.unregister(Object,Object)"
    ]
  ],
  "686": [
    "after executing line\n\nstringutils.replaceeachrepeatedly(\"aaa\", new string[]{\"aa\"}, new string[]{\"axa\"});\n\nexception is thrown:\n\nexception in thread \"main\" java.lang.illegalstateexception: timetolive of -1 is less than 0: axaxa\n\tat org.apache.commons.lang.stringutils.replaceeach(stringutils.java:3986)\n\tat org.apache.commons.lang.stringutils.replaceeach(stringutils.java:4099)\n\tat org.apache.commons.lang.stringutils.replaceeach(stringutils.java:4099)\n\tat org.apache.commons.lang.stringutils.replaceeachrepeatedly(stringutils.java:3920)\n\n",
    [
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.replaceEach(String,String,String,boolean,int)",
      "src/main/java/org/apache/commons/lang3/StringUtils.java@org.apache.commons.lang3.StringUtils.replaceEach(String,String,String,boolean,int)"
    ]
  ],
  "807": [
    "randomutils invokes random#nextint(n) where n = end - start.\n\nif end <= start, then random throws:\n\njava.lang.illegalargumentexception: n must be positive\n\nthis is confusing, and does not identify the source of the problem.",
    [
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.random(int,int,int,boolean,boolean,char,Random)"
    ]
  ],
  "44": [
    "according to the javadoc the various methods in the fraction class such as add()\nthrow an illegalargumentexception when null is passed to them. this is very\nunusual. they should throw a nullpointerexception instead.",
    [
      "src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java@org.apache.commons.lang3.builder.DiffBuilder.DiffBuilder(Object,Object,ToStringStyle,boolean)",
      "src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java@org.apache.commons.lang3.builder.DiffBuilder.DiffBuilder(Object,Object,ToStringStyle)"
    ]
  ],
  "805": [
    "in commons-lang 2.6 line 250 :\n{code}ch = chars[random.nextint(gap) + start];{code}\n-this line of code takes a random int to fetch a char in the _chars_ array regardless of its size.-\n-(besides _start_ is useless here)-\n\n-fixed version would be :-\n{code}//ch = chars[random.nextint(gap)%chars.length];{code}\n\nwhen user pass 0 as _end_ or when the array is not null but empty this line ends up with an exception",
    [
      "src/main/java/org/apache/commons/lang3/RandomStringUtils.java@org.apache.commons.lang3.RandomStringUtils.random(int,int,int,boolean,boolean,char,Random)"
    ]
  ]
}